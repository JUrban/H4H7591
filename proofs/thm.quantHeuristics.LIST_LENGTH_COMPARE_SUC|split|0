Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (72152)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 366
% Passive clauses: 6599
% Generated clauses: 32734
% Final active clauses: 240
% Final passive clauses: 5796
% Input formulas: 34
% Initial clauses: 76
% 
% Duplicate literals: 951
% Trivial inequalities: 645
% Fw subsumption resolutions: 1927
% Fw demodulations: 11649
% Bw demodulations: 115
% 
% Simple tautologies: 93
% Equational tautologies: 33
% Forward subsumptions: 7902
% 
% Binary resolution: 175
% Forward superposition: 6495
% Backward superposition: 8911
% Self superposition: 78
% Equality factoring: 62
% Equality resolution: 19
% 
% Split clauses: 2381
% Split components: 4762
% SAT solver clauses: 3201
% SAT solver unit clauses: 4
% SAT solver binary clauses: 67
% 
% Sat splits: 2381
% Sat splitting refutations: 12
% 
% TWLsolver clauses: 3201
% TWLsolver calls for satisfiability: 352
% 
% Memory used [KB]: 20212
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (72164)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 247
% Passive clauses: 2259
% Generated clauses: 24470
% Final active clauses: 175
% Final passive clauses: 1042
% Input formulas: 34
% Initial clauses: 76
% 
% Duplicate literals: 947
% Trivial inequalities: 319
% Fw subsumption resolutions: 1943
% Fw demodulations: 6769
% Bw demodulations: 1038
% Condensations: 688
% Global subsumptions: 4
% 
% Simple tautologies: 149
% Equational tautologies: 23
% Forward subsumptions: 8170
% 
% Binary resolution: 99
% Forward superposition: 5816
% Backward superposition: 4289
% Self superposition: 68
% Equality factoring: 42
% Equality resolution: 18
% 
% Split clauses: 843
% Split components: 1699
% SAT solver clauses: 3269
% SAT solver unit clauses: 76
% SAT solver binary clauses: 66
% SAT solver learnt clauses: 8
% 
% Sat splits: 843
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 3253
% TWLsolver calls for satisfiability: 573
% 
% Memory used [KB]: 17654
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f6328,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f159,f237,f236,f158,f239,f157,f241,f235,f257,f262,f260,f267,f271,f269,f503,f530,f528,f651,f684,f682,f857,f898,f896,f937,f948,f946,f1120,f1166,f1164,f1653,f1657,f1658,f1660,f1661,f1663,f1655,f2258,f2261,f2260,f3641,f3652,f3653,f3654,f3655,f3656,f3657,f3658,f3659,f3660,f3661,f3662,f3663,f3664,f3665,f3666,f3667,f3668,f3669,f3670,f3671,f3672,f3673,f3674,f3676,f3677,f3678,f3679,f3680,f3681,f3682,f3683,f3684,f3685,f3686,f3687,f3688,f3689,f3691,f3692,f3693,f3694,f3695,f3696,f3697,f3698,f3699,f3700,f3701,f3702,f3703,f3704,f3705,f3706,f3707,f3708,f3709,f3710,f3711,f3712,f3713,f3714,f3715,f3716,f3717,f3718,f3719,f3720,f3721,f3722,f3723,f3724,f3725,f3726,f3727,f3728,f3729,f3730,f3731,f3732,f3733,f3734,f3735,f3736,f3737,f3738,f3739,f3740,f3741,f3742,f3743,f3744,f3745,f3746,f3747,f3748,f3749,f3751,f3752,f3753,f3755,f3756,f3757,f3758,f3760,f3761,f3762,f3763,f3764,f3766,f3768,f3769,f3770,f3771,f3772,f3773,f3774,f3775,f3776,f3777,f3778,f3779,f3780,f3781,f3782,f3784,f3786,f3787,f3788,f3789,f3790,f3792,f3794,f3795,f3796,f3797,f3799,f3800,f3801,f3802,f3803,f3804,f3805,f3806,f3807,f3808,f3809,f3810,f3812,f3813,f3814,f3816,f3817,f3818,f3820,f3821,f3822,f3823,f3825,f3827,f3828,f3829,f3830,f3831,f3832,f3833,f3835,f3837,f3838,f3839,f3840,f3842,f3844,f3845,f3846,f3847,f3849,f3850,f3851,f3852,f3853,f3855,f3856,f3857,f3859,f3860,f3862,f3863,f3865,f3867,f3868,f3870,f3871,f3873,f3874,f3875,f3877,f3879,f3880,f3881,f3883,f3885,f3886,f3887,f3889,f3890,f3891,f4332,f4371,f4381,f4493,f4494,f4495,f4496,f4497,f4498,f4499,f4500,f4501,f4502,f4503,f4504,f4505,f4506,f4507,f4508,f4509,f4510,f4511,f4512,f4513,f4514,f4515,f4516,f4517,f4518,f4519,f4520,f4521,f4522,f4523,f4524,f4525,f4526,f4527,f4528,f4529,f4530,f4531,f4532,f4533,f4534,f4535,f4536,f4537,f4538,f4539,f4540,f4541,f4544,f4545,f4546,f4547,f4548,f4549,f4550,f4551,f4552,f4553,f4554,f4556,f4557,f4558,f4559,f4561,f4562,f4563,f4564,f4565,f4566,f4567,f4568,f4569,f4571,f4572,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4581,f4582,f4583,f4584,f4585,f4590,f4591,f4592,f4593,f4649,f4651,f4665,f4667,f4669,f4671,f4676,f4679,f4686,f4688,f4693,f4696,f4699,f4701,f4707,f4709,f4710,f4712,f4713,f4714,f4715,f4716,f4722,f4724,f4725,f4727,f4728,f4729,f4730,f4731,f4736,f4737,f4738,f4739,f4740,f4741,f4742,f4743,f4744,f4745,f4747,f4749,f4751,f4753,f4754,f4755,f4757,f4760,f4761,f4768,f4769,f4773,f4775,f4779,f4783,f4785,f4787,f4788,f4790,f4791,f4792,f4794,f4799,f4801,f4803,f4805,f4806,f4807,f4808,f4810,f4811,f4812,f4814,f4816,f4822,f4823,f4825,f4826,f4827,f4828,f4829,f4831,f4833,f4837,f4838,f4842,f4845,f4847,f4849,f4851,f4852,f4854,f4857,f4858,f4859,f4860,f4862,f4864,f4865,f4867,f4870,f4872,f4873,f4874,f4875,f4876,f4877,f4879,f4886,f4880,f4882,f4890,f4883,f4889,f4884,f4888,f4891,f4885,f4887,f4892,f4952,f5014,f4334,f4333,f5072,f5074,f5172,f5173,f5174,f5209,f5211,f6318,f6322])).
fof(f6322,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f6321,f6037])).
fof(f6037,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK25(sK2,sK1,sK0))))) ) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f6032,f237])).
fof(f6032,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25(sK2,sK1,sK0))))))) | $spl0),
  inference(subsumption_resolution,[],[f6019,f160])).
fof(f160,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0',aHL_TRUTH)).
fof(f6019,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25(sK2,sK1,sK0))))))) | $spl0),
  inference(superposition,[],[f249,f5229])).
fof(f5229,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl0),
  inference(unit_resulting_resolution,[],[f235,f252])).
fof(f252,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f162,f164])).
fof(f164,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0',aHL_BOOL_CASES)).
fof(f162,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0',aHL_FALSITY)).
fof(f249,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X2,X1,X0)))))))) )),
  inference(forward_demodulation,[],[f223,f163])).
fof(f163,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X11] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.arithmetic.ADD|49|')).
fof(f223,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X2,X1,X0)),s('type.list.list'(X0),sK25(X2,X1,X0)))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25,sK26])],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f147])).
fof(f147,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f83])).
fof(f83,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|8')).
fof(f6321,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26(sK2,sK1,sK0)),s('type.list.list'(sK0),sK25(sK2,sK1,sK0)))) | $spl0),
  inference(subsumption_resolution,[],[f6304,f160])).
fof(f6304,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26(sK2,sK1,sK0)),s('type.list.list'(sK0),sK25(sK2,sK1,sK0)))) | $spl0),
  inference(superposition,[],[f248,f5229])).
fof(f248,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X2,X1,X0)),s('type.list.list'(X0),sK25(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f224,f163])).
fof(f224,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X2,X1,X0)),s('type.list.list'(X0),sK25(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f6318,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f6317,f160])).
fof(f6317,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f6299,f5229])).
fof(f6299,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f6037,f248])).
fof(f5211,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f5210,f160])).
fof(f5210,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f5179,f258])).
fof(f258,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl6),
  inference(subsumption_resolution,[],[f254,f162])).
fof(f254,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl6),
  inference(superposition,[],[f241,f164])).
fof(f5179,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f239,f237])).
fof(f5209,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f5208,f160])).
fof(f5208,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f5188,f3161])).
fof(f3161,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f3101,f252])).
fof(f3101,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23(sK2,sK1,sK0))))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f3079,f246])).
fof(f246,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK23(X2,X1,X0)))))))) )),
  inference(forward_demodulation,[],[f220,f163])).
fof(f220,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK23(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK23(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X2,X1,X0)),s('type.list.list'(X0),sK23(X2,X1,X0)))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK23,sK24])],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(rectify,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(nnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f81])).
fof(f81,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|9')).
fof(f3079,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f239,f3072])).
fof(f3072,plain,(
  ( ! [X8,X7] : (s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK3))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f3049,f160])).
fof(f3049,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK3))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | $spl6),
  inference(superposition,[],[f244,f258])).
fof(f244,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(forward_demodulation,[],[f222,f163])).
fof(f222,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f5188,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23(sK2,sK1,sK0))))))) | ($spl2 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f3100,f237])).
fof(f3100,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f3079,f245])).
fof(f245,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X2,X1,X0)),s('type.list.list'(X0),sK23(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f221,f163])).
fof(f221,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X2,X1,X0)),s('type.list.list'(X0),sK23(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f5174,plain,(
  $false | ($spl12 | $spl28)),
  inference(subsumption_resolution,[],[f269,f946])).
fof(f5173,plain,(
  $false | ($spl4 | $spl6 | $spl12 | $spl16 | $spl28)),
  inference(subsumption_resolution,[],[f269,f4954])).
fof(f4954,plain,(
  ( ! [X8,X7] : (s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK3)))) ) | ($spl4 | $spl6 | $spl16 | $spl28)),
  inference(subsumption_resolution,[],[f4953,f3325])).
fof(f3325,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | ($spl4 | $spl6 | $spl28)),
  inference(subsumption_resolution,[],[f3279,f946])).
fof(f3279,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f186,f3100])).
fof(f186,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|3')).
fof(f4953,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK3)))) ) | ($spl6 | $spl16)),
  inference(forward_demodulation,[],[f3072,f528])).
fof(f5172,plain,(
  $false | ($spl4 | $spl6 | $spl14 | $spl28)),
  inference(subsumption_resolution,[],[f270,f4898])).
fof(f4898,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | ($spl4 | $spl6 | $spl28)),
  inference(subsumption_resolution,[],[f3277,f946])).
fof(f3277,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f182,f3100])).
fof(f182,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.list.LENGTH_NIL')).
fof(f270,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl14),
  inference(cnf_transformation,[],[f270_D])).
fof(f270_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f5074,plain,(
  $false | ($spl4 | $spl6 | $spl16 | $spl28)),
  inference(subsumption_resolution,[],[f5073,f3325])).
fof(f5073,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | ($spl6 | $spl16)),
  inference(forward_demodulation,[],[f3639,f528])).
fof(f3639,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))))))))) ) | $spl6),
  inference(equality_resolution,[],[f3154])).
fof(f3154,plain,(
  ( ! [X8,X7] : (s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK3))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f3131,f160])).
fof(f3131,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK3))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))))))) ) | $spl6),
  inference(superposition,[],[f247,f258])).
fof(f247,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(forward_demodulation,[],[f225,f163])).
fof(f225,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f5072,plain,(
  $false | ($spl4 | $spl6 | $spl16 | $spl28)),
  inference(subsumption_resolution,[],[f5071,f3325])).
fof(f5071,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | ($spl4 | $spl6 | $spl16)),
  inference(forward_demodulation,[],[f3627,f528])).
fof(f3627,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f239,f3154])).
fof(f4333,plain,(
  ( ! [X2,X0,X3] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl48),
  inference(cnf_transformation,[],[f4333_D])).
fof(f4333_D,plain,(
  ( ! [X2,X0,X3] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f4334,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))))) ) | $spl50),
  inference(cnf_transformation,[],[f4334_D])).
fof(f4334_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f5014,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) ) | ($spl4 | $spl6 | $spl16 | $spl28)),
  inference(subsumption_resolution,[],[f5013,f3325])).
fof(f5013,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl16),
  inference(forward_demodulation,[],[f3045,f528])).
fof(f3045,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(superposition,[],[f244,f276])).
fof(f276,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(equality_resolution,[],[f183])).
fof(f183,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f107])).
fof(f4952,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl16 | $spl28)),
  inference(subsumption_resolution,[],[f4951,f3325])).
fof(f4951,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f235,f528])).
fof(f4892,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl62),
  inference(cnf_transformation,[],[f4892_D])).
fof(f4892_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f4887,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | $spl54),
  inference(cnf_transformation,[],[f4887_D])).
fof(f4887_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f4885,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl16),
  inference(backward_demodulation,[],[f528,f189])).
fof(f189,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2')).
fof(f4891,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl60),
  inference(cnf_transformation,[],[f4891_D])).
fof(f4891_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f4888,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | $spl55),
  inference(cnf_transformation,[],[f4888_D])).
fof(f4888_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f4884,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl16),
  inference(backward_demodulation,[],[f528,f188])).
fof(f188,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f110])).
fof(f4889,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) ) | $spl56),
  inference(cnf_transformation,[],[f4889_D])).
fof(f4889_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f4883,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) ) | $spl16),
  inference(backward_demodulation,[],[f528,f193])).
fof(f193,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X1,X0)),s('type.list.list'(X0),sK7(X1,X0))))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8])],[f115])).
fof(f115,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X4)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(rectify,[],[f114])).
fof(f114,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.num.|48|_0')))) <=> ? [X9,X10] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|3')).
fof(f4890,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X1,X0)),s('type.list.list'(X0),sK7(X1,X0))))) ) | $spl58),
  inference(cnf_transformation,[],[f4890_D])).
fof(f4890_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X1,X0)),s('type.list.list'(X0),sK7(X1,X0))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f4882,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X1,X0)),s('type.list.list'(X0),sK7(X1,X0))))) ) | $spl16),
  inference(backward_demodulation,[],[f528,f192])).
fof(f192,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X1,X0)),s('type.list.list'(X0),sK7(X1,X0))))) )),
  inference(cnf_transformation,[],[f116])).
fof(f4880,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) ) | $spl16),
  inference(backward_demodulation,[],[f528,f191])).
fof(f191,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X1,X0)),s('type.list.list'(X0),sK5(X1,X0))))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f112])).
fof(f112,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X4)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f111])).
fof(f111,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|2')).
fof(f4886,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X1,X0)),s('type.list.list'(X0),sK5(X1,X0))))) ) | $spl52),
  inference(cnf_transformation,[],[f4886_D])).
fof(f4886_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X1,X0)),s('type.list.list'(X0),sK5(X1,X0))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f4879,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X1,X0)),s('type.list.list'(X0),sK5(X1,X0))))) ) | $spl16),
  inference(backward_demodulation,[],[f528,f190])).
fof(f190,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X1,X0)),s('type.list.list'(X0),sK5(X1,X0))))) )),
  inference(cnf_transformation,[],[f113])).
fof(f4877,plain,(
  $false | ($spl15 | $spl16 | $spl18 | $spl35)),
  inference(global_subsumption,[],[f528,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1533,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f3750,f1592,f1599,f1602,f1606,f1577,f1576,f1472,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1505,f1424,f1413,f1356,f1289,f1215,f1107,f1106,f1103,f1101,f1100,f1129,f685,f3811,f772,f2025,f2029,f1587,f1471,f1500,f1513,f1202,f1108,f1134,f1146,f4853,f1354,f1287,f4861,f1037,f4866,f4869,f640,f639,f658,f570,f529])).
fof(f529,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | $spl18),
  inference(cnf_transformation,[],[f529_D])).
fof(f529_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f570,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl15),
  inference(unit_resulting_resolution,[],[f274,f188])).
fof(f658,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f636])).
fof(f636,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl15),
  inference(superposition,[],[f252,f588])).
fof(f639,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X11),'const.list.NIL_0') = s('type.list.list'(X11),X12) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X12))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(superposition,[],[f186,f588])).
fof(f640,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X13),'const.list.NIL_0') = s('type.list.list'(X13),X14) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),X14)))))) ) | $spl15),
  inference(superposition,[],[f188,f588])).
fof(f4869,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl15 | $spl35)),
  inference(subsumption_resolution,[],[f753,f1166])).
fof(f753,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl15),
  inference(superposition,[],[f685,f588])).
fof(f4866,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl15 | $spl35)),
  inference(subsumption_resolution,[],[f791,f1533])).
fof(f791,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl15),
  inference(superposition,[],[f772,f588])).
fof(f1037,plain,(
  ( ! [X26,X27,X25] : (s(X27,f(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) != s(X27,g(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s(fun(bool,X27),X25) = s(fun(bool,X27),X26) | s(bool,'T_0') = s(bool,sK31(X25,X26,X27,bool))) ) | $spl15),
  inference(superposition,[],[f232,f588])).
fof(f4861,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | ($spl15 | $spl35)),
  inference(subsumption_resolution,[],[f1229,f1166])).
fof(f1229,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(superposition,[],[f1166,f472])).
fof(f1287,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19)))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1275,f949])).
fof(f1275,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X18),X19) = s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK6(X19,X18)),s('type.list.list'(X18),sK5(X19,X18)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19)))))) ) | $spl15),
  inference(superposition,[],[f190,f588])).
fof(f1354,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(subsumption_resolution,[],[f1339,f995])).
fof(f1339,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X18),X19) = s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK8(X19,X18)),s('type.list.list'(X18),sK7(X19,X18)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(superposition,[],[f192,f588])).
fof(f4853,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | ($spl15 | $spl35)),
  inference(subsumption_resolution,[],[f1618,f1533])).
fof(f1618,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl35)),
  inference(superposition,[],[f1533,f472])).
fof(f1146,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1073])).
fof(f1073,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f754,f164])).
fof(f1134,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1091])).
fof(f1091,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f164,f754])).
fof(f1108,plain,(
  ( ! [X37,X35,X36] : (s(bool,f(s(X35,sK31(X36,X37,bool,X35)))) != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(fun(X35,bool),X36) = s(fun(X35,bool),X37) | s(bool,'T_0') = s(bool,g(s(X35,sK31(X36,X37,bool,X35))))) ) | $spl15),
  inference(superposition,[],[f232,f754])).
fof(f1202,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl35),
  inference(unit_resulting_resolution,[],[f1166,f164])).
fof(f1513,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1426])).
fof(f1426,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f792,f164])).
fof(f1500,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1447])).
fof(f1447,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f164,f792])).
fof(f1471,plain,(
  ( ! [X45,X43,X44] : (s(bool,f(s(X43,sK31(X44,X45,bool,X43)))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(fun(X43,bool),X44) = s(fun(X43,bool),X45) | s(bool,'T_0') = s(bool,g(s(X43,sK31(X44,X45,bool,X43))))) ) | $spl15),
  inference(superposition,[],[f232,f792])).
fof(f1587,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f164])).
fof(f2029,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl35),
  inference(unit_resulting_resolution,[],[f162,f1166,f345])).
fof(f2025,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f162,f1533,f345])).
fof(f772,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl15),
  inference(unit_resulting_resolution,[],[f274,f200])).
fof(f3811,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(subsumption_resolution,[],[f1230,f1166])).
fof(f1230,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(superposition,[],[f1166,f588])).
fof(f685,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl15),
  inference(unit_resulting_resolution,[],[f274,f198])).
fof(f1129,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1096])).
fof(f1096,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl15),
  inference(superposition,[],[f252,f754])).
fof(f1100,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X13),'const.list.NIL_0') = s('type.list.list'(X13),X14) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),X14))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(superposition,[],[f186,f754])).
fof(f1101,plain,(
  ( ! [X15,X16] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X15),'const.list.NIL_0') = s('type.list.list'(X15),X16) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl15),
  inference(superposition,[],[f200,f754])).
fof(f1103,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X21),'const.list.NIL_0') = s('type.list.list'(X21),X22) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X21),X22)))))) ) | $spl15),
  inference(superposition,[],[f198,f754])).
fof(f1106,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X27),'const.list.NIL_0') = s('type.list.list'(X27),X28) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28)))))) ) | $spl15),
  inference(superposition,[],[f188,f754])).
fof(f1107,plain,(
  ( ! [X33,X34,X32] : (s(X34,f(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) != s(X34,g(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s(fun(bool,X34),X32) = s(fun(bool,X34),X33) | s(bool,'T_0') = s(bool,sK31(X32,X33,X34,bool))) ) | $spl15),
  inference(superposition,[],[f232,f754])).
fof(f1215,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl35),
  inference(unit_resulting_resolution,[],[f1166,f252])).
fof(f1289,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21)))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1276,f949])).
fof(f1276,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X20),X21) = s('type.list.list'(X20),'const.list.CONS_2'(s(X20,sK6(X21,X20)),s('type.list.list'(X20),sK5(X21,X20)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21)))))) ) | $spl15),
  inference(superposition,[],[f190,f754])).
fof(f1356,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(subsumption_resolution,[],[f1340,f995])).
fof(f1340,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X20),X21) = s('type.list.list'(X20),'const.list.CONS_2'(s(X20,sK8(X21,X20)),s('type.list.list'(X20),sK7(X21,X20)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(superposition,[],[f192,f754])).
fof(f1413,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK23(X29,X30,X28))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30)))))) ) | $spl15),
  inference(superposition,[],[f246,f754])).
fof(f1424,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f792])).
fof(f1505,plain,(
  ( ! [X12] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X12)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1434])).
fof(f1434,plain,(
  ( ! [X12] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl15),
  inference(superposition,[],[f792,f754])).
fof(f1495,plain,(
  ( ! [X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1452])).
fof(f1452,plain,(
  ( ! [X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl15),
  inference(superposition,[],[f252,f792])).
fof(f1491,plain,(
  ( ! [X13] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X13)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1456])).
fof(f1456,plain,(
  ( ! [X13] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl15),
  inference(superposition,[],[f754,f792])).
fof(f1457,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X14),'const.list.NIL_0') = s('type.list.list'(X14),X15) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(superposition,[],[f186,f792])).
fof(f1458,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X16),'const.list.NIL_0') = s('type.list.list'(X16),X17) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl15),
  inference(superposition,[],[f200,f792])).
fof(f1530,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19)))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1460,f949])).
fof(f1460,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X18),X19) = s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK6(X19,X18)),s('type.list.list'(X18),sK5(X19,X18)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19)))))) ) | $spl15),
  inference(superposition,[],[f190,f792])).
fof(f1462,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X24),'const.list.NIL_0') = s('type.list.list'(X24),X25) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25)))))) ) | $spl15),
  inference(superposition,[],[f198,f792])).
fof(f1534,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(subsumption_resolution,[],[f1466,f995])).
fof(f1466,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X27),X28) = s('type.list.list'(X27),'const.list.CONS_2'(s(X27,sK8(X28,X27)),s('type.list.list'(X27),sK7(X28,X27)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(superposition,[],[f192,f792])).
fof(f1468,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X33),'const.list.NIL_0') = s('type.list.list'(X33),X34) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34)))))) ) | $spl15),
  inference(superposition,[],[f188,f792])).
fof(f1469,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X35),sK23(X36,X37,X35))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X35),X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37)))))) ) | $spl15),
  inference(superposition,[],[f246,f792])).
fof(f1472,plain,(
  ( ! [X47,X48,X46] : (s(X48,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s(X48,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(fun(bool,X48),X46) = s(fun(bool,X48),X47) | s(bool,'T_0') = s(bool,sK31(X46,X47,X48,bool))) ) | $spl15),
  inference(superposition,[],[f232,f792])).
fof(f1576,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),sK25(X31,X29,X30))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl15),
  inference(superposition,[],[f249,f754])).
fof(f1577,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X32),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),sK25(X34,X32,X33))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34)))))) ) | $spl15),
  inference(superposition,[],[f249,f792])).
fof(f1606,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f754])).
fof(f1602,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f252])).
fof(f1599,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f1533,f250])).
fof(f1592,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f1533,f250])).
fof(f3750,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(subsumption_resolution,[],[f1619,f1533])).
fof(f1619,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl35)),
  inference(superposition,[],[f1533,f588])).
fof(f2279,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X28),X29) = s('type.list.list'(X28),'const.list.CONS_2'(s(X28,sK24(X29,X30,X28)),s('type.list.list'(X28),sK23(X29,X30,X28)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30)))))) ) | $spl15),
  inference(superposition,[],[f245,f754])).
fof(f2280,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X31),X32) = s('type.list.list'(X31),'const.list.CONS_2'(s(X31,sK24(X32,X33,X31)),s('type.list.list'(X31),sK23(X32,X33,X31)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),X32))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))) ) | $spl15),
  inference(superposition,[],[f245,f792])).
fof(f1402,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK23('const.list.NIL_0',X1,X0)))))))) )),
  inference(superposition,[],[f246,f276])).
fof(f2370,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X30),X31) = s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK26(X31,X29,X30)),s('type.list.list'(X30),sK25(X31,X29,X30)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl15),
  inference(superposition,[],[f248,f754])).
fof(f2371,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X33),X34) = s('type.list.list'(X33),'const.list.CONS_2'(s(X33,sK26(X34,X32,X33)),s('type.list.list'(X33),sK25(X34,X32,X33)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34)))))) ) | $spl15),
  inference(superposition,[],[f248,f792])).
fof(f1565,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25('const.list.NIL_0',X1,X0)))))))) )),
  inference(superposition,[],[f249,f276])).
fof(f2484,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21)))))) ) | $spl15),
  inference(subsumption_resolution,[],[f2458,f1702])).
fof(f2458,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X20),X21) = s('type.list.list'(X20),'const.list.CONS_2'(s(X20,sK12(X21,X20)),s('type.list.list'(X20),sK11(X21,X20)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21)))))) ) | $spl15),
  inference(superposition,[],[f202,f754])).
fof(f2486,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23)))))) ) | $spl15),
  inference(subsumption_resolution,[],[f2459,f1702])).
fof(f2459,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X22),X23) = s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK12(X23,X22)),s('type.list.list'(X22),sK11(X23,X22)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23)))))) ) | $spl15),
  inference(superposition,[],[f202,f792])).
fof(f2628,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f2599,f1761])).
fof(f2599,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X20),X21) = s('type.list.list'(X20),'const.list.CONS_2'(s(X20,sK14(X21,X20)),s('type.list.list'(X20),sK13(X21,X20)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl15),
  inference(superposition,[],[f204,f754])).
fof(f2630,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f2600,f1761])).
fof(f2600,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X22),X23) = s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK14(X23,X22)),s('type.list.list'(X22),sK13(X23,X22)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl15),
  inference(superposition,[],[f204,f792])).
fof(f2744,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK27(X29,X30,X28))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X30)))))) ) | $spl15),
  inference(superposition,[],[f226,f754])).
fof(f2745,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),sK27(X32,X33,X31))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),X32))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X33)))))) ) | $spl15),
  inference(superposition,[],[f226,f792])).
fof(f2812,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),sK29(X30,X28,X29))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X28))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30)))))) ) | $spl15),
  inference(superposition,[],[f229,f754])).
fof(f2813,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),sK29(X33,X31,X32))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),X33)))))) ) | $spl15),
  inference(superposition,[],[f229,f792])).
fof(f3058,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X54),X56) != s('type.list.list'(X54),'const.list.CONS_2'(s(X54,X57),s('type.list.list'(X54),X55))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),X56))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X53)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),X55)))))) ) | $spl15),
  inference(superposition,[],[f244,f754])).
fof(f3059,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X59),X61) != s('type.list.list'(X59),'const.list.CONS_2'(s(X59,X62),s('type.list.list'(X59),X60))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),X61))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),X60)))))) ) | $spl15),
  inference(superposition,[],[f244,f792])).
fof(f3140,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X54),X56) != s('type.list.list'(X54),'const.list.CONS_2'(s(X54,X57),s('type.list.list'(X54),X55))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),X56)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),X55)))))) ) | $spl15),
  inference(superposition,[],[f247,f754])).
fof(f3141,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X59),X61) != s('type.list.list'(X59),'const.list.CONS_2'(s(X59,X62),s('type.list.list'(X59),X60))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),X61)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),X60)))))) ) | $spl15),
  inference(superposition,[],[f247,f792])).
fof(f3225,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X28),X29) = s('type.list.list'(X28),'const.list.CONS_2'(s(X28,sK28(X29,X30,X28)),s('type.list.list'(X28),sK27(X29,X30,X28)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X30)))))) ) | $spl15),
  inference(superposition,[],[f227,f754])).
fof(f3226,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X31),X32) = s('type.list.list'(X31),'const.list.CONS_2'(s(X31,sK28(X32,X33,X31)),s('type.list.list'(X31),sK27(X32,X33,X31)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),X32))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X33)))))) ) | $spl15),
  inference(superposition,[],[f227,f792])).
fof(f3383,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X29),X30) = s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK30(X30,X28,X29)),s('type.list.list'(X29),sK29(X30,X28,X29)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X28))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30)))))) ) | $spl15),
  inference(superposition,[],[f230,f754])).
fof(f3384,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X32),X33) = s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK30(X33,X31,X32)),s('type.list.list'(X32),sK29(X33,X31,X32)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),X33)))))) ) | $spl15),
  inference(superposition,[],[f230,f792])).
fof(f3581,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(equality_resolution,[],[f216])).
fof(f3580,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(superposition,[],[f216,f276])).
fof(f3451,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) )),
  inference(equality_resolution,[],[f210])).
fof(f3450,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f210,f276])).
fof(f3396,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK30(X5,X3,X4)),s('type.list.list'(X4),sK29(X5,X3,X4)))) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f3376,f160])).
fof(f3376,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK30(X5,X3,X4)),s('type.list.list'(X4),sK29(X5,X3,X4)))) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f230,f250])).
fof(f3363,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK30(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.list.list'(X0),sK29(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0))))) )),
  inference(superposition,[],[f230,f163])).
fof(f3362,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK30(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK29(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f230,f276])).
fof(f3361,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK30(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK29(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f230,f163])).
fof(f3237,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK28(X4,X5,X3)),s('type.list.list'(X3),sK27(X4,X5,X3)))) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f3218,f160])).
fof(f3218,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK28(X4,X5,X3)),s('type.list.list'(X3),sK27(X4,X5,X3)))) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f227,f250])).
fof(f3216,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.list.list'(X0),sK27(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0))))) )),
  inference(superposition,[],[f227,f163])).
fof(f3215,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK28(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK27(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f227,f276])).
fof(f3214,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK28(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK27(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f227,f163])).
fof(f3155,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.list.list'(X15),X17) != s('type.list.list'(X15),'const.list.CONS_2'(s(X15,X18),s('type.list.list'(X15),X16))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X17)))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X16))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f3133,f160])).
fof(f3133,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.list.list'(X15),X17) != s('type.list.list'(X15),'const.list.CONS_2'(s(X15,X18),s('type.list.list'(X15),X16))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X17)))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X16))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f247,f250])).
fof(f3127,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(superposition,[],[f247,f276])).
fof(f3073,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.list.list'(X15),X17) != s('type.list.list'(X15),'const.list.CONS_2'(s(X15,X18),s('type.list.list'(X15),X16))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X16))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f3051,f160])).
fof(f3051,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.list.list'(X15),X17) != s('type.list.list'(X15),'const.list.CONS_2'(s(X15,X18),s('type.list.list'(X15),X16))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X16))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f244,f250])).
fof(f3018,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.list.list'(X0),sK17(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0))))) )),
  inference(superposition,[],[f212,f163])).
fof(f3017,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK18(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK17(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f212,f276])).
fof(f3016,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK18(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK17(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f212,f163])).
fof(f2990,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.list.list'(X0),sK15(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0))))) )),
  inference(superposition,[],[f209,f163])).
fof(f2989,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK16(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK15(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f209,f276])).
fof(f2988,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK16(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK15(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f209,f163])).
fof(f2816,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK29(X5,X3,X4))))))) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f2805,f160])).
fof(f2805,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK29(X5,X3,X4))))))) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f229,f250])).
fof(f2803,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK29('const.list.NIL_0',X1,X0)))))))) )),
  inference(superposition,[],[f229,f276])).
fof(f2795,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK29(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)))))))) )),
  inference(superposition,[],[f229,f163])).
fof(f2815,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK29(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))))))) )),
  inference(forward_demodulation,[],[f2794,f276])).
fof(f2794,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK29(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)))))))) )),
  inference(superposition,[],[f229,f276])).
fof(f2814,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK29(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))))))) )),
  inference(forward_demodulation,[],[f2793,f163])).
fof(f2793,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK29(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)))))))) )),
  inference(superposition,[],[f229,f163])).
fof(f2748,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK27(X4,X5,X3))))))) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f2737,f160])).
fof(f2737,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK27(X4,X5,X3))))))) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f226,f250])).
fof(f2735,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK27(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)))))))) )),
  inference(superposition,[],[f226,f163])).
fof(f2747,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK27(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f2734,f276])).
fof(f2734,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK27(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)))))))) )),
  inference(superposition,[],[f226,f276])).
fof(f2746,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK27(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) )),
  inference(forward_demodulation,[],[f2733,f163])).
fof(f2733,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK27(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)))))))) )),
  inference(superposition,[],[f226,f163])).
fof(f2732,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK27('const.list.NIL_0',X1,X0)))))))) )),
  inference(superposition,[],[f226,f276])).
fof(f2621,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),X3) = s('type.list.list'(X2),'const.list.CONS_2'(s(X2,sK14(X3,X2)),s('type.list.list'(X2),sK13(X3,X2)))) | s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2592,f160])).
fof(f2592,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X2),X3) = s('type.list.list'(X2),'const.list.CONS_2'(s(X2,sK14(X3,X2)),s('type.list.list'(X2),sK13(X3,X2)))) | s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f204,f250])).
fof(f2477,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),X3) = s('type.list.list'(X2),'const.list.CONS_2'(s(X2,sK12(X3,X2)),s('type.list.list'(X2),sK11(X3,X2)))) | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2451,f160])).
fof(f2451,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X2),X3) = s('type.list.list'(X2),'const.list.CONS_2'(s(X2,sK12(X3,X2)),s('type.list.list'(X2),sK11(X3,X2)))) | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f202,f250])).
fof(f2378,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X5),X6) = s('type.list.list'(X5),'const.list.CONS_2'(s(X5,sK26(X6,X4,X5)),s('type.list.list'(X5),sK25(X6,X4,X5)))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f2363,f160])).
fof(f2363,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | s('type.list.list'(X5),X6) = s('type.list.list'(X5),'const.list.CONS_2'(s(X5,sK26(X6,X4,X5)),s('type.list.list'(X5),sK25(X6,X4,X5)))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f248,f250])).
fof(f2353,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK26(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK25(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f248,f276])).
fof(f2352,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK26(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK25(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f248,f163])).
fof(f2287,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK24(X4,X5,X3)),s('type.list.list'(X3),sK23(X4,X5,X3)))) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f2272,f160])).
fof(f2272,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK24(X4,X5,X3)),s('type.list.list'(X3),sK23(X4,X5,X3)))) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f245,f250])).
fof(f2270,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK24(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK23(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f245,f276])).
fof(f2269,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK24(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK23(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f245,f163])).
fof(f2246,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK21(X2,X0,X1))))) )),
  inference(superposition,[],[f217,f163])).
fof(f2254,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK21(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))) )),
  inference(forward_demodulation,[],[f2253,f276])).
fof(f2253,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK21(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(forward_demodulation,[],[f2245,f163])).
fof(f2245,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK21(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f217,f276])).
fof(f2252,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK21(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f2251,f163])).
fof(f2251,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK21(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(forward_demodulation,[],[f2244,f163])).
fof(f2244,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK21(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f217,f163])).
fof(f2243,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21('const.list.NIL_0',X1,X0))))) )),
  inference(superposition,[],[f217,f276])).
fof(f2184,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK19(X2,X0,X1))))) )),
  inference(superposition,[],[f214,f163])).
fof(f2192,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK19(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))) )),
  inference(forward_demodulation,[],[f2191,f276])).
fof(f2191,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK19(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(forward_demodulation,[],[f2183,f163])).
fof(f2183,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK19(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f214,f276])).
fof(f2190,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK19(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f2189,f163])).
fof(f2189,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK19(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(forward_demodulation,[],[f2182,f163])).
fof(f2182,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK19(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f214,f163])).
fof(f2181,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19('const.list.NIL_0',X1,X0))))) )),
  inference(superposition,[],[f214,f276])).
fof(f2108,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0))))) )),
  inference(superposition,[],[f211,f163])).
fof(f2110,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK17(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f2107,f276])).
fof(f2107,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK17(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f211,f276])).
fof(f2109,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK17(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f2106,f163])).
fof(f2106,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK17(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f211,f163])).
fof(f2105,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17('const.list.NIL_0',X1,X0))))) )),
  inference(superposition,[],[f211,f276])).
fof(f2009,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0))))) )),
  inference(superposition,[],[f208,f163])).
fof(f2011,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK15(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f2008,f276])).
fof(f2008,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK15(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f208,f276])).
fof(f2010,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK15(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f2007,f163])).
fof(f2007,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK15(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f208,f163])).
fof(f2006,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15('const.list.NIL_0',X1,X0))))) )),
  inference(superposition,[],[f208,f276])).
fof(f1883,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK22(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK21(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f243,f276])).
fof(f1882,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK22(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK21(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f243,f163])).
fof(f1810,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK19(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) )),
  inference(superposition,[],[f242,f276])).
fof(f1809,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK20(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK19(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) )),
  inference(superposition,[],[f242,f163])).
fof(f1761,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(subsumption_resolution,[],[f1751,f162])).
fof(f1751,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(superposition,[],[f205,f164])).
fof(f1702,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) )),
  inference(subsumption_resolution,[],[f1692,f162])).
fof(f1692,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) )),
  inference(superposition,[],[f203,f164])).
fof(f1672,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(unit_resulting_resolution,[],[f813,f252])).
fof(f1636,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f745,f252])).
fof(f1580,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),sK25(X6,X4,X5))))))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1569,f160])).
fof(f1569,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),sK25(X6,X4,X5))))))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f249,f250])).
fof(f1579,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK25(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))))))) )),
  inference(forward_demodulation,[],[f1561,f276])).
fof(f1561,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK25(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)))))))) )),
  inference(superposition,[],[f249,f276])).
fof(f1578,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK25(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))))))) )),
  inference(forward_demodulation,[],[f1560,f163])).
fof(f1560,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK25(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)))))))) )),
  inference(superposition,[],[f249,f163])).
fof(f1533,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl35)),
  inference(subsumption_resolution,[],[f1464,f1166])).
fof(f1464,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(superposition,[],[f1166,f792])).
fof(f1416,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK23(X4,X5,X3))))))) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f1406,f160])).
fof(f1406,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK23(X4,X5,X3))))))) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f246,f250])).
fof(f1415,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK23(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1404,f276])).
fof(f1404,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK23(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)))))))) )),
  inference(superposition,[],[f246,f276])).
fof(f1414,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK23(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) )),
  inference(forward_demodulation,[],[f1403,f163])).
fof(f1403,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK23(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)))))))) )),
  inference(superposition,[],[f246,f163])).
fof(f1349,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),X3) = s('type.list.list'(X2),'const.list.CONS_2'(s(X2,sK8(X3,X2)),s('type.list.list'(X2),sK7(X3,X2)))) | s(bool,X4) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f1333,f160])).
fof(f1333,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X2),X3) = s('type.list.list'(X2),'const.list.CONS_2'(s(X2,sK8(X3,X2)),s('type.list.list'(X2),sK7(X3,X2)))) | s(bool,X4) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f192,f250])).
fof(f1282,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),X3) = s('type.list.list'(X2),'const.list.CONS_2'(s(X2,sK6(X3,X2)),s('type.list.list'(X2),sK5(X3,X2)))) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f1269,f160])).
fof(f1269,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X2),X3) = s('type.list.list'(X2),'const.list.CONS_2'(s(X2,sK6(X3,X2)),s('type.list.list'(X2),sK5(X3,X2)))) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f190,f250])).
fof(f1195,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(equality_resolution,[],[f195])).
fof(f1040,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK31(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK31(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f232,f250])).
fof(f1039,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK31(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK31(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f232,f250])).
fof(f1038,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK31(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK31(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f232,f164])).
fof(f1032,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK31(X7,X8,X9,bool))) )),
  inference(superposition,[],[f232,f250])).
fof(f1031,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK31(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f232,f250])).
fof(f1030,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK31(X0,X1,X2,bool))) )),
  inference(superposition,[],[f232,f164])).
fof(f995,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f987,f162])).
fof(f987,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f193,f164])).
fof(f949,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) )),
  inference(subsumption_resolution,[],[f938,f162])).
fof(f938,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) )),
  inference(superposition,[],[f191,f164])).
fof(f813,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(forward_demodulation,[],[f812,f276])).
fof(f812,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(equality_resolution,[],[f201])).
fof(f792,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(subsumption_resolution,[],[f786,f160])).
fof(f786,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f772,f250])).
fof(f782,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),X3) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f776,f160])).
fof(f776,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),X3) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f200,f250])).
fof(f754,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(subsumption_resolution,[],[f748,f160])).
fof(f748,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f685,f250])).
fof(f745,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))))),
  inference(forward_demodulation,[],[f744,f276])).
fof(f744,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) )),
  inference(equality_resolution,[],[f199])).
fof(f695,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),X3) | s(bool,X4) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f689,f160])).
fof(f689,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),X3) | s(bool,X4) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f198,f250])).
fof(f604,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f603,f252])).
fof(f603,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))),
  inference(forward_demodulation,[],[f602,f276])).
fof(f602,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) )),
  inference(equality_resolution,[],[f189])).
fof(f589,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f533,f252])).
fof(f588,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(subsumption_resolution,[],[f582,f160])).
fof(f582,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f570,f250])).
fof(f580,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),X3) | s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f574,f160])).
fof(f574,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),X3) | s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f188,f250])).
fof(f533,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))),
  inference(forward_demodulation,[],[f532,f276])).
fof(f532,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(equality_resolution,[],[f187])).
fof(f472,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(subsumption_resolution,[],[f467,f160])).
fof(f467,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f458,f250])).
fof(f466,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s(bool,X2) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f461,f160])).
fof(f461,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s(bool,X2) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f186,f250])).
fof(f458,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | $spl15),
  inference(unit_resulting_resolution,[],[f274,f186])).
fof(f345,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f160,f250])).
fof(f309,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f250,f250])).
fof(f274,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) | $spl15),
  inference(unit_resulting_resolution,[],[f271,f183])).
fof(f250,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f164,f164])).
fof(f232,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK31(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK31(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK31(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK31(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK31])],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0',aHL_EXT)).
fof(f229,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK29(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK29(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK30(X2,X1,X0)),s('type.list.list'(X0),sK29(X2,X1,X0)))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK29,sK30])],[f154])).
fof(f154,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|6')).
fof(f230,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK30(X2,X1,X0)),s('type.list.list'(X0),sK29(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f155])).
fof(f231,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f155])).
fof(f226,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK27(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK27(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X2,X1,X0)),s('type.list.list'(X0),sK27(X2,X1,X0)))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK27,sK28])],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | ? [X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(rectify,[],[f150])).
fof(f150,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|7')).
fof(f227,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X2,X1,X0)),s('type.list.list'(X0),sK27(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f152])).
fof(f228,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f152])).
fof(f217,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK22(X2,X1,X0)),s('type.list.list'(X0),sK21(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK21,sK22])],[f142])).
fof(f142,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(nnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|12')).
fof(f243,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK22(X2,X1,X0)),s('type.list.list'(X0),sK21(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f218,f163])).
fof(f218,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK22(X2,X1,X0)),s('type.list.list'(X0),sK21(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f214,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK20(X2,X1,X0)),s('type.list.list'(X0),sK19(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20])],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|13')).
fof(f242,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK20(X2,X1,X0)),s('type.list.list'(X0),sK19(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f215,f163])).
fof(f215,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK20(X2,X1,X0)),s('type.list.list'(X0),sK19(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f140])).
fof(f216,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f140])).
fof(f211,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),sK17(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17,sK18])],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|11')).
fof(f212,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),sK17(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f137])).
fof(f208,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK15(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15,sK16])],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|10')).
fof(f209,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK15(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f210,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f134])).
fof(f204,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,X0)),s('type.list.list'(X0),sK13(X1,X0))))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,X0)),s('type.list.list'(X0),sK13(X1,X0))))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14])],[f129])).
fof(f129,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X4)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(rectify,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ? [X9,X10] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|5')).
fof(f205,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f130])).
fof(f202,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,X0)),s('type.list.list'(X0),sK11(X1,X0))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,X0)),s('type.list.list'(X0),sK11(X1,X0))))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12])],[f126])).
fof(f126,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X4)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f125])).
fof(f125,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|4')).
fof(f203,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f127])).
fof(f200,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|0')).
fof(f201,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f198,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|1')).
fof(f199,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f196,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK10(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK10(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10])],[f121])).
fof(f121,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f120])).
fof(f120,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X10] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.NIL_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|0')).
fof(f194,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9])],[f118])).
fof(f118,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f117])).
fof(f117,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(nnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X10] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.NIL_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|1')).
fof(f195,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f119])).
fof(f187,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f4876,plain,(
  $false | ($spl15 | $spl18 | $spl35)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1533,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f3750,f1592,f1599,f1602,f1606,f1577,f1576,f1472,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1505,f1424,f1413,f1356,f1289,f1215,f1107,f1106,f1103,f1101,f1100,f1129,f685,f3811,f772,f2025,f2029,f1587,f1471,f1500,f1513,f1202,f1108,f1134,f1146,f4853,f1354,f1287,f4861,f1037,f4866,f4869,f640,f639,f658,f570,f529])).
fof(f4875,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f570,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4809,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl35)),
  inference(forward_demodulation,[],[f1215,f682])).
fof(f4036,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f247])).
fof(f4037,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X2,X1,X0)),s('type.list.list'(X0),sK25(X2,X1,X0))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f248])).
fof(f4039,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3127])).
fof(f4040,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X15),X17) != s('type.list.list'(X15),'const.list.CONS_2'(s(X15,X18),s('type.list.list'(X15),X16))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X16))))) | s(bool,'T_0') = s(bool,X19)) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3155])).
fof(f4055,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK26(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK25(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f2352])).
fof(f4056,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK30(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.list.list'(X0),sK29(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3363])).
fof(f4059,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK26(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK25(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f2353])).
fof(f4061,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3639])).
fof(f4063,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK1,sK0))))) ) | ($spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3625])).
fof(f4065,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK3)))) ) | ($spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3154])).
fof(f4068,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,X0)),s('type.list.list'(X0),sK11(X1,X0))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f202])).
fof(f4069,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f203])).
fof(f4071,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK30(X2,X1,X0)),s('type.list.list'(X0),sK29(X2,X1,X0))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f230])).
fof(f4072,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f231])).
fof(f4073,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK30(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK29(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3361])).
fof(f4074,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK30(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK29(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3362])).
fof(f4089,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl20),
  inference(backward_demodulation,[],[f682,f200])).
fof(f4090,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl20),
  inference(backward_demodulation,[],[f682,f201])).
fof(f4092,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl20),
  inference(backward_demodulation,[],[f682,f198])).
fof(f4093,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl20),
  inference(backward_demodulation,[],[f682,f199])).
fof(f4097,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,X0)),s('type.list.list'(X0),sK13(X1,X0))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f204])).
fof(f4098,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f205])).
fof(f4099,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f244])).
fof(f4100,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X2,X1,X0)),s('type.list.list'(X0),sK23(X2,X1,X0))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f245])).
fof(f4102,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3045])).
fof(f4103,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X15),X17) != s('type.list.list'(X15),'const.list.CONS_2'(s(X15,X18),s('type.list.list'(X15),X16))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X16))))) | s(bool,'T_0') = s(bool,X19)) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3073])).
fof(f4104,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK24(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK23(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f2269])).
fof(f4105,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.list.list'(X0),sK27(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3216])).
fof(f4106,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK24(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK23(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f2270])).
fof(f4107,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X2,X1,X0)),s('type.list.list'(X0),sK27(X2,X1,X0))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f227])).
fof(f4108,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f228])).
fof(f4109,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK28(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1)),s('type.list.list'(X1),sK27(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X1))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3214])).
fof(f4110,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK28(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4)),s('type.list.list'(X4),sK27(X5,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X4))))) ) | $spl20),
  inference(backward_demodulation,[],[f682,f3215])).
fof(f4132,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK1,sK0))))) ) | ($spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3626])).
fof(f4135,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK3)))) ) | ($spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3072])).
fof(f3626,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK1,sK0)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f3603,f160])).
fof(f3603,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK1,sK0)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | $spl6),
  inference(superposition,[],[f244,f3422])).
fof(f3625,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK1,sK0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X1))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f3602,f160])).
fof(f3602,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK1,sK0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X1))))))) ) | $spl6),
  inference(superposition,[],[f247,f3422])).
fof(f3422,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK1,sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f3403,f252])).
fof(f3402,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK1,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK1,sK0))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f3090,f245])).
fof(f3403,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK1,sK0)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f3090,f246])).
fof(f3404,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f3090,f252])).
fof(f3090,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | $spl6),
  inference(equality_resolution,[],[f3072])).
fof(f4874,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f658,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4873,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f639,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4872,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f640,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4870,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4869,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4867,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4866,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4865,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f1037,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4864,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4863,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4863,plain,(
  ( ! [X26,X27,X25] : (s(fun(X25,bool),X26) = s(fun(X25,bool),X27) | s(bool,'T_0') = s(bool,g(s(X25,sK31(X26,X27,bool,X25))))) ) | ($spl15 | $spl20)),
  inference(subsumption_resolution,[],[f1045,f682])).
fof(f1045,plain,(
  ( ! [X26,X27,X25] : (s(bool,f(s(X25,sK31(X26,X27,bool,X25)))) != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(fun(X25,bool),X26) = s(fun(X25,bool),X27) | s(bool,'T_0') = s(bool,g(s(X25,sK31(X26,X27,bool,X25))))) ) | $spl15),
  inference(superposition,[],[f232,f588])).
fof(f4862,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4861,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4860,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f1287,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4859,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1318,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f1318,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1303,f946])).
fof(f1303,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f188,f1281])).
fof(f1281,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1267,f160])).
fof(f1267,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f190,f954])).
fof(f954,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl4),
  inference(unit_resulting_resolution,[],[f935,f252])).
fof(f935,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl4),
  inference(unit_resulting_resolution,[],[f239,f191])).
fof(f4858,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f1354,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4857,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1386,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f1386,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1370,f946])).
fof(f1370,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f188,f1348])).
fof(f1348,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1331,f160])).
fof(f1331,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f192,f1000])).
fof(f1000,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | $spl4),
  inference(unit_resulting_resolution,[],[f984,f252])).
fof(f984,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | $spl4),
  inference(unit_resulting_resolution,[],[f239,f193])).
fof(f4854,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4853,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4852,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1929,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f1929,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1901,f946])).
fof(f1901,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f188,f1279])).
fof(f1279,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1278,f239])).
fof(f1278,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1277,f160])).
fof(f1277,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1265,f954])).
fof(f1265,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f190,f239])).
fof(f4851,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1984,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f1984,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1956,f946])).
fof(f1956,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f188,f1343])).
fof(f1343,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1342,f239])).
fof(f1342,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1341,f160])).
fof(f1341,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1328,f1000])).
fof(f1328,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f192,f239])).
fof(f4849,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2308,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f2308,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) ) | ($spl15 | $spl28)),
  inference(superposition,[],[f2281,f588])).
fof(f2281,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2262,f276])).
fof(f2262,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f245])).
fof(f4847,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2399,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f2399,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl28)),
  inference(superposition,[],[f2372,f588])).
fof(f2372,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2351,f276])).
fof(f2351,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f248])).
fof(f4845,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2535,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f2535,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2498,f946])).
fof(f2498,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f188,f2476])).
fof(f2476,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2449,f160])).
fof(f2449,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f202,f1707])).
fof(f1707,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1687,f252])).
fof(f1687,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1348,f203])).
fof(f4842,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2697,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f2697,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2659,f946])).
fof(f2659,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f188,f2620])).
fof(f2620,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2590,f160])).
fof(f2590,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f204,f1766])).
fof(f1766,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1746,f252])).
fof(f1746,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1348,f205])).
fof(f4838,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2872,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f2872,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2832,f946])).
fof(f2832,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f188,f2463])).
fof(f2463,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2462,f239])).
fof(f2462,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2461,f160])).
fof(f2461,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2443,f1707])).
fof(f2443,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f202,f239])).
fof(f4837,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2950,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f2950,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2910,f946])).
fof(f2910,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f188,f2604])).
fof(f2604,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2603,f239])).
fof(f2603,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2602,f160])).
fof(f2602,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2583,f1766])).
fof(f2583,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f204,f239])).
fof(f4833,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f3327,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f3327,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl6 | $spl28)),
  inference(subsumption_resolution,[],[f3281,f946])).
fof(f3281,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f188,f3100])).
fof(f4831,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4830,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4830,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f685,f682])).
fof(f4829,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f1069,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f1069,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15)),
  inference(unit_resulting_resolution,[],[f262,f754])).
fof(f4828,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f1146,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4827,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f3843,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f3843,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl11 | $spl15)),
  inference(forward_demodulation,[],[f1140,f473])).
fof(f473,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | ($spl11 | $spl15)),
  inference(unit_resulting_resolution,[],[f262,f472])).
fof(f1140,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1079])).
fof(f1079,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl15),
  inference(superposition,[],[f754,f472])).
fof(f4826,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f1134,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4825,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4824,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4824,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1129,f682])).
fof(f4823,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f3836,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f3836,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl11 | $spl15)),
  inference(forward_demodulation,[],[f1127,f473])).
fof(f1127,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1098])).
fof(f1098,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl15),
  inference(superposition,[],[f472,f754])).
fof(f4822,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4821,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4821,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X13),'const.list.NIL_0') = s('type.list.list'(X13),X14) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),X14))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1100,f682])).
fof(f4816,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4815,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4815,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X27),'const.list.NIL_0') = s('type.list.list'(X27),X28) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28)))))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1106,f682])).
fof(f4814,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f4813,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4813,plain,(
  ( ! [X33,X34,X32] : (s(X34,f(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) != s(X34,g(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s(fun(bool,X34),X32) = s(fun(bool,X34),X33) | s(bool,'T_0') = s(bool,sK31(X32,X33,X34,bool))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1107,f682])).
fof(f4812,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f1108,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f4811,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl35)),
  inference(global_subsumption,[],[f3824,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1166,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f1565,f1402,f1215,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4093,f4092,f4090,f4089,f4074,f4073,f4072,f4071,f4069,f4068,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f2029,f1202,f4809])).
fof(f3824,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl35)),
  inference(forward_demodulation,[],[f1217,f473])).
fof(f1217,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f472])).
fof(f4810,plain,(
  $false | ($spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f4809,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f1347,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | $spl28),
  inference(subsumption_resolution,[],[f1330,f946])).
fof(f1330,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8('const.list.NIL_0',X0)),s('type.list.list'(X0),sK7('const.list.NIL_0',X0))))) )),
  inference(superposition,[],[f192,f276])).
fof(f1280,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | $spl28),
  inference(subsumption_resolution,[],[f1266,f946])).
fof(f1266,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6('const.list.NIL_0',X0)),s('type.list.list'(X0),sK5('const.list.NIL_0',X0))))) )),
  inference(superposition,[],[f190,f276])).
fof(f4726,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(forward_demodulation,[],[f2299,f682])).
fof(f2300,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl28),
  inference(superposition,[],[f2281,f276])).
fof(f4711,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(forward_demodulation,[],[f2390,f682])).
fof(f2391,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl28),
  inference(superposition,[],[f2372,f276])).
fof(f4695,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(forward_demodulation,[],[f2460,f682])).
fof(f4678,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(forward_demodulation,[],[f2601,f682])).
fof(f4067,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(backward_demodulation,[],[f682,f1824])).
fof(f4086,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(backward_demodulation,[],[f682,f3385])).
fof(f4091,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(backward_demodulation,[],[f682,f1821])).
fof(f4094,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(backward_demodulation,[],[f682,f1822])).
fof(f4095,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(backward_demodulation,[],[f682,f1823])).
fof(f4096,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl20 | $spl28)),
  inference(backward_demodulation,[],[f682,f3227])).
fof(f2601,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl28),
  inference(forward_demodulation,[],[f2582,f276])).
fof(f2582,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f204])).
fof(f2460,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0')))) | $spl28),
  inference(forward_demodulation,[],[f2442,f276])).
fof(f2442,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f202])).
fof(f2299,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) ) | $spl28),
  inference(superposition,[],[f2281,f163])).
fof(f2390,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.num.|48|_0'))))) ) | $spl28),
  inference(superposition,[],[f2372,f163])).
fof(f3385,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f3360,f276])).
fof(f3360,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f230])).
fof(f3227,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))) ) | $spl28),
  inference(forward_demodulation,[],[f3203,f276])).
fof(f3203,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f227])).
fof(f2991,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) ) | $spl28),
  inference(forward_demodulation,[],[f2978,f276])).
fof(f2978,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f209])).
fof(f2773,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(subsumption_resolution,[],[f2761,f160])).
fof(f2761,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(superposition,[],[f2601,f250])).
fof(f2579,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(subsumption_resolution,[],[f2567,f160])).
fof(f2567,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(superposition,[],[f2460,f250])).
fof(f2411,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl28),
  inference(subsumption_resolution,[],[f2393,f160])).
fof(f2393,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl28),
  inference(superposition,[],[f2372,f250])).
fof(f2320,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X2)) ) | $spl28),
  inference(subsumption_resolution,[],[f2302,f160])).
fof(f2302,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X2)) ) | $spl28),
  inference(superposition,[],[f2281,f250])).
fof(f1821,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f200])).
fof(f1822,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f198])).
fof(f1823,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f188])).
fof(f1824,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))),s('type.num.num','const.num.|48|_0'))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f186])).
fof(f1825,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f946,f182])).
fof(f1818,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) ) | $spl28),
  inference(subsumption_resolution,[],[f1814,f946])).
fof(f1814,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK20('const.list.NIL_0',X1,X0)),s('type.list.list'(X0),sK19('const.list.NIL_0',X1,X0))))) )),
  inference(superposition,[],[f242,f276])).
fof(f1664,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(subsumption_resolution,[],[f1652,f946])).
fof(f1652,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(superposition,[],[f194,f276])).
fof(f1363,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(subsumption_resolution,[],[f1359,f160])).
fof(f1359,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(superposition,[],[f1347,f250])).
fof(f1296,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(subsumption_resolution,[],[f1292,f160])).
fof(f1292,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(superposition,[],[f1280,f250])).
fof(f4808,plain,(
  $false | ($spl6 | $spl11 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1209,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f1209,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl35)),
  inference(unit_resulting_resolution,[],[f262,f1166,f250])).
fof(f4807,plain,(
  $false | ($spl6 | $spl11 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1203,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f1203,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl35)),
  inference(unit_resulting_resolution,[],[f262,f1166,f250])).
fof(f4806,plain,(
  $false | ($spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1202,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4805,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4804,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4804,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21)))))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1289,f682])).
fof(f4803,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4802,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4802,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f1326,f682])).
fof(f1326,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1309,f946])).
fof(f1309,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f198,f1281])).
fof(f4801,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4800,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4800,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1356,f682])).
fof(f4799,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4798,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4798,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f1397,f682])).
fof(f1397,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1377,f946])).
fof(f1377,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f198,f1348])).
fof(f4794,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4793,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4793,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f772,f682])).
fof(f4792,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f1421,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f1421,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15)),
  inference(unit_resulting_resolution,[],[f262,f792])).
fof(f4791,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f1513,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4790,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f3793,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f3793,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl11 | $spl15)),
  inference(forward_demodulation,[],[f1507,f473])).
fof(f1507,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X10)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1432])).
fof(f1432,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl15),
  inference(superposition,[],[f792,f472])).
fof(f4788,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f1500,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4787,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4786,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4786,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1495,f682])).
fof(f4785,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f3785,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f3785,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl11 | $spl15)),
  inference(forward_demodulation,[],[f1493,f473])).
fof(f1493,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1454])).
fof(f1454,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl15),
  inference(superposition,[],[f472,f792])).
fof(f4783,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4782,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4782,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X14),'const.list.NIL_0') = s('type.list.list'(X14),X15) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1457,f682])).
fof(f4779,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4778,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4778,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19)))))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1530,f682])).
fof(f4775,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4774,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4774,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1534,f682])).
fof(f4773,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4772,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4772,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X33),'const.list.NIL_0') = s('type.list.list'(X33),X34) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34)))))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1468,f682])).
fof(f4769,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f1471,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4768,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4767,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4767,plain,(
  ( ! [X47,X48,X46] : (s(X48,f(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) != s(X48,g(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s(fun(bool,X48),X46) = s(fun(bool,X48),X47) | s(bool,'T_0') = s(bool,sK31(X46,X47,X48,bool))) ) | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f1472,f682])).
fof(f4761,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f3765,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f3765,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15 | $spl35)),
  inference(forward_demodulation,[],[f1604,f473])).
fof(f1604,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f472])).
fof(f4760,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f4759,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4759,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl15 | $spl20 | $spl35)),
  inference(forward_demodulation,[],[f1602,f682])).
fof(f4757,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1595,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f1595,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f262,f1533,f250])).
fof(f4755,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1588,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f1588,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f262,f1533,f250])).
fof(f4754,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f1587,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4753,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4752,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4752,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f1939,f682])).
fof(f1939,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1910,f946])).
fof(f1910,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f198,f1279])).
fof(f4751,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4750,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4750,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f1941,f682])).
fof(f1941,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1912,f946])).
fof(f1912,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f200,f1279])).
fof(f4749,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4748,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4748,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f1994,f682])).
fof(f1994,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1965,f946])).
fof(f1965,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f198,f1343])).
fof(f4747,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4746,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4746,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f1996,f682])).
fof(f1996,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f1967,f946])).
fof(f1967,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f200,f1343])).
fof(f4745,plain,(
  $false | ($spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2031,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f2031,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1347,f1166,f345])).
fof(f4744,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280,f1347])).
fof(f4743,plain,(
  $false | ($spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2030,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280])).
fof(f2030,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1280,f1166,f345])).
fof(f4742,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281,f1280])).
fof(f4741,plain,(
  $false | ($spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2029,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281])).
fof(f4740,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2027,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281])).
fof(f2027,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1347,f1533,f345])).
fof(f4739,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2026,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281])).
fof(f2026,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1280,f1533,f345])).
fof(f4738,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2025,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281])).
fof(f4737,plain,(
  $false | ($spl6 | $spl11 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f2015,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281])).
fof(f2015,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl11 | $spl28)),
  inference(unit_resulting_resolution,[],[f1347,f262,f345])).
fof(f4736,plain,(
  $false | ($spl6 | $spl11 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f2014,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281])).
fof(f2014,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl11 | $spl28)),
  inference(unit_resulting_resolution,[],[f1280,f262,f345])).
fof(f4731,plain,(
  $false | ($spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2297,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281])).
fof(f2297,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f2281,f345])).
fof(f4730,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726,f2281])).
fof(f4729,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2296,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2281,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726])).
fof(f2296,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl15 | $spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f2281,f345])).
fof(f4728,plain,(
  $false | ($spl6 | $spl11 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f2293,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2281,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726])).
fof(f2293,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl11 | $spl28)),
  inference(unit_resulting_resolution,[],[f262,f2281,f345])).
fof(f4727,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2281,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300,f4726])).
fof(f4725,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2299,f1402,f1347,f1280,f2281,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372,f2300])).
fof(f4724,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4723,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372])).
fof(f4723,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))) ) | ($spl15 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2309,f682])).
fof(f2309,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))) ) | ($spl15 | $spl28)),
  inference(superposition,[],[f2281,f754])).
fof(f4722,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4721,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372])).
fof(f4721,plain,(
  ( ! [X13] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))) ) | ($spl15 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2310,f682])).
fof(f2310,plain,(
  ( ! [X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))) ) | ($spl15 | $spl28)),
  inference(superposition,[],[f2281,f792])).
fof(f4716,plain,(
  $false | ($spl6 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2388,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372])).
fof(f2388,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f2372,f345])).
fof(f4715,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711,f2372])).
fof(f4714,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2387,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711])).
fof(f2387,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl15 | $spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f2372,f345])).
fof(f4713,plain,(
  $false | ($spl6 | $spl11 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f2384,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711])).
fof(f2384,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) ) | ($spl11 | $spl28)),
  inference(unit_resulting_resolution,[],[f262,f2372,f345])).
fof(f4712,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391,f4711])).
fof(f4710,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695,f2391])).
fof(f4709,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4708,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695])).
fof(f4708,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2400,f682])).
fof(f2400,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl28)),
  inference(superposition,[],[f2372,f754])).
fof(f4707,plain,(
  $false | ($spl6 | $spl15 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4706,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695])).
fof(f4706,plain,(
  ( ! [X13] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2401,f682])).
fof(f2401,plain,(
  ( ! [X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num','const.num.|48|_0')))) ) | ($spl15 | $spl28)),
  inference(superposition,[],[f2372,f792])).
fof(f4701,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4700,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695])).
fof(f4700,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2545,f682])).
fof(f2545,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2507,f946])).
fof(f2507,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f198,f2476])).
fof(f4699,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4698,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695])).
fof(f4698,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2547,f682])).
fof(f2547,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2509,f946])).
fof(f2509,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f200,f2476])).
fof(f4696,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678,f4695])).
fof(f4693,plain,(
  $false | ($spl6 | $spl11 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f2560,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678])).
fof(f2560,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | ($spl11 | $spl28)),
  inference(unit_resulting_resolution,[],[f262,f2460,f345])).
fof(f4688,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4687,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678])).
fof(f4687,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2707,f682])).
fof(f2707,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2668,f946])).
fof(f2668,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f198,f2620])).
fof(f4686,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4685,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678])).
fof(f4685,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2709,f682])).
fof(f2709,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2670,f946])).
fof(f2670,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) | $spl4),
  inference(superposition,[],[f200,f2620])).
fof(f4679,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036,f4678])).
fof(f4676,plain,(
  $false | ($spl6 | $spl11 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f2754,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036])).
fof(f2754,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl28)),
  inference(unit_resulting_resolution,[],[f262,f2601,f345])).
fof(f4671,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4670,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036])).
fof(f4670,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2882,f682])).
fof(f2882,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2841,f946])).
fof(f2841,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f198,f2463])).
fof(f4669,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4668,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036])).
fof(f4668,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2884,f682])).
fof(f2884,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2843,f946])).
fof(f2843,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f200,f2463])).
fof(f4667,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4666,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036])).
fof(f4666,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2960,f682])).
fof(f2960,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2919,f946])).
fof(f2919,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f198,f2604])).
fof(f4665,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4664,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036])).
fof(f4664,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f2962,f682])).
fof(f2962,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl4 | $spl28)),
  inference(subsumption_resolution,[],[f2921,f946])).
fof(f2921,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f200,f2604])).
fof(f4651,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4650,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036])).
fof(f4650,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f3337,f682])).
fof(f3337,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl6 | $spl28)),
  inference(subsumption_resolution,[],[f3290,f946])).
fof(f3290,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f198,f3100])).
fof(f4649,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4648,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036])).
fof(f4648,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(forward_demodulation,[],[f3339,f682])).
fof(f3339,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl4 | $spl6 | $spl28)),
  inference(subsumption_resolution,[],[f3292,f946])).
fof(f3292,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f200,f3100])).
fof(f4593,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037,f4036])).
fof(f4592,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039,f4037])).
fof(f4591,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040,f4039])).
fof(f4590,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055,f4040])).
fof(f4585,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4045,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4045,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2373])).
fof(f2373,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2354,f239])).
fof(f2354,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f239])).
fof(f4584,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4046,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4046,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2374])).
fof(f2374,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2355,f1281])).
fof(f2355,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f1281])).
fof(f4583,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4047,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4047,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2375])).
fof(f2375,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2356,f1279])).
fof(f2356,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f1279])).
fof(f4582,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4048,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4048,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2376])).
fof(f2376,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2357,f1348])).
fof(f2357,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f1348])).
fof(f4581,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4049,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4049,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2377])).
fof(f2377,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2358,f1343])).
fof(f2358,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f1343])).
fof(f4580,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4050,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4050,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X17,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X17,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2559])).
fof(f2559,plain,(
  ( ! [X17] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X17,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X17,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2522,f2476])).
fof(f2522,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X17,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X17,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f2476])).
fof(f4579,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4051,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4051,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X17,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X17,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2724])).
fof(f2724,plain,(
  ( ! [X17] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X17,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X17,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2684,f2620])).
fof(f2684,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X17,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X17,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f2620])).
fof(f4578,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4052,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4052,plain,(
  ( ! [X19] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2899])).
fof(f2899,plain,(
  ( ! [X19] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2859,f2463])).
fof(f2859,plain,(
  ( ! [X19] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f2463])).
fof(f4577,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4053,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4053,plain,(
  ( ! [X19] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2977])).
fof(f2977,plain,(
  ( ! [X19] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2937,f2604])).
fof(f2937,plain,(
  ( ! [X19] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X19,sK0))))) ) | $spl4),
  inference(superposition,[],[f248,f2604])).
fof(f4576,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4054,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4054,plain,(
  ( ! [X29] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X29,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X29,sK0))))) ) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3359])).
fof(f3359,plain,(
  ( ! [X29] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X29,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X29,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3313,f3100])).
fof(f3313,plain,(
  ( ! [X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK26('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X29,sK0)),s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X29,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f248,f3100])).
fof(f4575,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056,f4055])).
fof(f4574,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059,f4056])).
fof(f4572,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4058,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059])).
fof(f4058,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK2)))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3153])).
fof(f3153,plain,(
  ( ! [X6,X5] : (s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))))))) ) | $spl4),
  inference(subsumption_resolution,[],[f3130,f160])).
fof(f3130,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))))))) ) | $spl4),
  inference(superposition,[],[f247,f1707])).
fof(f4571,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061,f4059])).
fof(f4569,plain,(
  $false | ($spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f250,f252,f258,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3072,f3073,f3090,f3127,f3154,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3639,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4135,f4132,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4065,f4063,f4061])).
fof(f4568,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f935,f937,f949,f946,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1296,f1322,f1343,f1346,f1348,f1349,f1363,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1664,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2320,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2411,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2579,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2991,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3227,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3385,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3339,f3337,f2962,f2960,f2884,f2882,f2709,f2707,f2547,f2545,f2391,f2390,f1565,f2300,f2299,f1402,f1996,f1994,f1941,f1939,f1397,f1326,f1347,f1280,f2281,f2372,f2460,f2601,f3627,f682,f4135,f4134,f4133,f4132,f4131,f4130,f4129,f4128,f4127,f4126,f4125,f4124,f4123,f4122,f4121,f4120,f4119,f4118,f4117,f4116,f4115,f4114,f4113,f4112,f4111,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4085,f4084,f4083,f4082,f4081,f4080,f4079,f4078,f4077,f4076,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4066,f4065,f4064,f4063,f4062])).
fof(f4062,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0)) ) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3638])).
fof(f4064,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))))) ) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3268])).
fof(f4066,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3627])).
fof(f4076,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3386])).
fof(f4077,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3387])).
fof(f4078,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3388])).
fof(f4079,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3389])).
fof(f4080,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3390])).
fof(f4081,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3391])).
fof(f4082,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3392])).
fof(f4083,plain,(
  ( ! [X7] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3393])).
fof(f4084,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3394])).
fof(f4085,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X9,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X9,sK0))))) ) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3395])).
fof(f4111,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2282])).
fof(f4112,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2283])).
fof(f4113,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2284])).
fof(f4114,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2285])).
fof(f4115,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2286])).
fof(f4116,plain,(
  ( ! [X15] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X15,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X15,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2558])).
fof(f4117,plain,(
  ( ! [X15] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X15,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X15,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2723])).
fof(f4118,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2898])).
fof(f4119,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f2976])).
fof(f4120,plain,(
  ( ! [X24] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X24,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X24,sK0))))) ) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3357])).
fof(f4121,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3228])).
fof(f4122,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3229])).
fof(f4123,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3230])).
fof(f4124,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3231])).
fof(f4125,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3232])).
fof(f4126,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3233])).
fof(f4127,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3234])).
fof(f4128,plain,(
  ( ! [X7] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3235])).
fof(f4129,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0))))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3236])).
fof(f4130,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X17,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X17,sK0))))) ) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3353])).
fof(f4131,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK2)))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f682,f3071])).
fof(f4133,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))))) ) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3269])).
fof(f4134,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0)) ) | ($spl4 | $spl6 | $spl20)),
  inference(backward_demodulation,[],[f682,f3089])).
fof(f3638,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f3154,f239])).
fof(f3395,plain,(
  ( ! [X9] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X9,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X9,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3373,f3100])).
fof(f3373,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X9,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X9,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f230,f3100])).
fof(f3394,plain,(
  ( ! [X8] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3372,f2604])).
fof(f3372,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f2604])).
fof(f3393,plain,(
  ( ! [X7] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3371,f2620])).
fof(f3371,plain,(
  ( ! [X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f2620])).
fof(f3392,plain,(
  ( ! [X6] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3370,f2463])).
fof(f3370,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f2463])).
fof(f3391,plain,(
  ( ! [X5] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3369,f2476])).
fof(f3369,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f2476])).
fof(f3390,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3368,f1343])).
fof(f3368,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f1343])).
fof(f3389,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3367,f1348])).
fof(f3367,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f1348])).
fof(f3388,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3366,f1279])).
fof(f3366,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f1279])).
fof(f3387,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3365,f1281])).
fof(f3365,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f1281])).
fof(f3386,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3364,f239])).
fof(f3364,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK30('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | $spl4),
  inference(superposition,[],[f230,f239])).
fof(f3314,plain,(
  ( ! [X30] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X30,sK0)))))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f249,f3100])).
fof(f3311,plain,(
  ( ! [X25] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X25,sK0)))))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f246,f3100])).
fof(f3357,plain,(
  ( ! [X24] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X24,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X24,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3310,f3100])).
fof(f3310,plain,(
  ( ! [X24] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X24,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X24,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f245,f3100])).
fof(f3355,plain,(
  ( ! [X20] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X20,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X20,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3308,f3100])).
fof(f3308,plain,(
  ( ! [X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X20,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X20,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f243,f3100])).
fof(f3354,plain,(
  ( ! [X19] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X19,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X19,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3307,f3100])).
fof(f3307,plain,(
  ( ! [X19] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X19,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X19,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f242,f3100])).
fof(f3306,plain,(
  ( ! [X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X18))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X18,sK0)))))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f229,f3100])).
fof(f3353,plain,(
  ( ! [X17] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X17,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X17,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X17))))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3305,f3100])).
fof(f3305,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X17)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X17,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X17,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f227,f3100])).
fof(f3304,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X16)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X16,sK0)))))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f226,f3100])).
fof(f3352,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X15) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X15,sK0))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3303,f163])).
fof(f3303,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X15) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X15,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f217,f3100])).
fof(f3351,plain,(
  ( ! [X14] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X14) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X14,sK0))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3302,f163])).
fof(f3302,plain,(
  ( ! [X14] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X14) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X14,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f214,f3100])).
fof(f3350,plain,(
  ( ! [X13] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X13,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X13,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X13)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3301,f3100])).
fof(f3301,plain,(
  ( ! [X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X13))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X13,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X13,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f212,f3100])).
fof(f3300,plain,(
  ( ! [X12] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X12))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X12,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f211,f3100])).
fof(f3349,plain,(
  ( ! [X11] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X11,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X11,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X11)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3299,f3100])).
fof(f3299,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X11))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X11,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X11,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f209,f3100])).
fof(f3298,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),X10,sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f208,f3100])).
fof(f3347,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3346,f3100])).
fof(f3346,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f3345,f160])).
fof(f3345,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3296,f1766])).
fof(f3296,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f204,f3100])).
fof(f3343,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3342,f3100])).
fof(f3342,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f3341,f160])).
fof(f3341,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3294,f1707])).
fof(f3294,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f202,f3100])).
fof(f3335,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3334,f3100])).
fof(f3334,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f3333,f160])).
fof(f3333,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3285,f1000])).
fof(f3285,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f192,f3100])).
fof(f3331,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3330,f3100])).
fof(f3330,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f3329,f160])).
fof(f3329,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3283,f954])).
fof(f3283,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK24(sK2,sK1,sK0)),s('type.list.list'(sK0),sK23(sK2,sK1,sK0))),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f190,f3100])).
fof(f3269,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f3249,f160])).
fof(f3249,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f244,f3161])).
fof(f3268,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))))))) ) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f3248,f160])).
fof(f3248,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK23(sK2,sK1,sK0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f247,f3161])).
fof(f3236,plain,(
  ( ! [X8] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3212,f2604])).
fof(f3212,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f2604])).
fof(f3235,plain,(
  ( ! [X7] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3211,f2620])).
fof(f3211,plain,(
  ( ! [X7] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f2620])).
fof(f3234,plain,(
  ( ! [X6] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3210,f2463])).
fof(f3210,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f2463])).
fof(f3233,plain,(
  ( ! [X5] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3209,f2476])).
fof(f3209,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f2476])).
fof(f3232,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3208,f1343])).
fof(f3208,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f1343])).
fof(f3231,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3207,f1348])).
fof(f3207,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f1348])).
fof(f3230,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3206,f1279])).
fof(f3206,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f1279])).
fof(f3229,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3205,f1281])).
fof(f3205,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f1281])).
fof(f3228,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3204,f239])).
fof(f3204,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK28('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | $spl4),
  inference(superposition,[],[f227,f239])).
fof(f3102,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f3079,f252])).
fof(f3089,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f3072,f239])).
fof(f3071,plain,(
  ( ! [X6,X5] : (s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK2))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl4),
  inference(subsumption_resolution,[],[f3048,f160])).
fof(f3048,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK2))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl4),
  inference(superposition,[],[f244,f1707])).
fof(f3033,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl4),
  inference(forward_demodulation,[],[f3031,f163])).
fof(f3031,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0))))) ) | $spl4),
  inference(superposition,[],[f2249,f163])).
fof(f3030,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl4),
  inference(forward_demodulation,[],[f3028,f163])).
fof(f3028,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0))))) ) | $spl4),
  inference(superposition,[],[f2247,f163])).
fof(f3027,plain,(
  ( ! [X8] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8)))) ) | $spl4),
  inference(forward_demodulation,[],[f3014,f2604])).
fof(f3014,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0))))) ) | $spl4),
  inference(superposition,[],[f212,f2604])).
fof(f3026,plain,(
  ( ! [X7] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))) ) | $spl4),
  inference(forward_demodulation,[],[f3013,f2620])).
fof(f3013,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0))))) ) | $spl4),
  inference(superposition,[],[f212,f2620])).
fof(f3025,plain,(
  ( ! [X6] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))) ) | $spl4),
  inference(forward_demodulation,[],[f3012,f2463])).
fof(f3012,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0))))) ) | $spl4),
  inference(superposition,[],[f212,f2463])).
fof(f3024,plain,(
  ( ! [X5] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5)))) ) | $spl4),
  inference(forward_demodulation,[],[f3011,f2476])).
fof(f3011,plain,(
  ( ! [X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0))))) ) | $spl4),
  inference(superposition,[],[f212,f2476])).
fof(f3023,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4)))) ) | $spl4),
  inference(forward_demodulation,[],[f3010,f1343])).
fof(f3010,plain,(
  ( ! [X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f212,f1343])).
fof(f3022,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3)))) ) | $spl4),
  inference(forward_demodulation,[],[f3009,f1348])).
fof(f3009,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f212,f1348])).
fof(f3021,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))) ) | $spl4),
  inference(forward_demodulation,[],[f3008,f1279])).
fof(f3008,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f212,f1279])).
fof(f3020,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) ) | $spl4),
  inference(forward_demodulation,[],[f3007,f1281])).
fof(f3007,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f212,f1281])).
fof(f3005,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl4),
  inference(forward_demodulation,[],[f3003,f163])).
fof(f3003,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0))))) ) | $spl4),
  inference(superposition,[],[f2187,f163])).
fof(f2999,plain,(
  ( ! [X8] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8)))) ) | $spl4),
  inference(forward_demodulation,[],[f2986,f2604])).
fof(f2986,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X8,sK0))))) ) | $spl4),
  inference(superposition,[],[f209,f2604])).
fof(f2998,plain,(
  ( ! [X7] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))) ) | $spl4),
  inference(forward_demodulation,[],[f2985,f2620])).
fof(f2985,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X7,sK0))))) ) | $spl4),
  inference(superposition,[],[f209,f2620])).
fof(f2997,plain,(
  ( ! [X6] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))) ) | $spl4),
  inference(forward_demodulation,[],[f2984,f2463])).
fof(f2984,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X6,sK0))))) ) | $spl4),
  inference(superposition,[],[f209,f2463])).
fof(f2996,plain,(
  ( ! [X5] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5)))) ) | $spl4),
  inference(forward_demodulation,[],[f2983,f2476])).
fof(f2983,plain,(
  ( ! [X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0))))) ) | $spl4),
  inference(superposition,[],[f209,f2476])).
fof(f2995,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4)))) ) | $spl4),
  inference(forward_demodulation,[],[f2982,f1343])).
fof(f2982,plain,(
  ( ! [X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f209,f1343])).
fof(f2994,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3)))) ) | $spl4),
  inference(forward_demodulation,[],[f2981,f1348])).
fof(f2981,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f209,f1348])).
fof(f2993,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2980,f1279])).
fof(f2980,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f209,f1279])).
fof(f2992,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) ) | $spl4),
  inference(forward_demodulation,[],[f2979,f1281])).
fof(f2979,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f209,f1281])).
fof(f2938,plain,(
  ( ! [X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X20,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f2604])).
fof(f2936,plain,(
  ( ! [X18] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X18,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f2604])).
fof(f2976,plain,(
  ( ! [X17] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2935,f2604])).
fof(f2935,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f2604])).
fof(f2975,plain,(
  ( ! [X16] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X16,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X16,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2934,f2604])).
fof(f2934,plain,(
  ( ! [X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X16,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X16,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f2604])).
fof(f2974,plain,(
  ( ! [X15] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X15,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X15,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2933,f2604])).
fof(f2933,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X15,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X15,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f2604])).
fof(f2932,plain,(
  ( ! [X14] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X14))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X14,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f2604])).
fof(f2931,plain,(
  ( ! [X13] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X13)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X13,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f2604])).
fof(f2973,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X12,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2930,f163])).
fof(f2930,plain,(
  ( ! [X12] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X12,sK0))))) ) | $spl4),
  inference(superposition,[],[f217,f2604])).
fof(f2972,plain,(
  ( ! [X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X11,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2929,f163])).
fof(f2929,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X11,sK0))))) ) | $spl4),
  inference(superposition,[],[f214,f2604])).
fof(f2928,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0))))) ) | $spl4),
  inference(superposition,[],[f211,f2604])).
fof(f2927,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))) | s('type.num.num',X9) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0))))) ) | $spl4),
  inference(superposition,[],[f208,f2604])).
fof(f2970,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2969,f2604])).
fof(f2969,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2968,f160])).
fof(f2968,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2925,f1766])).
fof(f2925,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f204,f2604])).
fof(f2966,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2965,f2604])).
fof(f2965,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2964,f160])).
fof(f2964,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2923,f1707])).
fof(f2923,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f202,f2604])).
fof(f2958,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2957,f2604])).
fof(f2957,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2956,f160])).
fof(f2956,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2914,f1000])).
fof(f2914,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f192,f2604])).
fof(f2954,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2953,f2604])).
fof(f2953,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2952,f160])).
fof(f2952,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2912,f954])).
fof(f2912,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f190,f2604])).
fof(f2860,plain,(
  ( ! [X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X20,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f2463])).
fof(f2858,plain,(
  ( ! [X18] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X18,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f2463])).
fof(f2898,plain,(
  ( ! [X17] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2857,f2463])).
fof(f2857,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X17,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f2463])).
fof(f2897,plain,(
  ( ! [X16] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X16,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X16,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2856,f2463])).
fof(f2856,plain,(
  ( ! [X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X16,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X16,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f2463])).
fof(f2896,plain,(
  ( ! [X15] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X15,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X15,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2855,f2463])).
fof(f2855,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X15,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X15,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f2463])).
fof(f2854,plain,(
  ( ! [X14] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X14))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X14,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f2463])).
fof(f2853,plain,(
  ( ! [X13] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X13)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X13,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f2463])).
fof(f2895,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X12,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2852,f163])).
fof(f2852,plain,(
  ( ! [X12] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X12,sK0))))) ) | $spl4),
  inference(superposition,[],[f217,f2463])).
fof(f2894,plain,(
  ( ! [X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X11,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2851,f163])).
fof(f2851,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X11,sK0))))) ) | $spl4),
  inference(superposition,[],[f214,f2463])).
fof(f2850,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0))))) ) | $spl4),
  inference(superposition,[],[f211,f2463])).
fof(f2849,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))) | s('type.num.num',X9) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0))))) ) | $spl4),
  inference(superposition,[],[f208,f2463])).
fof(f2892,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2891,f2463])).
fof(f2891,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2890,f160])).
fof(f2890,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2847,f1766])).
fof(f2847,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f204,f2463])).
fof(f2888,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2887,f2463])).
fof(f2887,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2886,f160])).
fof(f2886,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2845,f1707])).
fof(f2845,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f202,f2463])).
fof(f2880,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2879,f2463])).
fof(f2879,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2878,f160])).
fof(f2878,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2836,f1000])).
fof(f2836,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f192,f2463])).
fof(f2876,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2875,f2463])).
fof(f2875,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2874,f160])).
fof(f2874,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2834,f954])).
fof(f2834,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f190,f2463])).
fof(f2802,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X6,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f2620])).
fof(f2801,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f2476])).
fof(f2800,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f1343])).
fof(f2799,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f1348])).
fof(f2798,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f1279])).
fof(f2797,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f1281])).
fof(f2796,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK29('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f229,f239])).
fof(f2731,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X6,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f2620])).
fof(f2730,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X5)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X5,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f2476])).
fof(f2729,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f1343])).
fof(f2728,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f1348])).
fof(f2727,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f1279])).
fof(f2726,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f1281])).
fof(f2725,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK27('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f226,f239])).
fof(f2685,plain,(
  ( ! [X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X18,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f2620])).
fof(f2683,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X16,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f2620])).
fof(f2723,plain,(
  ( ! [X15] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X15,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X15,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2682,f2620])).
fof(f2682,plain,(
  ( ! [X15] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X15,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X15,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f2620])).
fof(f2722,plain,(
  ( ! [X14] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X14,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X14,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2681,f2620])).
fof(f2681,plain,(
  ( ! [X14] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X14,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X14,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f2620])).
fof(f2721,plain,(
  ( ! [X13] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X13,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X13,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2680,f2620])).
fof(f2680,plain,(
  ( ! [X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X13,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X13,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f2620])).
fof(f2720,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X12,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2679,f163])).
fof(f2679,plain,(
  ( ! [X12] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X12,sK0))))) ) | $spl4),
  inference(superposition,[],[f217,f2620])).
fof(f2719,plain,(
  ( ! [X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X11,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2678,f163])).
fof(f2678,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X11,sK0))))) ) | $spl4),
  inference(superposition,[],[f214,f2620])).
fof(f2677,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X10,sK0))))) ) | $spl4),
  inference(superposition,[],[f211,f2620])).
fof(f2676,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))) | s('type.num.num',X9) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),X9,sK0))))) ) | $spl4),
  inference(superposition,[],[f208,f2620])).
fof(f2717,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2716,f2620])).
fof(f2716,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2715,f160])).
fof(f2715,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2674,f1766])).
fof(f2674,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f204,f2620])).
fof(f2713,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2712,f2620])).
fof(f2712,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2711,f160])).
fof(f2711,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2672,f1707])).
fof(f2672,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f202,f2620])).
fof(f2705,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2704,f2620])).
fof(f2704,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2703,f160])).
fof(f2703,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2663,f1000])).
fof(f2663,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f192,f2620])).
fof(f2701,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2700,f2620])).
fof(f2700,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2699,f160])).
fof(f2699,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2661,f954])).
fof(f2661,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK14(sK2,sK0)),s('type.list.list'(sK0),sK13(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f190,f2620])).
fof(f2619,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2618,f2476])).
fof(f2618,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2617,f160])).
fof(f2617,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2588,f1766])).
fof(f2588,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f204,f2476])).
fof(f2616,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2615,f1343])).
fof(f2615,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2614,f160])).
fof(f2614,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2587,f1766])).
fof(f2587,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f204,f1343])).
fof(f2613,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2612,f1348])).
fof(f2612,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2611,f160])).
fof(f2611,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2586,f1766])).
fof(f2586,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f204,f1348])).
fof(f2610,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2609,f1279])).
fof(f2609,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2608,f160])).
fof(f2608,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2585,f1766])).
fof(f2585,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f204,f1279])).
fof(f2607,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2606,f1281])).
fof(f2606,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2605,f160])).
fof(f2605,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2584,f1766])).
fof(f2584,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK13('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f204,f1281])).
fof(f2523,plain,(
  ( ! [X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X18,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f2476])).
fof(f2521,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X16,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f2476])).
fof(f2558,plain,(
  ( ! [X15] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X15,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X15,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2520,f2476])).
fof(f2520,plain,(
  ( ! [X15] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X15,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X15,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f2476])).
fof(f2557,plain,(
  ( ! [X14] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X14,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X14,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2519,f2476])).
fof(f2519,plain,(
  ( ! [X14] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X14,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X14,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f2476])).
fof(f2556,plain,(
  ( ! [X13] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X13,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X13,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2518,f2476])).
fof(f2518,plain,(
  ( ! [X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X13,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X13,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f2476])).
fof(f2555,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X12,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2517,f163])).
fof(f2517,plain,(
  ( ! [X12] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X12,sK0))))) ) | $spl4),
  inference(superposition,[],[f217,f2476])).
fof(f2554,plain,(
  ( ! [X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X11,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2516,f163])).
fof(f2516,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X11,sK0))))) ) | $spl4),
  inference(superposition,[],[f214,f2476])).
fof(f2515,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X10,sK0))))) ) | $spl4),
  inference(superposition,[],[f211,f2476])).
fof(f2514,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))) | s('type.num.num',X9) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),X9,sK0))))) ) | $spl4),
  inference(superposition,[],[f208,f2476])).
fof(f2551,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2550,f2476])).
fof(f2550,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2549,f160])).
fof(f2549,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2511,f1707])).
fof(f2511,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f202,f2476])).
fof(f2543,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2542,f2476])).
fof(f2542,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2541,f160])).
fof(f2541,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2502,f1000])).
fof(f2502,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f192,f2476])).
fof(f2539,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2538,f2476])).
fof(f2538,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2537,f160])).
fof(f2537,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2500,f954])).
fof(f2500,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK12(sK2,sK0)),s('type.list.list'(sK0),sK11(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f190,f2476])).
fof(f2475,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2474,f1343])).
fof(f2474,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2473,f160])).
fof(f2473,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2447,f1707])).
fof(f2447,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f202,f1343])).
fof(f2472,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2471,f1348])).
fof(f2471,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2470,f160])).
fof(f2470,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2446,f1707])).
fof(f2446,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f202,f1348])).
fof(f2469,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2468,f1279])).
fof(f2468,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2467,f160])).
fof(f2467,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2445,f1707])).
fof(f2445,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f202,f1279])).
fof(f2466,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2465,f1281])).
fof(f2465,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f2464,f160])).
fof(f2464,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f2444,f1707])).
fof(f2444,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f202,f1281])).
fof(f2286,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2267,f1343])).
fof(f2267,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f1343])).
fof(f2285,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2266,f1348])).
fof(f2266,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f1348])).
fof(f2284,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2265,f1279])).
fof(f2265,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f1279])).
fof(f2283,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2264,f1281])).
fof(f2264,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f1281])).
fof(f2282,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2263,f239])).
fof(f2263,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK24('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | $spl4),
  inference(superposition,[],[f245,f239])).
fof(f2257,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl4),
  inference(forward_demodulation,[],[f2255,f163])).
fof(f2255,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0))))) ) | $spl4),
  inference(superposition,[],[f2185,f163])).
fof(f2250,plain,(
  ( ! [X4] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2242,f163])).
fof(f2242,plain,(
  ( ! [X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f217,f1343])).
fof(f2249,plain,(
  ( ! [X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2241,f163])).
fof(f2241,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f217,f1348])).
fof(f2248,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2240,f163])).
fof(f2240,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f217,f1279])).
fof(f2247,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2239,f163])).
fof(f2239,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f217,f1281])).
fof(f2188,plain,(
  ( ! [X4] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2180,f163])).
fof(f2180,plain,(
  ( ! [X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f214,f1343])).
fof(f2187,plain,(
  ( ! [X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2179,f163])).
fof(f2179,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f214,f1348])).
fof(f2186,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2178,f163])).
fof(f2178,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f214,f1279])).
fof(f2185,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2177,f163])).
fof(f2177,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f214,f1281])).
fof(f2104,plain,(
  ( ! [X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f211,f1343])).
fof(f2103,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f211,f1348])).
fof(f2102,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f211,f1279])).
fof(f2101,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f211,f1281])).
fof(f2005,plain,(
  ( ! [X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X4,sK0))))) ) | $spl4),
  inference(superposition,[],[f208,f1343])).
fof(f2004,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X3,sK0))))) ) | $spl4),
  inference(superposition,[],[f208,f1348])).
fof(f2003,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f208,f1279])).
fof(f2002,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f208,f1281])).
fof(f1974,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X12,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f1343])).
fof(f1973,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X11,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f1343])).
fof(f2001,plain,(
  ( ! [X10] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1972,f1343])).
fof(f1972,plain,(
  ( ! [X10] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f1343])).
fof(f2000,plain,(
  ( ! [X9] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1971,f1343])).
fof(f1971,plain,(
  ( ! [X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f1343])).
fof(f1992,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1991,f1343])).
fof(f1991,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1990,f160])).
fof(f1990,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1960,f1000])).
fof(f1960,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f192,f1343])).
fof(f1988,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1987,f1343])).
fof(f1987,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1986,f160])).
fof(f1986,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1958,f954])).
fof(f1958,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f190,f1343])).
fof(f1919,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X12,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f1279])).
fof(f1918,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X11,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f1279])).
fof(f1946,plain,(
  ( ! [X10] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1917,f1279])).
fof(f1917,plain,(
  ( ! [X10] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X10,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f1279])).
fof(f1945,plain,(
  ( ! [X9] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1916,f1279])).
fof(f1916,plain,(
  ( ! [X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),X9,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f1279])).
fof(f1937,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1936,f1279])).
fof(f1936,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1935,f160])).
fof(f1935,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1905,f1000])).
fof(f1905,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f192,f1279])).
fof(f1933,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1932,f1279])).
fof(f1932,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1931,f160])).
fof(f1931,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1903,f954])).
fof(f1903,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f190,f1279])).
fof(f1891,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1886,f1348])).
fof(f1886,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f1348])).
fof(f1890,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1885,f1281])).
fof(f1885,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f1281])).
fof(f1889,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1884,f239])).
fof(f1884,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK22('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK21('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | $spl4),
  inference(superposition,[],[f243,f239])).
fof(f1817,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1813,f1348])).
fof(f1813,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f1348])).
fof(f1816,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1812,f1281])).
fof(f1812,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f1281])).
fof(f1815,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f1811,f239])).
fof(f1811,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK20('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | $spl4),
  inference(superposition,[],[f242,f239])).
fof(f1564,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f1348])).
fof(f1563,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f1281])).
fof(f1562,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK25('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f249,f239])).
fof(f1401,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),X2,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f1348])).
fof(f1400,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),X1,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f1281])).
fof(f1399,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)))))))) ) | $spl4),
  inference(superposition,[],[f246,f239])).
fof(f1394,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1393,f1348])).
fof(f1393,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1392,f160])).
fof(f1392,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1374,f1000])).
fof(f1374,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f192,f1348])).
fof(f1390,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1389,f1348])).
fof(f1389,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1388,f160])).
fof(f1388,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1372,f954])).
fof(f1372,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f190,f1348])).
fof(f1346,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1345,f1281])).
fof(f1345,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1344,f160])).
fof(f1344,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1329,f1000])).
fof(f1329,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f192,f1281])).
fof(f1322,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1321,f1281])).
fof(f1321,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(subsumption_resolution,[],[f1320,f160])).
fof(f1320,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(forward_demodulation,[],[f1305,f954])).
fof(f1305,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),sK5('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)))) | $spl4),
  inference(superposition,[],[f190,f1281])).
fof(f4567,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f935,f937,f949,f946,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1296,f1322,f1343,f1346,f1348,f1349,f1363,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1664,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2320,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2411,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2579,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2991,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3227,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3385,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3339,f3337,f2962,f2960,f2884,f2882,f2709,f2707,f2547,f2545,f2391,f2390,f1565,f2300,f2299,f1402,f1996,f1994,f1941,f1939,f1397,f1326,f1347,f1280,f2281,f2372,f2460,f2601,f3627,f682,f4135,f4134,f4133,f4132,f4131,f4130,f4129,f4128,f4127,f4126,f4125,f4124,f4123,f4122,f4121,f4120,f4119,f4118,f4117,f4116,f4115,f4114,f4113,f4112,f4111,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4085,f4084,f4083,f4082,f4081,f4080,f4079,f4078,f4077,f4076,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4066,f4065,f4064,f4063])).
fof(f4566,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f935,f937,f949,f946,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1296,f1322,f1343,f1346,f1348,f1349,f1363,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1664,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2320,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2411,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2579,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2991,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3227,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3385,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3339,f3337,f2962,f2960,f2884,f2882,f2709,f2707,f2547,f2545,f2391,f2390,f1565,f2300,f2299,f1402,f1996,f1994,f1941,f1939,f1397,f1326,f1347,f1280,f2281,f2372,f2460,f2601,f3627,f682,f4135,f4134,f4133,f4132,f4131,f4130,f4129,f4128,f4127,f4126,f4125,f4124,f4123,f4122,f4121,f4120,f4119,f4118,f4117,f4116,f4115,f4114,f4113,f4112,f4111,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4085,f4084,f4083,f4082,f4081,f4080,f4079,f4078,f4077,f4076,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4066,f4065,f4064])).
fof(f4565,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f935,f937,f949,f946,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1296,f1322,f1343,f1346,f1348,f1349,f1363,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1664,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2320,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2411,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2579,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2991,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3227,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3385,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3339,f3337,f2962,f2960,f2884,f2882,f2709,f2707,f2547,f2545,f2391,f2390,f1565,f2300,f2299,f1402,f1996,f1994,f1941,f1939,f1397,f1326,f1347,f1280,f2281,f2372,f2460,f2601,f3627,f682,f4135,f4134,f4133,f4132,f4131,f4130,f4129,f4128,f4127,f4126,f4125,f4124,f4123,f4122,f4121,f4120,f4119,f4118,f4117,f4116,f4115,f4114,f4113,f4112,f4111,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4085,f4084,f4083,f4082,f4081,f4080,f4079,f4078,f4077,f4076,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4066,f4065])).
fof(f4564,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f935,f937,f949,f946,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1296,f1322,f1343,f1346,f1348,f1349,f1363,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1664,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2320,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2411,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2579,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2991,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3227,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3385,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3339,f3337,f2962,f2960,f2884,f2882,f2709,f2707,f2547,f2545,f2391,f2390,f1565,f2300,f2299,f1402,f1996,f1994,f1941,f1939,f1397,f1326,f1347,f1280,f2281,f2372,f2460,f2601,f3627,f682,f4135,f4134,f4133,f4132,f4131,f4130,f4129,f4128,f4127,f4126,f4125,f4124,f4123,f4122,f4121,f4120,f4119,f4118,f4117,f4116,f4115,f4114,f4113,f4112,f4111,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4085,f4084,f4083,f4082,f4081,f4080,f4079,f4078,f4077,f4076,f4074,f4073,f4072,f4071,f4069,f4068,f4067,f4066])).
fof(f4563,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068,f4067])).
fof(f4491,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl0 | $spl20)),
  inference(forward_demodulation,[],[f235,f682])).
fof(f4562,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069,f4068])).
fof(f4561,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071,f4069])).
fof(f4559,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072,f4071])).
fof(f4558,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073,f4072])).
fof(f4557,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074,f4073])).
fof(f4556,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086,f4074])).
fof(f4554,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4076,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4553,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4077,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4552,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4078,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4551,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4079,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4550,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4080,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4549,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4081,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4548,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4082,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4547,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4083,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4546,plain,(
  $false | ($spl0 | $spl4 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4084,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4545,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f4085,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4544,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089,f4086])).
fof(f4541,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090,f4089])).
fof(f4540,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091,f4090])).
fof(f4539,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092,f4091])).
fof(f4538,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093,f4092])).
fof(f4537,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094,f4093])).
fof(f4536,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095,f4094])).
fof(f4535,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096,f4095])).
fof(f4534,plain,(
  $false | ($spl0 | $spl20 | $spl28)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f937,f949,f946,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1282,f1296,f1349,f1363,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1664,f1672,f1702,f1761,f1809,f1810,f1818,f1825,f1824,f1823,f1822,f1821,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2320,f2352,f2353,f2378,f2411,f2477,f2579,f2621,f2732,f2746,f2747,f2735,f2748,f2773,f2814,f2815,f2795,f2803,f2816,f2991,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3227,f3214,f3215,f3216,f3237,f3385,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f2391,f2390,f1565,f2300,f2299,f1402,f1347,f1280,f2281,f2372,f2460,f2601,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097,f4096])).
fof(f4533,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098,f4097])).
fof(f4532,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099,f4098])).
fof(f4531,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100,f4099])).
fof(f4530,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102,f4100])).
fof(f4529,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103,f4102])).
fof(f4528,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104,f4103])).
fof(f4527,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105,f4104])).
fof(f4526,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106,f4105])).
fof(f4525,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107,f4106])).
fof(f4524,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108,f4107])).
fof(f4523,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109,f4108])).
fof(f4522,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110,f4109])).
fof(f4521,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491,f4110])).
fof(f4520,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4111,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4519,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4112,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4518,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4113,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4517,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4114,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4516,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4115,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4515,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4116,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4514,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4117,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4513,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4118,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4512,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4119,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4511,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4120,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4510,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4121,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4509,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4122,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4508,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4123,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4507,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4124,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4506,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4125,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4505,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4126,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4504,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4127,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4503,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4128,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4502,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4129,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4501,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4130,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4500,plain,(
  $false | ($spl0 | $spl4 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4131,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4499,plain,(
  $false | ($spl0 | $spl6 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4132,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4498,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4133,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4497,plain,(
  $false | ($spl0 | $spl4 | $spl6 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4134,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4496,plain,(
  $false | ($spl0 | $spl6 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f4135,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4495,plain,(
  $false | ($spl0 | $spl2 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f237,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4494,plain,(
  $false | ($spl0 | $spl15 | $spl20)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f250,f252,f257,f271,f274,f276,f309,f345,f458,f466,f472,f503,f533,f570,f580,f588,f589,f603,f604,f651,f695,f745,f754,f782,f792,f813,f937,f949,f995,f1030,f1031,f1032,f1038,f1039,f1040,f1120,f1195,f1282,f1349,f1414,f1415,f1416,f1578,f1579,f1580,f1636,f1672,f1702,f1761,f1809,f1810,f1882,f1883,f2006,f2010,f2011,f2009,f2105,f2109,f2110,f2108,f2181,f2190,f2192,f2184,f2243,f2252,f2254,f2246,f2269,f2270,f2287,f2352,f2353,f2378,f2477,f2621,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2803,f2816,f2988,f2989,f2990,f3016,f3017,f3018,f3045,f3073,f3127,f3155,f3214,f3215,f3216,f3237,f3361,f3362,f3363,f3396,f3450,f3451,f3580,f3581,f3384,f3383,f3226,f3225,f3141,f3140,f3059,f3058,f2813,f2812,f2745,f2744,f2630,f2628,f2486,f2484,f1565,f2371,f2370,f1402,f2280,f2279,f1577,f1576,f1472,f1471,f1469,f1468,f1534,f1462,f1530,f1458,f1457,f1491,f1495,f1500,f1505,f1513,f1413,f1356,f1289,f1108,f1107,f1106,f1103,f1101,f1100,f1129,f1134,f1146,f685,f772,f682,f4491])).
fof(f4493,plain,(
  $false | ($spl0 | $spl11 | $spl15 | $spl19 | $spl20)),
  inference(subsumption_resolution,[],[f4492,f162])).
fof(f4492,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl11 | $spl15 | $spl19 | $spl20)),
  inference(forward_demodulation,[],[f4491,f674])).
fof(f674,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f616,f473])).
fof(f616,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl19)),
  inference(unit_resulting_resolution,[],[f530,f588])).
fof(f4381,plain,(
  $false | ($spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl20)),
  inference(subsumption_resolution,[],[f4380,f162])).
fof(f4380,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl20)),
  inference(forward_demodulation,[],[f4066,f674])).
fof(f4371,plain,(
  $false | ($spl6 | $spl11 | $spl15 | $spl19 | $spl20)),
  inference(subsumption_resolution,[],[f4370,f162])).
fof(f4370,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl11 | $spl15 | $spl19 | $spl20)),
  inference(forward_demodulation,[],[f4061,f674])).
fof(f4332,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) ) | ($spl11 | $spl15 | $spl19 | $spl20)),
  inference(subsumption_resolution,[],[f4331,f162])).
fof(f4331,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) ) | ($spl11 | $spl15 | $spl19 | $spl20)),
  inference(forward_demodulation,[],[f4039,f674])).
fof(f3891,plain,(
  $false | ($spl4 | $spl6 | $spl20 | $spl27)),
  inference(global_subsumption,[],[f682,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f911,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl27),
  inference(unit_resulting_resolution,[],[f898,f252])).
fof(f900,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl27),
  inference(unit_resulting_resolution,[],[f898,f164])).
fof(f2021,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl27),
  inference(unit_resulting_resolution,[],[f162,f898,f345])).
fof(f3890,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f236,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3889,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl27)),
  inference(global_subsumption,[],[f3888,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3888,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl1 | $spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f815,f473])).
fof(f815,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl1 | $spl19)),
  inference(unit_resulting_resolution,[],[f530,f457])).
fof(f457,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl1),
  inference(subsumption_resolution,[],[f353,f160])).
fof(f353,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl1),
  inference(superposition,[],[f236,f250])).
fof(f3887,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl27)),
  inference(global_subsumption,[],[f814,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f814,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl1 | $spl11)),
  inference(unit_resulting_resolution,[],[f262,f457])).
fof(f3886,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f881,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f881,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(duplicate_literal_removal,[],[f817])).
fof(f817,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f457,f164])).
fof(f3885,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl27)),
  inference(global_subsumption,[],[f3884,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3884,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f876,f473])).
fof(f876,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl15)),
  inference(duplicate_literal_removal,[],[f822])).
fof(f822,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl15)),
  inference(superposition,[],[f457,f472])).
fof(f3883,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl27)),
  inference(global_subsumption,[],[f3882,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3882,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl1 | $spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f875,f674])).
fof(f875,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl1 | $spl15)),
  inference(duplicate_literal_removal,[],[f823])).
fof(f823,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | ($spl1 | $spl15)),
  inference(superposition,[],[f457,f588])).
fof(f3881,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f870,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f870,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(duplicate_literal_removal,[],[f833])).
fof(f833,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f164,f457])).
fof(f3880,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f865,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f865,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl1),
  inference(duplicate_literal_removal,[],[f838])).
fof(f838,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl1),
  inference(superposition,[],[f252,f457])).
fof(f3879,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl27)),
  inference(global_subsumption,[],[f3878,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3878,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f864,f473])).
fof(f864,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl15)),
  inference(duplicate_literal_removal,[],[f839])).
fof(f839,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl15)),
  inference(superposition,[],[f472,f457])).
fof(f3877,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl27)),
  inference(global_subsumption,[],[f3876,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3876,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl1 | $spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f863,f674])).
fof(f863,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl1 | $spl15)),
  inference(duplicate_literal_removal,[],[f840])).
fof(f840,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | ($spl1 | $spl15)),
  inference(superposition,[],[f588,f457])).
fof(f3875,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f842,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f842,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X12),'const.list.NIL_0') = s('type.list.list'(X12),X13) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X13))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f186,f457])).
fof(f3874,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f843,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f843,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X14),'const.list.NIL_0') = s('type.list.list'(X14),X15) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl1),
  inference(superposition,[],[f200,f457])).
fof(f3873,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl27 | $spl35)),
  inference(global_subsumption,[],[f3872,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3872,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl1 | $spl15 | $spl35)),
  inference(subsumption_resolution,[],[f844,f1533])).
fof(f844,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl1 | $spl15)),
  inference(superposition,[],[f772,f457])).
fof(f3871,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f845,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f845,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X16),'const.list.NIL_0') = s('type.list.list'(X16),X17) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X17)))))) ) | $spl1),
  inference(superposition,[],[f198,f457])).
fof(f3870,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl27 | $spl35)),
  inference(global_subsumption,[],[f3869,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3869,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl1 | $spl15 | $spl35)),
  inference(subsumption_resolution,[],[f846,f1166])).
fof(f846,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl1 | $spl15)),
  inference(superposition,[],[f685,f457])).
fof(f3868,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f847,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f847,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X18),'const.list.NIL_0') = s('type.list.list'(X18),X19) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19)))))) ) | $spl1),
  inference(superposition,[],[f188,f457])).
fof(f3867,plain,(
  $false | ($spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl27)),
  inference(global_subsumption,[],[f3866,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3866,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl19 | $spl27)),
  inference(forward_demodulation,[],[f914,f674])).
fof(f914,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl27)),
  inference(unit_resulting_resolution,[],[f898,f588])).
fof(f3865,plain,(
  $false | ($spl4 | $spl6 | $spl11 | $spl15 | $spl27)),
  inference(global_subsumption,[],[f3864,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3864,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl27)),
  inference(forward_demodulation,[],[f913,f473])).
fof(f913,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl27)),
  inference(unit_resulting_resolution,[],[f898,f472])).
fof(f3863,plain,(
  $false | ($spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f250,f252,f258,f257,f267,f276,f309,f345,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f898,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f1565,f1402,f2021,f900,f911])).
fof(f3862,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl27)),
  inference(global_subsumption,[],[f3861,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283,f1043,f1035])).
fof(f1035,plain,(
  ( ! [X21,X19,X20] : (s(X21,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) != s(X21,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s(fun(bool,X21),X19) = s(fun(bool,X21),X20) | s(bool,'T_0') = s(bool,sK31(X19,X20,X21,bool))) ) | $spl1),
  inference(superposition,[],[f232,f457])).
fof(f1043,plain,(
  ( ! [X21,X19,X20] : (s(bool,f(s(X19,sK31(X20,X21,bool,X19)))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'T_0') = s(bool,g(s(X19,sK31(X20,X21,bool,X19))))) ) | $spl1),
  inference(superposition,[],[f232,f457])).
fof(f1283,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f1273,f949])).
fof(f1273,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X14),X15) = s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK6(X15,X14)),s('type.list.list'(X14),sK5(X15,X14)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15)))))) ) | $spl1),
  inference(superposition,[],[f190,f457])).
fof(f1350,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(subsumption_resolution,[],[f1337,f995])).
fof(f1337,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X14),X15) = s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK8(X15,X14)),s('type.list.list'(X14),sK7(X15,X14)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f192,f457])).
fof(f1410,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),sK23(X20,X21,X19))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))) ) | $spl1),
  inference(superposition,[],[f246,f457])).
fof(f1573,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X21),sK25(X22,X20,X21))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X21),X22)))))) ) | $spl1),
  inference(superposition,[],[f249,f457])).
fof(f2276,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X19),X20) = s('type.list.list'(X19),'const.list.CONS_2'(s(X19,sK24(X20,X21,X19)),s('type.list.list'(X19),sK23(X20,X21,X19)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))) ) | $spl1),
  inference(superposition,[],[f245,f457])).
fof(f2367,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X21),X22) = s('type.list.list'(X21),'const.list.CONS_2'(s(X21,sK26(X22,X20,X21)),s('type.list.list'(X21),sK25(X22,X20,X21)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X21),X22)))))) ) | $spl1),
  inference(superposition,[],[f248,f457])).
fof(f2478,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f2455,f1702])).
fof(f2455,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X14),X15) = s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK12(X15,X14)),s('type.list.list'(X14),sK11(X15,X14)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15)))))) ) | $spl1),
  inference(superposition,[],[f202,f457])).
fof(f2622,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl1),
  inference(subsumption_resolution,[],[f2596,f1761])).
fof(f2596,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X14),X15) = s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK14(X15,X14)),s('type.list.list'(X14),sK13(X15,X14)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl1),
  inference(superposition,[],[f204,f457])).
fof(f2741,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),sK27(X20,X21,X19))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X21)))))) ) | $spl1),
  inference(superposition,[],[f226,f457])).
fof(f2809,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK29(X21,X19,X20))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X19))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21)))))) ) | $spl1),
  inference(superposition,[],[f229,f457])).
fof(f3055,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X39),X41) != s('type.list.list'(X39),'const.list.CONS_2'(s(X39,X42),s('type.list.list'(X39),X40))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),X41))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X38)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X38),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),X40)))))) ) | $spl1),
  inference(superposition,[],[f244,f457])).
fof(f3137,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X39),X41) != s('type.list.list'(X39),'const.list.CONS_2'(s(X39,X42),s('type.list.list'(X39),X40))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),X41)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X38),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),X40)))))) ) | $spl1),
  inference(superposition,[],[f247,f457])).
fof(f3222,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X19),X20) = s('type.list.list'(X19),'const.list.CONS_2'(s(X19,sK28(X20,X21,X19)),s('type.list.list'(X19),sK27(X20,X21,X19)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X21)))))) ) | $spl1),
  inference(superposition,[],[f227,f457])).
fof(f3380,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X20),X21) = s('type.list.list'(X20),'const.list.CONS_2'(s(X20,sK30(X21,X19,X20)),s('type.list.list'(X20),sK29(X21,X19,X20)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X19))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21)))))) ) | $spl1),
  inference(superposition,[],[f230,f457])).
fof(f3861,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl19 | $spl27)),
  inference(forward_demodulation,[],[f907,f473])).
fof(f907,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl19 | $spl27)),
  inference(unit_resulting_resolution,[],[f530,f898,f250])).
fof(f3860,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl27)),
  inference(global_subsumption,[],[f906,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283,f1043,f1035])).
fof(f906,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl27)),
  inference(unit_resulting_resolution,[],[f262,f898,f250])).
fof(f3859,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl27)),
  inference(global_subsumption,[],[f3858,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283,f1043,f1035])).
fof(f3858,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl19 | $spl27)),
  inference(forward_demodulation,[],[f902,f473])).
fof(f902,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl19 | $spl27)),
  inference(unit_resulting_resolution,[],[f530,f898,f250])).
fof(f3857,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl27)),
  inference(global_subsumption,[],[f901,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283,f1043,f1035])).
fof(f901,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl27)),
  inference(unit_resulting_resolution,[],[f262,f898,f250])).
fof(f3856,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f900,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283,f1043,f1035])).
fof(f3855,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl27)),
  inference(global_subsumption,[],[f3854,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283,f1043,f1035])).
fof(f3854,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl27)),
  inference(subsumption_resolution,[],[f925,f898])).
fof(f925,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl27)),
  inference(superposition,[],[f898,f588])).
fof(f3853,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283,f1043,f1035])).
fof(f3852,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283,f1043])).
fof(f3851,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f685,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3850,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl27)),
  inference(global_subsumption,[],[f1071,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f1071,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl27)),
  inference(unit_resulting_resolution,[],[f898,f754])).
fof(f3849,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19)),
  inference(global_subsumption,[],[f3848,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3848,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f1070,f473])).
fof(f1070,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl19)),
  inference(unit_resulting_resolution,[],[f530,f754])).
fof(f3847,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15)),
  inference(global_subsumption,[],[f1069,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3846,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1146,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3845,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1141,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f1141,plain,(
  ( ! [X9] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl15)),
  inference(duplicate_literal_removal,[],[f1078])).
fof(f1078,plain,(
  ( ! [X9] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl15)),
  inference(superposition,[],[f754,f457])).
fof(f3844,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15)),
  inference(global_subsumption,[],[f3843,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3842,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19)),
  inference(global_subsumption,[],[f3841,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3841,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f1139,f674])).
fof(f1139,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1080])).
fof(f1080,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl15),
  inference(superposition,[],[f754,f588])).
fof(f3840,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1134,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3839,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1129,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3838,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1128,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f1128,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl15)),
  inference(duplicate_literal_removal,[],[f1097])).
fof(f1097,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl15)),
  inference(superposition,[],[f457,f754])).
fof(f3837,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15)),
  inference(global_subsumption,[],[f3836,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3835,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19)),
  inference(global_subsumption,[],[f3834,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3834,plain,(
  ( ! [X12] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X12)) ) | ($spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f1126,f674])).
fof(f1126,plain,(
  ( ! [X12] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X12)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1099])).
fof(f1099,plain,(
  ( ! [X12] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl15),
  inference(superposition,[],[f588,f754])).
fof(f3833,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1100,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3832,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1101,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3831,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1103,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3830,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1106,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3829,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1107,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3828,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1108,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3827,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl35)),
  inference(global_subsumption,[],[f3826,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3826,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl19 | $spl35)),
  inference(forward_demodulation,[],[f1218,f674])).
fof(f1218,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f588])).
fof(f3825,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f3824,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3823,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl35)),
  inference(global_subsumption,[],[f1216,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f1216,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl1 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f457])).
fof(f3822,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl35)),
  inference(global_subsumption,[],[f1215,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3821,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27 | $spl35)),
  inference(global_subsumption,[],[f1211,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f1211,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl27 | $spl35)),
  inference(unit_resulting_resolution,[],[f898,f1166,f250])).
fof(f3820,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl35)),
  inference(global_subsumption,[],[f3819,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3819,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl19 | $spl35)),
  inference(forward_demodulation,[],[f1210,f473])).
fof(f1210,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl19 | $spl35)),
  inference(unit_resulting_resolution,[],[f530,f1166,f250])).
fof(f3818,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl35)),
  inference(global_subsumption,[],[f1209,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3817,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27 | $spl35)),
  inference(global_subsumption,[],[f1205,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f1205,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl27 | $spl35)),
  inference(unit_resulting_resolution,[],[f898,f1166,f250])).
fof(f3816,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl35)),
  inference(global_subsumption,[],[f3815,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3815,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl11 | $spl15 | $spl19 | $spl35)),
  inference(forward_demodulation,[],[f1204,f473])).
fof(f1204,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl19 | $spl35)),
  inference(unit_resulting_resolution,[],[f530,f1166,f250])).
fof(f3814,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl35)),
  inference(global_subsumption,[],[f1203,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3813,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl35)),
  inference(global_subsumption,[],[f1202,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3812,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f3811,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3810,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350,f1283])).
fof(f3809,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1289,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350])).
fof(f3808,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f1326,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350])).
fof(f3807,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410,f1350])).
fof(f3806,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1356,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410])).
fof(f3805,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f1397,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410])).
fof(f3804,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573,f1410])).
fof(f3803,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1413,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3802,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f772,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3801,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1424,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3800,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl27)),
  inference(global_subsumption,[],[f1423,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f1423,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl27)),
  inference(unit_resulting_resolution,[],[f898,f792])).
fof(f3799,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19)),
  inference(global_subsumption,[],[f3798,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3798,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f1422,f473])).
fof(f1422,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl19)),
  inference(unit_resulting_resolution,[],[f530,f792])).
fof(f3797,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15)),
  inference(global_subsumption,[],[f1421,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3796,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1513,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3795,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1508,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f1508,plain,(
  ( ! [X9] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl15)),
  inference(duplicate_literal_removal,[],[f1431])).
fof(f1431,plain,(
  ( ! [X9] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl15)),
  inference(superposition,[],[f792,f457])).
fof(f3794,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15)),
  inference(global_subsumption,[],[f3793,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3792,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19)),
  inference(global_subsumption,[],[f3791,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3791,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f1506,f674])).
fof(f1506,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1433])).
fof(f1433,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl15),
  inference(superposition,[],[f792,f588])).
fof(f3790,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1505,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3789,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1500,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3788,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1495,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3787,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1494,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f1494,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl15)),
  inference(duplicate_literal_removal,[],[f1453])).
fof(f1453,plain,(
  ( ! [X10] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | ($spl1 | $spl15)),
  inference(superposition,[],[f457,f792])).
fof(f3786,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15)),
  inference(global_subsumption,[],[f3785,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3784,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19)),
  inference(global_subsumption,[],[f3783,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3783,plain,(
  ( ! [X12] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X12)) ) | ($spl11 | $spl15 | $spl19)),
  inference(forward_demodulation,[],[f1492,f674])).
fof(f1492,plain,(
  ( ! [X12] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X12)) ) | $spl15),
  inference(duplicate_literal_removal,[],[f1455])).
fof(f1455,plain,(
  ( ! [X12] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl15),
  inference(superposition,[],[f588,f792])).
fof(f3782,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1491,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3781,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1457,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3780,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1458,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3779,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1530,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3778,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1462,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3777,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1534,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3776,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1468,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3775,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1469,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3774,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1471,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3773,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1472,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3772,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276,f1573])).
fof(f3771,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1576,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3770,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f1577,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3769,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1606,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3768,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl35)),
  inference(global_subsumption,[],[f3767,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3767,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15 | $spl19 | $spl35)),
  inference(forward_demodulation,[],[f1605,f674])).
fof(f1605,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f588])).
fof(f3766,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f3765,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3764,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1603,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f1603,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl1 | $spl15 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f457])).
fof(f3763,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1602,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3762,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1599,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3761,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl27 | $spl35)),
  inference(global_subsumption,[],[f1597,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f1597,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl27 | $spl35)),
  inference(unit_resulting_resolution,[],[f898,f1533,f250])).
fof(f3760,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl35)),
  inference(global_subsumption,[],[f3759,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3759,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15 | $spl19 | $spl35)),
  inference(forward_demodulation,[],[f1596,f473])).
fof(f1596,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl19 | $spl35)),
  inference(unit_resulting_resolution,[],[f530,f1533,f250])).
fof(f3758,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1595,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3757,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1592,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3756,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl27 | $spl35)),
  inference(global_subsumption,[],[f1590,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f1590,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl27 | $spl35)),
  inference(unit_resulting_resolution,[],[f898,f1533,f250])).
fof(f3755,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl35)),
  inference(global_subsumption,[],[f3754,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3754,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15 | $spl19 | $spl35)),
  inference(forward_demodulation,[],[f1589,f473])).
fof(f1589,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl19 | $spl35)),
  inference(unit_resulting_resolution,[],[f530,f1533,f250])).
fof(f3753,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1588,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3752,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f1587,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3751,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f3750,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3749,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f1939,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3748,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f1941,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3747,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f1994,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3746,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f1996,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3745,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f1347,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3744,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f1280,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3743,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2031,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3742,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2030,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3741,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl35)),
  inference(global_subsumption,[],[f2029,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3740,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2027,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3739,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2026,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3738,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl35)),
  inference(global_subsumption,[],[f2025,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3737,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27 | $spl28)),
  inference(global_subsumption,[],[f2023,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f2023,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl27 | $spl28)),
  inference(unit_resulting_resolution,[],[f1347,f898,f345])).
fof(f3736,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27 | $spl28)),
  inference(global_subsumption,[],[f2022,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f2022,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl27 | $spl28)),
  inference(unit_resulting_resolution,[],[f1280,f898,f345])).
fof(f3735,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27)),
  inference(global_subsumption,[],[f2021,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3734,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl28)),
  inference(global_subsumption,[],[f2087,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f2087,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl11 | $spl15 | $spl19 | $spl28)),
  inference(forward_demodulation,[],[f2019,f473])).
fof(f2019,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | ($spl19 | $spl28)),
  inference(unit_resulting_resolution,[],[f1347,f530,f345])).
fof(f3733,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl28)),
  inference(global_subsumption,[],[f2088,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f2088,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl11 | $spl15 | $spl19 | $spl28)),
  inference(forward_demodulation,[],[f2018,f473])).
fof(f2018,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | ($spl19 | $spl28)),
  inference(unit_resulting_resolution,[],[f1280,f530,f345])).
fof(f3732,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl28)),
  inference(global_subsumption,[],[f2015,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3731,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl28)),
  inference(global_subsumption,[],[f2014,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3730,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402,f2276])).
fof(f3729,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2279,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402])).
fof(f3728,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2280,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402])).
fof(f3727,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2281,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402])).
fof(f3726,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367,f1402])).
fof(f3725,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2297,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f3724,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2296,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f3723,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27 | $spl28)),
  inference(global_subsumption,[],[f2295,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f2295,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl27 | $spl28)),
  inference(unit_resulting_resolution,[],[f898,f2281,f345])).
fof(f3722,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl28)),
  inference(global_subsumption,[],[f2317,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f2317,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl11 | $spl15 | $spl19 | $spl28)),
  inference(forward_demodulation,[],[f2294,f473])).
fof(f2294,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) ) | ($spl19 | $spl28)),
  inference(unit_resulting_resolution,[],[f530,f2281,f345])).
fof(f3721,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl28)),
  inference(global_subsumption,[],[f2293,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f3720,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2299,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f3719,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2300,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f3718,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2306,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f2306,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) ) | ($spl1 | $spl28)),
  inference(superposition,[],[f2281,f457])).
fof(f3717,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28)),
  inference(global_subsumption,[],[f2309,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f3716,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28)),
  inference(global_subsumption,[],[f2310,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f3715,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565,f2367])).
fof(f3714,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2370,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565])).
fof(f3713,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2371,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565])).
fof(f3712,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2372,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565])).
fof(f3711,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478,f1565])).
fof(f3710,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2388,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f3709,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2387,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f3708,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27 | $spl28)),
  inference(global_subsumption,[],[f2386,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f2386,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl27 | $spl28)),
  inference(unit_resulting_resolution,[],[f898,f2372,f345])).
fof(f3707,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl28)),
  inference(global_subsumption,[],[f2408,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f2408,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) ) | ($spl11 | $spl15 | $spl19 | $spl28)),
  inference(forward_demodulation,[],[f2385,f473])).
fof(f2385,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) ) | ($spl19 | $spl28)),
  inference(unit_resulting_resolution,[],[f530,f2372,f345])).
fof(f3706,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl28)),
  inference(global_subsumption,[],[f2384,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f3705,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2390,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f3704,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2391,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f3703,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2397,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f2397,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0')))) ) | ($spl1 | $spl28)),
  inference(superposition,[],[f2372,f457])).
fof(f3702,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28)),
  inference(global_subsumption,[],[f2400,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f3701,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28)),
  inference(global_subsumption,[],[f2401,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f3700,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622,f2478])).
fof(f3699,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2484,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f3698,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2486,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f3697,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2545,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f3696,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2547,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f3695,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2460,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f3694,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2564,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f2564,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f2460,f345])).
fof(f3693,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2563,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f2563,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f2460,f345])).
fof(f3692,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27 | $spl28)),
  inference(global_subsumption,[],[f2562,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f2562,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl27 | $spl28)),
  inference(unit_resulting_resolution,[],[f898,f2460,f345])).
fof(f3691,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl28)),
  inference(global_subsumption,[],[f3690,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f3690,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | ($spl11 | $spl15 | $spl19 | $spl28)),
  inference(forward_demodulation,[],[f2561,f473])).
fof(f2561,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | ($spl19 | $spl28)),
  inference(unit_resulting_resolution,[],[f530,f2460,f345])).
fof(f3689,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl28)),
  inference(global_subsumption,[],[f2560,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f3688,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741,f2622])).
fof(f3687,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2628,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741])).
fof(f3686,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2630,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741])).
fof(f3685,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2707,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741])).
fof(f3684,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2709,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741])).
fof(f3683,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809,f2741])).
fof(f3682,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2744,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f3681,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2745,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f3680,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2601,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f3679,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2758,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f2758,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1166,f2601,f345])).
fof(f3678,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15 | $spl28 | $spl35)),
  inference(global_subsumption,[],[f2757,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f2757,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl15 | $spl28 | $spl35)),
  inference(unit_resulting_resolution,[],[f1533,f2601,f345])).
fof(f3677,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl27 | $spl28)),
  inference(global_subsumption,[],[f2756,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f2756,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl27 | $spl28)),
  inference(unit_resulting_resolution,[],[f898,f2601,f345])).
fof(f3676,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl28)),
  inference(global_subsumption,[],[f3675,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f3675,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl11 | $spl15 | $spl19 | $spl28)),
  inference(forward_demodulation,[],[f2755,f473])).
fof(f2755,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl19 | $spl28)),
  inference(unit_resulting_resolution,[],[f530,f2601,f345])).
fof(f3674,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl28)),
  inference(global_subsumption,[],[f2754,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f3673,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055,f2809])).
fof(f3672,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2812,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055])).
fof(f3671,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f2813,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055])).
fof(f3670,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2882,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055])).
fof(f3669,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2884,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055])).
fof(f3668,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2960,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055])).
fof(f3667,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f2962,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055])).
fof(f3666,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137,f3055])).
fof(f3665,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f3058,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137])).
fof(f3664,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f3059,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137])).
fof(f3663,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222,f3137])).
fof(f3662,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f3140,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222])).
fof(f3661,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f3141,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222])).
fof(f3660,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380,f3222])).
fof(f3659,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f3225,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380])).
fof(f3658,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f3226,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380])).
fof(f3657,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f3337,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380])).
fof(f3656,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl28)),
  inference(global_subsumption,[],[f3339,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380])).
fof(f3655,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627,f3380])).
fof(f3654,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f3383,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627])).
fof(f3653,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl15)),
  inference(global_subsumption,[],[f3384,f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627])).
fof(f3652,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f159,f158,f157,f160,f162,f163,f164,f183,f182,f187,f186,f189,f188,f191,f190,f193,f192,f195,f194,f196,f199,f198,f201,f200,f203,f202,f205,f204,f210,f209,f208,f212,f211,f216,f242,f214,f243,f217,f244,f245,f246,f247,f248,f249,f228,f227,f226,f231,f230,f229,f232,f241,f239,f236,f250,f252,f258,f257,f267,f276,f309,f345,f457,f466,f533,f580,f589,f603,f604,f695,f745,f782,f813,f857,f935,f937,f949,f954,f984,f995,f1000,f1030,f1031,f1032,f1038,f1039,f1040,f1195,f1279,f1281,f1282,f1322,f1343,f1346,f1348,f1349,f1390,f1394,f1399,f1400,f1401,f1402,f1414,f1415,f1416,f1578,f1579,f1562,f1563,f1564,f1565,f1580,f1636,f1653,f1658,f1661,f1672,f1687,f1702,f1707,f1746,f1761,f1766,f1809,f1810,f1815,f1816,f1817,f1882,f1883,f1889,f1890,f1891,f1933,f1937,f1945,f1946,f1918,f1919,f1988,f1992,f2000,f2001,f1973,f1974,f2002,f2003,f2004,f2005,f2006,f2010,f2011,f2009,f2101,f2102,f2103,f2104,f2105,f2109,f2110,f2108,f2185,f2186,f2187,f2188,f2181,f2190,f2192,f2184,f2247,f2248,f2249,f2250,f2243,f2252,f2254,f2246,f2257,f2258,f2282,f2283,f2284,f2285,f2286,f2269,f2270,f2287,f2352,f2353,f2373,f2374,f2375,f2376,f2377,f2378,f2463,f2466,f2469,f2472,f2475,f2476,f2477,f2539,f2543,f2551,f2514,f2515,f2554,f2555,f2556,f2557,f2558,f2521,f2559,f2523,f2604,f2607,f2610,f2613,f2616,f2619,f2620,f2621,f2701,f2705,f2713,f2717,f2676,f2677,f2719,f2720,f2721,f2722,f2723,f2683,f2724,f2685,f2725,f2726,f2727,f2728,f2729,f2730,f2731,f2732,f2746,f2747,f2735,f2748,f2814,f2815,f2795,f2796,f2797,f2798,f2799,f2800,f2801,f2802,f2803,f2816,f2876,f2880,f2888,f2892,f2849,f2850,f2894,f2895,f2853,f2854,f2896,f2897,f2898,f2858,f2899,f2860,f2954,f2958,f2966,f2970,f2927,f2928,f2972,f2973,f2931,f2932,f2974,f2975,f2976,f2936,f2977,f2938,f2992,f2993,f2994,f2995,f2996,f2997,f2998,f2999,f2988,f2989,f2990,f3005,f3020,f3021,f3022,f3023,f3024,f3025,f3026,f3027,f3016,f3017,f3018,f3030,f3033,f3045,f3071,f3072,f3073,f3079,f3089,f3090,f3102,f3101,f3100,f3127,f3153,f3154,f3155,f3161,f3228,f3229,f3230,f3231,f3232,f3233,f3234,f3235,f3236,f3214,f3215,f3216,f3237,f3268,f3269,f3331,f3335,f3343,f3347,f3298,f3349,f3300,f3350,f3351,f3352,f3304,f3353,f3306,f3354,f3355,f3357,f3311,f3359,f3314,f3361,f3362,f3363,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3404,f3403,f3402,f3422,f3450,f3451,f3580,f3581,f3625,f3626,f3638,f3639,f3627])).
fof(f3641,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl23)),
  inference(subsumption_resolution,[],[f3640,f162])).
fof(f3640,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4 | $spl6 | $spl11 | $spl15 | $spl19 | $spl23)),
  inference(forward_demodulation,[],[f3627,f882])).
fof(f882,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl1 | $spl11 | $spl15 | $spl19 | $spl23)),
  inference(forward_demodulation,[],[f816,f674])).
fof(f816,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl1 | $spl23)),
  inference(unit_resulting_resolution,[],[f684,f457])).
fof(f2260,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl45),
  inference(cnf_transformation,[],[f2260_D])).
fof(f2260_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f2261,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),sK0))))) ) | $spl46),
  inference(cnf_transformation,[],[f2261_D])).
fof(f2261_D,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),sK0))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f2258,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f2256,f276])).
fof(f2256,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),sK0))))) ) | $spl4),
  inference(superposition,[],[f2185,f276])).
fof(f1655,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl37),
  inference(cnf_transformation,[],[f1655_D])).
fof(f1655_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f1663,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl42),
  inference(cnf_transformation,[],[f1663_D])).
fof(f1663_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f1661,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(forward_demodulation,[],[f1651,f1348])).
fof(f1651,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK8(sK2,sK0)),s('type.list.list'(sK0),sK7(sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl4),
  inference(superposition,[],[f194,f1348])).
fof(f1660,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl40),
  inference(cnf_transformation,[],[f1660_D])).
fof(f1660_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1658,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(forward_demodulation,[],[f1650,f1281])).
fof(f1650,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK6(sK2,sK0)),s('type.list.list'(sK0),sK5(sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl4),
  inference(superposition,[],[f194,f1281])).
fof(f1657,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl38),
  inference(cnf_transformation,[],[f1657_D])).
fof(f1657_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f1653,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(forward_demodulation,[],[f1649,f239])).
fof(f1649,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl4),
  inference(superposition,[],[f194,f239])).
fof(f1164,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl32),
  inference(cnf_transformation,[],[f1164_D])).
fof(f1164_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1166,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl35),
  inference(cnf_transformation,[],[f1166_D])).
fof(f1166_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f1120,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl15),
  inference(equality_factoring,[],[f754])).
fof(f946,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))) ) | $spl28),
  inference(cnf_transformation,[],[f946_D])).
fof(f946_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f948,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | $spl30),
  inference(cnf_transformation,[],[f948_D])).
fof(f948_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f937,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))) )),
  inference(superposition,[],[f191,f276])).
fof(f896,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl24),
  inference(cnf_transformation,[],[f896_D])).
fof(f896_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f898,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl27),
  inference(cnf_transformation,[],[f898_D])).
fof(f898_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f857,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1),
  inference(equality_factoring,[],[f457])).
fof(f682,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl20),
  inference(cnf_transformation,[],[f682_D])).
fof(f682_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f684,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl23),
  inference(cnf_transformation,[],[f684_D])).
fof(f684_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f651,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl15),
  inference(equality_factoring,[],[f588])).
fof(f528,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f528_D])).
fof(f528_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f530,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(cnf_transformation,[],[f530_D])).
fof(f530_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f503,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(equality_factoring,[],[f472])).
fof(f269,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl12),
  inference(cnf_transformation,[],[f269_D])).
fof(f269_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f271,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl15),
  inference(cnf_transformation,[],[f271_D])).
fof(f271_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f267,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl4),
  inference(superposition,[],[f182,f239])).
fof(f260,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f260_D])).
fof(f260_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f262,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f262_D])).
fof(f262_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f257,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f164])).
fof(f235,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl0),
  inference(cnf_transformation,[],[f235_D])).
fof(f235_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f241,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(cnf_transformation,[],[f241_D])).
fof(f241_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f157,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f94])).
fof(f94,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f93])).
fof(f93,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(nnf_transformation,[],[f91])).
fof(f91,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <~> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_SUC|split|0')).
fof(f239,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl4),
  inference(cnf_transformation,[],[f239_D])).
fof(f239_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f158,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f95])).
fof(f236,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl1),
  inference(cnf_transformation,[],[f236_D])).
fof(f236_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f237,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3)))) ) | $spl2),
  inference(cnf_transformation,[],[f237_D])).
fof(f237_D,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f159,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) )),
  inference(cnf_transformation,[],[f95])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 188
% Passive clauses: 687
% Generated clauses: 7283
% Final active clauses: 88
% Final passive clauses: 110
% Input formulas: 34
% Initial clauses: 76
% 
% Duplicate literals: 239
% Trivial inequalities: 29
% Fw subsumption resolutions: 433
% Fw demodulations: 1548
% Bw demodulations: 199
% Condensations: 232
% Global subsumptions: 405
% 
% Simple tautologies: 137
% Equational tautologies: 98
% Forward subsumptions: 3036
% 
% Unit resulting resolution: 377
% Forward superposition: 1450
% Backward superposition: 1014
% Self superposition: 41
% Equality factoring: 44
% Equality resolution: 15
% 
% Split clauses: 22
% Split components: 44
% SAT solver clauses: 1555
% SAT solver unit clauses: 13
% SAT solver binary clauses: 306
% 
% Sat splits: 22
% Sat splitting refutations: 417
% 
% Memory used [KB]: 6908
% Time elapsed: 0.350 s
% ------------------------------
% ------------------------------
% Success in time 1.657 s
