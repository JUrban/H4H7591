Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.gcd
% (58054)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 616
% Passive clauses: 10309
% Generated clauses: 18419
% Final active clauses: 613
% Final passive clauses: 9323
% Input formulas: 45
% Initial clauses: 201
% 
% Duplicate literals: 289
% Trivial inequalities: 12
% Fw subsumption resolutions: 1419
% Fw demodulations: 131
% Bw demodulations: 3
% 
% Simple tautologies: 227
% Equational tautologies: 54
% Forward subsumptions: 5503
% 
% Binary resolution: 12298
% Factoring: 1094
% Forward superposition: 1752
% Backward superposition: 1017
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 317
% Split components: 640
% SAT solver clauses: 661
% SAT solver unit clauses: 21
% SAT solver binary clauses: 194
% 
% Sat splits: 317
% 
% TWLsolver clauses: 661
% TWLsolver calls for satisfiability: 413
% 
% Memory used [KB]: 10362
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f3796,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3777,f262,f474,f475,f477,f374,f519,f603,f604,f269,f481,f280,f483,f608,f611,f261,f472,f284,f485,f2910,f2937,f2903,f2905,f375,f518])).
fof(f518,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) ) | $spl62),
  inference(cnf_transformation,[],[f518_D])).
fof(f518_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f375,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f221])).
fof(f221,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X4] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK28])],[f220])).
fof(f220,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X4] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(rectify,[],[f219])).
fof(f219,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(flattening,[],[f218])).
fof(f218,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))))) & ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(nnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(ennf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6,X19,X20] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X19),s('type.num.num',X20)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X20),s('type.num.num',X6)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X20),s('type.num.num',X19)))) & ! [X21] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X21),s('type.num.num',X6)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X21),s('type.num.num',X19))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X21),s('type.num.num',X20)))))))),
  file('thm.gcd.IS_GCD_REF','thm.gcd.is_gcd_def')).
fof(f2905,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12)))) | $spl1419),
  inference(cnf_transformation,[],[f2905_D])).
fof(f2905_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12)))) <=> ~$spl1419),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1419])])).
fof(f2903,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12)))) | ($spl2 | $spl5 | $spl62 | $spl216 | $spl218)),
  inference(subsumption_resolution,[],[f2902,f474])).
fof(f2902,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12)))) | ($spl5 | $spl62 | $spl216 | $spl218)),
  inference(forward_demodulation,[],[f2901,f604])).
fof(f2901,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl62 | $spl218)),
  inference(subsumption_resolution,[],[f2883,f477])).
fof(f2883,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl62 | $spl218)),
  inference(duplicate_literal_removal,[],[f2881])).
fof(f2881,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl62 | $spl218)),
  inference(superposition,[],[f518,f611])).
fof(f2937,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12))) | $spl1426),
  inference(cnf_transformation,[],[f2937_D])).
fof(f2937_D,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12))) <=> ~$spl1426),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1426])])).
fof(f2910,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,sK12,sK12)),s('type.num.num',sK12))) | ($spl14 | $spl1419)),
  inference(resolution,[],[f2905,f485])).
fof(f485,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f485_D])).
fof(f485_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f284,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X10] : (s(bool,'F_0') = s(bool,X10) <=> ~p(s(bool,X10)))),
  file('thm.gcd.IS_GCD_REF','thm.bool.EQ_CLAUSES|split|2')).
fof(f472,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12)))) | $spl1),
  inference(cnf_transformation,[],[f472_D])).
fof(f472_D,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f261,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12))))),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f115])).
fof(f115,plain,(
  ? [X0] : ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X0),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f47])).
fof(f47,plain,(
  ~! [X0] : p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X6),s('type.num.num',X6))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X6),s('type.num.num',X6))))),
  file('thm.gcd.IS_GCD_REF','thm.gcd.IS_GCD_REF')).
fof(f611,plain,(
  s(bool,'F_0') = s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12))) | $spl218),
  inference(cnf_transformation,[],[f611_D])).
fof(f611_D,plain,(
  s(bool,'F_0') = s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12))) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f608,plain,(
  s(bool,'F_0') = s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12))) | ($spl1 | $spl14)),
  inference(resolution,[],[f485,f472])).
fof(f483,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f483_D])).
fof(f483_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f280,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.gcd.IS_GCD_REF','thm.bool.EQ_CLAUSES|split|1')).
fof(f481,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) | $spl6),
  inference(cnf_transformation,[],[f481_D])).
fof(f481_D,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f269,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X6))))),
  file('thm.gcd.IS_GCD_REF','thm.divides.DIVIDES_REFL')).
fof(f604,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | $spl216),
  inference(cnf_transformation,[],[f604_D])).
fof(f604_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f603,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | ($spl6 | $spl10)),
  inference(resolution,[],[f483,f481])).
fof(f519,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X1)))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) ) | $spl64),
  inference(cnf_transformation,[],[f519_D])).
fof(f519_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X1)))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f374,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f221])).
fof(f477,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f477_D])).
fof(f477_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f475,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f265,f262])).
fof(f265,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f18])).
fof(f18,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.gcd.IS_GCD_REF','thm.bool.NOT_CLAUSES|split|1')).
fof(f474,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f474_D])).
fof(f474_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f262,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.gcd.IS_GCD_REF',aHL_TRUTH)).
fof(f3777,plain,(
  $false | ($spl2 | $spl5 | $spl64 | $spl216 | $spl218 | $spl1426)),
  inference(subsumption_resolution,[],[f3776,f474])).
fof(f3776,plain,(
  ~p(s(bool,'T_0')) | ($spl5 | $spl64 | $spl216 | $spl218 | $spl1426)),
  inference(forward_demodulation,[],[f3775,f604])).
fof(f3775,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl64 | $spl218 | $spl1426)),
  inference(subsumption_resolution,[],[f3774,f477])).
fof(f3774,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl64 | $spl218 | $spl1426)),
  inference(forward_demodulation,[],[f3773,f611])).
fof(f3773,plain,(
  p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl64 | $spl1426)),
  inference(subsumption_resolution,[],[f3772,f477])).
fof(f3772,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl64 | $spl1426)),
  inference(duplicate_literal_removal,[],[f3706])).
fof(f3706,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK12),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl64 | $spl1426)),
  inference(superposition,[],[f519,f2937])).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 250
% Passive clauses: 971
% Generated clauses: 3515
% Final active clauses: 245
% Final passive clauses: 718
% Input formulas: 45
% Initial clauses: 201
% 
% Duplicate literals: 81
% Trivial inequalities: 6
% Fw subsumption resolutions: 229
% Fw demodulations: 50
% Bw demodulations: 8
% Condensations: 31
% Global subsumptions: 13
% 
% Simple tautologies: 187
% Equational tautologies: 4
% Forward subsumptions: 856
% 
% Binary resolution: 1514
% Factoring: 58
% Forward superposition: 181
% Backward superposition: 163
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 2
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 1293
% SAT solver unit clauses: 186
% SAT solver binary clauses: 61
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splits: 1
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1239
% TWLsolver calls for satisfiability: 1784
% 
% Memory used [KB]: 4349
% Time elapsed: 0.128 s
% ------------------------------
% ------------------------------
% Success in time 0.743 s
