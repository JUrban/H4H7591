Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (58338)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 967
% Passive clauses: 4753
% Generated clauses: 38994
% Final active clauses: 952
% Final passive clauses: 3487
% Input formulas: 261
% Initial clauses: 461
% 
% Duplicate literals: 205
% Trivial inequalities: 53
% Fw subsumption resolutions: 1403
% Fw demodulations: 6818
% Bw demodulations: 14
% 
% Simple tautologies: 198
% Equational tautologies: 35
% Forward subsumptions: 25293
% Fw demodulations to eq. taut.: 14
% 
% Binary resolution: 5894
% Factoring: 1209
% Forward superposition: 13559
% Backward superposition: 9170
% Self superposition: 52
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 306
% Split components: 614
% SAT solver clauses: 514
% SAT solver unit clauses: 20
% SAT solver binary clauses: 73
% 
% Sat splits: 306
% 
% TWLsolver clauses: 514
% TWLsolver calls for satisfiability: 435
% 
% Memory used [KB]: 19189
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (58346)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 494
% Passive clauses: 2624
% Generated clauses: 25960
% Final active clauses: 485
% Final passive clauses: 1902
% Input formulas: 261
% Initial clauses: 461
% 
% Duplicate literals: 94
% Trivial inequalities: 38
% Fw subsumption resolutions: 828
% Fw demodulations: 3742
% Bw demodulations: 233
% Condensations: 122
% Global subsumptions: 24
% 
% Simple tautologies: 212
% Equational tautologies: 10
% Forward subsumptions: 14958
% Fw demodulations to eq. taut.: 49
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 2218
% Factoring: 307
% Forward superposition: 9197
% Backward superposition: 5906
% Self superposition: 88
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 3646
% SAT solver unit clauses: 612
% SAT solver binary clauses: 132
% SAT solver learnt clauses: 48
% SAT solver learnt literals: 12
% 
% Sat splits: 9
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 3550
% TWLsolver calls for satisfiability: 2406
% 
% Memory used [KB]: 27121
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f184047,plain,(
  $false),
  inference(subsumption_resolution,[],[f184029,f182786])).
fof(f182786,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.list.list'(X28),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X29),s('type.list.list'(X28),X30))))) = s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X29),s('type.list.list'(X28),'const.rich_list.SEG_3'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X28),X30)))))) )),
  inference(superposition,[],[f1088,f13531])).
fof(f13531,plain,(
  ( ! [X22] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))))) )),
  inference(forward_demodulation,[],[f13530,f1385])).
fof(f1385,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f1384,f1379])).
fof(f1379,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f1378,f860])).
fof(f860,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.ZERO_0')),
  inference(cnf_transformation,[],[f104])).
fof(f104,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.ZERO_0')),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.ALT_ZERO')).
fof(f1378,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f914,f872])).
fof(f872,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f101])).
fof(f101,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.NUMERAL_DEF')).
fof(f914,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f311])).
fof(f311,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f220])).
fof(f220,axiom,(
  ! [X7] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.ADD|49|')).
fof(f1384,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f918,f1349])).
fof(f1349,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(backward_demodulation,[],[f872,f1345])).
fof(f1345,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f864,f860])).
fof(f864,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f113])).
fof(f113,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.ONE')).
fof(f918,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f315])).
fof(f315,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f103])).
fof(f103,axiom,(
  ! [X14] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.BIT|49|')).
fof(f13530,plain,(
  ( ! [X22] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))))) )),
  inference(subsumption_resolution,[],[f13487,f4831])).
fof(f4831,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4806,f925])).
fof(f925,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f321])).
fof(f321,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f243])).
fof(f243,axiom,(
  ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))))),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.LESS_|48|_CASES')).
fof(f4806,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))) )),
  inference(subsumption_resolution,[],[f4682,f1348])).
fof(f1348,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f867,f858])).
fof(f858,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f19])).
fof(f19,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.SEG_compute|split|1','thm.bool.TRUTH')).
fof(f867,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f712])).
fof(f712,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f265])).
fof(f265,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f140])).
fof(f140,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.rich_list.SEG_compute|split|1','thm.bool.NOT_CLAUSES|split|1')).
fof(f4682,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))) )),
  inference(superposition,[],[f1163,f1359])).
fof(f1359,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f900,f860])).
fof(f900,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f297])).
fof(f297,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f151])).
fof(f151,axiom,(
  ! [X14] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.rich_list.SEG_compute|split|1','thm.numeral.numeral_lte|split|1')).
fof(f1163,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f791])).
fof(f791,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(flattening,[],[f790])).
fof(f790,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f582])).
fof(f582,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(rectify,[],[f229])).
fof(f229,axiom,(
  ! [X7,X14] : (s('type.num.num',X7) = s('type.num.num',X14) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X14)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X7))))))),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.EQ_LESS_EQ')).
fof(f13487,plain,(
  ( ! [X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))))) )),
  inference(superposition,[],[f954,f1385])).
fof(f954,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f729])).
fof(f729,plain,(
  ! [X0] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))) & (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f342])).
fof(f342,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f218])).
fof(f218,axiom,(
  ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) <=> s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X7))))))),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.SUC_PRE')).
fof(f1088,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))) )),
  inference(cnf_transformation,[],[f500])).
fof(f500,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f499])).
fof(f499,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X9))))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9)))))),
  file('thm.rich_list.SEG_compute|split|1','thm.rich_list.SEG|split|1')).
fof(f184029,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),sK13))))) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),sK13)))))),
  inference(backward_demodulation,[],[f182802,f1351])).
fof(f1351,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),sK13))))) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),sK13)))))),
  inference(forward_demodulation,[],[f1350,f1349])).
fof(f1350,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),sK13))))) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),sK13)))))),
  inference(backward_demodulation,[],[f872,f1346])).
fof(f1346,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),sK13))))) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),sK13)))))),
  inference(backward_demodulation,[],[f1345,f1344])).
fof(f1344,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),sK13))))) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),sK13)))))),
  inference(backward_demodulation,[],[f860,f857])).
fof(f857,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),sK13))))) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),sK13)))))),
  inference(cnf_transformation,[],[f711])).
fof(f711,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),sK13))))) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK12),s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK10),sK13)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13])],[f627])).
fof(f627,plain,(
  ? [X0,X1,X2,X3] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9))))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9))))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X9)))))),
  file('thm.rich_list.SEG_compute|split|1','thm.rich_list.SEG_compute|split|1')).
fof(f182802,plain,(
  ( ! [X73] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X73))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X73))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f8563,f13531])).
fof(f8563,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1118,f1379])).
fof(f1118,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f542])).
fof(f542,plain,(
  ! [X0,X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))),
  inference(rectify,[],[f222])).
fof(f222,axiom,(
  ! [X39,X40] : s('type.num.num',X39) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X40))),s('type.num.num',X40)))),
  file('thm.rich_list.SEG_compute|split|1','thm.arithmetic.ADD_SUB')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1094
% Passive clauses: 8166
% Generated clauses: 183146
% Final active clauses: 958
% Final passive clauses: 5473
% Input formulas: 261
% Initial clauses: 461
% Discarded non-redundant clauses: 761
% 
% Duplicate literals: 8
% Trivial inequalities: 54
% Fw subsumption resolutions: 731
% Fw demodulations: 75605
% Bw demodulations: 623
% Condensations: 20
% 
% Simple tautologies: 108
% Equational tautologies: 41
% Forward subsumptions: 71761
% Fw demodulations to eq. taut.: 25939
% Bw demodulations to eq. taut.: 130
% 
% Unit resulting resolution: 47907
% Factoring: 2
% Forward superposition: 38043
% Backward superposition: 19504
% Self superposition: 159
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 10
% Split components: 20
% SAT solver clauses: 8188
% SAT solver unit clauses: 3744
% SAT solver binary clauses: 3524
% 
% Sat splits: 10
% 
% Memory used [KB]: 89806
% Time elapsed: 5.304 s
% ------------------------------
% ------------------------------
% Success in time 6.64 s
