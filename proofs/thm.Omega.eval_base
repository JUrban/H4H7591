Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 44
dis+11_7_41 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f15462,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f15394,f2945,f2953,f2951,f2949,f2947,f2944,f2952,f14228,f1919,f2950])).
fof(f2950,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f2950_D])).
fof(f2950_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1919,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.Omega.eval_base',aHL_TRUTH)).
fof(f14228,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f14101,f2950])).
fof(f14101,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(backward_demodulation,[],[f1969,f2949])).
fof(f1969,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f551])).
fof(f551,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))),
  file('thm.Omega.eval_base','thm.Omega.evallower_def|split|0')).
fof(f2952,plain,(
  p(s(bool,sK17)) | $spl6),
  inference(cnf_transformation,[],[f2952_D])).
fof(f2952_D,plain,(
  p(s(bool,sK17)) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f2944,plain,(
  p(s(bool,sK17))),
  inference(duplicate_literal_removal,[],[f1917])).
fof(f1917,plain,(
  p(s(bool,sK17)) | p(s(bool,sK17))),
  inference(cnf_transformation,[],[f1484])).
fof(f1484,plain,(
  (p(s(bool,sK17)) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'T_0')) & p(s(bool,sK17)))) & (~p(s(bool,sK17)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | ~p(s(bool,sK17)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f1483])).
fof(f1483,plain,(
  ? [X0,X1] : ((p(s(bool,X1)) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'T_0')) & p(s(bool,X1)))) & (~p(s(bool,X1)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | ~p(s(bool,X1))))),
  inference(flattening,[],[f1482])).
fof(f1482,plain,(
  ? [X0,X1] : ((p(s(bool,X1)) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'T_0')) & p(s(bool,X1)))) & (~p(s(bool,X1)) | (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | ~p(s(bool,X1)))))),
  inference(nnf_transformation,[],[f1235])).
fof(f1235,plain,(
  ? [X0,X1] : (p(s(bool,X1)) <~> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'T_0')) & p(s(bool,X1))))),
  inference(ennf_transformation,[],[f518])).
fof(f518,plain,(
  ~! [X0,X1] : (p(s(bool,X1)) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'T_0')) & p(s(bool,X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,X7)) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'T_0')) & p(s(bool,X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,X7)) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & p(s(bool,'T_0')) & p(s(bool,X7))))),
  file('thm.Omega.eval_base','thm.Omega.eval_base')).
fof(f2947,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | $spl1),
  inference(cnf_transformation,[],[f2947_D])).
fof(f2947_D,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f2949,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | $spl3),
  inference(cnf_transformation,[],[f2949_D])).
fof(f2949_D,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f2951,plain,(
  ~p(s(bool,'T_0')) | $spl5),
  inference(cnf_transformation,[],[f2951_D])).
fof(f2951_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f2953,plain,(
  ~p(s(bool,sK17)) | $spl7),
  inference(cnf_transformation,[],[f2953_D])).
fof(f2953_D,plain,(
  ~p(s(bool,sK17)) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f2945,plain,(
  ~p(s(bool,sK17)) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))),
  inference(duplicate_literal_removal,[],[f1918])).
fof(f1918,plain,(
  ~p(s(bool,sK17)) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK16),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ~p(s(bool,sK17))),
  inference(cnf_transformation,[],[f1484])).
fof(f15394,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f15262,f2950])).
fof(f15262,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(backward_demodulation,[],[f1974,f2947])).
fof(f1974,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f556])).
fof(f556,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))),
  file('thm.Omega.eval_base','thm.Omega.evalupper_def|split|0')).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 726
% Passive clauses: 2289
% Generated clauses: 13500
% Final active clauses: 678
% Final passive clauses: 1340
% Input formulas: 516
% Initial clauses: 1014
% 
% Duplicate literals: 105
% Trivial inequalities: 35
% Fw subsumption resolutions: 854
% Fw demodulations: 1519
% Bw demodulations: 43
% 
% Simple tautologies: 237
% Equational tautologies: 16
% Forward subsumptions: 8295
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 2824
% Factoring: 560
% Forward superposition: 3377
% Backward superposition: 3045
% Self superposition: 18
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 175
% Split components: 354
% SAT solver clauses: 313
% SAT solver unit clauses: 26
% SAT solver binary clauses: 87
% SAT solver learnt clauses: 1
% 
% Sat splits: 175
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 312
% TWLsolver calls for satisfiability: 188
% 
% Memory used [KB]: 6652
% Time elapsed: 0.218 s
% ------------------------------
% ------------------------------
% Success in time 0.25 s
