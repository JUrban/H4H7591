Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (127147)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 870
% Passive clauses: 6326
% Generated clauses: 22635
% Final active clauses: 853
% Final passive clauses: 5150
% Input formulas: 133
% Initial clauses: 385
% 
% Duplicate literals: 209
% Trivial inequalities: 118
% Fw subsumption resolutions: 1071
% Fw demodulations: 2419
% Bw demodulations: 15
% 
% Simple tautologies: 281
% Equational tautologies: 37
% Forward subsumptions: 12037
% 
% Binary resolution: 6492
% Factoring: 1046
% Forward superposition: 5088
% Backward superposition: 5749
% Self superposition: 40
% Equality factoring: 2
% Equality resolution: 23
% 
% Split clauses: 247
% Split components: 498
% SAT solver clauses: 422
% SAT solver unit clauses: 13
% SAT solver binary clauses: 101
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 247
% 
% TWLsolver clauses: 421
% TWLsolver calls for satisfiability: 353
% 
% Memory used [KB]: 15223
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f17884,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f17883,f611,f1025,f1272,f1275,f609,f1023,f641,f1043,f17838,f17839,f1026,f1028,f742,f1095,f1289,f1294,f610,f1021,f645,f1045])).
fof(f1045,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl32),
  inference(cnf_transformation,[],[f1045_D])).
fof(f1045_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f645,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f431])).
fof(f431,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f165])).
fof(f165,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X23] : (s(bool,'F_0') = s(bool,X23) <=> ~p(s(bool,X23)))),
  file('thm.rich_list.EL_MEM','thm.bool.EQ_CLAUSES|split|3')).
fof(f1021,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15)))))) | $spl1),
  inference(cnf_transformation,[],[f1021_D])).
fof(f1021_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f610,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15))))))),
  inference(cnf_transformation,[],[f425])).
fof(f425,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) & ~p(s(bool,'const.bool.IN_2'(s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15])],[f350])).
fof(f350,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) & ~p(s(bool,'const.bool.IN_2'(s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => p(s(bool,'const.bool.IN_2'(s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => p(s(bool,'const.bool.IN_2'(s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => p(s(bool,'const.bool.IN_2'(s(X6,'const.list.EL_2'(s('type.num.num',X7),s('type.list.list'(X6),X8))),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => p(s(bool,'const.bool.IN_2'(s(X6,'const.list.EL_2'(s('type.num.num',X7),s('type.list.list'(X6),X8))),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8)))))))),
  file('thm.rich_list.EL_MEM','thm.rich_list.EL_MEM')).
fof(f1294,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15))))) | $spl432),
  inference(cnf_transformation,[],[f1294_D])).
fof(f1294_D,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15))))) <=> ~$spl432),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl432])])).
fof(f1289,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15))))) | ($spl1 | $spl32)),
  inference(resolution,[],[f1045,f1021])).
fof(f1095,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) ) | $spl108),
  inference(cnf_transformation,[],[f1095_D])).
fof(f1095_D,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f742,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f488])).
fof(f488,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.list.list'(X0),X1))))) & (! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))) | p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK28])],[f487])).
fof(f487,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | ? [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))))) & (! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))) | p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f486])).
fof(f486,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))))) & (! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))) | p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f249])).
fof(f249,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) <=> ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f248])).
fof(f248,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) <=> ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X8,X9] : (p(s(bool,'const.bool.IN_2'(s(X6,X9),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8)))))) <=> ? [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s(X6,X9) = s(X6,'const.list.EL_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.EL_MEM','thm.list.MEM_EL')).
fof(f1028,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f1028_D])).
fof(f1028_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f1026,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f614,f611])).
fof(f614,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f426])).
fof(f426,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f137])).
fof(f137,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f57])).
fof(f57,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.rich_list.EL_MEM','thm.bool.NOT_CLAUSES|split|1')).
fof(f17839,plain,(
  ( ! [X0] : (s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl6368),
  inference(cnf_transformation,[],[f17839_D])).
fof(f17839_D,plain,(
  ( ! [X0] : (s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) <=> ~$spl6368),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6368])])).
fof(f17838,plain,(
  ( ! [X0] : (s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | ($spl7 | $spl108 | $spl432)),
  inference(subsumption_resolution,[],[f17725,f1028])).
fof(f17725,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(sK13,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | ($spl108 | $spl432)),
  inference(superposition,[],[f1095,f1294])).
fof(f1043,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(cnf_transformation,[],[f1043_D])).
fof(f1043_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f641,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f429])).
fof(f429,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X23] : (s(bool,'T_0') = s(bool,X23) <=> p(s(bool,X23)))),
  file('thm.rich_list.EL_MEM','thm.bool.EQ_CLAUSES|split|0')).
fof(f1023,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | $spl2),
  inference(cnf_transformation,[],[f1023_D])).
fof(f1023_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f609,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))),
  inference(cnf_transformation,[],[f425])).
fof(f1275,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))) | $spl428),
  inference(cnf_transformation,[],[f1275_D])).
fof(f1275_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))) <=> ~$spl428),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl428])])).
fof(f1272,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))) | ($spl2 | $spl28)),
  inference(resolution,[],[f1043,f1023])).
fof(f1025,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f1025_D])).
fof(f1025_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f611,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.EL_MEM',aHL_TRUTH)).
fof(f17883,plain,(
  $false | ($spl4 | $spl428 | $spl6368)),
  inference(subsumption_resolution,[],[f17882,f1025])).
fof(f17882,plain,(
  ~p(s(bool,'T_0')) | ($spl428 | $spl6368)),
  inference(forward_demodulation,[],[f17858,f1275])).
fof(f17858,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | $spl6368),
  inference(equality_resolution,[],[f17839])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 501
% Passive clauses: 3860
% Generated clauses: 19256
% Final active clauses: 421
% Final passive clauses: 2179
% Input formulas: 133
% Initial clauses: 385
% 
% Duplicate literals: 106
% Trivial inequalities: 23
% Fw subsumption resolutions: 1157
% Fw demodulations: 2476
% Bw demodulations: 1195
% Condensations: 101
% Global subsumptions: 22
% 
% Simple tautologies: 423
% Equational tautologies: 11
% Forward subsumptions: 6603
% Bw demodulations to eq. taut.: 22
% 
% Binary resolution: 2880
% Factoring: 109
% Forward superposition: 3791
% Backward superposition: 1734
% Self superposition: 36
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 413
% Split components: 833
% SAT solver clauses: 4072
% SAT solver unit clauses: 379
% SAT solver binary clauses: 112
% SAT solver learnt clauses: 46
% SAT solver learnt literals: 12
% 
% Sat splits: 413
% Sat splitting refutations: 16
% 
% TWLsolver clauses: 3982
% TWLsolver calls for satisfiability: 2877
% 
% Memory used [KB]: 17526
% Time elapsed: 0.626 s
% ------------------------------
% ------------------------------
% Success in time 1.25 s
