Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% (63102)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 67
% Passive clauses: 1880
% Generated clauses: 13157
% Final active clauses: 65
% Final passive clauses: 1755
% Input formulas: 12
% Initial clauses: 13
% 
% Duplicate literals: 916
% Trivial inequalities: 181
% Fw subsumption resolutions: 1776
% Fw demodulations: 482
% 
% Simple tautologies: 285
% Equational tautologies: 99
% Forward subsumptions: 5631
% 
% Binary resolution: 51
% Forward superposition: 5810
% Backward superposition: 3171
% Self superposition: 358
% Equality factoring: 283
% Equality resolution: 14
% 
% Split clauses: 732
% Split components: 1476
% SAT solver clauses: 1960
% SAT solver unit clauses: 276
% SAT solver binary clauses: 573
% 
% Sat splits: 732
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1952
% TWLsolver calls for satisfiability: 69
% 
% Memory used [KB]: 6524
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f1153,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1151,f36,f51,f653,f654,f43,f57,f45,f59,f47,f61,f582,f589,f44,f58,f48,f62])).
fof(f62,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) ) | $spl18),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f48,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X11,X6,X7] : ! [X9,X10,X12] : s(X11,'const.combin.C_3'(s(fun(X6,fun(X7,X11)),X9),s(X7,X10),s(X6,X12))) = s(X11,happ(s(fun(X7,X11),happ(s(fun(X6,fun(X7,X11)),X9),s(X6,X12))),s(X7,X10)))),
  file('thm.list.SINGL_APPLY_MAP','thm.combin.C_THM')).
fof(f58,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) ) | $spl10),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f44,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7,X6] : ! [X15,X16] : s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X15),s('type.list.list'(X6),X16))) = s('type.list.list'(X7),happ(s(fun('type.list.list'(X6),'type.list.list'(X7)),happ(s(fun(fun(X6,X7),fun('type.list.list'(X6),'type.list.list'(X7))),'const.list.MAP_0'),s(fun(X6,X7),X15))),s('type.list.list'(X6),X16)))),
  file('thm.list.SINGL_APPLY_MAP','ARITY_0_2_const.list.MAP')).
fof(f589,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.combin.C_3'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7),s(fun(X5,X4),X6)))) ) | $spl86),
  inference(cnf_transformation,[],[f589_D])).
fof(f589_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.combin.C_3'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7),s(fun(X5,X4),X6)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f582,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.combin.C_3'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7),s(fun(X5,X4),X6)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f58,f62])).
fof(f61,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))) ) | $spl16),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f47,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X11,X7,X6] : ! [X15,X16,X17] : s(X11,'const.combin.C_3'(s(fun(X6,fun(X7,X11)),X15),s(X7,X16),s(X6,X17))) = s(X11,happ(s(fun(X6,X11),'const.combin.C_2'(s(fun(X6,fun(X7,X11)),X15),s(X7,X16))),s(X6,X17)))),
  file('thm.list.SINGL_APPLY_MAP','ARITY_2_3_const.combin.C')).
fof(f59,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))) ) | $spl12),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f45,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : ! [X13,X14] : s('type.list.list'(X6),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X7,X6)),X13),s('type.list.list'(X7),X14))) = s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X7,X6)),X13),s(fun(fun(X7,X6),'type.list.list'(X6)),'const.combin.C_2'(s(fun(fun(X7,X6),fun('type.list.list'(X7),'type.list.list'(X6))),'const.list.MAP_0'),s('type.list.list'(X7),X14)))))),
  file('thm.list.SINGL_APPLY_MAP','thm.list.LIST_APPLY_def')).
fof(f57,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))) ) | $spl8),
  inference(cnf_transformation,[],[f57_D])).
fof(f57_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f43,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7] : ! [X10,X9] : s('type.list.list'(X6),happ(s(fun(X7,'type.list.list'(X6)),X9),s(X7,X10))) = s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.NIL_0'))),s(fun(X7,'type.list.list'(X6)),X9)))),
  file('thm.list.SINGL_APPLY_MAP','thm.list.SINGL_LIST_APPLY_L')).
fof(f654,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7)))) ) | $spl92),
  inference(cnf_transformation,[],[f654_D])).
fof(f654_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f653,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7)))) ) | ($spl8 | $spl12 | $spl16 | $spl86)),
  inference(forward_demodulation,[],[f652,f589])).
fof(f652,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.combin.C_3'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7),s(fun(X5,X4),X6))) = s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7)))) ) | ($spl8 | $spl12 | $spl16)),
  inference(forward_demodulation,[],[f644,f61])).
fof(f644,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),happ(s(fun(fun(X5,X4),'type.list.list'(X4)),'const.combin.C_2'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7))),s(fun(X5,X4),X6)))) ) | ($spl8 | $spl12)),
  inference(superposition,[],[f59,f57])).
fof(f51,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(sK1),sK2))) != s('type.list.list'(sK0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(sK1,sK0)),'const.list.CONS_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(fun(sK1,sK0)),'const.list.NIL_0'))),s('type.list.list'(sK1),sK2))) | $spl1),
  inference(cnf_transformation,[],[f51_D])).
fof(f51_D,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(sK1),sK2))) != s('type.list.list'(sK0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(sK1,sK0)),'const.list.CONS_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(fun(sK1,sK0)),'const.list.NIL_0'))),s('type.list.list'(sK1),sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f36,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(sK1),sK2))) != s('type.list.list'(sK0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(sK1,sK0)),'const.list.CONS_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(fun(sK1,sK0)),'const.list.NIL_0'))),s('type.list.list'(sK1),sK2)))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(sK1),sK2))) != s('type.list.list'(sK0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(sK1,sK0)),'const.list.CONS_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(fun(sK1,sK0)),'const.list.NIL_0'))),s('type.list.list'(sK1),sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f31])).
fof(f31,plain,(
  ? [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) != s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),'const.list.CONS_2'(s(fun(X1,X0),X3),s('type.list.list'(fun(X1,X0)),'const.list.NIL_0'))),s('type.list.list'(X1),X2)))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) = s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),'const.list.CONS_2'(s(fun(X1,X0),X3),s('type.list.list'(fun(X1,X0)),'const.list.NIL_0'))),s('type.list.list'(X1),X2)))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) = s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),'const.list.CONS_2'(s(fun(X1,X0),X3),s('type.list.list'(fun(X1,X0)),'const.list.NIL_0'))),s('type.list.list'(X1),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),X8))) = s('type.list.list'(X6),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X7,X6)),'const.list.CONS_2'(s(fun(X7,X6),X9),s('type.list.list'(fun(X7,X6)),'const.list.NIL_0'))),s('type.list.list'(X7),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),X8))) = s('type.list.list'(X6),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X7,X6)),'const.list.CONS_2'(s(fun(X7,X6),X9),s('type.list.list'(fun(X7,X6)),'const.list.NIL_0'))),s('type.list.list'(X7),X8)))),
  file('thm.list.SINGL_APPLY_MAP','thm.list.SINGL_APPLY_MAP')).
fof(f1151,plain,(
  $false | ($spl1 | $spl92)),
  inference(trivial_inequality_removal,[],[f1137])).
fof(f1137,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(sK1),sK2))) != s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK3),s('type.list.list'(sK1),sK2))) | ($spl1 | $spl92)),
  inference(superposition,[],[f51,f654])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 32
% Passive clauses: 84
% Generated clauses: 1103
% Final active clauses: 29
% Final passive clauses: 48
% Input formulas: 12
% Initial clauses: 13
% 
% Duplicate literals: 54
% Trivial inequalities: 4
% Fw subsumption resolutions: 23
% Fw demodulations: 16
% Bw demodulations: 3
% Condensations: 78
% 
% Simple tautologies: 16
% Equational tautologies: 15
% Forward subsumptions: 632
% 
% Binary resolution: 6
% Forward superposition: 424
% Backward superposition: 296
% Self superposition: 69
% Equality factoring: 26
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 192
% SAT solver unit clauses: 22
% SAT solver binary clauses: 15
% SAT solver learnt clauses: 1
% 
% Sat splits: 9
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 191
% TWLsolver calls for satisfiability: 44
% 
% Memory used [KB]: 2302
% Time elapsed: 0.043 s
% ------------------------------
% ------------------------------
% Success in time 0.656 s
