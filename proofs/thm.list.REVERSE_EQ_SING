Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% (107936)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 232
% Passive clauses: 3947
% Generated clauses: 18882
% Final active clauses: 169
% Final passive clauses: 2879
% Input formulas: 69
% Initial clauses: 138
% 
% Duplicate literals: 473
% Trivial inequalities: 216
% Fw subsumption resolutions: 1709
% Fw demodulations: 2779
% Bw demodulations: 34
% 
% Simple tautologies: 262
% Equational tautologies: 59
% Forward subsumptions: 9030
% Fw demodulations to eq. taut.: 9
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 349
% Factoring: 1
% Forward superposition: 7340
% Backward superposition: 5169
% Self superposition: 205
% Equality factoring: 104
% Equality resolution: 64
% 
% Split clauses: 291
% Split components: 593
% SAT solver clauses: 628
% SAT solver unit clauses: 21
% SAT solver binary clauses: 111
% 
% Sat splits: 291
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 624
% TWLsolver calls for satisfiability: 105
% 
% Memory used [KB]: 13560
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% (107946)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 173
% Passive clauses: 1657
% Generated clauses: 12356
% Final active clauses: 140
% Final passive clauses: 1439
% Input formulas: 69
% Initial clauses: 138
% 
% Duplicate literals: 207
% Trivial inequalities: 148
% Fw subsumption resolutions: 264
% Fw demodulations: 1733
% Bw demodulations: 51
% Condensations: 563
% Global subsumptions: 13
% 
% Simple tautologies: 121
% Equational tautologies: 41
% Forward subsumptions: 5080
% Fw demodulations to eq. taut.: 9
% 
% Binary resolution: 66
% Factoring: 1
% Forward superposition: 4437
% Backward superposition: 2818
% Self superposition: 131
% Equality factoring: 66
% Equality resolution: 31
% 
% Split clauses: 27
% Split components: 54
% SAT solver clauses: 2519
% SAT solver unit clauses: 163
% SAT solver binary clauses: 89
% SAT solver learnt clauses: 26
% 
% Sat splits: 27
% Sat splitting refutations: 17
% 
% TWLsolver clauses: 2467
% TWLsolver calls for satisfiability: 604
% 
% Memory used [KB]: 20468
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f15383,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f254,f402,f400,f253,f401,f399,f1999,f2002,f2001,f2000,f2248,f2246,f2249,f2251,f9989,f15265,f15270,f15275,f15280,f15285,f15290,f15312,f15314,f15353,f15361])).
fof(f15361,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15360,f10049])).
fof(f10049,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f400,f401])).
fof(f15360,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f14989,f401])).
fof(f14989,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(superposition,[],[f311,f11146])).
fof(f11146,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),X0))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X0)))) ) | $spl2),
  inference(forward_demodulation,[],[f11145,f310])).
fof(f310,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7)))))),
  file('thm.list.REVERSE_EQ_SING','thm.list.REVERSE_REVERSE')).
fof(f11145,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X0))) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),X0)))))))) ) | $spl2),
  inference(forward_demodulation,[],[f11033,f2500])).
fof(f2500,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),'const.list.APPEND_2'(s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),X4))),s('type.list.list'(X2),X3))) = s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),'const.list.APPEND_2'(s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),X3))),s('type.list.list'(X2),X4)))))) )),
  inference(superposition,[],[f325,f310])).
fof(f325,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X16,X15] : s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X16),s('type.list.list'(X6),X15))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X15))),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X16)))))),
  file('thm.list.REVERSE_EQ_SING','thm.list.REVERSE_APPEND')).
fof(f11033,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),X0))))))) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X0))),s('type.list.list'(sK0),sK1)))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f10131,f334])).
fof(f334,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f237])).
fof(f237,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) & (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X16,X15] : (s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X15))) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X16))) <=> s('type.list.list'(X6),X15) = s('type.list.list'(X6),X16))),
  file('thm.list.REVERSE_EQ_SING','thm.list.REVERSE_|49||49|')).
fof(f10131,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),X0))))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X0))),s('type.list.list'(sK0),sK1)))) ) | $spl2),
  inference(superposition,[],[f326,f401])).
fof(f326,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f125])).
fof(f125,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9,X10] : s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X10))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.NIL_0')))))),
  file('thm.list.REVERSE_EQ_SING','thm.list.REVERSE_DEF|split|1')).
fof(f311,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.REVERSE_EQ_SING','thm.list.APPEND_NIL')).
fof(f15353,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15352,f10049])).
fof(f15352,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f14946,f401])).
fof(f14946,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(superposition,[],[f11146,f311])).
fof(f15314,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15313,f10049])).
fof(f15313,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f14842,f401])).
fof(f14842,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(unit_resulting_resolution,[],[f341,f11146,f350])).
fof(f350,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f243])).
fof(f243,plain,(
  ! [X0,X1,X2,X3] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) | (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))) & (((s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2,X3] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) | ((s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))))) & (((s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0,X1,X2,X3] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) <=> ((s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))))),
  inference(flattening,[],[f153])).
fof(f153,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) <=> ((s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X15,X16,X8] : (s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X16),s('type.list.list'(X6),X15))) <=> ((s('type.list.list'(X6),X16) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))) & s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X15)) | (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X16) & s('type.list.list'(X6),X15) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))))))),
  file('thm.list.REVERSE_EQ_SING','thm.list.APPEND_EQ_SING')).
fof(f341,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f139])).
fof(f139,plain,(
  ! [X0] : ! [X1,X2] : ~s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X6] : ! [X43,X44] : ~s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X44),s('type.list.list'(X6),X43)))),
  file('thm.list.REVERSE_EQ_SING','thm.list.list_distinct')).
fof(f15312,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15311,f10049])).
fof(f15311,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f14844,f401])).
fof(f14844,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(unit_resulting_resolution,[],[f10136,f11146,f348])).
fof(f348,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) )),
  inference(cnf_transformation,[],[f243])).
fof(f10136,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(superposition,[],[f645,f401])).
fof(f645,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f341,f318])).
fof(f318,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X0,X1] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X7] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.list.REVERSE_EQ_SING','thm.list.REVERSE_EQ_NIL')).
fof(f15290,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15289,f10049])).
fof(f15289,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f15288,f401])).
fof(f15288,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(forward_demodulation,[],[f15287,f312])).
fof(f312,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X7)))),
  file('thm.list.REVERSE_EQ_SING','thm.list.APPEND|split|0')).
fof(f15287,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f15286,f264])).
fof(f264,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.REVERSE_EQ_SING','thm.list.REVERSE_DEF|split|0')).
fof(f15286,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f14854,f311])).
fof(f14854,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl2),
  inference(unit_resulting_resolution,[],[f264,f11146,f353])).
fof(f353,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f243])).
fof(f15285,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15284,f10049])).
fof(f15284,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f15283,f401])).
fof(f15283,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(forward_demodulation,[],[f15282,f312])).
fof(f15282,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f15281,f359])).
fof(f359,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f157])).
fof(f157,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X6,X11] : ! [X13] : s('type.list.list'(X11),'const.list.NIL_0') = s('type.list.list'(X11),'const.list.MAP_2'(s(fun(X6,X11),X13),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.REVERSE_EQ_SING','thm.list.MAP|split|0')).
fof(f15281,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(X0,sK0),X1),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl2),
  inference(forward_demodulation,[],[f14855,f311])).
fof(f14855,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(X0,sK0),X1),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f359,f11146,f353])).
fof(f15280,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15279,f10049])).
fof(f15279,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f15278,f401])).
fof(f15278,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(forward_demodulation,[],[f15277,f312])).
fof(f15277,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f15276,f310])).
fof(f15276,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f14856,f311])).
fof(f14856,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl2),
  inference(unit_resulting_resolution,[],[f310,f11146,f353])).
fof(f15275,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15274,f10049])).
fof(f15274,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f15273,f401])).
fof(f15273,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(forward_demodulation,[],[f15272,f312])).
fof(f15272,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f15271,f311])).
fof(f15271,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f14857,f311])).
fof(f14857,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl2),
  inference(unit_resulting_resolution,[],[f311,f11146,f353])).
fof(f15270,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15269,f10049])).
fof(f15269,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f15268,f401])).
fof(f15268,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(forward_demodulation,[],[f15267,f312])).
fof(f15267,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f15266,f311])).
fof(f15266,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f14858,f311])).
fof(f14858,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl2),
  inference(unit_resulting_resolution,[],[f312,f11146,f353])).
fof(f15265,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f15264,f10049])).
fof(f15264,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f15263,f401])).
fof(f15263,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(forward_demodulation,[],[f15262,f312])).
fof(f15262,plain,(
  s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(forward_demodulation,[],[f15261,f322])).
fof(f322,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X20,X13] : s(X6,X20) = s(X6,'const.ind_type.FCONS_3'(s(X6,X20),s(fun('type.num.num',X6),X13),s('type.num.num','const.num.|48|_0')))),
  file('thm.list.REVERSE_EQ_SING','thm.ind_type.FCONS|split|0')).
fof(f15261,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),'const.list.NIL_0'),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl2),
  inference(forward_demodulation,[],[f14859,f311])).
fof(f14859,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),'const.list.NIL_0'),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f322,f11146,f353])).
fof(f9989,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f9988,f6253])).
fof(f6253,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),X0)))))) ) | ($spl0 | $spl3)),
  inference(superposition,[],[f5622,f310])).
fof(f5622,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X0)))))))) ) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f5601,f4593])).
fof(f4593,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X1))))) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK1)))))) ) | $spl0),
  inference(superposition,[],[f2826,f325])).
fof(f2826,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),X0))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X0)))) ) | $spl0),
  inference(forward_demodulation,[],[f2768,f312])).
fof(f2768,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X0))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X0)))))) ) | $spl0),
  inference(superposition,[],[f344,f399])).
fof(f344,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f145])).
fof(f145,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X16,X15,X9] : s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X16),s('type.list.list'(X6),X15))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X16))),s('type.list.list'(X6),X15)))),
  file('thm.list.REVERSE_EQ_SING','thm.list.APPEND|split|1')).
fof(f5601,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK1)))))))) ) | ($spl0 | $spl3)),
  inference(unit_resulting_resolution,[],[f5274,f333])).
fof(f333,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) )),
  inference(cnf_transformation,[],[f237])).
fof(f5274,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK1)))))) ) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f5253,f310])).
fof(f5253,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK1)))))) ) | ($spl0 | $spl3)),
  inference(unit_resulting_resolution,[],[f5211,f333])).
fof(f5211,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK1)))) ) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f5126,f399])).
fof(f5126,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK1)))) ) | ($spl0 | $spl3)),
  inference(unit_resulting_resolution,[],[f2313,f402,f351])).
fof(f351,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f243])).
fof(f2313,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | $spl0),
  inference(forward_demodulation,[],[f2312,f264])).
fof(f2312,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl0),
  inference(forward_demodulation,[],[f2311,f310])).
fof(f2311,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl0),
  inference(unit_resulting_resolution,[],[f2293,f333])).
fof(f2293,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl0),
  inference(forward_demodulation,[],[f2262,f310])).
fof(f2262,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))))) | $spl0),
  inference(superposition,[],[f712,f399])).
fof(f712,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))))) )),
  inference(unit_resulting_resolution,[],[f645,f318])).
fof(f9988,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl0),
  inference(forward_demodulation,[],[f9738,f312])).
fof(f9738,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl0),
  inference(superposition,[],[f2627,f264])).
fof(f2627,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),X0))))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X0))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl0),
  inference(superposition,[],[f326,f399])).
fof(f2251,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl10),
  inference(cnf_transformation,[],[f2251_D])).
fof(f2251_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2249,plain,(
  ( ! [X4] : (s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))) ) | $spl8),
  inference(cnf_transformation,[],[f2249_D])).
fof(f2249_D,plain,(
  ( ! [X4] : (s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f2246,plain,(
  ( ! [X10] : (s('type.num.num',X10) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl2),
  inference(superposition,[],[f1640,f558])).
fof(f558,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f354,f263])).
fof(f263,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X40] : s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0')))),
  file('thm.list.REVERSE_EQ_SING','thm.arithmetic.ADD_|48|')).
fof(f354,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X40,X21] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X40))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X21)))),
  file('thm.list.REVERSE_EQ_SING','thm.arithmetic.ADD_SYM')).
fof(f1640,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))) | s('type.num.num',X13) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f1639,f1160])).
fof(f1160,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(forward_demodulation,[],[f1146,f262])).
fof(f262,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.REVERSE_EQ_SING','thm.list.LENGTH|split|0')).
fof(f1146,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl2),
  inference(superposition,[],[f323,f401])).
fof(f323,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X6] : ! [X9,X10] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10)))))),
  file('thm.list.REVERSE_EQ_SING','thm.list.LENGTH|split|1')).
fof(f1639,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))) | s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))) ) | $spl2),
  inference(forward_demodulation,[],[f1589,f616])).
fof(f616,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f606,f604])).
fof(f604,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f265,f354])).
fof(f265,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X40] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X40))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.list.REVERSE_EQ_SING','thm.arithmetic.ADD|49|')).
fof(f606,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f265,f558])).
fof(f1589,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12))) | s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))) ) | $spl2),
  inference(superposition,[],[f372,f1160])).
fof(f372,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f252])).
fof(f252,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(nnf_transformation,[],[f173])).
fof(f173,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X40,X21,X41] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X41))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) <=> s('type.num.num',X21) = s('type.num.num',X40))),
  file('thm.list.REVERSE_EQ_SING','thm.arithmetic.EQ_MONO_ADD_EQ')).
fof(f2248,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))) ) | $spl2),
  inference(forward_demodulation,[],[f2247,f262])).
fof(f2247,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f2209,f558])).
fof(f2209,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')))) ) | $spl2),
  inference(superposition,[],[f1640,f262])).
fof(f2000,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'(X6),bool),X7),s('type.list.list'(X6),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X6),bool),X7),s('type.list.list'(X6),sK3(X7,X6))))) ) | $spl4),
  inference(cnf_transformation,[],[f2000_D])).
fof(f2000_D,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'(X6),bool),X7),s('type.list.list'(X6),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X6),bool),X7),s('type.list.list'(X6),sK3(X7,X6))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f2001,plain,(
  ( ! [X8] : (p(s(bool,X8))) ) | $spl6),
  inference(cnf_transformation,[],[f2001_D])).
fof(f2001_D,plain,(
  ( ! [X8] : (p(s(bool,X8))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f2002,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X11)) | ~p(s(bool,happ(s(fun('type.list.list'(X9),bool),X10),s('type.list.list'(X9),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X9),bool),X10),s('type.list.list'(X9),sK3(X10,X9))))) )),
  inference(subsumption_resolution,[],[f1995,f270])).
fof(f270,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.list.REVERSE_EQ_SING','thm.bool.EQ_CLAUSES|split|1')).
fof(f1995,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X11)) | ~p(s(bool,happ(s(fun('type.list.list'(X9),bool),X10),s('type.list.list'(X9),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X9),bool),X10),s('type.list.list'(X9),sK3(X10,X9))))) )),
  inference(superposition,[],[f392,f416])).
fof(f416,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f266,f266])).
fof(f266,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.list.REVERSE_EQ_SING',aHL_BOOL_CASES)).
fof(f392,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK3(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(condensation,[],[f314])).
fof(f314,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK3(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f228])).
fof(f228,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK3(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X1,X0)),s('type.list.list'(X0),sK3(X1,X0)))))))) | ! [X2] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4])],[f227])).
fof(f227,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X3] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X3)))) & ? [X4] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))) | ! [X2] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f187])).
fof(f187,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) & ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))))) | ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f186])).
fof(f186,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) & ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) | ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(ennf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1] : ((p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) & ! [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) => ! [X3] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) => ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0] : ! [X1] : ((p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) & ! [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) => ! [X3] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) => ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X19] : ((p(s(bool,happ(s(fun('type.list.list'(X6),bool),X19),s('type.list.list'(X6),'const.list.NIL_0')))) & ! [X10] : (p(s(bool,happ(s(fun('type.list.list'(X6),bool),X19),s('type.list.list'(X6),X10)))) => ! [X9] : p(s(bool,happ(s(fun('type.list.list'(X6),bool),X19),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10)))))))) => ! [X7] : p(s(bool,happ(s(fun('type.list.list'(X6),bool),X19),s('type.list.list'(X6),X7)))))),
  file('thm.list.REVERSE_EQ_SING','thm.list.list_INDUCT')).
fof(f1999,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X8)) | ~p(s(bool,happ(s(fun('type.list.list'(X6),bool),X7),s('type.list.list'(X6),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X6),bool),X7),s('type.list.list'(X6),sK3(X7,X6))))) )),
  inference(subsumption_resolution,[],[f1994,f270])).
fof(f1994,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X8)) | ~p(s(bool,happ(s(fun('type.list.list'(X6),bool),X7),s('type.list.list'(X6),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(X6),bool),X7),s('type.list.list'(X6),sK3(X7,X6)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f392,f416])).
fof(f399,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl0),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f401,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl2),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f253,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))) & (s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f198])).
fof(f198,plain,(
  ? [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))) & (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(nnf_transformation,[],[f178])).
fof(f178,plain,(
  ? [X0,X1,X2] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) <~> s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))) <=> s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))) <=> s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))))),
  file('thm.list.REVERSE_EQ_SING','thm.list.REVERSE_EQ_SING')).
fof(f400,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl1),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f402,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl3),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f254,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f199])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 205
% Passive clauses: 1896
% Generated clauses: 15104
% Final active clauses: 124
% Final passive clauses: 1248
% Input formulas: 69
% Initial clauses: 138
% 
% Duplicate literals: 51
% Trivial inequalities: 17
% Fw subsumption resolutions: 115
% Fw demodulations: 5044
% Bw demodulations: 178
% Condensations: 130
% 
% Simple tautologies: 78
% Equational tautologies: 62
% Forward subsumptions: 7254
% Fw demodulations to eq. taut.: 440
% Bw demodulations to eq. taut.: 3
% 
% Unit resulting resolution: 2969
% Factoring: 1
% Forward superposition: 4128
% Backward superposition: 2202
% Self superposition: 80
% Equality factoring: 26
% Equality resolution: 15
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 1921
% SAT solver unit clauses: 119
% SAT solver binary clauses: 1205
% 
% Sat splits: 6
% Sat splitting refutations: 11
% 
% Memory used [KB]: 23027
% Time elapsed: 0.701 s
% ------------------------------
% ------------------------------
% Success in time 2.015 s
