Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (76177)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 812
% Passive clauses: 6976
% Generated clauses: 26976
% Final active clauses: 794
% Final passive clauses: 5876
% Input formulas: 69
% Initial clauses: 232
% 
% Duplicate literals: 359
% Trivial inequalities: 167
% Fw subsumption resolutions: 2383
% Fw demodulations: 3641
% Bw demodulations: 4
% 
% Simple tautologies: 372
% Equational tautologies: 35
% Forward subsumptions: 11704
% 
% Binary resolution: 5281
% Factoring: 405
% Forward superposition: 4554
% Backward superposition: 9556
% Self superposition: 65
% Equality factoring: 26
% Equality resolution: 20
% 
% Split clauses: 1380
% Split components: 2783
% SAT solver clauses: 1625
% SAT solver unit clauses: 13
% SAT solver binary clauses: 112
% 
% Sat splits: 1380
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1624
% TWLsolver calls for satisfiability: 300
% 
% Memory used [KB]: 14711
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f5128,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5118,f744,f746,f342,f597,f466,f653,f4782,f4802,f341,f598,f397,f624])).
fof(f624,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK25(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK26(X1,X0)))),s(X0,sK27(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK26(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK25(X1,X0)))),s(X0,sK27(X1,X0)))))) | s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))) ) | $spl34),
  inference(cnf_transformation,[],[f624_D])).
fof(f624_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK25(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK26(X1,X0)))),s(X0,sK27(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK26(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK25(X1,X0)))),s(X0,sK27(X1,X0)))))) | s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f397,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))) | s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK25(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK26(X1,X0)))),s(X0,sK27(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK26(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK25(X1,X0)))),s(X0,sK27(X1,X0))))))) )),
  inference(cnf_transformation,[],[f264])).
fof(f264,plain,(
  ! [X0,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK25(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK26(X1,X0)))),s(X0,sK27(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK26(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK25(X1,X0)))),s(X0,sK27(X1,X0)))))) | ! [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25,sK26,sK27])],[f263])).
fof(f263,plain,(
  ! [X0,X1] : (? [X4,X5,X6] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X4))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,X6))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X4))),s(X0,X6))))) | ! [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f195])).
fof(f195,plain,(
  ! [X0,X1] : (? [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) | ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(ennf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) => ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) => ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X8] : (! [X9,X10,X11] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X9))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X10))),s(X6,X11))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X10))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X9))),s(X6,X11))))) => ! [X12,X14] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X8),s(X6,X12),s('type.list.list'(X6),X14))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X8),s(X6,X12),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X14))))))),
  file('thm.rich_list.FOLDR_MAP_REVERSE','thm.rich_list.rich_list_|49|97_prove_ltb')).
fof(f598,plain,(
  ( ! [X6,X8,X7] : (s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X6))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X7))),s(sK12,X8))))) = s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X7))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X6))),s(sK12,X8)))))) ) | $spl2),
  inference(cnf_transformation,[],[f598_D])).
fof(f598_D,plain,(
  ( ! [X6,X8,X7] : (s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X6))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X7))),s(sK12,X8))))) = s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X7))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X6))),s(sK12,X8)))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f341,plain,(
  ( ! [X6,X8,X7] : (s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X6))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X7))),s(sK12,X8))))) = s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X7))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X6))),s(sK12,X8)))))) )),
  inference(cnf_transformation,[],[f239])).
fof(f239,plain,(
  ! [X6,X7,X8] : s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X6))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X7))),s(sK12,X8))))) = s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X7))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X6))),s(sK12,X8))))) & s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) != s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f238])).
fof(f238,plain,(
  ? [X0,X1,X2] : (! [X6,X7,X8] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X6))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X7))),s(X0,X8))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X7))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X6))),s(X0,X8))))) & ? [X3,X4,X5] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),X5))))) != s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X5))))))))),
  inference(rectify,[],[f180])).
fof(f180,plain,(
  ? [X0,X1,X2] : (! [X3,X4,X5] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X4))),s(X0,X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X4))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,X5))))) & ? [X6,X7,X8] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X2),s(X0,X6),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X8))))) != s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X2),s(X0,X6),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X8))))))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (! [X3,X4,X5] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X4))),s(X0,X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X4))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,X5))))) => ! [X6,X7,X8] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X2),s(X0,X6),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X8))))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X2),s(X0,X6),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X8))))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : ! [X2] : (! [X3,X4,X5] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X4))),s(X0,X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X4))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,X5))))) => ! [X6,X7,X8] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X2),s(X0,X6),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X8))))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X2),s(X0,X6),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X8))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : (! [X9,X10,X11] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X9))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X10))),s(X6,X11))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X10))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X9))),s(X6,X11))))) => ! [X12,X13,X14] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X8),s(X6,X12),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X13),s('type.list.list'(X7),X14))))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X8),s(X6,X12),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X13),s('type.list.list'(X7),'const.list.REVERSE_1'(s('type.list.list'(X7),X14))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : (! [X9,X10,X11] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X9))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X10))),s(X6,X11))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X10))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X8),s(X6,X9))),s(X6,X11))))) => ! [X12,X13,X14] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X8),s(X6,X12),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X13),s('type.list.list'(X7),X14))))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X8),s(X6,X12),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X13),s('type.list.list'(X7),'const.list.REVERSE_1'(s('type.list.list'(X7),X14))))))))),
  file('thm.rich_list.FOLDR_MAP_REVERSE','thm.rich_list.FOLDR_MAP_REVERSE')).
fof(f4802,plain,(
  ( ! [X4,X3] : (s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X3),s('type.list.list'(sK12),X4))) = s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X3),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),X4)))))) ) | $spl2012),
  inference(cnf_transformation,[],[f4802_D])).
fof(f4802_D,plain,(
  ( ! [X4,X3] : (s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X3),s('type.list.list'(sK12),X4))) = s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X3),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),X4)))))) ) <=> ~$spl2012),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2012])])).
fof(f4782,plain,(
  ( ! [X4,X3] : (s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X3),s('type.list.list'(sK12),X4))) = s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X3),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),X4)))))) ) | ($spl2 | $spl34)),
  inference(trivial_inequality_removal,[],[f4779])).
fof(f4779,plain,(
  ( ! [X4,X3] : (s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK25(sK14,sK12)))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK26(sK14,sK12)))),s(sK12,sK27(sK14,sK12)))))) != s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK25(sK14,sK12)))),s(sK12,happ(s(fun(sK12,sK12),happ(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK26(sK14,sK12)))),s(sK12,sK27(sK14,sK12)))))) | s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X3),s('type.list.list'(sK12),X4))) = s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,X3),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),X4)))))) ) | ($spl2 | $spl34)),
  inference(superposition,[],[f624,f598])).
fof(f653,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))) ) | $spl82),
  inference(cnf_transformation,[],[f653_D])).
fof(f653_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f466,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))) )),
  inference(cnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7,X6] : ! [X8,X14] : s('type.list.list'(X7),'const.list.REVERSE_1'(s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X8),s('type.list.list'(X6),X14))))) = s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X8),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X14)))))),
  file('thm.rich_list.FOLDR_MAP_REVERSE','thm.rich_list.MAP_REVERSE')).
fof(f597,plain,(
  s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) != s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))))))) | $spl1),
  inference(cnf_transformation,[],[f597_D])).
fof(f597_D,plain,(
  s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) != s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f342,plain,(
  s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) != s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))))))),
  inference(cnf_transformation,[],[f239])).
fof(f746,plain,(
  s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) != s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))))) | $spl247),
  inference(cnf_transformation,[],[f746_D])).
fof(f746_D,plain,(
  s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) != s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))))) <=> ~$spl247),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl247])])).
fof(f744,plain,(
  s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) != s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))))) | ($spl1 | $spl82)),
  inference(forward_demodulation,[],[f597,f653])).
fof(f5118,plain,(
  $false | ($spl247 | $spl2012)),
  inference(trivial_inequality_removal,[],[f5094])).
fof(f5094,plain,(
  s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) != s(sK12,'const.list.FOLDR_3'(s(fun(sK12,fun(sK12,sK12)),sK14),s(sK12,sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17))))) | ($spl247 | $spl2012)),
  inference(superposition,[],[f746,f4802])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 281
% Passive clauses: 1071
% Generated clauses: 4739
% Final active clauses: 277
% Final passive clauses: 783
% Input formulas: 69
% Initial clauses: 232
% 
% Duplicate literals: 75
% Trivial inequalities: 9
% Fw subsumption resolutions: 178
% Fw demodulations: 441
% Bw demodulations: 11
% Condensations: 39
% Global subsumptions: 13
% 
% Simple tautologies: 207
% Equational tautologies: 6
% Forward subsumptions: 1513
% 
% Binary resolution: 1183
% Factoring: 57
% Forward superposition: 813
% Backward superposition: 565
% Self superposition: 42
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 1414
% SAT solver unit clauses: 221
% SAT solver binary clauses: 75
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 12
% 
% Sat splits: 12
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1361
% TWLsolver calls for satisfiability: 1820
% 
% Memory used [KB]: 8955
% Time elapsed: 0.214 s
% ------------------------------
% ------------------------------
% Success in time 0.83 s
