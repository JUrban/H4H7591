Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (78804)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 301
% Passive clauses: 4566
% Generated clauses: 33307
% Final active clauses: 250
% Final passive clauses: 3946
% Input formulas: 69
% Initial clauses: 104
% 
% Duplicate literals: 382
% Trivial inequalities: 402
% Fw subsumption resolutions: 1737
% Fw demodulations: 5115
% Bw demodulations: 44
% 
% Simple tautologies: 301
% Equational tautologies: 45
% Forward subsumptions: 20381
% Fw demodulations to eq. taut.: 41
% 
% Binary resolution: 752
% Factoring: 1
% Forward superposition: 15392
% Backward superposition: 9139
% Self superposition: 148
% Equality factoring: 66
% Equality resolution: 31
% 
% Split clauses: 280
% Split components: 569
% SAT solver clauses: 583
% SAT solver unit clauses: 18
% SAT solver binary clauses: 152
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 280
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 571
% TWLsolver calls for satisfiability: 171
% 
% Memory used [KB]: 22259
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f12200,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f12199,f400,f201,f311,f309,f261,f346,f7482,f7589,f300,f381,f402,f404,f200,f310,f308])).
fof(f308,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f308_D])).
fof(f308_D,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f310,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl2),
  inference(cnf_transformation,[],[f310_D])).
fof(f310_D,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f200,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f165])).
fof(f165,plain,(
  (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | s('type.num.num',sK0) = s('type.num.num',sK1)) & (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | s('type.num.num',sK0) != s('type.num.num',sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f164])).
fof(f164,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X1))) | s('type.num.num',X0) != s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f150])).
fof(f150,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X1))) <~> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.arithmetic.MULT_MONO_EQ','thm.arithmetic.MULT_MONO_EQ')).
fof(f404,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | $spl134),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f402,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ($spl0 | $spl48)),
  inference(forward_demodulation,[],[f401,f346])).
fof(f401,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ($spl0 | $spl48)),
  inference(forward_demodulation,[],[f308,f346])).
fof(f381,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num',X1) = s('type.num.num',X2)) ) | $spl118),
  inference(cnf_transformation,[],[f381_D])).
fof(f381_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num',X1) = s('type.num.num',X2)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f300,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num',X2) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num',X1) = s('type.num.num',X2)) & (s('type.num.num',X1) != s('type.num.num',X2) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))),
  inference(nnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) <=> s('type.num.num',X1) = s('type.num.num',X2))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X14,X6,X8] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))) <=> s('type.num.num',X6) = s('type.num.num',X8))),
  file('thm.arithmetic.MULT_MONO_EQ','thm.arithmetic.MULT_SUC_EQ')).
fof(f7589,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | s('type.num.num',sK1) = s('type.num.num',X20)) ) | $spl1428),
  inference(cnf_transformation,[],[f7589_D])).
fof(f7589_D,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | s('type.num.num',sK1) = s('type.num.num',X20)) ) <=> ~$spl1428),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1428])])).
fof(f7482,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | s('type.num.num',sK1) = s('type.num.num',X20)) ) | ($spl118 | $spl134)),
  inference(superposition,[],[f381,f404])).
fof(f346,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl48),
  inference(cnf_transformation,[],[f346_D])).
fof(f346_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f261,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6,X8] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6)))),
  file('thm.arithmetic.MULT_MONO_EQ','thm.arithmetic.MULT_SYM')).
fof(f309,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f309_D])).
fof(f309_D,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f311,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | $spl3),
  inference(cnf_transformation,[],[f311_D])).
fof(f311_D,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f201,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f165])).
fof(f400,plain,(
  $false | ($spl1 | $spl2 | $spl48)),
  inference(subsumption_resolution,[],[f399,f346])).
fof(f399,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ($spl1 | $spl2 | $spl48)),
  inference(forward_demodulation,[],[f398,f310])).
fof(f398,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ($spl1 | $spl48)),
  inference(forward_demodulation,[],[f309,f346])).
fof(f12199,plain,(
  $false | ($spl3 | $spl1428)),
  inference(subsumption_resolution,[],[f12168,f311])).
fof(f12168,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl1428),
  inference(equality_resolution,[],[f7589])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 140
% Passive clauses: 1006
% Generated clauses: 11976
% Final active clauses: 121
% Final passive clauses: 775
% Input formulas: 69
% Initial clauses: 104
% 
% Duplicate literals: 41
% Trivial inequalities: 43
% Fw subsumption resolutions: 149
% Fw demodulations: 3067
% Bw demodulations: 100
% Condensations: 29
% Global subsumptions: 9
% 
% Simple tautologies: 57
% Equational tautologies: 17
% Forward subsumptions: 5945
% Fw demodulations to eq. taut.: 35
% 
% Binary resolution: 121
% Factoring: 2
% Forward superposition: 3695
% Backward superposition: 3450
% Self superposition: 70
% Equality factoring: 12
% Equality resolution: 22
% 
% Split clauses: 17
% Split components: 34
% SAT solver clauses: 1646
% SAT solver unit clauses: 143
% SAT solver binary clauses: 51
% SAT solver learnt clauses: 21
% SAT solver learnt literals: 2
% 
% Sat splits: 17
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 1607
% TWLsolver calls for satisfiability: 439
% 
% Memory used [KB]: 14072
% Time elapsed: 0.406 s
% ------------------------------
% ------------------------------
% Success in time 1.02 s
