Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% (101241)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 154
% Passive clauses: 2958
% Generated clauses: 27006
% Final active clauses: 122
% Final passive clauses: 2624
% Input formulas: 15
% Initial clauses: 16
% 
% Duplicate literals: 1727
% Trivial inequalities: 284
% Fw subsumption resolutions: 2815
% Fw demodulations: 3787
% Bw demodulations: 24
% 
% Simple tautologies: 386
% Equational tautologies: 30
% Forward subsumptions: 13276
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 26
% Forward superposition: 9468
% Backward superposition: 8241
% Self superposition: 218
% Equality factoring: 88
% Equality resolution: 14
% 
% Split clauses: 836
% Split components: 1679
% SAT solver clauses: 1605
% SAT solver unit clauses: 15
% SAT solver binary clauses: 204
% 
% Sat splits: 836
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 1603
% TWLsolver calls for satisfiability: 106
% 
% Memory used [KB]: 13304
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f1192,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1170,f45,f63,f49,f68,f57,f74,f58,f75,f1142,f1099,f1133,f1127,f701,f714,f52,f71,f53,f72,f56,f73,f702,f715,f51,f70,f793,f849,f60,f77])).
fof(f77,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) ) | $spl24),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f60,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7,X6] : ! [X8,X14,X9] : s(X7,happ(s(fun(X6,X7),X9),s(X6,X8))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))),s(X7,X14),s(fun(X6,X7),X9)))),
  file('thm.option.option_case_compute','thm.option.option_case_def|split|1')).
fof(f849,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X2,happ(s(fun(X0,X2),X3),s(X0,sK5(X1,X0)))) = s(X2,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(X2,X4),s(fun(X0,X2),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | $spl126),
  inference(cnf_transformation,[],[f849_D])).
fof(f849_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X2,happ(s(fun(X0,X2),X3),s(X0,sK5(X1,X0)))) = s(X2,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(X2,X4),s(fun(X0,X2),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f793,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X2,happ(s(fun(X0,X2),X3),s(X0,sK5(X1,X0)))) = s(X2,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(X2,X4),s(fun(X0,X2),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | ($spl14 | $spl24)),
  inference(superposition,[],[f77,f72])).
fof(f70,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) ) | $spl10),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f51,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X8] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8)))))),
  file('thm.option.option_case_compute','thm.option.IS_SOME_DEF|split|0')).
fof(f715,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X2),X3))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)) ) | $spl124),
  inference(cnf_transformation,[],[f715_D])).
fof(f715_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X2),X3))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f702,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X2),X3))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)) ) | ($spl10 | $spl14)),
  inference(superposition,[],[f70,f72])).
fof(f73,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) ) | $spl16),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f56,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X11,X12] : s(X6,X11) = s(X6,'const.bool.COND_3'(s(bool,'T_0'),s(X6,X11),s(X6,X12)))),
  file('thm.option.option_case_compute','thm.bool.COND_CLAUSES|split|0')).
fof(f72,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK5(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | $spl14),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK5(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f53,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK5(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK5(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f26])).
fof(f26,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X13] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X13) | ? [X8] : s('type.option.option'(X6),X13) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))))),
  file('thm.option.option_case_compute','thm.option.option_nchotomy')).
fof(f71,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) ) | $spl12),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f52,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X8] : s(X6,X8) = s(X6,'const.option.THE_1'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8)))))),
  file('thm.option.option_case_compute','thm.option.THE_DEF')).
fof(f714,plain,(
  ( ! [X0,X1] : (s(X0,sK5(X1,X0)) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),X1))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | $spl122),
  inference(cnf_transformation,[],[f714_D])).
fof(f714_D,plain,(
  ( ! [X0,X1] : (s(X0,sK5(X1,X0)) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),X1))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f701,plain,(
  ( ! [X0,X1] : (s(X0,sK5(X1,X0)) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),X1))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | ($spl12 | $spl14)),
  inference(superposition,[],[f71,f72])).
fof(f1127,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | $spl206),
  inference(cnf_transformation,[],[f1127_D])).
fof(f1127_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f1133,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK5(sK2,sK0)))),s(sK1,sK4))) | $spl217),
  inference(cnf_transformation,[],[f1133_D])).
fof(f1133_D,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK5(sK2,sK0)))),s(sK1,sK4))) <=> ~$spl217),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl217])])).
fof(f1099,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK5(sK2,sK0)))),s(sK1,sK4))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | ($spl1 | $spl122)),
  inference(superposition,[],[f63,f714])).
fof(f1142,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | ($spl16 | $spl124 | $spl126 | $spl217)),
  inference(subsumption_resolution,[],[f1141,f849])).
fof(f1141,plain,(
  s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK5(sK2,sK0)))) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | ($spl16 | $spl124 | $spl217)),
  inference(forward_demodulation,[],[f1134,f73])).
fof(f1134,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'T_0'),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK5(sK2,sK0)))),s(sK1,sK4))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | ($spl124 | $spl217)),
  inference(superposition,[],[f1133,f715])).
fof(f75,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) ) | $spl20),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f58,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X7] : ! [X14,X9] : s(X7,X14) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(X7,X14),s(fun(X6,X7),X9)))),
  file('thm.option.option_case_compute','thm.option.option_case_def|split|0')).
fof(f74,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) ) | $spl18),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f57,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X11,X12] : s(X6,X12) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X11),s(X6,X12)))),
  file('thm.option.option_case_compute','thm.bool.COND_CLAUSES|split|1')).
fof(f68,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) ) | $spl6),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f49,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.NONE_0')))),
  file('thm.option.option_case_compute','thm.option.IS_SOME_DEF|split|1')).
fof(f63,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),sK2))))),s(sK1,sK4))) | $spl1),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),sK2))))),s(sK1,sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f45,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),sK2))))),s(sK1,sK4)))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),sK2))))),s(sK1,sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f39])).
fof(f39,plain,(
  ? [X0,X1,X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X3))) != s(X1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2))),s(X1,happ(s(fun(X0,X1),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X2))))),s(X1,X4)))),
  inference(ennf_transformation,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1,X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X3))) = s(X1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2))),s(X1,happ(s(fun(X0,X1),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X2))))),s(X1,X4)))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X3))) = s(X1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2))),s(X1,happ(s(fun(X0,X1),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X2))))),s(X1,X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s(X7,X10),s(fun(X6,X7),X9))) = s(X7,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X8))),s(X7,happ(s(fun(X6,X7),X9),s(X6,'const.option.THE_1'(s('type.option.option'(X6),X8))))),s(X7,X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s(X7,X10),s(fun(X6,X7),X9))) = s(X7,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X8))),s(X7,happ(s(fun(X6,X7),X9),s(X6,'const.option.THE_1'(s('type.option.option'(X6),X8))))),s(X7,X10)))),
  file('thm.option.option_case_compute','thm.option.option_case_compute')).
fof(f1170,plain,(
  $false | ($spl1 | $spl6 | $spl18 | $spl20 | $spl206)),
  inference(subsumption_resolution,[],[f1169,f75])).
fof(f1169,plain,(
  s(sK1,sK4) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK4),s(fun(sK0,sK1),sK3))) | ($spl1 | $spl6 | $spl18 | $spl206)),
  inference(forward_demodulation,[],[f1168,f74])).
fof(f1168,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'F_0'),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),'const.option.NONE_0'))))),s(sK1,sK4))) | ($spl1 | $spl6 | $spl206)),
  inference(forward_demodulation,[],[f1150,f68])).
fof(f1150,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK4),s(fun(sK0,sK1),sK3))) != s(sK1,'const.bool.COND_3'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))),s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),'const.option.NONE_0'))))),s(sK1,sK4))) | ($spl1 | $spl206)),
  inference(backward_demodulation,[],[f1127,f63])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 33
% Passive clauses: 110
% Generated clauses: 1123
% Final active clauses: 20
% Final passive clauses: 63
% Input formulas: 15
% Initial clauses: 16
% 
% Duplicate literals: 79
% Trivial inequalities: 3
% Fw subsumption resolutions: 13
% Fw demodulations: 104
% Bw demodulations: 22
% Condensations: 95
% 
% Simple tautologies: 16
% Equational tautologies: 16
% Forward subsumptions: 476
% 
% Binary resolution: 4
% Forward superposition: 326
% Backward superposition: 272
% Self superposition: 43
% Equality factoring: 28
% 
% Split clauses: 13
% Split components: 26
% SAT solver clauses: 210
% SAT solver unit clauses: 28
% SAT solver binary clauses: 14
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 13
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 206
% TWLsolver calls for satisfiability: 50
% 
% Memory used [KB]: 1791
% Time elapsed: 0.023 s
% ------------------------------
% ------------------------------
% Success in time 0.639 s
