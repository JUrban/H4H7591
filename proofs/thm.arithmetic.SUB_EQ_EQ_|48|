Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (101241)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 297
% Passive clauses: 3101
% Generated clauses: 35518
% Final active clauses: 181
% Final passive clauses: 1926
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 462
% Trivial inequalities: 311
% Fw subsumption resolutions: 1683
% Fw demodulations: 6369
% Bw demodulations: 63
% 
% Simple tautologies: 227
% Equational tautologies: 40
% Forward subsumptions: 23120
% Fw demodulations to eq. taut.: 58
% 
% Binary resolution: 528
% Factoring: 1
% Forward superposition: 12921
% Backward superposition: 12812
% Self superposition: 164
% Equality factoring: 64
% Equality resolution: 23
% 
% Split clauses: 134
% Split components: 269
% SAT solver clauses: 378
% SAT solver unit clauses: 18
% SAT solver binary clauses: 119
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 6
% 
% Sat splits: 134
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 373
% TWLsolver calls for satisfiability: 123
% 
% Memory used [KB]: 22003
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% (101261)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 276
% Passive clauses: 2321
% Generated clauses: 25179
% Final active clauses: 130
% Final passive clauses: 634
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 250
% Trivial inequalities: 135
% Fw subsumption resolutions: 1292
% Fw demodulations: 6389
% Bw demodulations: 1497
% Condensations: 413
% Global subsumptions: 11
% 
% Simple tautologies: 123
% Equational tautologies: 25
% Forward subsumptions: 12074
% Fw demodulations to eq. taut.: 27
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 594
% Factoring: 2
% Forward superposition: 6754
% Backward superposition: 5108
% Self superposition: 99
% Equality factoring: 38
% Equality resolution: 10
% 
% Split clauses: 125
% Split components: 252
% SAT solver clauses: 1849
% SAT solver unit clauses: 146
% SAT solver binary clauses: 53
% SAT solver learnt clauses: 22
% 
% Sat splits: 125
% Sat splitting refutations: 57
% 
% TWLsolver clauses: 1805
% TWLsolver calls for satisfiability: 528
% 
% Memory used [KB]: 16630
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f23310,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f202,f315,f201,f317,f313,f200,f314,f316,f312,f324,f326,f1941,f1998,f1996,f3683,f3687,f3685,f4927,f4931,f4929,f4946,f4947,f4949,f4950,f6216,f6220,f6218,f6684,f6688,f6686,f8797,f8801,f8799,f9140,f9151,f9157,f9159,f10774,f10815,f10846,f10949,f10947,f11027,f11037,f11039,f11041,f11043,f11047,f11049,f11051,f11053,f11055,f11057,f11059,f11061,f11063,f11065,f11135,f11136,f11139,f11140,f11144,f11146,f11149,f11150,f11151,f11153,f11158,f11175,f11176,f11178,f11180,f17391,f17395,f17393,f17718,f17965,f18005,f18009,f18010,f18011,f18012,f18013,f18014,f18015,f18016,f18017,f18018,f18019,f18020,f18021,f18022,f18023,f18024,f18025,f18026,f18027,f18028,f18030,f18032,f18034,f18036,f18038,f18040,f18041,f18043,f18044,f18045,f18046,f18047,f18048,f18049,f18050,f18051,f18052,f18053,f18054,f18055,f18056,f18057,f18058,f18059,f18060,f18061,f18062,f18063,f18064,f18065,f18066,f18067,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18082,f18083,f18084,f18085,f18086,f18087,f18088,f18089,f18090,f18091,f18092,f18093,f18094,f18095,f18096,f18097,f18098,f18099,f18100,f18101,f18102,f18103,f18104,f18105,f18106,f18107,f18108,f18109,f18110,f18111,f18112,f18113,f18114,f18115,f18116,f18117,f18118,f18119,f18120,f18121,f18122,f18123,f18124,f18125,f18126,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18135,f18136,f18137,f18138,f18139,f18140,f18141,f18142,f18143,f18144,f18145,f18146,f18147,f18148,f18149,f18150,f18151,f18152,f18153,f18154,f18155,f18156,f18157,f18158,f18159,f18160,f18161,f18162,f18163,f18164,f18165,f18166,f18167,f18168,f18169,f18170,f18171,f18172,f18173,f18174,f18175,f18176,f18177,f18178,f18179,f18180,f18181,f18182,f18183,f18184,f18185,f18186,f18187,f18188,f18189,f18190,f18191,f18192,f18193,f18194,f18195,f18196,f18197,f18198,f18199,f18200,f18201,f18202,f18203,f18204,f18205,f18206,f18207,f18208,f18209,f18210,f18211,f18212,f18213,f18214,f18215,f18216,f18217,f18218,f18219,f18220,f18221,f18222,f18223,f18224,f18225,f18226,f18227,f18228,f18229,f18230,f18231,f18232,f18233,f18234,f18235,f18236,f18237,f18238,f18239,f18240,f18241,f18242,f18243,f18244,f18245,f18246,f18247,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18257,f18258,f18259,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18268,f18269,f18270,f18271,f18272,f18273,f18274,f18275,f18276,f18277,f18278,f18279,f18280,f18281,f18282,f18283,f18284,f18285,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18299,f18300,f18301,f18302,f18303,f18304,f18305,f18306,f18307,f18308,f18309,f18310,f18311,f18312,f18313,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18322,f18323,f18324,f18326,f23251])).
fof(f23251,plain,(
  $false | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f23250,f7694])).
fof(f7694,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))) )),
  inference(superposition,[],[f2554,f219])).
fof(f219,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.ADD_|48|')).
fof(f2554,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18)))) )),
  inference(subsumption_resolution,[],[f2514,f1843])).
fof(f1843,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(subsumption_resolution,[],[f1805,f203])).
fof(f203,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f13])).
fof(f13,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.bool.TRUTH')).
fof(f1805,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f299,f412])).
fof(f412,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f220,f231])).
fof(f231,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X15] : (s(bool,'T_0') = s(bool,X15) <=> p(s(bool,X15)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.bool.EQ_CLAUSES|split|1')).
fof(f220,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X7] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.prim_rec.LESS_|48|')).
fof(f299,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X6,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.NOT_LESS')).
fof(f2514,plain,(
  ( ! [X17,X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18)))) )),
  inference(superposition,[],[f239,f280])).
fof(f280,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X7,X6] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.ADD_CLAUSES|split|2')).
fof(f239,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X7))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.LESS_EQ_|48|')).
fof(f23250,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl3 | $spl5)),
  inference(forward_demodulation,[],[f23249,f6910])).
fof(f6910,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl3),
  inference(forward_demodulation,[],[f6746,f273])).
fof(f273,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X8] : ! [X19,X20] : s(X8,X19) = s(X8,'const.bool.COND_3'(s(bool,'T_0'),s(X8,X19),s(X8,X20)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.bool.COND_CLAUSES|split|0')).
fof(f6746,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))))) | $spl3),
  inference(superposition,[],[f286,f1764])).
fof(f1764,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl3),
  inference(unit_resulting_resolution,[],[f1744,f231])).
fof(f1744,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl3),
  inference(condensation,[],[f1743])).
fof(f1743,plain,(
  ( ! [X3] : (p(s(bool,X3)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) ) | $spl3),
  inference(subsumption_resolution,[],[f1702,f230])).
fof(f230,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f167])).
fof(f1702,plain,(
  ( ! [X3] : (p(s(bool,X3)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,X3)) ) | $spl3),
  inference(superposition,[],[f298,f1383])).
fof(f1383,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X15)) ) | $spl3),
  inference(subsumption_resolution,[],[f1375,f318])).
fof(f318,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f208,f203])).
fof(f208,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f72])).
fof(f72,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f62])).
fof(f62,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.bool.NOT_CLAUSES|split|1')).
fof(f1375,plain,(
  ( ! [X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X15)) ) | $spl3),
  inference(superposition,[],[f487,f920])).
fof(f920,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl3),
  inference(unit_resulting_resolution,[],[f818,f235])).
fof(f235,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.bool.EQ_CLAUSES|split|2')).
fof(f818,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | $spl3),
  inference(unit_resulting_resolution,[],[f315,f238])).
fof(f238,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f171])).
fof(f487,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f484,f318])).
fof(f484,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f289,f226])).
fof(f226,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|',aHL_BOOL_CASES)).
fof(f289,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f155])).
fof(f155,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X19,X20] : ((p(s(bool,X19)) => p(s(bool,X20))) => ((p(s(bool,X20)) => p(s(bool,X19))) => s(bool,X19) = s(bool,X20)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.bool.IMP_ANTISYM_AX')).
fof(f298,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f286,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) )),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7)))))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUB|split|1')).
fof(f23249,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(forward_demodulation,[],[f23121,f321])).
fof(f321,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f223,f206])).
fof(f206,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f30])).
fof(f30,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.ONE')).
fof(f223,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X16)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUC_SUB')).
fof(f23121,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f4581,f4424])).
fof(f4424,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(forward_demodulation,[],[f4423,f312])).
fof(f4423,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f4307,f203])).
fof(f4307,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f288,f2291])).
fof(f2291,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f2186,f1746])).
fof(f1746,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) ) | $spl3),
  inference(subsumption_resolution,[],[f1745,f318])).
fof(f1745,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) ) | $spl3),
  inference(forward_demodulation,[],[f1704,f920])).
fof(f1704,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) ) | $spl3),
  inference(superposition,[],[f298,f1383])).
fof(f2186,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2091,f287])).
fof(f287,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.LESS_IMP_LESS_OR_EQ')).
fof(f2091,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f897,f297])).
fof(f297,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUB_EQ_|48|')).
fof(f897,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f856,f819])).
fof(f819,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.|48|_0')))) | $spl5),
  inference(unit_resulting_resolution,[],[f317,f238])).
fof(f856,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl0),
  inference(superposition,[],[f239,f312])).
fof(f288,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) => s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) => s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X7))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUB_ADD')).
fof(f4581,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)))))) )),
  inference(superposition,[],[f302,f321])).
fof(f302,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X16,X17,X18] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUB_PLUS')).
fof(f18326,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401,f322,f321,f320,f319,f206,f18325])).
fof(f18325,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | ($spl0 | $spl5 | $spl28)),
  inference(forward_demodulation,[],[f8801,f15990])).
fof(f319,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f221,f206])).
fof(f221,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.MULT_LEFT_|49|')).
fof(f320,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f222,f206])).
fof(f222,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.MULT_RIGHT_|49|')).
fof(f322,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f224,f206])).
fof(f224,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUC_SUB|49|')).
fof(f2401,plain,(
  ( ! [X3] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f2352,f217])).
fof(f2352,plain,(
  ( ! [X3] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f279,f322])).
fof(f3839,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f284,f320])).
fof(f3904,plain,(
  ( ! [X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))) )),
  inference(forward_demodulation,[],[f3841,f319])).
fof(f3841,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f284,f319])).
fof(f4087,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f285,f319])).
fof(f4178,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f4085,f320])).
fof(f4085,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f285,f320])).
fof(f5237,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12))) | s('type.num.num',X12) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f5236,f2401])).
fof(f5236,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X12) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f5235,f321])).
fof(f5235,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',X12) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f5234,f219])).
fof(f5234,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',X12) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f5233,f281])).
fof(f5233,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',X12) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f5160,f321])).
fof(f5160,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12)))) | s('type.num.num',X12) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11))))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11)))))) )),
  inference(superposition,[],[f306,f321])).
fof(f5622,plain,(
  ( ! [X12,X13] : (s('type.num.num',X12) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) | s('type.num.num',X13) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f5621,f219])).
fof(f5621,plain,(
  ( ! [X12,X13] : (s('type.num.num',X12) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X13) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f5620,f281])).
fof(f5620,plain,(
  ( ! [X12,X13] : (s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X13) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f5619,f321])).
fof(f5619,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',X13) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12)))) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f5618,f2401])).
fof(f5618,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',X13) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12)))) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f5543,f321])).
fof(f5543,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X12)))) | s('type.num.num',X13) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11))))) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X11)))))) )),
  inference(superposition,[],[f307,f321])).
fof(f6400,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X7))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f304,f319])).
fof(f6818,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f286,f216])).
fof(f6819,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',X5))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num',X5))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f286,f321])).
fof(f6908,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f6744,f273])).
fof(f6744,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))))) )),
  inference(superposition,[],[f286,f412])).
fof(f6909,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0))) | $spl5),
  inference(forward_demodulation,[],[f6745,f273])).
fof(f6745,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))))) | $spl5),
  inference(superposition,[],[f286,f1753])).
fof(f7025,plain,(
  ( ! [X10,X11,X9] : (s(X9,happ(s(fun('type.num.num',X9),sK3(X10,X11,X9)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s(X9,happ(s(fun(X9,X9),happ(s(fun('type.num.num',fun(X9,X9)),X10),s('type.num.num','const.num.|48|_0'))),s(X9,X11)))) )),
  inference(superposition,[],[f277,f276])).
fof(f7121,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X0,X0),X2),s(X0,X3))) = s(X0,happ(s(fun('type.num.num',X0),sK3(sK3(X1,X2,fun(X0,X0)),X3,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f6989,f276])).
fof(f6989,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),sK3(sK3(X1,X2,fun(X0,X0)),X3,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s(X0,happ(s(fun(X0,X0),X2),s(X0,happ(s(fun('type.num.num',X0),sK3(sK3(X1,X2,fun(X0,X0)),X3,X0)),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f277,f276])).
fof(f7790,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X0)))))) ) | $spl5),
  inference(forward_demodulation,[],[f7703,f216])).
fof(f7703,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X0)))))) ) | $spl5),
  inference(superposition,[],[f302,f6909])).
fof(f7872,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0))) | $spl5),
  inference(unit_resulting_resolution,[],[f7698,f231])).
fof(f7918,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl5),
  inference(forward_demodulation,[],[f7850,f2401])).
fof(f7850,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl5),
  inference(unit_resulting_resolution,[],[f7698,f288])).
fof(f8024,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl5),
  inference(unit_resulting_resolution,[],[f7852,f235])).
fof(f8025,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl5),
  inference(unit_resulting_resolution,[],[f7852,f230])).
fof(f8426,plain,(
  ( ! [X5] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f2401,f3135])).
fof(f8429,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X3))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f296,f2401])).
fof(f8526,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))))) )),
  inference(forward_demodulation,[],[f8525,f217])).
fof(f8525,plain,(
  ( ! [X0] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))))) )),
  inference(forward_demodulation,[],[f8427,f2401])).
fof(f8427,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f286,f2401])).
fof(f10419,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X2))),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1047,f2401])).
fof(f10422,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X11))) | s('type.num.num',X11) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X10)))) )),
  inference(superposition,[],[f1047,f321])).
fof(f10423,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X13))) | s('type.num.num',X13) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1047,f322])).
fof(f10437,plain,(
  ( ! [X41,X40] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X40))),s('type.num.num',X41))) | s('type.num.num',X41) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1047,f4178])).
fof(f10441,plain,(
  ( ! [X50,X51] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))),s('type.num.num',X51))) | s('type.num.num',X51) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X50)))) )),
  inference(superposition,[],[f1047,f3904])).
fof(f10451,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X68),s('type.num.num',X69))) | s('type.num.num',X69) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X68),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1047,f320])).
fof(f10453,plain,(
  ( ! [X72,X73] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) | s('type.num.num',X73) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X72)))) )),
  inference(superposition,[],[f1047,f319])).
fof(f10459,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X2))))) | s('type.num.num',X3) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1047,f2401])).
fof(f10462,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X11) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X10)))) )),
  inference(superposition,[],[f1047,f321])).
fof(f10463,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X12))) | s('type.num.num',X13) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1047,f322])).
fof(f10465,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X17) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0)))) ) | $spl5),
  inference(superposition,[],[f1047,f6909])).
fof(f10477,plain,(
  ( ! [X41,X40] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num','const.num.SUC_1'(s('type.num.num',X40))))) | s('type.num.num',X41) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1047,f4178])).
fof(f10481,plain,(
  ( ! [X50,X51] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X51),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))) | s('type.num.num',X51) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X50)))) )),
  inference(superposition,[],[f1047,f3904])).
fof(f10491,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X68))) | s('type.num.num',X69) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X68),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1047,f320])).
fof(f10493,plain,(
  ( ! [X72,X73] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X73),s('type.num.num',X72))) | s('type.num.num',X73) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X72)))) )),
  inference(superposition,[],[f1047,f319])).
fof(f11515,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f11381,f2401])).
fof(f13547,plain,(
  ( ! [X56,X55] : (s(bool,happ(s(fun('type.num.num',bool),sK3(X55,X56,bool)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.num.num',fun(bool,bool)),X55),s('type.num.num','const.num.|48|_0'))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X56)) )),
  inference(superposition,[],[f277,f1077])).
fof(f13739,plain,(
  ( ! [X6] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f3134,f322])).
fof(f14022,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(unit_resulting_resolution,[],[f3839,f1047])).
fof(f14024,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f3839,f1047])).
fof(f14028,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X3))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f3839,f303])).
fof(f14086,plain,(
  ( ! [X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X13)))) )),
  inference(superposition,[],[f238,f3839])).
fof(f14087,plain,(
  ( ! [X14] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X14)))) )),
  inference(superposition,[],[f239,f3839])).
fof(f14105,plain,(
  ( ! [X52,X51] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X51),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X52)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X51))),s('type.num.num',X52))))) )),
  inference(superposition,[],[f287,f3839])).
fof(f14106,plain,(
  ( ! [X54,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X53))))))) )),
  inference(superposition,[],[f287,f3839])).
fof(f14107,plain,(
  ( ! [X56,X55] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X56),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X55))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X55))),s('type.num.num',X56))),s('type.num.num',X56)))) )),
  inference(superposition,[],[f288,f3839])).
fof(f14108,plain,(
  ( ! [X57,X58] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X58)))) | s('type.num.num',X58) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X57))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X57)))))) )),
  inference(superposition,[],[f288,f3839])).
fof(f14109,plain,(
  ( ! [X59,X60] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X59),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X60)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X59),s('type.num.num',X59))),s('type.num.num',X60)))) | s('type.num.num',X60) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X59),s('type.num.num',X59)))) )),
  inference(superposition,[],[f293,f3839])).
fof(f14110,plain,(
  ( ! [X61,X62] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X61)))))) | s('type.num.num',X62) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X61)))) )),
  inference(superposition,[],[f293,f3839])).
fof(f14111,plain,(
  ( ! [X64,X63] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X64)))) | s('type.num.num',X64) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X63)))) )),
  inference(superposition,[],[f295,f3839])).
fof(f14112,plain,(
  ( ! [X66,X65] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X65),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | s('type.num.num',X66) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X65)))) )),
  inference(superposition,[],[f295,f3839])).
fof(f14113,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X67),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X68))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X67))),s('type.num.num',X68))))) )),
  inference(superposition,[],[f296,f3839])).
fof(f14114,plain,(
  ( ! [X70,X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X70),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X70),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',X69))))))) )),
  inference(superposition,[],[f296,f3839])).
fof(f14115,plain,(
  ( ! [X72,X71] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X71),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X72)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X71))),s('type.num.num',X72)))) )),
  inference(superposition,[],[f297,f3839])).
fof(f14116,plain,(
  ( ! [X74,X73] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X73),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num',X73)))))) )),
  inference(superposition,[],[f297,f3839])).
fof(f14117,plain,(
  ( ! [X76,X75] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X76),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X75))),s('type.num.num',X76))))) )),
  inference(superposition,[],[f298,f3839])).
fof(f14118,plain,(
  ( ! [X78,X77] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X77),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X78)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X78),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X77))))))) )),
  inference(superposition,[],[f298,f3839])).
fof(f14119,plain,(
  ( ! [X80,X79] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X79),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X80)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X79))))))) )),
  inference(superposition,[],[f299,f3839])).
fof(f14120,plain,(
  ( ! [X81,X82] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X82),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X81),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X81),s('type.num.num',X81))),s('type.num.num',X82))))) )),
  inference(superposition,[],[f299,f3839])).
fof(f14130,plain,(
  ( ! [X111,X112,X110] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X110),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X111)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num',X110))),s('type.num.num',X112))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X111),s('type.num.num',X112))))))) )),
  inference(superposition,[],[f305,f3839])).
fof(f14131,plain,(
  ( ! [X114,X115,X113] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X114),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X113),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X114),s('type.num.num',X115))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X113),s('type.num.num',X113))),s('type.num.num',X115))))))) )),
  inference(superposition,[],[f305,f3839])).
fof(f14132,plain,(
  ( ! [X118,X116,X117] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X116),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X117)))) | s('type.num.num',X117) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X118),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X116),s('type.num.num',X116))))) | s('type.num.num',X118) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X117),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X116),s('type.num.num',X116)))))) )),
  inference(superposition,[],[f306,f3839])).
fof(f14133,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X120),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X119),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',X119))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',X120))) | s('type.num.num',X121) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',X119))),s('type.num.num',X120)))) )),
  inference(superposition,[],[f306,f3839])).
fof(f14134,plain,(
  ( ! [X123,X124,X122] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X123)))) | s('type.num.num',X124) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X123),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num',X122))))) | s('type.num.num',X123) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num',X122)))))) )),
  inference(superposition,[],[f307,f3839])).
fof(f14135,plain,(
  ( ! [X127,X125,X126] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X126),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X125),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | s('type.num.num',X127) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X125))),s('type.num.num',X126))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X125))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',X126)))) )),
  inference(superposition,[],[f307,f3839])).
fof(f14146,plain,(
  ( ! [X138] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X138),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X138))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f914,f3839])).
fof(f14147,plain,(
  ( ! [X140,X139] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X139),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X140))) | s('type.num.num',X140) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num',X139)))) )),
  inference(superposition,[],[f1047,f3839])).
fof(f14148,plain,(
  ( ! [X142,X141] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X142),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X141),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num',X142) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X141),s('type.num.num',X141)))) )),
  inference(superposition,[],[f1047,f3839])).
fof(f14152,plain,(
  ( ! [X149,X148] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X149))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X148),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num',X148))),s('type.num.num',X149))))) )),
  inference(superposition,[],[f2248,f3839])).
fof(f14153,plain,(
  ( ! [X151,X150] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X151))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X150),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X150),s('type.num.num',X150))))))) )),
  inference(superposition,[],[f2248,f3839])).
fof(f14163,plain,(
  ( ! [X169] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X169),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num',X169)))) )),
  inference(superposition,[],[f3559,f3839])).
fof(f14174,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f304,f3839])).
fof(f14175,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f304,f3839])).
fof(f14178,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f285,f3839])).
fof(f14179,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f284,f3839])).
fof(f14189,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X17))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f238,f3839])).
fof(f14190,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X18))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f239,f3839])).
fof(f14208,plain,(
  ( ! [X56,X55] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X55))),s('type.num.num',X56)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X56))))) )),
  inference(superposition,[],[f287,f3839])).
fof(f14209,plain,(
  ( ! [X57,X58] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X57)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f287,f3839])).
fof(f14210,plain,(
  ( ! [X59,X60] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X59),s('type.num.num',X59)))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X59),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X59),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X60))),s('type.num.num',X60)))) )),
  inference(superposition,[],[f288,f3839])).
fof(f14211,plain,(
  ( ! [X61,X62] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X61))),s('type.num.num',X62)))) | s('type.num.num',X62) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f288,f3839])).
fof(f14212,plain,(
  ( ! [X64,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X63))),s('type.num.num',X64)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X64)))) | s('type.num.num',X64) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f293,f3839])).
fof(f14213,plain,(
  ( ! [X66,X65] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X65)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X65),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | s('type.num.num',X66) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X65),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f293,f3839])).
fof(f14214,plain,(
  ( ! [X68,X67] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X67))),s('type.num.num',X68)))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X67),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f295,f3839])).
fof(f14215,plain,(
  ( ! [X70,X69] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X70),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',X69)))))) | s('type.num.num',X70) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f295,f3839])).
fof(f14216,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X71))),s('type.num.num',X72))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X71),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X72))))) )),
  inference(superposition,[],[f296,f3839])).
fof(f14217,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num',X73))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X73),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f296,f3839])).
fof(f14218,plain,(
  ( ! [X76,X75] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X75))),s('type.num.num',X76)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X76)))) )),
  inference(superposition,[],[f297,f3839])).
fof(f14219,plain,(
  ( ! [X78,X77] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X77)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X78),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X77),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f297,f3839])).
fof(f14220,plain,(
  ( ! [X80,X79] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X79)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X79),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X80))))) )),
  inference(superposition,[],[f298,f3839])).
fof(f14221,plain,(
  ( ! [X81,X82] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X81),s('type.num.num',X81))),s('type.num.num',X82)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X82),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X81),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f298,f3839])).
fof(f14222,plain,(
  ( ! [X83,X84] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X83))),s('type.num.num',X84)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X83),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f299,f3839])).
fof(f14223,plain,(
  ( ! [X85,X86] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X85)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X86))))) )),
  inference(superposition,[],[f299,f3839])).
fof(f14233,plain,(
  ( ! [X116,X114,X115] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X114))),s('type.num.num',X115)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X114),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X116))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X115),s('type.num.num',X116))))))) )),
  inference(superposition,[],[f305,f3839])).
fof(f14234,plain,(
  ( ! [X118,X119,X117] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X118),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num',X117)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X118),s('type.num.num',X119))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X117),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X119))))))) )),
  inference(superposition,[],[f305,f3839])).
fof(f14235,plain,(
  ( ! [X121,X122,X120] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',X120))),s('type.num.num',X121)))) | s('type.num.num',X121) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X120),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X121),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X120),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f306,f3839])).
fof(f14236,plain,(
  ( ! [X125,X123,X124] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X124),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X123)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X124))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X123),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',X125) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X123),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X124)))) )),
  inference(superposition,[],[f306,f3839])).
fof(f14237,plain,(
  ( ! [X127,X128,X126] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X126))),s('type.num.num',X127)))) | s('type.num.num',X128) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X127),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X126),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num',X127) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X126),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f307,f3839])).
fof(f14238,plain,(
  ( ! [X130,X131,X129] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X130),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X129),s('type.num.num',X129)))))) | s('type.num.num',X131) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X129),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X130))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X130))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X129),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f307,f3839])).
fof(f14250,plain,(
  ( ! [X144,X143] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X143))),s('type.num.num',X144))) | s('type.num.num',X144) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X143),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f1047,f3839])).
fof(f14251,plain,(
  ( ! [X146,X145] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X146),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num',X145))))) | s('type.num.num',X146) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X145),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f1047,f3839])).
fof(f14255,plain,(
  ( ! [X152,X153] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X153))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X152),s('type.num.num',X152))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X152),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X153))))) )),
  inference(superposition,[],[f2248,f3839])).
fof(f14256,plain,(
  ( ! [X154,X155] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X155))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',X154))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X154),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f2248,f3839])).
fof(f14266,plain,(
  ( ! [X173] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X173),s('type.num.num',X173)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X173),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f3559,f3839])).
fof(f14279,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f14026,f280])).
fof(f14026,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f3839,f281])).
fof(f14349,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f4087,f1047])).
fof(f14351,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f4087,f1047])).
fof(f14353,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f4087,f3839])).
fof(f14356,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X4))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num',X5)))))) )),
  inference(superposition,[],[f4087,f303])).
fof(f14417,plain,(
  ( ! [X14] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X14))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X14)))) )),
  inference(superposition,[],[f238,f4087])).
fof(f14418,plain,(
  ( ! [X15] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X15))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X15)))) )),
  inference(superposition,[],[f239,f4087])).
fof(f14436,plain,(
  ( ! [X52,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X52))),s('type.num.num',X53)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',X52))),s('type.num.num',X53))))) )),
  inference(superposition,[],[f287,f4087])).
fof(f14437,plain,(
  ( ! [X54,X55] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X54)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X54))))))) )),
  inference(superposition,[],[f287,f4087])).
fof(f14438,plain,(
  ( ! [X57,X56] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X56)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num',X56))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num',X56))),s('type.num.num',X57))),s('type.num.num',X57)))) )),
  inference(superposition,[],[f288,f4087])).
fof(f14439,plain,(
  ( ! [X59,X58] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X58))),s('type.num.num',X59)))) | s('type.num.num',X59) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X58))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X58)))))) )),
  inference(superposition,[],[f288,f4087])).
fof(f14440,plain,(
  ( ! [X61,X60] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X60))),s('type.num.num',X61)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X60))),s('type.num.num',X61)))) | s('type.num.num',X61) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X60)))) )),
  inference(superposition,[],[f293,f4087])).
fof(f14441,plain,(
  ( ! [X62,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X62)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X62)))))) | s('type.num.num',X63) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X62)))) )),
  inference(superposition,[],[f293,f4087])).
fof(f14442,plain,(
  ( ! [X64,X65] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X64))),s('type.num.num',X65)))) | s('type.num.num',X65) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X64),s('type.num.num',X64)))) )),
  inference(superposition,[],[f295,f4087])).
fof(f14443,plain,(
  ( ! [X66,X67] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X66)))))) | s('type.num.num',X67) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X66)))) )),
  inference(superposition,[],[f295,f4087])).
fof(f14444,plain,(
  ( ! [X68,X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X68))),s('type.num.num',X69))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',X68))),s('type.num.num',X69))))) )),
  inference(superposition,[],[f296,f4087])).
fof(f14445,plain,(
  ( ! [X70,X71] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X70))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X70))))))) )),
  inference(superposition,[],[f296,f4087])).
fof(f14446,plain,(
  ( ! [X72,X73] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X72))),s('type.num.num',X73)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X72))),s('type.num.num',X73)))) )),
  inference(superposition,[],[f297,f4087])).
fof(f14447,plain,(
  ( ! [X74,X75] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X75),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X74)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X74)))))) )),
  inference(superposition,[],[f297,f4087])).
fof(f14448,plain,(
  ( ! [X76,X77] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X77),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X76)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num',X76))),s('type.num.num',X77))))) )),
  inference(superposition,[],[f298,f4087])).
fof(f14449,plain,(
  ( ! [X78,X79] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X78))),s('type.num.num',X79)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X78))))))) )),
  inference(superposition,[],[f298,f4087])).
fof(f14450,plain,(
  ( ! [X80,X81] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X80))),s('type.num.num',X81)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X81),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num',X80))))))) )),
  inference(superposition,[],[f299,f4087])).
fof(f14451,plain,(
  ( ! [X83,X82] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X83),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X82)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X82))),s('type.num.num',X83))))) )),
  inference(superposition,[],[f299,f4087])).
fof(f14461,plain,(
  ( ! [X111,X112,X113] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X111))),s('type.num.num',X112)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num',X111))),s('type.num.num',X113))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X112),s('type.num.num',X113))))))) )),
  inference(superposition,[],[f305,f4087])).
fof(f14462,plain,(
  ( ! [X116,X114,X115] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X114)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X115),s('type.num.num',X116))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X114))),s('type.num.num',X116))))))) )),
  inference(superposition,[],[f305,f4087])).
fof(f14463,plain,(
  ( ! [X118,X119,X117] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X117))),s('type.num.num',X118)))) | s('type.num.num',X118) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num',X117))))) | s('type.num.num',X119) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X118),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num',X117)))))) )),
  inference(superposition,[],[f306,f4087])).
fof(f14464,plain,(
  ( ! [X121,X122,X120] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X121),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X120)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',X120))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num',X121))) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',X120))),s('type.num.num',X121)))) )),
  inference(superposition,[],[f306,f4087])).
fof(f14465,plain,(
  ( ! [X125,X123,X124] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X123))),s('type.num.num',X124)))) | s('type.num.num',X125) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X124),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X123))))) | s('type.num.num',X124) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X123)))))) )),
  inference(superposition,[],[f307,f4087])).
fof(f14466,plain,(
  ( ! [X127,X128,X126] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X127),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X126)))))) | s('type.num.num',X128) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X126))),s('type.num.num',X127))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X126))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127)))) )),
  inference(superposition,[],[f307,f4087])).
fof(f14477,plain,(
  ( ! [X139] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X139))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num',X139))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f914,f4087])).
fof(f14478,plain,(
  ( ! [X140,X141] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X140))),s('type.num.num',X141))) | s('type.num.num',X141) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X140)))) )),
  inference(superposition,[],[f1047,f4087])).
fof(f14479,plain,(
  ( ! [X142,X143] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X143),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X142))))) | s('type.num.num',X143) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X142),s('type.num.num',X142)))) )),
  inference(superposition,[],[f1047,f4087])).
fof(f14483,plain,(
  ( ! [X149,X150] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X150))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X149))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X149))),s('type.num.num',X150))))) )),
  inference(superposition,[],[f2248,f4087])).
fof(f14484,plain,(
  ( ! [X152,X151] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X152))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X151))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X152),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X151))))))) )),
  inference(superposition,[],[f2248,f4087])).
fof(f14494,plain,(
  ( ! [X170] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X170)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X170),s('type.num.num',X170)))) )),
  inference(superposition,[],[f3559,f4087])).
fof(f14509,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X3))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f304,f4087])).
fof(f14512,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X8))),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f285,f4087])).
fof(f14513,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X9)))))) )),
  inference(superposition,[],[f284,f4087])).
fof(f14521,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X17))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X17)))) )),
  inference(superposition,[],[f238,f4087])).
fof(f14522,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X18))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X18)))) )),
  inference(superposition,[],[f239,f4087])).
fof(f14540,plain,(
  ( ! [X56,X55] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X55))),s('type.num.num',X56)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X55))),s('type.num.num',X56))))) )),
  inference(superposition,[],[f287,f4087])).
fof(f14541,plain,(
  ( ! [X57,X58] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X57)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X57))))))) )),
  inference(superposition,[],[f287,f4087])).
fof(f14542,plain,(
  ( ! [X59,X60] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X59),s('type.num.num',X59)))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X59))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X59))),s('type.num.num',X60))),s('type.num.num',X60)))) )),
  inference(superposition,[],[f288,f4087])).
fof(f14543,plain,(
  ( ! [X61,X62] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X61))),s('type.num.num',X62)))) | s('type.num.num',X62) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X61))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X61)))))) )),
  inference(superposition,[],[f288,f4087])).
fof(f14544,plain,(
  ( ! [X64,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X63))),s('type.num.num',X64)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X63))),s('type.num.num',X64)))) | s('type.num.num',X64) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X63)))) )),
  inference(superposition,[],[f293,f4087])).
fof(f14545,plain,(
  ( ! [X66,X65] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X65)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X65)))))) | s('type.num.num',X66) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X65)))) )),
  inference(superposition,[],[f293,f4087])).
fof(f14546,plain,(
  ( ! [X68,X67] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X67))),s('type.num.num',X68)))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X67)))) )),
  inference(superposition,[],[f295,f4087])).
fof(f14547,plain,(
  ( ! [X70,X69] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X70),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',X69)))))) | s('type.num.num',X70) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X69)))) )),
  inference(superposition,[],[f295,f4087])).
fof(f14548,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X71))),s('type.num.num',X72))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X71))),s('type.num.num',X72))))) )),
  inference(superposition,[],[f296,f4087])).
fof(f14549,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num',X73))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X73))))))) )),
  inference(superposition,[],[f296,f4087])).
fof(f14550,plain,(
  ( ! [X76,X75] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X75))),s('type.num.num',X76)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X75))),s('type.num.num',X76)))) )),
  inference(superposition,[],[f297,f4087])).
fof(f14551,plain,(
  ( ! [X78,X77] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X77)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X78),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X77)))))) )),
  inference(superposition,[],[f297,f4087])).
fof(f14552,plain,(
  ( ! [X80,X79] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X79)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X79))),s('type.num.num',X80))))) )),
  inference(superposition,[],[f298,f4087])).
fof(f14553,plain,(
  ( ! [X81,X82] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X81),s('type.num.num',X81))),s('type.num.num',X82)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X82),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X81))))))) )),
  inference(superposition,[],[f298,f4087])).
fof(f14554,plain,(
  ( ! [X83,X84] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X83))),s('type.num.num',X84)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X83))))))) )),
  inference(superposition,[],[f299,f4087])).
fof(f14555,plain,(
  ( ! [X85,X86] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X85)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X85))),s('type.num.num',X86))))) )),
  inference(superposition,[],[f299,f4087])).
fof(f14565,plain,(
  ( ! [X116,X114,X115] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X114))),s('type.num.num',X115)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X114))),s('type.num.num',X116))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X115),s('type.num.num',X116))))))) )),
  inference(superposition,[],[f305,f4087])).
fof(f14566,plain,(
  ( ! [X118,X119,X117] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X118),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num',X117)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X118),s('type.num.num',X119))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X117))),s('type.num.num',X119))))))) )),
  inference(superposition,[],[f305,f4087])).
fof(f14567,plain,(
  ( ! [X121,X122,X120] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',X120))),s('type.num.num',X121)))) | s('type.num.num',X121) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X120))))) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X121),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X120)))))) )),
  inference(superposition,[],[f306,f4087])).
fof(f14568,plain,(
  ( ! [X125,X123,X124] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X124),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X123)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X124))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X123))) | s('type.num.num',X125) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X123))),s('type.num.num',X124)))) )),
  inference(superposition,[],[f306,f4087])).
fof(f14569,plain,(
  ( ! [X127,X128,X126] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X126))),s('type.num.num',X127)))) | s('type.num.num',X128) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X127),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X126))))) | s('type.num.num',X127) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X126)))))) )),
  inference(superposition,[],[f307,f4087])).
fof(f14570,plain,(
  ( ! [X130,X131,X129] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X130),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X129),s('type.num.num',X129)))))) | s('type.num.num',X131) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X129))),s('type.num.num',X130))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X130))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X129)))) )),
  inference(superposition,[],[f307,f4087])).
fof(f14582,plain,(
  ( ! [X144,X143] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X143))),s('type.num.num',X144))) | s('type.num.num',X144) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X143)))) )),
  inference(superposition,[],[f1047,f4087])).
fof(f14583,plain,(
  ( ! [X146,X145] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X146),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num',X145))))) | s('type.num.num',X146) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X145)))) )),
  inference(superposition,[],[f1047,f4087])).
fof(f14587,plain,(
  ( ! [X152,X153] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X153))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X152),s('type.num.num',X152))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X152))),s('type.num.num',X153))))) )),
  inference(superposition,[],[f2248,f4087])).
fof(f14588,plain,(
  ( ! [X154,X155] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X155))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',X154))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X154))))))) )),
  inference(superposition,[],[f2248,f4087])).
fof(f14598,plain,(
  ( ! [X173] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X173),s('type.num.num',X173)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X173)))) )),
  inference(superposition,[],[f3559,f4087])).
fof(f14612,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(backward_demodulation,[],[f14353,f14177])).
fof(f14613,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X4)))))) )),
  inference(backward_demodulation,[],[f14353,f14176])).
fof(f14614,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f14354,f280])).
fof(f14354,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f4087,f281])).
fof(f14784,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X36))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X36))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5232,f4087])).
fof(f14785,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',X39) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X38))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5232,f3839])).
fof(f14801,plain,(
  ( ! [X76,X77] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num',X76))) | s('type.num.num',X77) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X76),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5232,f3839])).
fof(f14804,plain,(
  ( ! [X83,X82] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X82))) | s('type.num.num',X83) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X82))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5232,f4087])).
fof(f14828,plain,(
  ( ! [X37,X36] : (s('type.num.num',X37) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X36))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X37),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X36)))) )),
  inference(superposition,[],[f5232,f4087])).
fof(f14829,plain,(
  ( ! [X39,X38] : (s('type.num.num',X39) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X38)))) )),
  inference(superposition,[],[f5232,f3839])).
fof(f14836,plain,(
  ( ! [X56,X55] : (s('type.num.num',X56) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X55)))) )),
  inference(superposition,[],[f5232,f3904])).
fof(f14846,plain,(
  ( ! [X76,X77] : (s('type.num.num',X77) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num',X76))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X76),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f5232,f3839])).
fof(f14849,plain,(
  ( ! [X83,X82] : (s('type.num.num',X83) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X82))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X83),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X82)))) )),
  inference(superposition,[],[f5232,f4087])).
fof(f14936,plain,(
  ( ! [X10,X11] : (s('type.num.num',X10) != s('type.num.num',X11) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f14814,f219])).
fof(f14814,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f5232,f322])).
fof(f14966,plain,(
  ( ! [X74,X75] : (s('type.num.num',X74) != s('type.num.num',X75) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f14845,f219])).
fof(f14845,plain,(
  ( ! [X74,X75] : (s('type.num.num',X75) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f5232,f320])).
fof(f14969,plain,(
  ( ! [X80,X81] : (s('type.num.num',X80) != s('type.num.num',X81) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X81),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X80)))) )),
  inference(forward_demodulation,[],[f14848,f219])).
fof(f14848,plain,(
  ( ! [X80,X81] : (s('type.num.num',X81) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X81),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X80)))) )),
  inference(superposition,[],[f5232,f319])).
fof(f15260,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X37))) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X37))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f4087])).
fof(f15261,plain,(
  ( ! [X39,X40] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X39),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X39))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f3839])).
fof(f15277,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X78),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X77))) | s('type.num.num',X78) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X77),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f3839])).
fof(f15280,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X84),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X83))) | s('type.num.num',X84) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X83))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f4087])).
fof(f15305,plain,(
  ( ! [X37,X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X37))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X37)))) )),
  inference(superposition,[],[f5617,f4087])).
fof(f15306,plain,(
  ( ! [X39,X40] : (s('type.num.num',X40) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X39),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X39)))) )),
  inference(superposition,[],[f5617,f3839])).
fof(f15323,plain,(
  ( ! [X78,X77] : (s('type.num.num',X78) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X77))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X77),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f5617,f3839])).
fof(f15326,plain,(
  ( ! [X83,X84] : (s('type.num.num',X84) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X83))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X83)))) )),
  inference(superposition,[],[f5617,f4087])).
fof(f15336,plain,(
  ( ! [X8,X7] : (s('type.num.num',X8) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f3135])).
fof(f15417,plain,(
  ( ! [X10,X11] : (s('type.num.num',X10) != s('type.num.num',X11) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f15290,f214])).
fof(f15290,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f5617,f322])).
fof(f15441,plain,(
  ( ! [X47,X46] : (s('type.num.num',X47) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f15309,f214])).
fof(f15309,plain,(
  ( ! [X47,X46] : (s('type.num.num',X47) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f5617,f4178])).
fof(f15444,plain,(
  ( ! [X57,X56] : (s('type.num.num',X57) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X56)))) )),
  inference(forward_demodulation,[],[f15313,f214])).
fof(f15313,plain,(
  ( ! [X57,X56] : (s('type.num.num',X57) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X56)))) )),
  inference(superposition,[],[f5617,f3904])).
fof(f15455,plain,(
  ( ! [X76,X75] : (s('type.num.num',X75) != s('type.num.num',X76) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f15322,f214])).
fof(f15322,plain,(
  ( ! [X76,X75] : (s('type.num.num',X76) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f5617,f320])).
fof(f15458,plain,(
  ( ! [X81,X82] : (s('type.num.num',X81) != s('type.num.num',X82) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X81)))) )),
  inference(forward_demodulation,[],[f15325,f214])).
fof(f15325,plain,(
  ( ! [X81,X82] : (s('type.num.num',X82) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X81),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X81)))) )),
  inference(superposition,[],[f5617,f319])).
fof(f15815,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f6145,f3839])).
fof(f15818,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f6145,f4087])).
fof(f15993,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f321,f15706])).
fof(f16270,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f6553,f3839])).
fof(f16658,plain,(
  ( ! [X43,X42] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X42))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X42))))),s('type.num.num',X43))))) )),
  inference(superposition,[],[f3323,f4087])).
fof(f16659,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X44))))),s('type.num.num',X45))))) )),
  inference(superposition,[],[f3323,f3839])).
fof(f16677,plain,(
  ( ! [X85,X86] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X85))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X86))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num',X86))))) )),
  inference(superposition,[],[f3323,f3839])).
fof(f16680,plain,(
  ( ! [X92,X91] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',X91))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X92))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X91))))),s('type.num.num',X92))))) )),
  inference(superposition,[],[f3323,f4087])).
fof(f16708,plain,(
  ( ! [X43,X42] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X42))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X42))))))) )),
  inference(superposition,[],[f3323,f4087])).
fof(f16709,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X45),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X44))))))) )),
  inference(superposition,[],[f3323,f3839])).
fof(f16727,plain,(
  ( ! [X85,X86] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X86),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X85))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X86))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f3323,f3839])).
fof(f16730,plain,(
  ( ! [X92,X91] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',X91))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X92))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X91))))))) )),
  inference(superposition,[],[f3323,f4087])).
fof(f17018,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | s('type.num.num',sK0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl5),
  inference(forward_demodulation,[],[f17017,f2401])).
fof(f17017,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl5),
  inference(subsumption_resolution,[],[f16972,f203])).
fof(f16972,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl5),
  inference(superposition,[],[f306,f7872])).
fof(f17020,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl5),
  inference(forward_demodulation,[],[f17019,f2401])).
fof(f17019,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl5),
  inference(subsumption_resolution,[],[f16973,f203])).
fof(f16973,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl5),
  inference(superposition,[],[f307,f7872])).
fof(f17108,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK0)))))) | $spl5),
  inference(superposition,[],[f7917,f3839])).
fof(f17230,plain,(
  ( ! [X43,X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X42))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X42))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X43)) )),
  inference(superposition,[],[f5311,f4087])).
fof(f17231,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X44))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X45)) )),
  inference(superposition,[],[f5311,f3839])).
fof(f17249,plain,(
  ( ! [X85,X86] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X85))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X86)) )),
  inference(superposition,[],[f5311,f3839])).
fof(f17252,plain,(
  ( ! [X92,X91] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',X91))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X91))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X92)) )),
  inference(superposition,[],[f5311,f4087])).
fof(f7393,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) ) | $spl0),
  inference(superposition,[],[f4586,f284])).
fof(f10945,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))))) ) | $spl0),
  inference(forward_demodulation,[],[f10845,f3135])).
fof(f10845,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))))) ) | $spl0),
  inference(superposition,[],[f302,f2353])).
fof(f9377,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))))))) ) | $spl0),
  inference(superposition,[],[f4586,f281])).
fof(f16807,plain,(
  ( ! [X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))),s('type.num.num',X24)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))))))) ) | $spl0),
  inference(forward_demodulation,[],[f16806,f3135])).
fof(f16806,plain,(
  ( ! [X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',X24)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))))))) ) | $spl0),
  inference(forward_demodulation,[],[f16805,f3134])).
fof(f16805,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))))),s('type.num.num',X24))))) ) | $spl0),
  inference(forward_demodulation,[],[f16648,f3135])).
fof(f16648,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))))),s('type.num.num',X24))))) ) | $spl0),
  inference(superposition,[],[f3323,f2353])).
fof(f15828,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',sK1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',sK1)))))) ) | $spl0),
  inference(superposition,[],[f4586,f6145])).
fof(f6914,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f6913,f272])).
fof(f6913,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f6749,f312])).
fof(f6749,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f286,f2302])).
fof(f7394,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X0)))))))) ) | $spl0),
  inference(superposition,[],[f286,f4586])).
fof(f4586,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X19)))))) ) | $spl0),
  inference(superposition,[],[f302,f312])).
fof(f7396,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X3))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X3))))))) ) | $spl0),
  inference(superposition,[],[f296,f4586])).
fof(f7479,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X1))),s('type.num.num',X2)))))) ) | $spl0),
  inference(forward_demodulation,[],[f7395,f302])).
fof(f7395,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X1))),s('type.num.num',X2)))))) ) | $spl0),
  inference(superposition,[],[f302,f4586])).
fof(f10432,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X29))),s('type.num.num',X30))) | s('type.num.num',X30) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X29)))))) ) | $spl0),
  inference(superposition,[],[f1047,f4586])).
fof(f10472,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X29))))) | s('type.num.num',X30) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X29)))))) ) | $spl0),
  inference(superposition,[],[f1047,f4586])).
fof(f13747,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl0),
  inference(superposition,[],[f3134,f2353])).
fof(f18042,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X24)) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f17745,f3135])).
fof(f17745,plain,(
  ( ! [X24] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X24)) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f17220,f15985])).
fof(f17220,plain,(
  ( ! [X24] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X24)) ) | $spl0),
  inference(superposition,[],[f5311,f2353])).
fof(f17748,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f17011,f15990])).
fof(f17011,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl5),
  inference(subsumption_resolution,[],[f16967,f203])).
fof(f16967,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl5),
  inference(superposition,[],[f293,f7872])).
fof(f18039,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f7702,f15990])).
fof(f18037,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | $spl0),
  inference(forward_demodulation,[],[f10927,f3135])).
fof(f10927,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | $spl0),
  inference(superposition,[],[f3559,f2353])).
fof(f18035,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f17761,f3135])).
fof(f17761,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f10855,f15985])).
fof(f10855,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | $spl0),
  inference(superposition,[],[f239,f2353])).
fof(f18033,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f10950,f15985])).
fof(f10950,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0')))) | $spl0),
  inference(forward_demodulation,[],[f10854,f3135])).
fof(f10854,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | $spl0),
  inference(superposition,[],[f238,f2353])).
fof(f18031,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f9784,f15990])).
fof(f9784,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f286,f6918])).
fof(f18029,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f7210,f15990])).
fof(f17767,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f10101,f15990])).
fof(f10101,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f10074,f203])).
fof(f10074,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(superposition,[],[f293,f7544])).
fof(f6918,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f6750,f273])).
fof(f6750,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK0))))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f286,f2286])).
fof(f7295,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X0)))))) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f7211,f216])).
fof(f7211,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X0)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f302,f6918])).
fof(f7525,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))))))) ) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f7206,f305])).
fof(f7544,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f7206,f231])).
fof(f7606,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f7524,f235])).
fof(f7607,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f7524,f230])).
fof(f10467,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X19) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f1047,f6918])).
fof(f10817,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl0),
  inference(forward_demodulation,[],[f9615,f2401])).
fof(f9615,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl0),
  inference(superposition,[],[f4586,f4178])).
fof(f10818,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5)),
  inference(backward_demodulation,[],[f10817,f10098])).
fof(f10819,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | s('type.num.num',sK0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl0 | $spl5)),
  inference(backward_demodulation,[],[f10817,f10104])).
fof(f10820,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl0 | $spl5)),
  inference(backward_demodulation,[],[f10817,f10107])).
fof(f15702,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f15666,f333])).
fof(f15666,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f7606,f435])).
fof(f16757,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X2))))),s('type.num.num',X3)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(forward_demodulation,[],[f16756,f8426])).
fof(f16756,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X3)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(forward_demodulation,[],[f16755,f3134])).
fof(f16755,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f16637,f3135])).
fof(f16637,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X3))))) )),
  inference(superposition,[],[f3323,f2401])).
fof(f14618,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f14508,f8426])).
fof(f14508,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f304,f4087])).
fof(f15992,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',sK0)))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f283,f15706])).
fof(f16903,plain,(
  ( ! [X19] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X19)))) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f16902,f15992])).
fof(f16902,plain,(
  ( ! [X19] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X19))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))))))) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f16695,f2401])).
fof(f16695,plain,(
  ( ! [X19] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f3323,f6918])).
fof(f17291,plain,(
  ( ! [X19] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X19)) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f17290,f15992])).
fof(f17290,plain,(
  ( ! [X19] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X19)) ) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f17289,f203])).
fof(f17289,plain,(
  ( ! [X19] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X19)) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f17217,f338])).
fof(f17217,plain,(
  ( ! [X19] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X19)) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f5311,f6918])).
fof(f18006,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | ($spl0 | $spl5 | $spl30)),
  inference(forward_demodulation,[],[f10947,f15985])).
fof(f17338,plain,(
  ( ! [X14,X15,X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f17267,f203])).
fof(f17267,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f5311,f435])).
fof(f17337,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) )),
  inference(subsumption_resolution,[],[f17259,f203])).
fof(f17259,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) )),
  inference(superposition,[],[f5311,f1047])).
fof(f17255,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X102),s('type.num.num','const.bool.COND_3'(s(bool,X99),s('type.num.num',X100),s('type.num.num',X101))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X102) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f5311,f591])).
fof(f17278,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(forward_demodulation,[],[f17277,f216])).
fof(f17277,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(subsumption_resolution,[],[f17276,f203])).
fof(f17276,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(forward_demodulation,[],[f17211,f338])).
fof(f17211,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(superposition,[],[f5311,f216])).
fof(f17165,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f17068,f15985])).
fof(f17068,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f7917,f2353])).
fof(f17029,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0)))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7917,f297])).
fof(f17030,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))),s('type.num.num',X0))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7917,f299])).
fof(f17031,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))),s('type.num.num',X1))))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7917,f305])).
fof(f17123,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',X0))),s('type.num.num',X0)))) ) | $spl5),
  inference(forward_demodulation,[],[f17122,f6553])).
fof(f17122,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num',X0)))) ) | $spl5),
  inference(forward_demodulation,[],[f17049,f276])).
fof(f17049,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X1,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))),s('type.num.num',X0)),'type.num.num')),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f276,f7917,f307])).
fof(f17055,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0)))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7917,f231])).
fof(f16744,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))),s('type.num.num',X12))))) )),
  inference(superposition,[],[f3323,f6553])).
fof(f16733,plain,(
  ( ! [X101,X99,X102,X100] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X102),s('type.num.num','const.num.SUC_1'(s('type.num.num',X101))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X102))),s('type.num.num','const.bool.COND_3'(s(bool,X99),s('type.num.num',X100),s('type.num.num',X101)))))) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f3323,f591])).
fof(f16911,plain,(
  ( ! [X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X24))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num',sK0)))) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f16910,f10817])).
fof(f16910,plain,(
  ( ! [X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num',sK0)))) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f16909,f3135])).
fof(f16909,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num',sK0))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))))))) ) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f16698,f15706])).
fof(f16698,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))))))) ) | $spl0),
  inference(superposition,[],[f3323,f2353])).
fof(f16683,plain,(
  ( ! [X101,X99,X102,X100] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X101),s('type.num.num','const.num.SUC_1'(s('type.num.num',X102))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.bool.COND_3'(s(bool,X99),s('type.num.num',X100),s('type.num.num',X101))))),s('type.num.num',X102)))) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f3323,f591])).
fof(f16799,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))))))),s('type.num.num',X22)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22)))))))))) )),
  inference(forward_demodulation,[],[f16798,f3135])).
fof(f16798,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))))),s('type.num.num',X22)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22)))))))))) )),
  inference(forward_demodulation,[],[f16797,f3134])).
fof(f16797,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X20))),s('type.num.num',X21))))),s('type.num.num',X22))))) )),
  inference(forward_demodulation,[],[f16796,f280])).
fof(f16796,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num',X22))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X20))),s('type.num.num',X21))))),s('type.num.num',X22))))) )),
  inference(forward_demodulation,[],[f16795,f281])).
fof(f16795,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X20))),s('type.num.num',X21))))),s('type.num.num',X22))))) )),
  inference(forward_demodulation,[],[f16646,f302])).
fof(f16646,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X20))),s('type.num.num',X21))))),s('type.num.num',X22))))) )),
  inference(superposition,[],[f3323,f3135])).
fof(f16764,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))))),s('type.num.num',X7)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))))))) )),
  inference(forward_demodulation,[],[f16763,f281])).
fof(f16763,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))),s('type.num.num',X7)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))))))) )),
  inference(forward_demodulation,[],[f16762,f302])).
fof(f16762,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))),s('type.num.num',X7)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))))))) )),
  inference(forward_demodulation,[],[f16761,f3134])).
fof(f16761,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))))),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f16760,f281])).
fof(f16760,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))))),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f16759,f281])).
fof(f16759,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))))),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f16758,f4684])).
fof(f16758,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))))),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f16638,f302])).
fof(f16638,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))))),s('type.num.num',X7))))) )),
  inference(superposition,[],[f3323,f302])).
fof(f16501,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK0))))))) ) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f15999,f3559])).
fof(f16502,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f15999,f238])).
fof(f16426,plain,(
  ( ! [X282,X281,X283] : (s('type.num.num',X283) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X281))),s('type.num.num',X282))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X281),s('type.num.num',X282))),s('type.num.num',X282)))) )),
  inference(superposition,[],[f5617,f6553])).
fof(f16423,plain,(
  ( ! [X273,X272,X274] : (s('type.num.num',X274) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X272))),s('type.num.num',X273))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X274),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X272),s('type.num.num',X273))),s('type.num.num',X273)))) )),
  inference(superposition,[],[f5232,f6553])).
fof(f16402,plain,(
  ( ! [X218,X219,X217] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X219),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X217))),s('type.num.num',X218))))) | s('type.num.num',X219) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X217),s('type.num.num',X218))),s('type.num.num',X218)))) )),
  inference(superposition,[],[f1047,f6553])).
fof(f16401,plain,(
  ( ! [X216,X215,X214] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X214))),s('type.num.num',X215))),s('type.num.num',X216))) | s('type.num.num',X216) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X214),s('type.num.num',X215))),s('type.num.num',X215)))) )),
  inference(superposition,[],[f1047,f6553])).
fof(f16331,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))),s('type.num.num',X11))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X11))))) )),
  inference(superposition,[],[f296,f6553])).
fof(f16330,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X7))),s('type.num.num',X8))),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)))))) )),
  inference(superposition,[],[f302,f6553])).
fof(f16329,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X6))))),s('type.num.num',X6))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num',X6))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X5))),s('type.num.num',X6)))))))) )),
  inference(superposition,[],[f286,f6553])).
fof(f16328,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X3))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f3134,f6553])).
fof(f16455,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f16326,f213])).
fof(f16326,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f6553])).
fof(f16452,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X5))),s('type.num.num',X5)))) )),
  inference(forward_demodulation,[],[f16451,f319])).
fof(f16451,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X5))),s('type.num.num',X5)))) )),
  inference(forward_demodulation,[],[f16273,f217])).
fof(f16273,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X5))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f6553,f4087])).
fof(f16211,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',sK0)))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f15998,f6145])).
fof(f16210,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f15998,f284])).
fof(f16154,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X0))))))) ) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f15998,f3559])).
fof(f16155,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f15998,f238])).
fof(f16070,plain,(
  ( ! [X78] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num',sK0))) | s('type.num.num',X78) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f1047,f15706])).
fof(f16069,plain,(
  ( ! [X77] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',X77))) | s('type.num.num',X77) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f1047,f15706])).
fof(f16000,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f11381,f15706])).
fof(f15999,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK0)))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f2718,f15706])).
fof(f15998,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X10)))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f2554,f15706])).
fof(f15997,plain,(
  ( ! [X9] : (s('type.num.num',sK0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f2248,f15706])).
fof(f15990,plain,(
  ( ! [X5] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num',sK0)))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f282,f15706])).
fof(f15989,plain,(
  ( ! [X4] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',X4))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f282,f15706])).
fof(f15988,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f281,f15706])).
fof(f15987,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',X2)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f280,f15706])).
fof(f15986,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',sK0)))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f278,f15706])).
fof(f15985,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f278,f15706])).
fof(f15922,plain,(
  ( ! [X277,X276,X278] : (s('type.num.num',X278) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X277))),s('type.num.num',X276))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X278),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X276),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X277),s('type.num.num',X276)))))) )),
  inference(superposition,[],[f5617,f6145])).
fof(f15919,plain,(
  ( ! [X269,X267,X268] : (s('type.num.num',X269) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X268))),s('type.num.num',X267))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X269),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X267),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X268),s('type.num.num',X267)))))) )),
  inference(superposition,[],[f5232,f6145])).
fof(f15898,plain,(
  ( ! [X212,X213,X214] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X214),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X213))),s('type.num.num',X212))))) | s('type.num.num',X214) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X212),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num',X212)))))) )),
  inference(superposition,[],[f1047,f6145])).
fof(f15897,plain,(
  ( ! [X210,X211,X209] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X210))),s('type.num.num',X209))),s('type.num.num',X211))) | s('type.num.num',X211) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X210),s('type.num.num',X209)))))) )),
  inference(superposition,[],[f1047,f6145])).
fof(f15821,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))))))) )),
  inference(superposition,[],[f6145,f280])).
fof(f15819,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f6145,f284])).
fof(f15706,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f15705,f312])).
fof(f15705,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f15704,f283])).
fof(f15704,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f15703,f272])).
fof(f15703,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f15672,f10817])).
fof(f15672,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f286,f7606])).
fof(f15332,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f214])).
fof(f15463,plain,(
  ( ! [X101,X99,X100,X98] : (s('type.num.num',X101) != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X98,X100,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',X99))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X98),s('type.num.num',X99))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X98,X100,'type.num.num')),s('type.num.num',X99)))))) )),
  inference(forward_demodulation,[],[f15331,f214])).
fof(f15331,plain,(
  ( ! [X101,X99,X100,X98] : (s('type.num.num',X101) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X98,X100,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',X99))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X98),s('type.num.num',X99))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X98,X100,'type.num.num')),s('type.num.num',X99)))))) )),
  inference(superposition,[],[f5617,f277])).
fof(f15462,plain,(
  ( ! [X97,X95,X96] : (s('type.num.num',X96) != s('type.num.num',X97) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X95,X96,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f15330,f214])).
fof(f15330,plain,(
  ( ! [X97,X95,X96] : (s('type.num.num',X97) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X95,X96,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f276])).
fof(f15461,plain,(
  ( ! [X94,X92,X93,X91] : (s('type.num.num',X93) != s('type.num.num',X94) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,X91),s('type.num.num',X92),s('type.num.num',X93))) | s(bool,'T_0') = s(bool,X91)) )),
  inference(forward_demodulation,[],[f15329,f214])).
fof(f15329,plain,(
  ( ! [X94,X92,X93,X91] : (s('type.num.num',X94) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,X91),s('type.num.num',X92),s('type.num.num',X93))) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f5617,f591])).
fof(f15460,plain,(
  ( ! [X90,X88,X89] : (s('type.num.num',X88) != s('type.num.num',X90) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X90),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X88),s('type.num.num',X89)))) )),
  inference(forward_demodulation,[],[f15328,f214])).
fof(f15328,plain,(
  ( ! [X90,X88,X89] : (s('type.num.num',X90) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X90),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X88),s('type.num.num',X89)))) )),
  inference(superposition,[],[f5617,f273])).
fof(f15459,plain,(
  ( ! [X87,X85,X86] : (s('type.num.num',X86) != s('type.num.num',X87) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X85),s('type.num.num',X86)))) )),
  inference(forward_demodulation,[],[f15327,f214])).
fof(f15327,plain,(
  ( ! [X87,X85,X86] : (s('type.num.num',X87) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X86),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X85),s('type.num.num',X86)))) )),
  inference(superposition,[],[f5617,f272])).
fof(f15452,plain,(
  ( ! [X72,X71] : (s('type.num.num',X71) != s('type.num.num',X72) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X71)))))) )),
  inference(forward_demodulation,[],[f15320,f214])).
fof(f15320,plain,(
  ( ! [X72,X71] : (s('type.num.num',X72) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X71)))))) )),
  inference(superposition,[],[f5617,f217])).
fof(f15445,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.num.num',X64) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X63))),s('type.num.num',X62))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X64),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num',X62))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num',X62)))))) )),
  inference(forward_demodulation,[],[f15315,f214])).
fof(f15315,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.num.num',X64) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X63))),s('type.num.num',X62))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X64),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num',X62))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num',X62)))))) )),
  inference(superposition,[],[f5617,f303])).
fof(f15314,plain,(
  ( ! [X59,X60,X58] : (s('type.num.num',X60) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num',X59))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X58),s('type.num.num',X59))),s('type.num.num',X59)))) )),
  inference(superposition,[],[f5617,f285])).
fof(f15442,plain,(
  ( ! [X52,X51] : (s('type.num.num',X51) != s('type.num.num',X52) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))) )),
  inference(forward_demodulation,[],[f15311,f214])).
fof(f15311,plain,(
  ( ! [X52,X51] : (s('type.num.num',X52) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X51),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))) )),
  inference(superposition,[],[f5617,f218])).
fof(f15310,plain,(
  ( ! [X50,X48,X49] : (s('type.num.num',X50) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X48),s('type.num.num',X49)))))) )),
  inference(superposition,[],[f5617,f284])).
fof(f15439,plain,(
  ( ! [X41,X42] : (s('type.num.num',X41) != s('type.num.num',X42) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f15307,f214])).
fof(f15307,plain,(
  ( ! [X41,X42] : (s('type.num.num',X42) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f219])).
fof(f15438,plain,(
  ( ! [X35,X36,X34] : (s('type.num.num',X36) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))),s('type.num.num',X35))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num',X35))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num',X35)))))))) )),
  inference(forward_demodulation,[],[f15304,f214])).
fof(f15304,plain,(
  ( ! [X35,X36,X34] : (s('type.num.num',X36) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))),s('type.num.num',X35))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num',X35))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num',X35)))))))) )),
  inference(superposition,[],[f5617,f286])).
fof(f15432,plain,(
  ( ! [X29] : (s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK0) != s('type.num.num',X29)) ) | $spl0),
  inference(forward_demodulation,[],[f15431,f312])).
fof(f15431,plain,(
  ( ! [X29] : (s('type.num.num',sK0) != s('type.num.num',X29) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.|48|_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f15300,f214])).
fof(f15300,plain,(
  ( ! [X29] : (s('type.num.num',X29) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.|48|_0')))) ) | $spl0),
  inference(superposition,[],[f5617,f312])).
fof(f15299,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.num.num',X28) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X25),s('type.num.num',X27))),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X25),s('type.num.num',X26))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X27),s('type.num.num',X26)))))) )),
  inference(superposition,[],[f5617,f304])).
fof(f15430,plain,(
  ( ! [X24] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X24) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))) ) | $spl0),
  inference(forward_demodulation,[],[f15429,f2353])).
fof(f15429,plain,(
  ( ! [X24] : (s('type.num.num',X24) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) ) | $spl0),
  inference(forward_demodulation,[],[f15298,f214])).
fof(f15298,plain,(
  ( ! [X24] : (s('type.num.num',X24) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) ) | $spl0),
  inference(superposition,[],[f5617,f2353])).
fof(f15416,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X9)) )),
  inference(forward_demodulation,[],[f15415,f216])).
fof(f15415,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X9) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f15289,f214])).
fof(f15289,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f216])).
fof(f15286,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5617,f214])).
fof(f15283,plain,(
  ( ! [X94,X92,X93,X91] : (s('type.num.num',X93) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X94),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X94) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,X91),s('type.num.num',X92),s('type.num.num',X93))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f5617,f591])).
fof(f14976,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X7) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f14859,f213])).
fof(f14859,plain,(
  ( ! [X6,X7] : (s('type.num.num',X7) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5232,f285])).
fof(f14855,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5232,f219])).
fof(f14974,plain,(
  ( ! [X99,X97,X100,X98] : (s('type.num.num',X100) != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X97,X99,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',X98))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X97),s('type.num.num',X98))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X97,X99,'type.num.num')),s('type.num.num',X98)))))) )),
  inference(forward_demodulation,[],[f14854,f219])).
fof(f14854,plain,(
  ( ! [X99,X97,X100,X98] : (s('type.num.num',X100) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X97,X99,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',X98))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X97),s('type.num.num',X98))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X97,X99,'type.num.num')),s('type.num.num',X98)))))) )),
  inference(superposition,[],[f5232,f277])).
fof(f14973,plain,(
  ( ! [X94,X95,X96] : (s('type.num.num',X95) != s('type.num.num',X96) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X94,X95,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f14853,f219])).
fof(f14853,plain,(
  ( ! [X94,X95,X96] : (s('type.num.num',X96) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X95),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X94,X95,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5232,f276])).
fof(f14972,plain,(
  ( ! [X92,X90,X93,X91] : (s('type.num.num',X92) != s('type.num.num',X93) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,X90),s('type.num.num',X91),s('type.num.num',X92))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(forward_demodulation,[],[f14852,f219])).
fof(f14852,plain,(
  ( ! [X92,X90,X93,X91] : (s('type.num.num',X93) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,X90),s('type.num.num',X91),s('type.num.num',X92))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f5232,f591])).
fof(f14971,plain,(
  ( ! [X88,X87,X89] : (s('type.num.num',X87) != s('type.num.num',X89) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X89),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X87),s('type.num.num',X88)))) )),
  inference(forward_demodulation,[],[f14851,f219])).
fof(f14851,plain,(
  ( ! [X88,X87,X89] : (s('type.num.num',X89) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X89),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X87),s('type.num.num',X88)))) )),
  inference(superposition,[],[f5232,f273])).
fof(f14970,plain,(
  ( ! [X85,X86,X84] : (s('type.num.num',X85) != s('type.num.num',X86) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X86),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X84),s('type.num.num',X85)))) )),
  inference(forward_demodulation,[],[f14850,f219])).
fof(f14850,plain,(
  ( ! [X85,X86,X84] : (s('type.num.num',X86) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X86),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X84),s('type.num.num',X85)))) )),
  inference(superposition,[],[f5232,f272])).
fof(f14963,plain,(
  ( ! [X70,X71] : (s('type.num.num',X70) != s('type.num.num',X71) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X70)))))) )),
  inference(forward_demodulation,[],[f14843,f219])).
fof(f14843,plain,(
  ( ! [X70,X71] : (s('type.num.num',X71) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X70)))))) )),
  inference(superposition,[],[f5232,f217])).
fof(f14838,plain,(
  ( ! [X61,X62,X60,X63] : (s('type.num.num',X63) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X62))),s('type.num.num',X61))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X60),s('type.num.num',X61))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X61)))))) )),
  inference(superposition,[],[f5232,f303])).
fof(f14837,plain,(
  ( ! [X59,X57,X58] : (s('type.num.num',X59) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X57))),s('type.num.num',X58))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X58)))) )),
  inference(superposition,[],[f5232,f285])).
fof(f14834,plain,(
  ( ! [X50,X51] : (s('type.num.num',X51) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X51),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X50)))) )),
  inference(superposition,[],[f5232,f218])).
fof(f14833,plain,(
  ( ! [X47,X48,X49] : (s('type.num.num',X49) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X49),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X47),s('type.num.num',X48)))))) )),
  inference(superposition,[],[f5232,f284])).
fof(f14830,plain,(
  ( ! [X41,X40] : (s('type.num.num',X41) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5232,f219])).
fof(f14953,plain,(
  ( ! [X35,X33,X34] : (s('type.num.num',X35) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.num.num',X34))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num',X34))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num',X34)))))))) )),
  inference(forward_demodulation,[],[f14827,f219])).
fof(f14827,plain,(
  ( ! [X35,X33,X34] : (s('type.num.num',X35) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.num.num',X34))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num',X34))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num',X34)))))))) )),
  inference(superposition,[],[f5232,f286])).
fof(f14823,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.num.num',X28) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X25),s('type.num.num',X27))),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X25),s('type.num.num',X26))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X27),s('type.num.num',X26)))))) )),
  inference(superposition,[],[f5232,f304])).
fof(f14807,plain,(
  ( ! [X92,X90,X93,X91] : (s('type.num.num',X92) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X93) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bool.COND_3'(s(bool,X90),s('type.num.num',X91),s('type.num.num',X92))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f5232,f591])).
fof(f14624,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))))) )),
  inference(forward_demodulation,[],[f14623,f218])).
fof(f14623,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))))))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))))) )),
  inference(forward_demodulation,[],[f14622,f280])).
fof(f14622,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X7))))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))))) )),
  inference(forward_demodulation,[],[f14511,f280])).
fof(f14511,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X7))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))))) )),
  inference(superposition,[],[f303,f4087])).
fof(f14621,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f14620,f219])).
fof(f14620,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f14619,f281])).
fof(f14619,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f14510,f281])).
fof(f14510,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f303,f4087])).
fof(f14350,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4087,f295])).
fof(f14352,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4087,f295])).
fof(f14177,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f303,f3839])).
fof(f14176,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f303,f3839])).
fof(f14023,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f3839,f295])).
fof(f14025,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f3839,f295])).
fof(f13748,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X14))),s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X13)))))))) )),
  inference(superposition,[],[f3134,f304])).
fof(f13852,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f13737,f3134])).
fof(f13737,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f3134,f302])).
fof(f13638,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f13600,f273])).
fof(f13600,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f286,f11526])).
fof(f13586,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK0))) | ($spl0 | $spl5 | $spl28)),
  inference(forward_demodulation,[],[f13585,f273])).
fof(f13585,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl5 | $spl28)),
  inference(backward_demodulation,[],[f13576,f7702])).
fof(f13576,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f13480,f231])).
fof(f13566,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),sK3(X6,X7,bool)),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f13531,f203])).
fof(f13531,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),sK3(X6,X7,bool)),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f234,f1077])).
fof(f13516,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f13500,f203])).
fof(f13500,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f13300,f435])).
fof(f13478,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f13300,f2248])).
fof(f13480,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0)))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f13300,f298])).
fof(f13482,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f13300,f295])).
fof(f13496,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f13300,f235])).
fof(f13497,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f13300,f230])).
fof(f13385,plain,(
  ( ! [X80,X81,X79,X82] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X81))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X82))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X82),s('type.num.num','const.bool.COND_3'(s(bool,X79),s('type.num.num',X80),s('type.num.num',X81)))))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f2248,f591])).
fof(f13345,plain,(
  ( ! [X80,X81,X79,X82] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X81))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X82))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bool.COND_3'(s(bool,X79),s('type.num.num',X80),s('type.num.num',X81))),s('type.num.num',X82)))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f2248,f591])).
fof(f13300,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f12378,f297])).
fof(f13230,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7))) | s(bool,'F_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f13174,f203])).
fof(f13174,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7))) | s(bool,'F_0') = s(bool,X6)) )),
  inference(superposition,[],[f234,f691])).
fof(f13124,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,happ(s(fun('type.num.num',bool),sK3(X80,X82,bool)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X81))))),s(bool,X83))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.num.num',fun(bool,bool)),X80),s('type.num.num',X81))),s(bool,happ(s(fun('type.num.num',bool),sK3(X80,X82,bool)),s('type.num.num',X81)))))) )),
  inference(superposition,[],[f691,f277])).
fof(f13123,plain,(
  ( ! [X78,X79,X77] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X78),s(bool,X79))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK3(X77,X78,bool)),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f691,f276])).
fof(f13122,plain,(
  ( ! [X76,X74,X75,X73] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X75),s(bool,X76))) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,X73),s(bool,X74),s(bool,X75))) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f691,f591])).
fof(f13121,plain,(
  ( ! [X70,X72,X71] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X70),s(bool,X72))) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X70),s(bool,X71)))) )),
  inference(superposition,[],[f691,f273])).
fof(f13120,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X68),s(bool,X69))) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X67),s(bool,X68)))) )),
  inference(superposition,[],[f691,f272])).
fof(f13080,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f691,f435])).
fof(f13072,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f13033,f333])).
fof(f13033,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f11452,f435])).
fof(f13021,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f12985,f273])).
fof(f12985,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f286,f11228])).
fof(f12977,plain,(
  ( ! [X17,X18] : (s(bool,X17) = s(bool,X18) | ~p(s(bool,X18)) | s(bool,'F_0') = s(bool,X17)) )),
  inference(forward_demodulation,[],[f12976,f272])).
fof(f12976,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X18)) | s(bool,X18) = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X16),s(bool,X17))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f12931,f203])).
fof(f12931,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X18)) | s(bool,X18) = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X16),s(bool,X17))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f292,f625])).
fof(f12975,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X6),s(bool,X7))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f12927,f203])).
fof(f12927,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X6),s(bool,X7))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f234,f625])).
fof(f12916,plain,(
  ( ! [X78,X76,X77,X75] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X78),s(bool,happ(s(fun('type.num.num',bool),sK3(X75,X77,bool)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X76))))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.num.num',fun(bool,bool)),X75),s('type.num.num',X76))),s(bool,happ(s(fun('type.num.num',bool),sK3(X75,X77,bool)),s('type.num.num',X76)))))) )),
  inference(superposition,[],[f625,f277])).
fof(f12915,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X74),s(bool,X73))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK3(X72,X73,bool)),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f625,f276])).
fof(f12914,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X71),s(bool,X70))) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,X68),s(bool,X69),s(bool,X70))) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f625,f591])).
fof(f12913,plain,(
  ( ! [X66,X67,X65] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X67),s(bool,X65))) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X65),s(bool,X66)))) )),
  inference(superposition,[],[f625,f273])).
fof(f12912,plain,(
  ( ! [X64,X62,X63] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X64),s(bool,X63))) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X62),s(bool,X63)))) )),
  inference(superposition,[],[f625,f272])).
fof(f12852,plain,(
  ( ! [X19,X20,X18] : (s(bool,X18) = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X18),s(bool,X19))) | s(bool,'F_0') = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f625,f435])).
fof(f12767,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f12728,f333])).
fof(f12728,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f11203,f435])).
fof(f12677,plain,(
  ( ! [X410,X409,X411] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X411)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,X409),s('type.num.num',X410),s('type.num.num',X411))) | s(bool,'T_0') = s(bool,X409)) )),
  inference(superposition,[],[f3559,f591])).
fof(f12666,plain,(
  ( ! [X368,X370,X367,X369] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X370),s('type.num.num',X369))) | s('type.num.num',X370) != s('type.num.num','const.bool.COND_3'(s(bool,X367),s('type.num.num',X368),s('type.num.num',X369))) | s(bool,'T_0') = s(bool,X367)) )),
  inference(superposition,[],[f1047,f591])).
fof(f12665,plain,(
  ( ! [X364,X366,X365,X363] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X365),s('type.num.num',X366))) | s('type.num.num',X366) != s('type.num.num','const.bool.COND_3'(s(bool,X363),s('type.num.num',X364),s('type.num.num',X365))) | s(bool,'T_0') = s(bool,X363)) )),
  inference(superposition,[],[f1047,f591])).
fof(f12664,plain,(
  ( ! [X360,X362,X361] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X362) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bool.COND_3'(s(bool,X360),s('type.num.num',X361),s('type.num.num',X362))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X360)) )),
  inference(superposition,[],[f914,f591])).
fof(f12653,plain,(
  ( ! [X325,X327,X329,X326,X328] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X328),s('type.num.num',X327)))) | s('type.num.num',X329) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bool.COND_3'(s(bool,X325),s('type.num.num',X326),s('type.num.num',X327))),s('type.num.num',X328))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num',X328))) = s('type.num.num','const.bool.COND_3'(s(bool,X325),s('type.num.num',X326),s('type.num.num',X327))) | s(bool,'T_0') = s(bool,X325)) )),
  inference(superposition,[],[f307,f591])).
fof(f12652,plain,(
  ( ! [X321,X323,X324,X320,X322] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X322),s('type.num.num',X323)))) | s('type.num.num',X324) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X323),s('type.num.num','const.bool.COND_3'(s(bool,X320),s('type.num.num',X321),s('type.num.num',X322))))) | s('type.num.num',X323) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num','const.bool.COND_3'(s(bool,X320),s('type.num.num',X321),s('type.num.num',X322))))) | s(bool,'T_0') = s(bool,X320)) )),
  inference(superposition,[],[f307,f591])).
fof(f12651,plain,(
  ( ! [X315,X316,X318,X317,X319] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X318),s('type.num.num',X317)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X319),s('type.num.num',X318))) != s('type.num.num','const.bool.COND_3'(s(bool,X315),s('type.num.num',X316),s('type.num.num',X317))) | s('type.num.num',X319) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bool.COND_3'(s(bool,X315),s('type.num.num',X316),s('type.num.num',X317))),s('type.num.num',X318))) | s(bool,'T_0') = s(bool,X315)) )),
  inference(superposition,[],[f306,f591])).
fof(f12650,plain,(
  ( ! [X313,X310,X312,X314,X311] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X312),s('type.num.num',X313)))) | s('type.num.num',X313) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X314),s('type.num.num','const.bool.COND_3'(s(bool,X310),s('type.num.num',X311),s('type.num.num',X312))))) | s('type.num.num',X314) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X313),s('type.num.num','const.bool.COND_3'(s(bool,X310),s('type.num.num',X311),s('type.num.num',X312))))) | s(bool,'T_0') = s(bool,X310)) )),
  inference(superposition,[],[f306,f591])).
fof(f12649,plain,(
  ( ! [X308,X306,X309,X305,X307] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X308),s('type.num.num',X307)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X308),s('type.num.num',X309))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.bool.COND_3'(s(bool,X305),s('type.num.num',X306),s('type.num.num',X307))),s('type.num.num',X309)))))) | s(bool,'T_0') = s(bool,X305)) )),
  inference(superposition,[],[f305,f591])).
fof(f12648,plain,(
  ( ! [X300,X302,X304,X301,X303] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X302),s('type.num.num',X303)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.bool.COND_3'(s(bool,X300),s('type.num.num',X301),s('type.num.num',X302))),s('type.num.num',X304))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X303),s('type.num.num',X304)))))) | s(bool,'T_0') = s(bool,X300)) )),
  inference(superposition,[],[f305,f591])).
fof(f12638,plain,(
  ( ! [X253,X251,X254,X252] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X254),s('type.num.num',X253)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bool.COND_3'(s(bool,X251),s('type.num.num',X252),s('type.num.num',X253))),s('type.num.num',X254)))) | s(bool,'T_0') = s(bool,X251)) )),
  inference(superposition,[],[f299,f591])).
fof(f12637,plain,(
  ( ! [X249,X250,X248,X247] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X249),s('type.num.num',X250)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X250),s('type.num.num','const.bool.COND_3'(s(bool,X247),s('type.num.num',X248),s('type.num.num',X249)))))) | s(bool,'T_0') = s(bool,X247)) )),
  inference(superposition,[],[f299,f591])).
fof(f12636,plain,(
  ( ! [X243,X246,X244,X245] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X245),s('type.num.num',X246)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X246),s('type.num.num','const.bool.COND_3'(s(bool,X243),s('type.num.num',X244),s('type.num.num',X245)))))) | s(bool,'T_0') = s(bool,X243)) )),
  inference(superposition,[],[f298,f591])).
fof(f12635,plain,(
  ( ! [X241,X239,X242,X240] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X242),s('type.num.num',X241)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bool.COND_3'(s(bool,X239),s('type.num.num',X240),s('type.num.num',X241))),s('type.num.num',X242)))) | s(bool,'T_0') = s(bool,X239)) )),
  inference(superposition,[],[f298,f591])).
fof(f12634,plain,(
  ( ! [X237,X235,X238,X236] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X238),s('type.num.num',X237)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X238),s('type.num.num','const.bool.COND_3'(s(bool,X235),s('type.num.num',X236),s('type.num.num',X237))))) | s(bool,'T_0') = s(bool,X235)) )),
  inference(superposition,[],[f297,f591])).
fof(f12633,plain,(
  ( ! [X231,X233,X234,X232] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X233),s('type.num.num',X234)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bool.COND_3'(s(bool,X231),s('type.num.num',X232),s('type.num.num',X233))),s('type.num.num',X234))) | s(bool,'T_0') = s(bool,X231)) )),
  inference(superposition,[],[f297,f591])).
fof(f12632,plain,(
  ( ! [X229,X227,X230,X228] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X230),s('type.num.num',X229))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X230),s('type.num.num','const.bool.COND_3'(s(bool,X227),s('type.num.num',X228),s('type.num.num',X229)))))) | s(bool,'T_0') = s(bool,X227)) )),
  inference(superposition,[],[f296,f591])).
fof(f12631,plain,(
  ( ! [X225,X223,X226,X224] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X225),s('type.num.num',X226))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bool.COND_3'(s(bool,X223),s('type.num.num',X224),s('type.num.num',X225))),s('type.num.num',X226)))) | s(bool,'T_0') = s(bool,X223)) )),
  inference(superposition,[],[f296,f591])).
fof(f12630,plain,(
  ( ! [X222,X220,X219,X221] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X222),s('type.num.num',X221)))) | s('type.num.num',X222) != s('type.num.num','const.bool.COND_3'(s(bool,X219),s('type.num.num',X220),s('type.num.num',X221))) | s(bool,'T_0') = s(bool,X219)) )),
  inference(superposition,[],[f295,f591])).
fof(f12629,plain,(
  ( ! [X218,X216,X215,X217] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X217),s('type.num.num',X218)))) | s('type.num.num',X218) != s('type.num.num','const.bool.COND_3'(s(bool,X215),s('type.num.num',X216),s('type.num.num',X217))) | s(bool,'T_0') = s(bool,X215)) )),
  inference(superposition,[],[f295,f591])).
fof(f12628,plain,(
  ( ! [X212,X213,X211,X214] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X214),s('type.num.num',X213)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X214),s('type.num.num','const.bool.COND_3'(s(bool,X211),s('type.num.num',X212),s('type.num.num',X213)))))) | s('type.num.num',X214) = s('type.num.num','const.bool.COND_3'(s(bool,X211),s('type.num.num',X212),s('type.num.num',X213))) | s(bool,'T_0') = s(bool,X211)) )),
  inference(superposition,[],[f293,f591])).
fof(f12627,plain,(
  ( ! [X210,X208,X209,X207] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X209),s('type.num.num',X210)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bool.COND_3'(s(bool,X207),s('type.num.num',X208),s('type.num.num',X209))),s('type.num.num',X210)))) | s('type.num.num',X210) = s('type.num.num','const.bool.COND_3'(s(bool,X207),s('type.num.num',X208),s('type.num.num',X209))) | s(bool,'T_0') = s(bool,X207)) )),
  inference(superposition,[],[f293,f591])).
fof(f12626,plain,(
  ( ! [X206,X204,X205,X203] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X205),s('type.num.num',X206)))) | s('type.num.num',X206) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X206),s('type.num.num','const.bool.COND_3'(s(bool,X203),s('type.num.num',X204),s('type.num.num',X205))))),s('type.num.num','const.bool.COND_3'(s(bool,X203),s('type.num.num',X204),s('type.num.num',X205))))) | s(bool,'T_0') = s(bool,X203)) )),
  inference(superposition,[],[f288,f591])).
fof(f12625,plain,(
  ( ! [X202,X200,X199,X201] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X201)))) | s('type.num.num','const.bool.COND_3'(s(bool,X199),s('type.num.num',X200),s('type.num.num',X201))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bool.COND_3'(s(bool,X199),s('type.num.num',X200),s('type.num.num',X201))),s('type.num.num',X202))),s('type.num.num',X202))) | s(bool,'T_0') = s(bool,X199)) )),
  inference(superposition,[],[f288,f591])).
fof(f12624,plain,(
  ( ! [X198,X196,X197,X195] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X198),s('type.num.num',X197)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X198),s('type.num.num','const.bool.COND_3'(s(bool,X195),s('type.num.num',X196),s('type.num.num',X197)))))) | s(bool,'T_0') = s(bool,X195)) )),
  inference(superposition,[],[f287,f591])).
fof(f12623,plain,(
  ( ! [X191,X194,X192,X193] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X193),s('type.num.num',X194)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bool.COND_3'(s(bool,X191),s('type.num.num',X192),s('type.num.num',X193))),s('type.num.num',X194)))) | s(bool,'T_0') = s(bool,X191)) )),
  inference(superposition,[],[f287,f591])).
fof(f12605,plain,(
  ( ! [X118,X120,X119] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X120),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bool.COND_3'(s(bool,X118),s('type.num.num',X119),s('type.num.num',X120))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f239,f591])).
fof(f12604,plain,(
  ( ! [X116,X117,X115] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X117),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,X115),s('type.num.num',X116),s('type.num.num',X117))) | s(bool,'T_0') = s(bool,X115)) )),
  inference(superposition,[],[f238,f591])).
fof(f12595,plain,(
  ( ! [X90,X88,X87,X91,X89,X86] : (s(X86,happ(s(fun('type.num.num',X86),sK3('const.bool.COND_3'(s(bool,X87),s(fun('type.num.num',fun(X86,X86)),X88),s(fun('type.num.num',fun(X86,X86)),X89)),X90,X86)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X91))))) = s(X86,happ(s(fun(X86,X86),happ(s(fun('type.num.num',fun(X86,X86)),X89),s('type.num.num',X91))),s(X86,happ(s(fun('type.num.num',X86),sK3('const.bool.COND_3'(s(bool,X87),s(fun('type.num.num',fun(X86,X86)),X88),s(fun('type.num.num',fun(X86,X86)),X89)),X90,X86)),s('type.num.num',X91))))) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f277,f591])).
fof(f12594,plain,(
  ( ! [X85,X83,X84] : (p(s(bool,happ(s(fun('type.num.num',bool),X85),s('type.num.num',sK2('const.bool.COND_3'(s(bool,X83),s(fun('type.num.num',bool),X84),s(fun('type.num.num',bool),X85))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,X83),s(fun('type.num.num',bool),X84),s(fun('type.num.num',bool),X85))),s('type.num.num','const.num.|48|_0')))) | s(bool,'T_0') = s(bool,X83)) )),
  inference(superposition,[],[f311,f591])).
fof(f12593,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2('const.bool.COND_3'(s(bool,X79),s(fun('type.num.num',bool),X80),s(fun('type.num.num',bool),X81))))))))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,X79),s(fun('type.num.num',bool),X80),s(fun('type.num.num',bool),X81))),s('type.num.num',X82)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,X79),s(fun('type.num.num',bool),X80),s(fun('type.num.num',bool),X81))),s('type.num.num','const.num.|48|_0')))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f229,f591])).
fof(f12590,plain,(
  ( ! [X70,X72,X71,X69] : (p(s(bool,X71)) | s(bool,X72) = s(bool,'const.bool.COND_3'(s(bool,X69),s(bool,X70),s(bool,X71))) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f487,f591])).
fof(f12585,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X51)) | ~p(s(bool,X52)) | s(bool,X52) = s(bool,'const.bool.COND_3'(s(bool,X49),s(bool,X50),s(bool,X51))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f292,f591])).
fof(f12583,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,X43)) | p(s(bool,X44)) | s(bool,X44) = s(bool,'const.bool.COND_3'(s(bool,X41),s(bool,X42),s(bool,X43))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f289,f591])).
fof(f12582,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,X40)) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,X38),s(bool,X39),s(bool,X40))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f235,f591])).
fof(f12581,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,X37)) | s(bool,'F_0') != s(bool,'const.bool.COND_3'(s(bool,X35),s(bool,X36),s(bool,X37))) | s(bool,'T_0') = s(bool,X35)) )),
  inference(superposition,[],[f234,f591])).
fof(f12580,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,X34)) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X32),s(bool,X33),s(bool,X34))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f231,f591])).
fof(f12579,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') != s(bool,X31) | p(s(bool,'const.bool.COND_3'(s(bool,X29),s(bool,X30),s(bool,X31)))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f230,f591])).
fof(f12567,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X9),s(bool,X10),s(bool,X11)))) )),
  inference(superposition,[],[f591,f435])).
fof(f12566,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X5) | s(bool,X8) = s(bool,'const.bool.COND_3'(s(bool,X5),s(bool,X6),s(bool,X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f591,f435])).
fof(f12565,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X2),s(bool,X3),s(bool,X4)))) )),
  inference(superposition,[],[f591,f226])).
fof(f12564,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f591,f286])).
fof(f12425,plain,(
  ( ! [X140,X138,X136,X135,X139,X137] : (s(X138,X139) = s(X138,'const.bool.COND_3'(s(bool,happ(s(fun('type.num.num',bool),sK3(X135,X137,bool)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X136))))),s(X138,X140),s(X138,X139))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.num.num',fun(bool,bool)),X135),s('type.num.num',X136))),s(bool,happ(s(fun('type.num.num',bool),sK3(X135,X137,bool)),s('type.num.num',X136)))))) )),
  inference(superposition,[],[f591,f277])).
fof(f12424,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(X132,X133) = s(X132,'const.bool.COND_3'(s(bool,X131),s(X132,X134),s(X132,X133))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK3(X130,X131,bool)),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f591,f276])).
fof(f12423,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (s(X127,X128) = s(X127,'const.bool.COND_3'(s(bool,X126),s(X127,X129),s(X127,X128))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X124),s(bool,X125),s(bool,X126))) | s(bool,'T_0') = s(bool,X124)) )),
  inference(superposition,[],[f591,f591])).
fof(f12422,plain,(
  ( ! [X123,X121,X122,X120,X119] : (s(X121,X122) = s(X121,'const.bool.COND_3'(s(bool,X119),s(X121,X123),s(X121,X122))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X119),s(bool,X120)))) )),
  inference(superposition,[],[f591,f273])).
fof(f12421,plain,(
  ( ! [X118,X116,X114,X117,X115] : (s(X116,X117) = s(X116,'const.bool.COND_3'(s(bool,X115),s(X116,X118),s(X116,X117))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X114),s(bool,X115)))) )),
  inference(superposition,[],[f591,f272])).
fof(f12378,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f11188,f3135])).
fof(f12370,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f12353,f203])).
fof(f12353,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f11439,f435])).
fof(f12361,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f12360,f272])).
fof(f12360,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))))) | ($spl0 | $spl28)),
  inference(backward_demodulation,[],[f12350,f10844])).
fof(f12350,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11439,f235])).
fof(f12351,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11439,f230])).
fof(f11936,plain,(
  ( ! [X163,X161,X162,X160] : (s(X162,f(s(bool,'T_0'))) != s(X162,g(s(bool,'T_0'))) | s(fun(bool,X162),X160) = s(fun(bool,X162),X161) | s(bool,X163) = s(bool,sK4(X160,X161,X162,bool)) | s(bool,'T_0') = s(bool,X163)) )),
  inference(superposition,[],[f301,f435])).
fof(f11932,plain,(
  ( ! [X146,X149,X147,X148] : (s(bool,happ(s(fun('type.num.num',bool),sK3(X146,X147,bool)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X148))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.num.num',fun(bool,bool)),X146),s('type.num.num',X148))),s(bool,'T_0'))) | s(bool,X149) = s(bool,happ(s(fun('type.num.num',bool),sK3(X146,X147,bool)),s('type.num.num',X148))) | s(bool,'T_0') = s(bool,X149)) )),
  inference(superposition,[],[f277,f435])).
fof(f11930,plain,(
  ( ! [X142,X140,X141,X139] : (s(bool,'T_0') != s(bool,f(s(X139,sK4(X140,X141,bool,X139)))) | s(fun(X139,bool),X140) = s(fun(X139,bool),X141) | s(bool,X142) = s(bool,g(s(X139,sK4(X140,X141,bool,X139)))) | s(bool,'T_0') = s(bool,X142)) )),
  inference(superposition,[],[f301,f435])).
fof(f12330,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.num.num',X105) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X103))) | s('type.num.num',X104) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X105),s('type.num.num',X103))) | s(bool,X106) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X103),s('type.num.num',X104))) | s(bool,'T_0') = s(bool,X106)) )),
  inference(subsumption_resolution,[],[f11916,f203])).
fof(f11916,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'T_0')) | s('type.num.num',X105) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X103))) | s('type.num.num',X104) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X105),s('type.num.num',X103))) | s(bool,X106) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X103),s('type.num.num',X104))) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f307,f435])).
fof(f12329,plain,(
  ( ! [X101,X99,X102,X100] : (s('type.num.num',X100) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X99))) | s('type.num.num',X101) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num',X99))) | s(bool,X102) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X99),s('type.num.num',X100))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(subsumption_resolution,[],[f11915,f203])).
fof(f11915,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'T_0')) | s('type.num.num',X100) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X99))) | s('type.num.num',X101) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num',X99))) | s(bool,X102) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X99),s('type.num.num',X100))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f306,f435])).
fof(f12328,plain,(
  ( ! [X97,X95,X98,X96] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X97))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X96),s('type.num.num',X97)))))) | s(bool,X98) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X95),s('type.num.num',X96))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f11914,f203])).
fof(f11914,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X97))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X96),s('type.num.num',X97)))))) | s(bool,X98) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X95),s('type.num.num',X96))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f305,f435])).
fof(f12327,plain,(
  ( ! [X90,X91,X89] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X89),s('type.num.num',X90))) | s(bool,X91) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X89),s('type.num.num',X90))) | s(bool,'T_0') = s(bool,X91)) )),
  inference(subsumption_resolution,[],[f11912,f203])).
fof(f11912,plain,(
  ( ! [X90,X91,X89] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X89),s('type.num.num',X90))) | s(bool,X91) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X89),s('type.num.num',X90))) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f297,f435])).
fof(f12326,plain,(
  ( ! [X85,X83,X84] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X83),s('type.num.num',X84)))) | s('type.num.num',X83) = s('type.num.num',X84) | s(bool,X85) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X83),s('type.num.num',X84))) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f11910,f203])).
fof(f11910,plain,(
  ( ! [X85,X83,X84] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X83),s('type.num.num',X84)))) | s('type.num.num',X83) = s('type.num.num',X84) | s(bool,X85) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X83),s('type.num.num',X84))) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f293,f435])).
fof(f12325,plain,(
  ( ! [X80,X81,X82] : (s('type.num.num',X81) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X81),s('type.num.num',X80))),s('type.num.num',X80))) | s(bool,X82) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X80),s('type.num.num',X81))) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f11909,f203])).
fof(f11909,plain,(
  ( ! [X80,X81,X82] : (~p(s(bool,'T_0')) | s('type.num.num',X81) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X81),s('type.num.num',X80))),s('type.num.num',X80))) | s(bool,X82) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X80),s('type.num.num',X81))) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f288,f435])).
fof(f12324,plain,(
  ( ! [X78,X79] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X78) | s(bool,X79) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(subsumption_resolution,[],[f11908,f203])).
fof(f11908,plain,(
  ( ! [X78,X79] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78) | s(bool,X79) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f238,f435])).
fof(f12323,plain,(
  ( ! [X66,X67,X65] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',X66)))) | s(bool,X67) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num',X66))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f11902,f203])).
fof(f11902,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',X66)))) | s(bool,X67) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num',X66))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f287,f435])).
fof(f12322,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X62)))) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num',X63))) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f11901,f203])).
fof(f11901,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X62)))) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num',X63))) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f299,f435])).
fof(f12321,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num',X57))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X56),s('type.num.num',X57))) | s(bool,'T_0') = s(bool,X58)) )),
  inference(forward_demodulation,[],[f11899,f273])).
fof(f11899,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num',X57))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X56),s('type.num.num',X57))) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f286,f435])).
fof(f12320,plain,(
  ( ! [X47,X45,X46] : (p(s(bool,happ(s(fun('type.num.num',bool),X45),s('type.num.num',X46)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X45),s('type.num.num','const.num.|48|_0')))) | s(bool,X47) = s(bool,happ(s(fun('type.num.num',bool),X45),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(X45)))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f11894,f203])).
fof(f11894,plain,(
  ( ! [X47,X45,X46] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.num.num',bool),X45),s('type.num.num',X46)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X45),s('type.num.num','const.num.|48|_0')))) | s(bool,X47) = s(bool,happ(s(fun('type.num.num',bool),X45),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(X45)))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f229,f435])).
fof(f12319,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f11882,f203])).
fof(f11882,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f292,f435])).
fof(f12318,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f11878,f203])).
fof(f11878,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f234,f435])).
fof(f11862,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(X6,X7) = s(X6,'const.bool.COND_3'(s(bool,X5),s(X6,X7),s(X6,X8))) | s(bool,X5) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f273,f435])).
fof(f11861,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f230,f435])).
fof(f11788,plain,(
  ( ! [X177,X180,X178,X179] : (s(X179,f(s(bool,X180))) != s(X179,g(s(bool,X180))) | s(fun(bool,X179),X177) = s(fun(bool,X179),X178) | s(bool,'T_0') = s(bool,X180) | s(bool,'T_0') = s(bool,sK4(X177,X178,X179,bool))) )),
  inference(superposition,[],[f301,f435])).
fof(f11784,plain,(
  ( ! [X165,X163,X166,X164] : (s(bool,happ(s(fun('type.num.num',bool),sK3(X163,X164,bool)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X165))))) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.num.num',fun(bool,bool)),X163),s('type.num.num',X165))),s(bool,X166))) | s(bool,'T_0') = s(bool,X166) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK3(X163,X164,bool)),s('type.num.num',X165)))) )),
  inference(superposition,[],[f277,f435])).
fof(f11782,plain,(
  ( ! [X158,X156,X159,X157] : (s(bool,X159) != s(bool,f(s(X156,sK4(X157,X158,bool,X156)))) | s(fun(X156,bool),X157) = s(fun(X156,bool),X158) | s(bool,'T_0') = s(bool,X159) | s(bool,'T_0') = s(bool,g(s(X156,sK4(X157,X158,bool,X156))))) )),
  inference(superposition,[],[f301,f435])).
fof(f11742,plain,(
  ( ! [X64,X65,X63] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))),s('type.num.num',X64))) = s('type.num.num','const.bool.COND_3'(s(bool,X65),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num',X64))))))) | s(bool,'T_0') = s(bool,X65) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X63),s('type.num.num',X64)))) )),
  inference(superposition,[],[f286,f435])).
fof(f11691,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK3(X50,X52,bool)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))))) | s(bool,X53) = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.num.num',fun(bool,bool)),X50),s('type.num.num',X51))),s(bool,happ(s(fun('type.num.num',bool),sK3(X50,X52,bool)),s('type.num.num',X51))))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f435,f277])).
fof(f11690,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,happ(s(fun('type.num.num',bool),sK3(X47,X48,bool)),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f435,f276])).
fof(f11689,plain,(
  ( ! [X45,X46,X44] : (s(bool,'T_0') = s(bool,X44) | s(bool,X46) = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X44),s(bool,X45))) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f435,f273])).
fof(f11688,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X41),s(bool,X42))) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f435,f272])).
fof(f11682,plain,(
  ( ! [X33,X31,X32] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',X32))) | s(bool,X33) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f435,f278])).
fof(f11680,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X24))) | s(bool,X25) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f435,f282])).
fof(f11666,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f435,f435])).
fof(f11632,plain,(
  ( ! [X68,X66,X67,X65] : (s(bool,X68) = s(bool,happ(s(fun('type.num.num',bool),sK3(X65,X67,bool)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))) | s(bool,'T_0') = s(bool,X68) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun('type.num.num',fun(bool,bool)),X65),s('type.num.num',X66))),s(bool,happ(s(fun('type.num.num',bool),sK3(X65,X67,bool)),s('type.num.num',X66)))))) )),
  inference(superposition,[],[f435,f277])).
fof(f11631,plain,(
  ( ! [X64,X62,X63] : (s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK3(X62,X63,bool)),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f435,f276])).
fof(f11630,plain,(
  ( ! [X61,X59,X60] : (s(bool,X59) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X59),s(bool,X60)))) )),
  inference(superposition,[],[f435,f273])).
fof(f11629,plain,(
  ( ! [X57,X58,X56] : (s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X56),s(bool,X57)))) )),
  inference(superposition,[],[f435,f272])).
fof(f11621,plain,(
  ( ! [X45,X46,X44] : (s(bool,X46) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X44),s('type.num.num',X45))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))) )),
  inference(superposition,[],[f435,f278])).
fof(f11615,plain,(
  ( ! [X33,X34,X32] : (s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num',X33))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))) )),
  inference(superposition,[],[f435,f282])).
fof(f11520,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11438,f287])).
fof(f11526,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11438,f231])).
fof(f11469,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f11381,f297])).
fof(f11438,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11426,f298])).
fof(f11439,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11426,f287])).
fof(f11440,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11426,f295])).
fof(f11452,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11426,f235])).
fof(f11453,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11426,f230])).
fof(f11426,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f10952,f297])).
fof(f11381,plain,(
  ( ! [X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X13)))) )),
  inference(subsumption_resolution,[],[f11294,f1843])).
fof(f11294,plain,(
  ( ! [X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X13)))) )),
  inference(superposition,[],[f239,f321])).
fof(f11228,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f11022,f231])).
fof(f11188,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f10951,f296])).
fof(f11203,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f10951,f235])).
fof(f11204,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f10951,f230])).
fof(f11022,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0)))))) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f10927,f10952])).
fof(f10916,plain,(
  ( ! [X67] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | s('type.num.num',X67) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) ) | $spl0),
  inference(superposition,[],[f1047,f2353])).
fof(f10915,plain,(
  ( ! [X66] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',X66))) | s('type.num.num',X66) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) ) | $spl0),
  inference(superposition,[],[f1047,f2353])).
fof(f10952,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f10855,f10951])).
fof(f10951,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0')))) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f10950,f9531])).
fof(f10844,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))))) | $spl0),
  inference(superposition,[],[f286,f2353])).
fof(f2353,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | $spl0),
  inference(superposition,[],[f279,f312])).
fof(f10098,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f10073,f203])).
fof(f10073,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f288,f7544])).
fof(f10104,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f10079,f203])).
fof(f10079,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f306,f7544])).
fof(f10107,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f10080,f203])).
fof(f10080,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f307,f7544])).
fof(f7702,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl5),
  inference(superposition,[],[f286,f6909])).
fof(f10653,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,X45)) | s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))) | s('type.num.num',X43) != s('type.num.num',X44)) )),
  inference(subsumption_resolution,[],[f10533,f203])).
fof(f10533,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X45)) | s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))) | s('type.num.num',X43) != s('type.num.num',X44)) )),
  inference(superposition,[],[f292,f1047])).
fof(f10652,plain,(
  ( ! [X33,X34] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X34))) | s('type.num.num',X33) != s('type.num.num',X34)) )),
  inference(subsumption_resolution,[],[f10529,f203])).
fof(f10529,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X34))) | s('type.num.num',X33) != s('type.num.num',X34)) )),
  inference(superposition,[],[f234,f1047])).
fof(f10651,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X20) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X18))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X18))) | s('type.num.num',X18) != s('type.num.num',X19)) )),
  inference(subsumption_resolution,[],[f10516,f203])).
fof(f10516,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X18))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X18))) | s('type.num.num',X18) != s('type.num.num',X19)) )),
  inference(superposition,[],[f307,f1047])).
fof(f10650,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X15))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X15))) | s('type.num.num',X15) != s('type.num.num',X16)) )),
  inference(subsumption_resolution,[],[f10515,f203])).
fof(f10515,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X15))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X15))) | s('type.num.num',X15) != s('type.num.num',X16)) )),
  inference(superposition,[],[f306,f1047])).
fof(f10649,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num',X14))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14)))))) | s('type.num.num',X12) != s('type.num.num',X13)) )),
  inference(subsumption_resolution,[],[f10514,f203])).
fof(f10514,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num',X14))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14)))))) | s('type.num.num',X12) != s('type.num.num',X13)) )),
  inference(superposition,[],[f305,f1047])).
fof(f10648,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) | s('type.num.num',X8) != s('type.num.num',X9)) )),
  inference(subsumption_resolution,[],[f10512,f203])).
fof(f10512,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) | s('type.num.num',X8) != s('type.num.num',X9)) )),
  inference(superposition,[],[f297,f1047])).
fof(f10647,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X2))) | s('type.num.num',X2) != s('type.num.num',X3)) )),
  inference(subsumption_resolution,[],[f10509,f203])).
fof(f10509,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X2))) | s('type.num.num',X2) != s('type.num.num',X3)) )),
  inference(superposition,[],[f288,f1047])).
fof(f10498,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))) )),
  inference(superposition,[],[f1047,f278])).
fof(f10497,plain,(
  ( ! [X85,X83,X86,X84] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X86),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X83,X85,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',X84))))))) | s('type.num.num',X86) != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X83),s('type.num.num',X84))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X83,X85,'type.num.num')),s('type.num.num',X84)))))) )),
  inference(superposition,[],[f1047,f277])).
fof(f10496,plain,(
  ( ! [X80,X81,X82] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X82),s('type.num.num',X81))) | s('type.num.num',X82) != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X80,X81,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1047,f276])).
fof(f10495,plain,(
  ( ! [X78,X79,X77] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X79),s('type.num.num',X77))) | s('type.num.num',X79) != s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X77),s('type.num.num',X78)))) )),
  inference(superposition,[],[f1047,f273])).
fof(f10494,plain,(
  ( ! [X76,X74,X75] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X76),s('type.num.num',X75))) | s('type.num.num',X76) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X74),s('type.num.num',X75)))) )),
  inference(superposition,[],[f1047,f272])).
fof(f10492,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X71) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) )),
  inference(superposition,[],[f1047,f215])).
fof(f10490,plain,(
  ( ! [X66,X67] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X67) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X66),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1047,f213])).
fof(f10488,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) | s('type.num.num',X64) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X63)))))) )),
  inference(superposition,[],[f1047,f217])).
fof(f10483,plain,(
  ( ! [X57,X58,X56,X55] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X57))),s('type.num.num',X56))))) | s('type.num.num',X58) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num',X56)))))) )),
  inference(superposition,[],[f1047,f303])).
fof(f10482,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))),s('type.num.num',X53))))) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num',X53))),s('type.num.num',X53)))) )),
  inference(superposition,[],[f1047,f285])).
fof(f10479,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num',X45))) | s('type.num.num',X46) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X45)))) )),
  inference(superposition,[],[f1047,f218])).
fof(f10478,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43))))))) | s('type.num.num',X44) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',X43)))))) )),
  inference(superposition,[],[f1047,f284])).
fof(f10475,plain,(
  ( ! [X35,X36] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X36),s('type.num.num',X35))) | s('type.num.num',X36) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1047,f219])).
fof(f10474,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num',X33))))) | s('type.num.num',X34) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X32),s('type.num.num',X33)))))))) )),
  inference(superposition,[],[f1047,f286])).
fof(f10471,plain,(
  ( ! [X28] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num',sK0))) | s('type.num.num',X28) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) ) | $spl0),
  inference(superposition,[],[f1047,f312])).
fof(f10470,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num',X26))),s('type.num.num',X25))))) | s('type.num.num',X27) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X26),s('type.num.num',X25)))))) )),
  inference(superposition,[],[f1047,f304])).
fof(f10464,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))))) | s('type.num.num',X16) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) )),
  inference(superposition,[],[f1047,f283])).
fof(f10461,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X9) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) )),
  inference(superposition,[],[f1047,f216])).
fof(f10458,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1047,f214])).
fof(f10457,plain,(
  ( ! [X85,X83,X86,X84] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X83,X85,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',X84))))),s('type.num.num',X86))) | s('type.num.num',X86) != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),X83),s('type.num.num',X84))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X83,X85,'type.num.num')),s('type.num.num',X84)))))) )),
  inference(superposition,[],[f1047,f277])).
fof(f10456,plain,(
  ( ! [X80,X81,X82] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X81),s('type.num.num',X82))) | s('type.num.num',X82) != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X80,X81,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1047,f276])).
fof(f10455,plain,(
  ( ! [X78,X79,X77] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X77),s('type.num.num',X79))) | s('type.num.num',X79) != s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X77),s('type.num.num',X78)))) )),
  inference(superposition,[],[f1047,f273])).
fof(f10454,plain,(
  ( ! [X76,X74,X75] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X75),s('type.num.num',X76))) | s('type.num.num',X76) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X74),s('type.num.num',X75)))) )),
  inference(superposition,[],[f1047,f272])).
fof(f10448,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X64))) | s('type.num.num',X64) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X63)))))) )),
  inference(superposition,[],[f1047,f217])).
fof(f10443,plain,(
  ( ! [X57,X58,X56,X55] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X57))),s('type.num.num',X56))),s('type.num.num',X58))) | s('type.num.num',X58) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num',X56)))))) )),
  inference(superposition,[],[f1047,f303])).
fof(f10442,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))),s('type.num.num',X53))),s('type.num.num',X54))) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num',X53))),s('type.num.num',X53)))) )),
  inference(superposition,[],[f1047,f285])).
fof(f10439,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X46))) | s('type.num.num',X46) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X45)))) )),
  inference(superposition,[],[f1047,f218])).
fof(f10438,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43))))),s('type.num.num',X44))) | s('type.num.num',X44) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',X43)))))) )),
  inference(superposition,[],[f1047,f284])).
fof(f10435,plain,(
  ( ! [X35,X36] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num',X36))) | s('type.num.num',X36) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1047,f219])).
fof(f10434,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num',X33))),s('type.num.num',X34))) | s('type.num.num',X34) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X32),s('type.num.num',X33)))))))) )),
  inference(superposition,[],[f1047,f286])).
fof(f10431,plain,(
  ( ! [X28] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',X28))) | s('type.num.num',X28) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) ) | $spl0),
  inference(superposition,[],[f1047,f312])).
fof(f10430,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num',X26))),s('type.num.num',X25))),s('type.num.num',X27))) | s('type.num.num',X27) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X26),s('type.num.num',X25)))))) )),
  inference(superposition,[],[f1047,f304])).
fof(f10424,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) | s('type.num.num',X16) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) )),
  inference(superposition,[],[f1047,f283])).
fof(f10418,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1047,f214])).
fof(f9531,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl28),
  inference(unit_resulting_resolution,[],[f9515,f296])).
fof(f9534,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl28),
  inference(unit_resulting_resolution,[],[f9515,f295])).
fof(f9547,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl28),
  inference(unit_resulting_resolution,[],[f9515,f235])).
fof(f9548,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl28),
  inference(unit_resulting_resolution,[],[f9515,f230])).
fof(f9515,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | $spl28),
  inference(unit_resulting_resolution,[],[f8801,f299])).
fof(f9528,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK0))) | ($spl0 | $spl5 | $spl28)),
  inference(forward_demodulation,[],[f9527,f273])).
fof(f9527,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl5 | $spl28)),
  inference(backward_demodulation,[],[f9522,f7210])).
fof(f9522,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))) | $spl28),
  inference(unit_resulting_resolution,[],[f8801,f231])).
fof(f7210,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK0))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl5)),
  inference(superposition,[],[f286,f6918])).
fof(f9024,plain,(
  ( ! [X123,X121,X122] : (s('type.num.num',X122) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X121))))) | s('type.num.num',X123) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))),s('type.num.num',X122))))) )),
  inference(forward_demodulation,[],[f9023,f218])).
fof(f9023,plain,(
  ( ! [X123,X121,X122] : (s('type.num.num',X122) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X121))))))) | s('type.num.num',X123) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))),s('type.num.num',X122))))) )),
  inference(forward_demodulation,[],[f9022,f281])).
fof(f9022,plain,(
  ( ! [X123,X121,X122] : (s('type.num.num',X122) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X121))))))) | s('type.num.num',X123) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))),s('type.num.num',X122))))) )),
  inference(forward_demodulation,[],[f9021,f280])).
fof(f9021,plain,(
  ( ! [X123,X121,X122] : (s('type.num.num',X123) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))),s('type.num.num',X122)))) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X121)))))) )),
  inference(forward_demodulation,[],[f9020,f218])).
fof(f9020,plain,(
  ( ! [X123,X121,X122] : (s('type.num.num',X123) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X121))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))),s('type.num.num',X122)))) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X121)))))) )),
  inference(forward_demodulation,[],[f8930,f280])).
fof(f8930,plain,(
  ( ! [X123,X121,X122] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X121))),s('type.num.num',X122)))) | s('type.num.num',X123) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X121))))) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X121)))))) )),
  inference(superposition,[],[f307,f3904])).
fof(f9015,plain,(
  ( ! [X116,X117,X115] : (s('type.num.num',X117) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X116),s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))))) | s('type.num.num',X116) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num',X115))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.num.num',X116))))) )),
  inference(forward_demodulation,[],[f9014,f218])).
fof(f9014,plain,(
  ( ! [X116,X117,X115] : (s('type.num.num',X117) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X116),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X115))))))) | s('type.num.num',X116) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num',X115))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.num.num',X116))))) )),
  inference(forward_demodulation,[],[f9013,f280])).
fof(f9013,plain,(
  ( ! [X116,X117,X115] : (s('type.num.num',X116) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num',X115))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.num.num',X116)))) | s('type.num.num',X117) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X116),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X115)))))) )),
  inference(forward_demodulation,[],[f9012,f218])).
fof(f9012,plain,(
  ( ! [X116,X117,X115] : (s('type.num.num',X116) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X115))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.num.num',X116)))) | s('type.num.num',X117) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X116),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X115)))))) )),
  inference(forward_demodulation,[],[f9011,f281])).
fof(f9011,plain,(
  ( ! [X116,X117,X115] : (s('type.num.num',X116) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X115))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.num.num',X116)))) | s('type.num.num',X117) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X116),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X115)))))) )),
  inference(forward_demodulation,[],[f8928,f280])).
fof(f8928,plain,(
  ( ! [X116,X117,X115] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.num.num',X116)))) | s('type.num.num',X116) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X115))))) | s('type.num.num',X117) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X116),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X115)))))) )),
  inference(superposition,[],[f306,f3904])).
fof(f8978,plain,(
  ( ! [X57,X56] : (s('type.num.num',X57) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))))),s('type.num.num',X56))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num',X57))))) )),
  inference(forward_demodulation,[],[f8977,f218])).
fof(f8977,plain,(
  ( ! [X57,X56] : (s('type.num.num',X57) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X57),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num',X57))))) )),
  inference(forward_demodulation,[],[f8976,f281])).
fof(f8976,plain,(
  ( ! [X57,X56] : (s('type.num.num',X57) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X57),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num',X57))))) )),
  inference(forward_demodulation,[],[f8904,f280])).
fof(f8904,plain,(
  ( ! [X57,X56] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num',X57)))) | s('type.num.num',X57) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X56))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X56)))))) )),
  inference(superposition,[],[f288,f3904])).
fof(f8570,plain,(
  ( ! [X130,X128,X129] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X128))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',X129))) | s('type.num.num',X130) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.num.SUC_1'(s('type.num.num',X129))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X129),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X128))))))) )),
  inference(forward_demodulation,[],[f8569,f2401])).
fof(f8569,plain,(
  ( ! [X130,X128,X129] : (s('type.num.num',X130) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.num.SUC_1'(s('type.num.num',X129))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X129),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X128)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',X129))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f8568,f218])).
fof(f8568,plain,(
  ( ! [X130,X128,X129] : (s('type.num.num',X130) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X129),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X128)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',X129))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f8567,f280])).
fof(f8567,plain,(
  ( ! [X130,X128,X129] : (s('type.num.num',X130) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X129))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X129),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X128)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',X129))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f8492,f302])).
fof(f8492,plain,(
  ( ! [X130,X128,X129] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X129),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X128)))))) | s('type.num.num',X130) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X129))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',X129))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f307,f2401])).
fof(f8564,plain,(
  ( ! [X123,X124,X122] : (s('type.num.num',X124) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num',X123))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X123))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X123),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122))))))) )),
  inference(forward_demodulation,[],[f8563,f218])).
fof(f8563,plain,(
  ( ! [X123,X124,X122] : (s('type.num.num',X124) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X123))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X123),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122))))))) )),
  inference(forward_demodulation,[],[f8562,f280])).
fof(f8562,plain,(
  ( ! [X123,X124,X122] : (s('type.num.num',X124) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X123))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X123))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X123),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122))))))) )),
  inference(forward_demodulation,[],[f8561,f302])).
fof(f8561,plain,(
  ( ! [X123,X124,X122] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X123))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X123),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122)))))) | s('type.num.num',X124) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X123)))) )),
  inference(forward_demodulation,[],[f8490,f2401])).
fof(f8490,plain,(
  ( ! [X123,X124,X122] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X123),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X122)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X123))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X124) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X123)))) )),
  inference(superposition,[],[f306,f2401])).
fof(f8551,plain,(
  ( ! [X74,X75] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num',X75))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X74))),s('type.num.num',X75))))) )),
  inference(forward_demodulation,[],[f8550,f218])).
fof(f8550,plain,(
  ( ! [X74,X75] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X75))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X74))),s('type.num.num',X75))))) )),
  inference(forward_demodulation,[],[f8549,f280])).
fof(f8549,plain,(
  ( ! [X74,X75] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X75))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X74))),s('type.num.num',X75))))) )),
  inference(forward_demodulation,[],[f8472,f302])).
fof(f8472,plain,(
  ( ! [X74,X75] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X74))),s('type.num.num',X75)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X75)))) )),
  inference(superposition,[],[f297,f2401])).
fof(f8538,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X58))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))))),s('type.num.num',X59))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X58))))))) )),
  inference(forward_demodulation,[],[f8537,f2401])).
fof(f8537,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))))),s('type.num.num',X59))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X58))))))) )),
  inference(forward_demodulation,[],[f8536,f218])).
fof(f8536,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X59))))))),s('type.num.num',X59))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X58))))))) )),
  inference(forward_demodulation,[],[f8535,f280])).
fof(f8535,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X59))))),s('type.num.num',X59))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X58))))))) )),
  inference(forward_demodulation,[],[f8464,f302])).
fof(f8464,plain,(
  ( ! [X59,X58] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X58)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X59))),s('type.num.num',X59)))) )),
  inference(superposition,[],[f288,f2401])).
fof(f7852,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl5),
  inference(unit_resulting_resolution,[],[f7698,f299])).
fof(f7917,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))))))) ) | $spl5),
  inference(forward_demodulation,[],[f7853,f319])).
fof(f7853,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0))))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7698,f305])).
fof(f7698,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK0)))) | $spl5),
  inference(unit_resulting_resolution,[],[f6909,f296])).
fof(f7696,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) )),
  inference(superposition,[],[f2554,f284])).
fof(f7693,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f2554,f280])).
fof(f7524,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f7206,f299])).
fof(f7206,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f6918,f296])).
fof(f7138,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X61,X63,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X62))))),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X61,X63,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X62))))),s('type.num.num',sK2(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X61),s('type.num.num',X62))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X61,X63,fun('type.num.num',bool))),s('type.num.num',X62)))))))))) )),
  inference(forward_demodulation,[],[f7045,f277])).
fof(f7045,plain,(
  ( ! [X61,X62,X63] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X61,X63,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X62))))),s('type.num.num',sK2(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X61),s('type.num.num',X62))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X61,X63,fun('type.num.num',bool))),s('type.num.num',X62))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X61),s('type.num.num',X62))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X61,X63,fun('type.num.num',bool))),s('type.num.num',X62))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f311,f277])).
fof(f7137,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))))),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))))),s('type.num.num',X60)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X57),s('type.num.num',X58))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num',X58)))))))))))) )),
  inference(forward_demodulation,[],[f7136,f277])).
fof(f7136,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))))),s('type.num.num',X60)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X57),s('type.num.num',X58))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num',X58))))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X57),s('type.num.num',X58))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num',X58))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7044,f277])).
fof(f7044,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X57),s('type.num.num',X58))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num',X58))))))))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X57),s('type.num.num',X58))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num',X58))))),s('type.num.num',X60)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(fun('type.num.num',bool),fun('type.num.num',bool)),happ(s(fun('type.num.num',fun(fun('type.num.num',bool),fun('type.num.num',bool))),X57),s('type.num.num',X58))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X57,X59,fun('type.num.num',bool))),s('type.num.num',X58))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f229,f277])).
fof(f6988,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(X15,happ(s(fun('type.num.num',X15),sK3(happ(s(fun(fun('type.num.num',fun(X15,X15)),fun('type.num.num',fun(X15,X15))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun(X15,X15)),fun('type.num.num',fun(X15,X15)))),X16),s('type.num.num',X17))),s(fun('type.num.num',fun(X15,X15)),happ(s(fun('type.num.num',fun('type.num.num',fun(X15,X15))),sK3(X16,X18,fun('type.num.num',fun(X15,X15)))),s('type.num.num',X17)))),X19,X15)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) = s(X15,happ(s(fun(X15,X15),happ(s(fun('type.num.num',fun(X15,X15)),happ(s(fun('type.num.num',fun('type.num.num',fun(X15,X15))),sK3(X16,X18,fun('type.num.num',fun(X15,X15)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X20))),s(X15,happ(s(fun('type.num.num',X15),sK3(happ(s(fun(fun('type.num.num',fun(X15,X15)),fun('type.num.num',fun(X15,X15))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun(X15,X15)),fun('type.num.num',fun(X15,X15)))),X16),s('type.num.num',X17))),s(fun('type.num.num',fun(X15,X15)),happ(s(fun('type.num.num',fun('type.num.num',fun(X15,X15))),sK3(X16,X18,fun('type.num.num',fun(X15,X15)))),s('type.num.num',X17)))),X19,X15)),s('type.num.num',X20)))))) )),
  inference(superposition,[],[f277,f277])).
fof(f6987,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(X10,happ(s(fun('type.num.num',X10),sK3(happ(s(fun('type.num.num',fun('type.num.num',fun(X10,X10))),sK3(X11,X12,fun('type.num.num',fun(X10,X10)))),s('type.num.num','const.num.|48|_0')),X13,X10)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))) = s(X10,happ(s(fun(X10,X10),happ(s(fun('type.num.num',fun(X10,X10)),X12),s('type.num.num',X14))),s(X10,happ(s(fun('type.num.num',X10),sK3(happ(s(fun('type.num.num',fun('type.num.num',fun(X10,X10))),sK3(X11,X12,fun('type.num.num',fun(X10,X10)))),s('type.num.num','const.num.|48|_0')),X13,X10)),s('type.num.num',X14)))))) )),
  inference(superposition,[],[f277,f276])).
fof(f6986,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(X5,happ(s(fun('type.num.num',X5),sK3('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',fun(X5,X5)),X6),s(fun('type.num.num',fun(X5,X5)),X7)),X8,X5)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s(X5,happ(s(fun(X5,X5),happ(s(fun('type.num.num',fun(X5,X5)),X6),s('type.num.num',X9))),s(X5,happ(s(fun('type.num.num',X5),sK3('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',fun(X5,X5)),X6),s(fun('type.num.num',fun(X5,X5)),X7)),X8,X5)),s('type.num.num',X9)))))) )),
  inference(superposition,[],[f277,f273])).
fof(f6985,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),sK3('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',fun(X0,X0)),X1),s(fun('type.num.num',fun(X0,X0)),X2)),X3,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),sK3('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',fun(X0,X0)),X1),s(fun('type.num.num',fun(X0,X0)),X2)),X3,X0)),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f277,f272])).
fof(f6823,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X12))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X12))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X13))),s('type.num.num',X12)))))))) )),
  inference(superposition,[],[f286,f304])).
fof(f6822,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X9))))),s('type.num.num',X10))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X9))),s('type.num.num',X10))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))))) )),
  inference(superposition,[],[f286,f3135])).
fof(f6817,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num',X3))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',X3))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))))))) )),
  inference(superposition,[],[f286,f302])).
fof(f6632,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num',X8)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X6,X7,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f6631,f276])).
fof(f6631,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num',X8)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X6,X7,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X6,X7,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f6623,f276])).
fof(f6623,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X6,X7,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))))))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X6,X7,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X8)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X6,X7,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f229,f276])).
fof(f6630,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num',X5)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4)))))))))) )),
  inference(forward_demodulation,[],[f6629,f273])).
fof(f6629,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num',X5)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f6622,f273])).
fof(f6622,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))))))))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))),s('type.num.num',X5)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f229,f273])).
fof(f6628,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',X2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1)))))))))) )),
  inference(forward_demodulation,[],[f6627,f272])).
fof(f6627,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',X2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f6621,f272])).
fof(f6621,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))))))))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))),s('type.num.num',X2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f229,f272])).
fof(f6470,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X6))),s('type.num.num',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X5))))))) )),
  inference(superposition,[],[f296,f304])).
fof(f6469,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X1))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X3)))))) )),
  inference(superposition,[],[f302,f304])).
fof(f6553,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X7))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X6)))) )),
  inference(forward_demodulation,[],[f6468,f2401])).
fof(f6468,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f304,f319])).
fof(f6152,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num',X4)))) )),
  inference(forward_demodulation,[],[f6067,f284])).
fof(f6067,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f303,f284])).
fof(f6145,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))))) )),
  inference(forward_demodulation,[],[f6144,f218])).
fof(f6144,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))))),s('type.num.num',X6)))) )),
  inference(forward_demodulation,[],[f6000,f280])).
fof(f6000,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X7))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f303,f319])).
fof(f5774,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X4))))) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f5773,f281])).
fof(f5773,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f5600,f283])).
fof(f5600,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f307,f278])).
fof(f5772,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f5598,f203])).
fof(f5598,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(superposition,[],[f307,f1216])).
fof(f5716,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) | s('type.num.num',X24) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))))))) )),
  inference(forward_demodulation,[],[f5715,f3135])).
fof(f5715,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.num.num',X24) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num',X22)))) )),
  inference(forward_demodulation,[],[f5714,f3135])).
fof(f5714,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.num.num',X24) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num',X22)))) )),
  inference(forward_demodulation,[],[f5575,f302])).
fof(f5575,plain,(
  ( ! [X24,X23,X21,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))) | s('type.num.num',X24) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num',X22))),s('type.num.num',X23))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num',X22)))) )),
  inference(superposition,[],[f307,f3135])).
fof(f5713,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f5712,f283])).
fof(f5712,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num',X20) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) )),
  inference(forward_demodulation,[],[f5711,f283])).
fof(f5711,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num',X20) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) )),
  inference(forward_demodulation,[],[f5710,f280])).
fof(f5710,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num',X20) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num',X19))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) )),
  inference(forward_demodulation,[],[f5574,f302])).
fof(f5574,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) )),
  inference(superposition,[],[f307,f283])).
fof(f5700,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X10) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))) )),
  inference(forward_demodulation,[],[f5699,f216])).
fof(f5699,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X10) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))) )),
  inference(forward_demodulation,[],[f5698,f216])).
fof(f5698,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))) )),
  inference(forward_demodulation,[],[f5571,f302])).
fof(f5571,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))),s('type.num.num',X9))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))) )),
  inference(superposition,[],[f307,f216])).
fof(f5697,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) | s('type.num.num',X7) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))))) )),
  inference(forward_demodulation,[],[f5696,f302])).
fof(f5696,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.num.num',X7) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))) )),
  inference(forward_demodulation,[],[f5695,f302])).
fof(f5695,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.num.num',X7) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))) )),
  inference(forward_demodulation,[],[f5570,f302])).
fof(f5570,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) | s('type.num.num',X7) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f307,f302])).
fof(f5617,plain,(
  ( ! [X10,X9] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f5616,f216])).
fof(f5616,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))))) )),
  inference(forward_demodulation,[],[f5615,f216])).
fof(f5615,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))))) )),
  inference(subsumption_resolution,[],[f5614,f203])).
fof(f5614,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))))) )),
  inference(forward_demodulation,[],[f5542,f338])).
fof(f5542,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))))) )),
  inference(superposition,[],[f307,f216])).
fof(f5378,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X4))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f5377,f283])).
fof(f5377,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X4))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f5215,f281])).
fof(f5215,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f306,f278])).
fof(f5376,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f5213,f203])).
fof(f5213,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(superposition,[],[f306,f1216])).
fof(f5327,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.num.num',X24) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))))))) )),
  inference(forward_demodulation,[],[f5326,f3135])).
fof(f5326,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.num.num',X24) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))))))) )),
  inference(forward_demodulation,[],[f5325,f302])).
fof(f5325,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))) | s('type.num.num',X24) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num',X22))),s('type.num.num',X23)))) )),
  inference(forward_demodulation,[],[f5191,f3135])).
fof(f5191,plain,(
  ( ! [X24,X23,X21,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num',X22))) | s('type.num.num',X24) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X21))),s('type.num.num',X22))),s('type.num.num',X23)))) )),
  inference(superposition,[],[f306,f3135])).
fof(f5324,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f5323,f283])).
fof(f5323,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f5322,f280])).
fof(f5322,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num',X19))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f5321,f302])).
fof(f5321,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))),s('type.num.num',X19)))) )),
  inference(forward_demodulation,[],[f5190,f283])).
fof(f5190,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))),s('type.num.num',X19)))) )),
  inference(superposition,[],[f306,f283])).
fof(f5311,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X10)) )),
  inference(forward_demodulation,[],[f5310,f216])).
fof(f5310,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5309,f302])).
fof(f5309,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))),s('type.num.num',X9)))) )),
  inference(forward_demodulation,[],[f5187,f216])).
fof(f5187,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))),s('type.num.num',X9)))) )),
  inference(superposition,[],[f306,f216])).
fof(f5308,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))))) )),
  inference(forward_demodulation,[],[f5307,f302])).
fof(f5307,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))))) )),
  inference(forward_demodulation,[],[f5306,f302])).
fof(f5306,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.num.num',X6)))) )),
  inference(forward_demodulation,[],[f5186,f302])).
fof(f5186,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f306,f302])).
fof(f5260,plain,(
  ( ! [X37,X35,X36,X34] : (s('type.num.num',X37) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))))))) | s('type.num.num',X36) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))))),s('type.num.num',X36))))) )),
  inference(forward_demodulation,[],[f5259,f281])).
fof(f5259,plain,(
  ( ! [X37,X35,X36,X34] : (s('type.num.num',X36) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))))),s('type.num.num',X36)))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.num.SUC_1'(s('type.num.num',X35)))))))) )),
  inference(forward_demodulation,[],[f5258,f281])).
fof(f5258,plain,(
  ( ! [X37,X35,X36,X34] : (s('type.num.num',X36) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))))),s('type.num.num',X36)))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.num.SUC_1'(s('type.num.num',X35)))))))) )),
  inference(forward_demodulation,[],[f5168,f281])).
fof(f5168,plain,(
  ( ! [X37,X35,X36,X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))))),s('type.num.num',X36)))) | s('type.num.num',X36) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.num.SUC_1'(s('type.num.num',X35))))))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.num.SUC_1'(s('type.num.num',X35)))))))) )),
  inference(superposition,[],[f306,f281])).
fof(f5232,plain,(
  ( ! [X10,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f5231,f216])).
fof(f5231,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))))) )),
  inference(forward_demodulation,[],[f5230,f216])).
fof(f5230,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))))) )),
  inference(subsumption_resolution,[],[f5229,f203])).
fof(f5229,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))))) )),
  inference(forward_demodulation,[],[f5159,f338])).
fof(f5159,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) | s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))))) )),
  inference(superposition,[],[f306,f216])).
fof(f5010,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num',X6))))))) )),
  inference(superposition,[],[f305,f278])).
fof(f4720,plain,(
  ( ! [X130,X128,X131,X129] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X129),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',X131))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X129),s('type.num.num',X130))))),s('type.num.num',X131))))) )),
  inference(forward_demodulation,[],[f4719,f302])).
fof(f4719,plain,(
  ( ! [X130,X128,X131,X129] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num',X129))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',X131))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X129),s('type.num.num',X130))))),s('type.num.num',X131))))) )),
  inference(forward_demodulation,[],[f4654,f302])).
fof(f4654,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X129),s('type.num.num',X130))))),s('type.num.num',X131)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num',X129))),s('type.num.num',X130))),s('type.num.num',X131)))) )),
  inference(superposition,[],[f297,f302])).
fof(f4717,plain,(
  ( ! [X123,X121,X122,X120] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',X122))))),s('type.num.num',X123)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num',X123)))))))) )),
  inference(forward_demodulation,[],[f4716,f302])).
fof(f4716,plain,(
  ( ! [X123,X121,X122,X120] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num',X123))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X121))),s('type.num.num',X122))),s('type.num.num',X123))))) )),
  inference(forward_demodulation,[],[f4715,f4684])).
fof(f4715,plain,(
  ( ! [X123,X121,X122,X120] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',X122))),s('type.num.num',X123))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X121))),s('type.num.num',X122))),s('type.num.num',X123))))) )),
  inference(forward_demodulation,[],[f4652,f302])).
fof(f4652,plain,(
  ( ! [X123,X121,X122,X120] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',X122))))),s('type.num.num',X123))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X121))),s('type.num.num',X122))),s('type.num.num',X123))))) )),
  inference(superposition,[],[f296,f302])).
fof(f4707,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',X98))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num',X99))))))),s('type.num.num',X99))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',X98))))))))) )),
  inference(forward_demodulation,[],[f4706,f302])).
fof(f4706,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num',X97))),s('type.num.num',X98))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num',X99))))))),s('type.num.num',X99))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',X98))))))))) )),
  inference(forward_demodulation,[],[f4705,f302])).
fof(f4705,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num',X97))),s('type.num.num',X98))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num',X97))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num',X99))))),s('type.num.num',X99))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',X98))))))))) )),
  inference(forward_demodulation,[],[f4646,f302])).
fof(f4646,plain,(
  ( ! [X99,X97,X98,X96] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',X98)))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num',X97))),s('type.num.num',X98))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num',X97))),s('type.num.num',X98))),s('type.num.num',X99))),s('type.num.num',X99)))) )),
  inference(superposition,[],[f288,f302])).
fof(f4692,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))),s('type.num.num',X17)))) )),
  inference(forward_demodulation,[],[f4584,f3135])).
fof(f4584,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) )),
  inference(superposition,[],[f302,f3135])).
fof(f4684,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f4683,f302])).
fof(f4683,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f4579,f302])).
fof(f4579,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f302,f302])).
fof(f4422,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X2))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f4421,f283])).
fof(f4421,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',X2))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f4301,f281])).
fof(f4301,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f288,f278])).
fof(f4386,plain,(
  ( ! [X15] : (s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X15))))),s('type.num.num',X15))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',sK0))))) ) | $spl0),
  inference(forward_demodulation,[],[f4385,f312])).
fof(f4385,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X15))))),s('type.num.num',X15))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',sK0))))) ) | $spl0),
  inference(forward_demodulation,[],[f4279,f302])).
fof(f4279,plain,(
  ( ! [X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num',X15))),s('type.num.num',X15)))) ) | $spl0),
  inference(superposition,[],[f288,f312])).
fof(f4381,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))))),s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))) )),
  inference(forward_demodulation,[],[f4380,f3135])).
fof(f4380,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X11))),s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))))),s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))) )),
  inference(forward_demodulation,[],[f4379,f3135])).
fof(f4379,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X11))),s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))),s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))) )),
  inference(forward_demodulation,[],[f4277,f302])).
fof(f4277,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X11))),s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X11))),s('type.num.num',X12))),s('type.num.num',X13))),s('type.num.num',X13)))) )),
  inference(superposition,[],[f288,f3135])).
fof(f4378,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))))),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))))) )),
  inference(forward_demodulation,[],[f4377,f283])).
fof(f4377,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))))),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))))) )),
  inference(forward_demodulation,[],[f4376,f283])).
fof(f4376,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))))))),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))))) )),
  inference(forward_demodulation,[],[f4375,f280])).
fof(f4375,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))))),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))))) )),
  inference(forward_demodulation,[],[f4276,f302])).
fof(f4276,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))),s('type.num.num',X10))),s('type.num.num',X10)))) )),
  inference(superposition,[],[f288,f283])).
fof(f4368,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num',X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f4367,f321])).
fof(f4367,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num',X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f4274,f302])).
fof(f4274,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X4))),s('type.num.num',X5))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f288,f321])).
fof(f4116,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f285,f281])).
fof(f3843,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f284,f280])).
fof(f3682,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))) )),
  inference(forward_demodulation,[],[f3543,f282])).
fof(f3543,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))) )),
  inference(superposition,[],[f293,f278])).
fof(f3559,plain,(
  ( ! [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X3)) )),
  inference(forward_demodulation,[],[f3558,f216])).
fof(f3558,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(forward_demodulation,[],[f3557,f216])).
fof(f3557,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))),s('type.num.num',X3)))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(subsumption_resolution,[],[f3556,f203])).
fof(f3556,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))),s('type.num.num',X3)))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(forward_demodulation,[],[f3494,f338])).
fof(f3494,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))),s('type.num.num',X3)))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(superposition,[],[f293,f216])).
fof(f3388,plain,(
  ( ! [X70,X71,X69] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num',X70))))),s('type.num.num',X71))))) )),
  inference(forward_demodulation,[],[f3387,f3135])).
fof(f3387,plain,(
  ( ! [X70,X71,X69] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X69))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num',X70))))),s('type.num.num',X71))))) )),
  inference(forward_demodulation,[],[f3349,f302])).
fof(f3349,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num',X70))))),s('type.num.num',X71)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X69))),s('type.num.num',X70))),s('type.num.num',X71)))) )),
  inference(superposition,[],[f297,f3135])).
fof(f3323,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))),s('type.num.num',X2))))) )),
  inference(superposition,[],[f296,f3135])).
fof(f3211,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num',sK2(happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X4,X5,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f3205,f276])).
fof(f3205,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num',sK2(happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X4,X5,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK3(X4,X5,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f311,f276])).
fof(f3210,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK2('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X2),s(fun('type.num.num',bool),X3)))))))) )),
  inference(forward_demodulation,[],[f3204,f273])).
fof(f3204,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK2('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X2),s(fun('type.num.num',bool),X3))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X2),s(fun('type.num.num',bool),X3))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f311,f273])).
fof(f3209,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK2('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1)))))))) )),
  inference(forward_demodulation,[],[f3203,f272])).
fof(f3203,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK2('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f311,f272])).
fof(f3152,plain,(
  ( ! [X74,X72,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num',X74))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X72),s('type.num.num',X73))),s('type.num.num',X74))))) )),
  inference(forward_demodulation,[],[f3151,f283])).
fof(f3151,plain,(
  ( ! [X74,X72,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num',X74))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X72),s('type.num.num',X73))),s('type.num.num',X74))))) )),
  inference(forward_demodulation,[],[f3150,f280])).
fof(f3150,plain,(
  ( ! [X74,X72,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X73))),s('type.num.num',X74))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X72),s('type.num.num',X73))),s('type.num.num',X74))))) )),
  inference(forward_demodulation,[],[f3107,f302])).
fof(f3107,plain,(
  ( ! [X74,X72,X73] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X72),s('type.num.num',X73))),s('type.num.num',X74)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X73))))),s('type.num.num',X74)))) )),
  inference(superposition,[],[f297,f283])).
fof(f3148,plain,(
  ( ! [X68,X66,X67] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X66),s('type.num.num',X67))),s('type.num.num',X68)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X68)))))) )),
  inference(forward_demodulation,[],[f3147,f283])).
fof(f3147,plain,(
  ( ! [X68,X66,X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X68))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67))))),s('type.num.num',X68))))) )),
  inference(forward_demodulation,[],[f3105,f302])).
fof(f3105,plain,(
  ( ! [X68,X66,X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X66),s('type.num.num',X67))),s('type.num.num',X68))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67))))),s('type.num.num',X68))))) )),
  inference(superposition,[],[f296,f283])).
fof(f3137,plain,(
  ( ! [X37,X38,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X38))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))),s('type.num.num',X38))))) )),
  inference(forward_demodulation,[],[f3136,f3135])).
fof(f3136,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))),s('type.num.num',X38)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X38)))))) )),
  inference(backward_demodulation,[],[f3135,f2409])).
fof(f3135,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f3134,f279])).
fof(f3134,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X3)))))) )),
  inference(forward_demodulation,[],[f3080,f217])).
fof(f3080,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f279,f283])).
fof(f2718,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))) )),
  inference(subsumption_resolution,[],[f2674,f1843])).
fof(f2674,plain,(
  ( ! [X19,X20] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))) )),
  inference(superposition,[],[f239,f281])).
fof(f2619,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f2609,f318])).
fof(f2609,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f487,f2302])).
fof(f2444,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f2431,f318])).
fof(f2431,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f487,f2197])).
fof(f2409,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36))),s('type.num.num',X37))),s('type.num.num',X38)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X38)))))) )),
  inference(forward_demodulation,[],[f2408,f279])).
fof(f2408,plain,(
  ( ! [X37,X38,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X38))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num',X37))))),s('type.num.num',X38))))) )),
  inference(forward_demodulation,[],[f2369,f302])).
fof(f2369,plain,(
  ( ! [X37,X38,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36))),s('type.num.num',X37))),s('type.num.num',X38))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num',X37))))),s('type.num.num',X38))))) )),
  inference(superposition,[],[f296,f279])).
fof(f2302,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2186,f235])).
fof(f2303,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2186,f230])).
fof(f2280,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK0)))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2185,f287])).
fof(f2286,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2185,f231])).
fof(f2248,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))))) )),
  inference(superposition,[],[f295,f278])).
fof(f2185,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK0)))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2091,f298])).
fof(f2187,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2091,f295])).
fof(f2197,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2091,f235])).
fof(f2198,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f2091,f230])).
fof(f2181,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f2126,f203])).
fof(f2126,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(superposition,[],[f297,f1216])).
fof(f2145,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X8))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',X8))))) ) | $spl0),
  inference(forward_demodulation,[],[f2096,f302])).
fof(f2096,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',X8)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num',X8)))) ) | $spl0),
  inference(superposition,[],[f297,f312])).
fof(f2140,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f2094,f302])).
fof(f2094,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X5)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X4))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f297,f321])).
fof(f1753,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | $spl5),
  inference(unit_resulting_resolution,[],[f1742,f231])).
fof(f1742,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | $spl5),
  inference(condensation,[],[f1741])).
fof(f1741,plain,(
  ( ! [X2] : (p(s(bool,X2)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) ) | $spl5),
  inference(subsumption_resolution,[],[f1700,f230])).
fof(f1700,plain,(
  ( ! [X2] : (p(s(bool,X2)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s(bool,'T_0') = s(bool,X2)) ) | $spl5),
  inference(superposition,[],[f298,f1382])).
fof(f1382,plain,(
  ( ! [X14] : (s(bool,X14) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X14)) ) | $spl5),
  inference(subsumption_resolution,[],[f1374,f318])).
fof(f1374,plain,(
  ( ! [X14] : (p(s(bool,'F_0')) | s(bool,X14) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X14)) ) | $spl5),
  inference(superposition,[],[f487,f929])).
fof(f1381,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1370,f318])).
fof(f1370,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f487,f344])).
fof(f1380,plain,(
  ( ! [X4,X5] : (s(bool,X5) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f1369,f318])).
fof(f1369,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,X5) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f487,f343])).
fof(f1216,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f991,f231])).
fof(f1077,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK3(X0,X1,bool)),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f276,f226])).
fof(f1047,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X1) != s('type.num.num',X2)) )),
  inference(subsumption_resolution,[],[f990,f318])).
fof(f990,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | s('type.num.num',X1) != s('type.num.num',X2) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(superposition,[],[f295,f226])).
fof(f991,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f960,f273])).
fof(f960,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f273,f295])).
fof(f929,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.|48|_0'))) | $spl5),
  inference(unit_resulting_resolution,[],[f819,f235])).
fof(f930,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.|48|_0'))) | $spl5),
  inference(unit_resulting_resolution,[],[f819,f230])).
fof(f914,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f871,f318])).
fof(f871,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f226])).
fof(f691,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f273,f226])).
fof(f625,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f272,f226])).
fof(f591,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.bool.COND_3'(s(bool,X0),s(X1,X3),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f272,f226])).
fof(f435,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f226,f226])).
fof(f343,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f266,f235])).
fof(f344,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f267,f235])).
fof(f338,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f212,f231])).
fof(f333,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f318,f230])).
fof(f334,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f266,f230])).
fof(f335,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f267,f230])).
fof(f306,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | ((s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))) & (s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) => (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X6,X7,X21] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X21)))) => (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num',X7)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.ADD_EQ_SUB')).
fof(f307,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f199])).
fof(f305,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))))),
  inference(ennf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X6,X7,X21] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X21))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X21)))))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.LESS_MONO_MULT')).
fof(f304,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6,X7,X21] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X21))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X21))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X21)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.RIGHT_SUB_DISTRIB')).
fof(f303,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X6,X7,X21] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X21))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X21)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.RIGHT_ADD_DISTRIB')).
fof(f301,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|',aHL_EXT)).
fof(f296,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f293,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f195])).
fof(f195,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(flattening,[],[f194])).
fof(f194,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1))) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.num.num',X6) = s('type.num.num',X7)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.LESS_OR_EQ')).
fof(f295,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f195])).
fof(f292,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f156])).
fof(f285,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X7)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.MULT|split|1')).
fof(f284,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.MULT_SUC')).
fof(f283,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7,X6] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUB_MONO_EQ')).
fof(f282,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6,X7] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.prim_rec.LESS_MONO_EQ')).
fof(f281,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X7,X6] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f279,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X6))),s('type.num.num',X7))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.PRE_SUB')).
fof(f278,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X7,X6] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.LESS_EQ_MONO')).
fof(f276,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,happ(s(fun('type.num.num',X0),sK3(X2,X1,X0)),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : (s(X0,X1) = s(X0,happ(s(fun('type.num.num',X0),sK3(X2,X1,X0)),s('type.num.num','const.num.|48|_0'))) & ! [X4] : s(X0,happ(s(fun('type.num.num',X0),sK3(X2,X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),sK3(X2,X1,X0)),s('type.num.num',X4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : ? [X3] : (s(X0,X1) = s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num','const.num.|48|_0'))) & ! [X4] : s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num',X4))))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2] : ? [X3] : (s(X0,X1) = s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num','const.num.|48|_0'))) & ! [X4] : s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num',X4))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : ! [X9,X10] : ? [X11] : (s(X8,X9) = s(X8,happ(s(fun('type.num.num',X8),X11),s('type.num.num','const.num.|48|_0'))) & ! [X7] : s(X8,happ(s(fun('type.num.num',X8),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) = s(X8,happ(s(fun(X8,X8),happ(s(fun('type.num.num',fun(X8,X8)),X10),s('type.num.num',X7))),s(X8,happ(s(fun('type.num.num',X8),X11),s('type.num.num',X7))))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.prim_rec.num_Axiom')).
fof(f277,plain,(
  ( ! [X4,X2,X0,X1] : (s(X0,happ(s(fun('type.num.num',X0),sK3(X2,X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),sK3(X2,X1,X0)),s('type.num.num',X4)))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f272,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X8] : ! [X19,X20] : s(X8,X20) = s(X8,'const.bool.COND_3'(s(bool,'F_0'),s(X8,X19),s(X8,X20)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.bool.COND_CLAUSES|split|1')).
fof(f267,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X7] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.prim_rec.NOT_LESS_|48|')).
fof(f266,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X7] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X7))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.prim_rec.LESS_REFL')).
fof(f234,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f169])).
fof(f311,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK2(X0))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(condensation,[],[f228])).
fof(f228,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK2(X0))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK2(X0))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(X0)))))))) | ! [X1] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f165])).
fof(f165,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))) | ! [X1] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f152])).
fof(f152,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) | ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f151])).
fof(f151,plain,(
  ! [X0] : ((~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) | ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : ((p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) & ! [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) => p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) => ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X13] : ((p(s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num','const.num.|48|_0')))) & ! [X7] : (p(s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num',X7)))) => p(s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))))) => ! [X7] : p(s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num',X7)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.num.INDUCTION')).
fof(f229,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2(X0))))))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f166])).
fof(f218,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f217,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.prim_rec.PRE|split|1')).
fof(f216,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUB|split|0')).
fof(f215,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.MULT_CLAUSES|split|0')).
fof(f214,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUB_|48||split|1')).
fof(f213,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.MULT_|48|')).
fof(f212,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X7] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.ZERO_LESS_EQ')).
fof(f205,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f66])).
fof(f66,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.prim_rec.PRE|split|0')).
fof(f18324,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30 | $spl35)),
  inference(global_subsumption,[],[f17392,f202,f201,f200,f203,f205,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401,f322,f321,f320,f319,f206])).
fof(f17392,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl35),
  inference(cnf_transformation,[],[f17392_D])).
fof(f17392_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f18323,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30 | $spl36)),
  inference(global_subsumption,[],[f17395,f202,f201,f200,f203,f205,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401,f322,f321,f320,f319,f206])).
fof(f18322,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401,f322,f321,f320,f319,f206])).
fof(f18321,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401,f322,f321,f320,f319])).
fof(f18320,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401,f322,f321,f320])).
fof(f18319,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401,f322,f321])).
fof(f18318,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401,f322])).
fof(f18317,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839,f2401])).
fof(f18316,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904,f3839])).
fof(f18315,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087,f3904])).
fof(f18314,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178,f4087])).
fof(f18313,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581,f4178])).
fof(f18312,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237,f4581])).
fof(f18311,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622,f5237])).
fof(f18310,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400,f5622])).
fof(f18309,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818,f6400])).
fof(f18308,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819,f6818])).
fof(f18307,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6818,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908,f6819])).
fof(f18306,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909,f6908])).
fof(f18305,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025,f6909])).
fof(f18304,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f6910,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025])).
fof(f18303,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121,f7025])).
fof(f18302,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790,f7121])).
fof(f18301,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872,f7790])).
fof(f18300,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918,f7872])).
fof(f18299,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024,f7918])).
fof(f18298,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025,f8024])).
fof(f18297,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8024,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426,f8025])).
fof(f18296,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f8046,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426])).
fof(f8046,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl3),
  inference(superposition,[],[f286,f6910])).
fof(f18295,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f8136,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426])).
fof(f8136,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))))) ) | $spl3),
  inference(forward_demodulation,[],[f8047,f216])).
fof(f8047,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))))) ) | $spl3),
  inference(superposition,[],[f302,f6910])).
fof(f18294,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f8317,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426])).
fof(f8317,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl3),
  inference(unit_resulting_resolution,[],[f8042,f231])).
fof(f8042,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | $spl3),
  inference(unit_resulting_resolution,[],[f6910,f296])).
fof(f18293,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f8324,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426])).
fof(f8324,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl3),
  inference(forward_demodulation,[],[f8323,f2401])).
fof(f8323,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl3),
  inference(forward_demodulation,[],[f8311,f276])).
fof(f8311,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X0,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'type.num.num')),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f276,f8042,f307])).
fof(f18292,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f8363,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426])).
fof(f8363,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl3),
  inference(unit_resulting_resolution,[],[f8298,f235])).
fof(f8298,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl3),
  inference(unit_resulting_resolution,[],[f8042,f299])).
fof(f18291,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f8364,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426])).
fof(f8364,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl3),
  inference(unit_resulting_resolution,[],[f8298,f230])).
fof(f18290,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429,f8426])).
fof(f18289,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526,f8429])).
fof(f18288,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419,f8526])).
fof(f18287,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422,f10419])).
fof(f18286,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423,f10422])).
fof(f18285,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437,f10423])).
fof(f18284,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441,f10437])).
fof(f18283,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451,f10441])).
fof(f18282,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453,f10451])).
fof(f18281,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459,f10453])).
fof(f18280,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462,f10459])).
fof(f18279,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463,f10462])).
fof(f18278,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465,f10463])).
fof(f18277,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477,f10465])).
fof(f18276,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f10466,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477])).
fof(f10466,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X18) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) | $spl3),
  inference(superposition,[],[f1047,f6910])).
fof(f18275,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481,f10477])).
fof(f18274,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491,f10481])).
fof(f18273,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493,f10491])).
fof(f18272,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515,f10493])).
fof(f18271,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547,f11515])).
fof(f18270,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739,f13547])).
fof(f18269,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022,f13739])).
fof(f18268,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14023,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024,f14022])).
fof(f18267,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14023,f14022,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028,f14024])).
fof(f18266,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086,f14028])).
fof(f18265,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087,f14086])).
fof(f18264,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105,f14087])).
fof(f18263,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106,f14105])).
fof(f18262,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107,f14106])).
fof(f18261,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108,f14107])).
fof(f18260,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109,f14108])).
fof(f18259,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110,f14109])).
fof(f18258,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111,f14110])).
fof(f18257,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112,f14111])).
fof(f18256,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113,f14112])).
fof(f18255,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114,f14113])).
fof(f18254,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115,f14114])).
fof(f18253,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116,f14115])).
fof(f18252,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117,f14116])).
fof(f18251,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118,f14117])).
fof(f18250,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119,f14118])).
fof(f18249,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120,f14119])).
fof(f18248,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130,f14120])).
fof(f18247,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131,f14130])).
fof(f18246,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132,f14131])).
fof(f18245,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133,f14132])).
fof(f18244,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134,f14133])).
fof(f18243,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135,f14134])).
fof(f18242,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146,f14135])).
fof(f18241,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147,f14146])).
fof(f18240,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148,f14147])).
fof(f18239,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152,f14148])).
fof(f18238,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f14150,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152])).
fof(f14150,plain,(
  ( ! [X144,X145] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X145),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X144),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X144))),s('type.num.num',X145)))) ) | $spl3),
  inference(superposition,[],[f1746,f3839])).
fof(f18237,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f14151,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152])).
fof(f14151,plain,(
  ( ! [X146,X147] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X146),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X147)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X146),s('type.num.num',X146)))))) ) | $spl3),
  inference(superposition,[],[f1746,f3839])).
fof(f18236,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153,f14152])).
fof(f18235,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163,f14153])).
fof(f18234,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174,f14163])).
fof(f18233,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175,f14174])).
fof(f18232,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178,f14175])).
fof(f18231,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179,f14178])).
fof(f18230,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189,f14179])).
fof(f18229,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190,f14189])).
fof(f18228,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208,f14190])).
fof(f18227,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209,f14208])).
fof(f18226,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210,f14209])).
fof(f18225,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211,f14210])).
fof(f18224,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212,f14211])).
fof(f18223,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213,f14212])).
fof(f18222,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214,f14213])).
fof(f18221,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215,f14214])).
fof(f18220,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216,f14215])).
fof(f18219,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217,f14216])).
fof(f18218,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218,f14217])).
fof(f18217,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219,f14218])).
fof(f18216,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220,f14219])).
fof(f18215,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221,f14220])).
fof(f18214,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222,f14221])).
fof(f18213,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223,f14222])).
fof(f18212,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233,f14223])).
fof(f18211,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234,f14233])).
fof(f18210,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235,f14234])).
fof(f18209,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236,f14235])).
fof(f18208,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237,f14236])).
fof(f18207,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238,f14237])).
fof(f18206,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250,f14238])).
fof(f18205,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251,f14250])).
fof(f18204,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255,f14251])).
fof(f18203,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f14253,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255])).
fof(f14253,plain,(
  ( ! [X149,X148] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num',X148)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X148),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X149)))) ) | $spl3),
  inference(superposition,[],[f1746,f3839])).
fof(f18202,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f14254,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255])).
fof(f14254,plain,(
  ( ! [X151,X150] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X150),s('type.num.num',X150))),s('type.num.num',X151)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X150),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) ) | $spl3),
  inference(superposition,[],[f1746,f3839])).
fof(f18201,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256,f14255])).
fof(f18200,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266,f14256])).
fof(f18199,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279,f14266])).
fof(f18198,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349,f14279])).
fof(f18197,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14350,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351,f14349])).
fof(f18196,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14350,f14349,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353,f14351])).
fof(f18195,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356,f14353])).
fof(f18194,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417,f14356])).
fof(f18193,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418,f14417])).
fof(f18192,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436,f14418])).
fof(f18191,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437,f14436])).
fof(f18190,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438,f14437])).
fof(f18189,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439,f14438])).
fof(f18188,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440,f14439])).
fof(f18187,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441,f14440])).
fof(f18186,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442,f14441])).
fof(f18185,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443,f14442])).
fof(f18184,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444,f14443])).
fof(f18183,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445,f14444])).
fof(f18182,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446,f14445])).
fof(f18181,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447,f14446])).
fof(f18180,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448,f14447])).
fof(f18179,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449,f14448])).
fof(f18178,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450,f14449])).
fof(f18177,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451,f14450])).
fof(f18176,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461,f14451])).
fof(f18175,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462,f14461])).
fof(f18174,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463,f14462])).
fof(f18173,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464,f14463])).
fof(f18172,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465,f14464])).
fof(f18171,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466,f14465])).
fof(f18170,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477,f14466])).
fof(f18169,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478,f14477])).
fof(f18168,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479,f14478])).
fof(f18167,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483,f14479])).
fof(f18166,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f14481,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483])).
fof(f14481,plain,(
  ( ! [X146,X145] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X146),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X145)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num',X145))),s('type.num.num',X146)))) ) | $spl3),
  inference(superposition,[],[f1746,f4087])).
fof(f18165,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f14482,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483])).
fof(f14482,plain,(
  ( ! [X147,X148] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X147))),s('type.num.num',X148)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X148),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X147),s('type.num.num',X147)))))) ) | $spl3),
  inference(superposition,[],[f1746,f4087])).
fof(f18164,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484,f14483])).
fof(f18163,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494,f14484])).
fof(f18162,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509,f14494])).
fof(f18161,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512,f14509])).
fof(f18160,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513,f14512])).
fof(f18159,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521,f14513])).
fof(f18158,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522,f14521])).
fof(f18157,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540,f14522])).
fof(f18156,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541,f14540])).
fof(f18155,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542,f14541])).
fof(f18154,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543,f14542])).
fof(f18153,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544,f14543])).
fof(f18152,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545,f14544])).
fof(f18151,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546,f14545])).
fof(f18150,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547,f14546])).
fof(f18149,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548,f14547])).
fof(f18148,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549,f14548])).
fof(f18147,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550,f14549])).
fof(f18146,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551,f14550])).
fof(f18145,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552,f14551])).
fof(f18144,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553,f14552])).
fof(f18143,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554,f14553])).
fof(f18142,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555,f14554])).
fof(f18141,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565,f14555])).
fof(f18140,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566,f14565])).
fof(f18139,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567,f14566])).
fof(f18138,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568,f14567])).
fof(f18137,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569,f14568])).
fof(f18136,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570,f14569])).
fof(f18135,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582,f14570])).
fof(f18134,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583,f14582])).
fof(f18133,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587,f14583])).
fof(f18132,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f14585,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587])).
fof(f14585,plain,(
  ( ! [X149,X148] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num',X148)))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X148))),s('type.num.num',X149)))) ) | $spl3),
  inference(superposition,[],[f1746,f4087])).
fof(f18131,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f14586,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587])).
fof(f14586,plain,(
  ( ! [X151,X150] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X150),s('type.num.num',X150))),s('type.num.num',X151)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X150)))))) ) | $spl3),
  inference(superposition,[],[f1746,f4087])).
fof(f18130,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588,f14587])).
fof(f18129,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598,f14588])).
fof(f18128,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612,f14598])).
fof(f18127,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613,f14612])).
fof(f18126,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614,f14613])).
fof(f18125,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784,f14614])).
fof(f18124,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785,f14784])).
fof(f18123,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801,f14785])).
fof(f18122,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804,f14801])).
fof(f18121,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828,f14804])).
fof(f18120,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14823,f14953,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829,f14828])).
fof(f18119,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14823,f14953,f14828,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836,f14829])).
fof(f18118,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846,f14836])).
fof(f18117,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849,f14846])).
fof(f18116,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14846,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936,f14849])).
fof(f18115,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14846,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966,f14936])).
fof(f18114,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14846,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969,f14966])).
fof(f18113,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260,f14969])).
fof(f18112,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261,f15260])).
fof(f18111,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277,f15261])).
fof(f18110,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280,f15277])).
fof(f18109,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305,f15280])).
fof(f18108,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306,f15305])).
fof(f18107,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15305,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323,f15306])).
fof(f18106,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15310,f15442,f15314,f15445,f15452,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326,f15323])).
fof(f18105,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15310,f15442,f15314,f15445,f15452,f15323,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336,f15326])).
fof(f18104,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15310,f15442,f15314,f15445,f15452,f15323,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417,f15336])).
fof(f18103,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15310,f15442,f15314,f15445,f15452,f15323,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441,f15417])).
fof(f18102,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15310,f15442,f15314,f15445,f15452,f15323,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444,f15441])).
fof(f18101,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15314,f15445,f15452,f15323,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455,f15444])).
fof(f18100,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15323,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458,f15455])).
fof(f18099,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815,f15458])).
fof(f18098,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818,f15815])).
fof(f18097,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993,f15818])).
fof(f18096,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270,f15993])).
fof(f18095,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658,f16270])).
fof(f18094,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659,f16658])).
fof(f18093,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677,f16659])).
fof(f18092,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680,f16677])).
fof(f18091,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708,f16680])).
fof(f18090,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709,f16708])).
fof(f18089,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727,f16709])).
fof(f18088,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730,f16727])).
fof(f18087,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018,f16730])).
fof(f18086,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020,f17018])).
fof(f18085,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108,f17020])).
fof(f18084,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230,f17108])).
fof(f18083,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231,f17230])).
fof(f18082,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249,f17231])).
fof(f18081,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252,f17249])).
fof(f18080,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393,f17252])).
fof(f18079,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f17399,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393])).
fof(f17399,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl3),
  inference(forward_demodulation,[],[f17398,f2401])).
fof(f17398,plain,(
  ( ! [X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl3),
  inference(subsumption_resolution,[],[f17353,f203])).
fof(f17353,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl3),
  inference(superposition,[],[f306,f8317])).
fof(f18078,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f17401,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393])).
fof(f17401,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl3),
  inference(forward_demodulation,[],[f17400,f2401])).
fof(f17400,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl3),
  inference(subsumption_resolution,[],[f17354,f203])).
fof(f17354,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl3),
  inference(superposition,[],[f307,f8317])).
fof(f18077,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5956,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393])).
fof(f5956,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',X0))))))) ) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f5933,f203])).
fof(f5933,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',X0))))))) ) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f305,f3487])).
fof(f3487,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | ($spl0 | $spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f3396,f231])).
fof(f3396,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | ($spl0 | $spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f3319,f296])).
fof(f3319,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f3135,f2919])).
fof(f2919,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(forward_demodulation,[],[f2862,f205])).
fof(f2862,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f279,f2773])).
fof(f2773,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f2753,f203])).
fof(f2753,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f297,f2291])).
fof(f18076,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945,f7393])).
fof(f18075,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f8347,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945])).
fof(f8347,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X0))))))) ) | $spl3),
  inference(forward_demodulation,[],[f8299,f319])).
fof(f8299,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X0))))))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f8042,f305])).
fof(f18074,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5107,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945])).
fof(f5107,plain,(
  ( ! [X14] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X14))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X14))))))) ) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f5016,f203])).
fof(f5016,plain,(
  ( ! [X14] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',X14))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X14))))))) ) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f305,f2291])).
fof(f18073,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377,f10945])).
fof(f18072,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807,f9377])).
fof(f18071,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828,f16807])).
fof(f18070,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914,f15828])).
fof(f18069,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f6917,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914])).
fof(f6917,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(forward_demodulation,[],[f6915,f272])).
fof(f6915,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))))) | ($spl0 | $spl3 | $spl5)),
  inference(backward_demodulation,[],[f6914,f6748])).
fof(f6748,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))))))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f286,f3940])).
fof(f3940,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f3481,f235])).
fof(f3481,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) | ($spl0 | $spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f3396,f299])).
fof(f18068,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394,f6914])).
fof(f18067,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f15588,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f15588,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))))) | ($spl0 | $spl3 | $spl5)),
  inference(forward_demodulation,[],[f15473,f205])).
fof(f15473,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f3134,f3319])).
fof(f18066,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f3319,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f18065,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f3487,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f18064,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f3940,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f18063,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f3941,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f3941,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f3481,f230])).
fof(f18062,plain,(
  $false | ($spl0 | $spl5 | $spl16 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5117,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f5117,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | $spl16),
  inference(unit_resulting_resolution,[],[f4931,f231])).
fof(f18061,plain,(
  $false | ($spl0 | $spl5 | $spl16 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5124,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f5124,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | $spl16),
  inference(unit_resulting_resolution,[],[f5110,f296])).
fof(f5110,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) | $spl16),
  inference(unit_resulting_resolution,[],[f4931,f299])).
fof(f18060,plain,(
  $false | ($spl0 | $spl5 | $spl16 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5127,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f5127,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) | $spl16),
  inference(unit_resulting_resolution,[],[f5110,f295])).
fof(f18059,plain,(
  $false | ($spl0 | $spl5 | $spl16 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5139,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f5139,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | $spl16),
  inference(unit_resulting_resolution,[],[f5110,f235])).
fof(f18058,plain,(
  $false | ($spl0 | $spl5 | $spl16 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5140,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f5140,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | $spl16),
  inference(unit_resulting_resolution,[],[f5110,f230])).
fof(f18057,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5957,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f5957,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) ) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f5934,f203])).
fof(f5934,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) ) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f306,f3487])).
fof(f18056,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f5958,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f5958,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1)))) ) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f5935,f203])).
fof(f5935,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1)))) ) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f307,f3487])).
fof(f18055,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f6620,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f6620,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f6608,f318])).
fof(f6608,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f487,f3940])).
fof(f18054,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f6916,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f6916,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(backward_demodulation,[],[f6914,f4926])).
fof(f4926,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f4904,f203])).
fof(f4904,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f288,f3487])).
fof(f18053,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl16 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f6934,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f6934,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | ($spl0 | $spl3 | $spl5 | $spl16)),
  inference(forward_demodulation,[],[f6933,f273])).
fof(f6933,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl3 | $spl5 | $spl16)),
  inference(forward_demodulation,[],[f6826,f5117])).
fof(f6826,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f286,f3319])).
fof(f18052,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586,f7394])).
fof(f18051,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f13860,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586])).
fof(f13860,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | ($spl0 | $spl3 | $spl5)),
  inference(forward_demodulation,[],[f13746,f205])).
fof(f13746,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f3134,f2919])).
fof(f18050,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f15546,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586])).
fof(f15546,plain,(
  ( ! [X67] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X67) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) ) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f1047,f3319])).
fof(f18049,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396,f4586])).
fof(f18048,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f4586,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479,f7396])).
fof(f18047,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432,f7479])).
fof(f18046,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472,f10432])).
fof(f18045,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747,f10472])).
fof(f18044,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042,f13747])).
fof(f18043,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748,f18042])).
fof(f18041,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039,f17748])).
fof(f18040,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037,f18039])).
fof(f18038,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035,f18037])).
fof(f18036,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033,f18035])).
fof(f18034,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031,f18033])).
fof(f18032,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029,f18031])).
fof(f18030,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767,f18029])).
fof(f18028,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918,f17767])).
fof(f18027,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295,f6918])).
fof(f18026,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525,f7295])).
fof(f18025,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544,f7525])).
fof(f18024,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606,f7544])).
fof(f18023,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607,f7606])).
fof(f18022,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467,f7607])).
fof(f18021,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817,f10467])).
fof(f18020,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818,f10817])).
fof(f18019,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819,f10818])).
fof(f18018,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820,f10819])).
fof(f18017,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702,f10820])).
fof(f18016,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f10820,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757,f15702])).
fof(f18015,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f3004,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f10820,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15702,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757])).
fof(f3004,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(forward_demodulation,[],[f2948,f205])).
fof(f2948,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f279,f2919])).
fof(f18014,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f10820,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15702,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618,f16757])).
fof(f18013,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f10820,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15702,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16757,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992,f14618])).
fof(f18012,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f10820,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14618,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15702,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16757,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903,f15992])).
fof(f18011,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f10820,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14618,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15702,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15992,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16757,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17767,f18006,f17291,f16903])).
fof(f18010,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f10820,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14618,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15702,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15992,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16757,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f16903,f17767,f18006,f17291])).
fof(f18009,plain,(
  $false | ($spl0 | $spl5 | $spl28 | $spl30)),
  inference(global_subsumption,[],[f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f317,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f819,f897,f914,f930,f929,f991,f1047,f1077,f1216,f1380,f1381,f1382,f1742,f1753,f1843,f1941,f2091,f2140,f2145,f2181,f2198,f2197,f2187,f2186,f2185,f2248,f2286,f2280,f2303,f2302,f2401,f2409,f2444,f2554,f2619,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4386,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6909,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7206,f7524,f7693,f7694,f7696,f7698,f7790,f7872,f7917,f7852,f8025,f8024,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8797,f8978,f9015,f9024,f312,f7393,f7479,f4586,f7396,f7607,f7606,f7544,f7525,f7295,f7210,f6918,f8801,f9522,f9528,f9515,f9548,f9547,f9534,f9531,f10418,f10419,f10422,f10423,f10424,f10430,f10431,f10432,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10465,f10467,f10470,f10471,f10472,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f7702,f7394,f6914,f10107,f10104,f10098,f10817,f10818,f10819,f10820,f9377,f7918,f2353,f10844,f10945,f10846,f10951,f10952,f10915,f10916,f11022,f321,f11204,f11203,f11188,f11228,f11381,f11426,f11453,f11452,f11440,f11439,f11438,f11469,f11515,f11526,f11520,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12351,f12350,f12361,f12370,f12378,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12767,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13021,f13072,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13300,f13345,f13385,f13497,f13496,f13482,f13480,f13478,f13516,f13566,f13547,f13576,f13586,f13638,f13852,f13739,f13747,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14618,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15430,f15299,f15432,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15702,f15706,f15815,f15818,f15819,f15821,f15828,f15897,f15898,f15919,f15922,f15985,f15986,f15987,f15988,f15989,f15990,f15992,f15993,f15997,f15998,f15999,f16000,f16069,f16070,f16155,f16154,f16210,f16211,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16502,f16501,f16757,f16764,f16799,f16807,f16658,f16659,f16677,f16680,f16683,f16911,f16708,f16709,f16727,f16730,f16733,f16744,f17018,f17020,f17055,f17123,f17031,f17030,f17029,f17165,f17108,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338,f17291,f16903,f17767,f18006])).
fof(f18005,plain,(
  $false | ($spl0 | $spl5 | $spl26 | $spl34)),
  inference(subsumption_resolution,[],[f17964,f17785])).
fof(f17785,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | ($spl0 | $spl5 | $spl26 | $spl34)),
  inference(backward_demodulation,[],[f17768,f17458])).
fof(f17458,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl34),
  inference(backward_demodulation,[],[f17393,f11515])).
fof(f17768,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | ($spl0 | $spl5 | $spl26)),
  inference(global_subsumption,[],[f17767,f202,f201,f200,f203,f205,f206,f318,f212,f213,f214,f215,f216,f217,f218,f219,f220,f319,f320,f322,f226,f229,f311,f231,f230,f235,f234,f239,f238,f266,f267,f272,f273,f277,f276,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f292,f289,f295,f293,f297,f296,f299,f298,f301,f302,f303,f304,f305,f307,f306,f335,f334,f333,f338,f344,f343,f412,f435,f487,f591,f625,f691,f914,f991,f1047,f1077,f1216,f1380,f1381,f1843,f1941,f2140,f2181,f2248,f2401,f2409,f2554,f2718,f3134,f3135,f3137,f3148,f3152,f3209,f3210,f3211,f3323,f3388,f3559,f3682,f3839,f3904,f3843,f4178,f4087,f4116,f4368,f4378,f4381,f4422,f4684,f4581,f4692,f4707,f4717,f4720,f5010,f5232,f5237,f5260,f5308,f5311,f5324,f5327,f5376,f5378,f5617,f5622,f5697,f5700,f5713,f5716,f5772,f5774,f6145,f6152,f6400,f6553,f6469,f6470,f6628,f6630,f6632,f6908,f6817,f6818,f6819,f6822,f6823,f6985,f6986,f6987,f6988,f7121,f7025,f7137,f7138,f7693,f7694,f7696,f8426,f8526,f8429,f8538,f8551,f8564,f8570,f8799,f8978,f9015,f9024,f9038,f9039,f9040,f9041,f9042,f9043,f9045,f9049,f9050,f10418,f10419,f10422,f10423,f10424,f10430,f10434,f10435,f10437,f10438,f10439,f10441,f10442,f10443,f10448,f10451,f10453,f10454,f10455,f10456,f10457,f10458,f10459,f10461,f10462,f10463,f10464,f10470,f10474,f10475,f10477,f10478,f10479,f10481,f10482,f10483,f10488,f10490,f10491,f10492,f10493,f10494,f10495,f10496,f10497,f10498,f10647,f10648,f10649,f10650,f10651,f10652,f10653,f321,f11381,f11469,f11515,f11615,f11621,f11629,f11630,f11631,f11632,f11666,f11680,f11682,f11688,f11689,f11690,f11691,f11742,f11782,f11784,f11788,f11861,f11862,f12318,f12319,f12320,f12321,f12322,f12323,f12324,f12325,f12326,f12327,f12328,f12329,f12330,f11930,f11932,f11936,f12421,f12422,f12423,f12424,f12425,f12564,f12565,f12566,f12567,f12579,f12580,f12581,f12582,f12583,f12585,f12590,f12593,f12594,f12595,f12604,f12605,f12623,f12624,f12625,f12626,f12627,f12628,f12629,f12630,f12631,f12632,f12633,f12634,f12635,f12636,f12637,f12638,f12648,f12649,f12650,f12651,f12652,f12653,f12664,f12665,f12666,f12677,f12852,f12912,f12913,f12914,f12915,f12916,f12975,f12977,f13080,f13120,f13121,f13122,f13123,f13124,f13230,f13345,f13385,f13566,f13547,f13852,f13739,f13748,f14025,f14024,f14023,f14022,f14279,f14028,f14086,f14087,f14105,f14106,f14107,f14108,f14109,f14110,f14111,f14112,f14113,f14114,f14115,f14116,f14117,f14118,f14119,f14120,f14130,f14131,f14132,f14133,f14134,f14135,f14146,f14147,f14148,f14152,f14153,f14163,f14174,f14175,f14176,f14177,f14178,f14179,f14189,f14190,f14208,f14209,f14210,f14211,f14212,f14213,f14214,f14215,f14216,f14217,f14218,f14219,f14220,f14221,f14222,f14223,f14233,f14234,f14235,f14236,f14237,f14238,f14250,f14251,f14255,f14256,f14266,f14352,f14351,f14350,f14349,f14353,f14612,f14613,f14614,f14356,f14417,f14418,f14436,f14437,f14438,f14439,f14440,f14441,f14442,f14443,f14444,f14445,f14446,f14447,f14448,f14449,f14450,f14451,f14461,f14462,f14463,f14464,f14465,f14466,f14477,f14478,f14479,f14483,f14484,f14494,f14618,f14509,f14621,f14624,f14512,f14513,f14521,f14522,f14540,f14541,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14552,f14553,f14554,f14555,f14565,f14566,f14567,f14568,f14569,f14570,f14582,f14583,f14587,f14588,f14598,f14784,f14785,f14801,f14804,f14807,f14936,f14823,f14953,f14828,f14829,f14830,f14833,f14834,f14836,f14837,f14838,f14963,f14966,f14846,f14969,f14849,f14970,f14971,f14972,f14973,f14974,f14855,f14976,f15260,f15261,f15277,f15280,f15283,f15286,f15416,f15417,f15299,f15438,f15305,f15306,f15439,f15441,f15310,f15442,f15444,f15314,f15445,f15452,f15455,f15323,f15458,f15326,f15459,f15460,f15461,f15462,f15463,f15332,f15336,f15815,f15818,f15819,f15821,f15897,f15898,f15919,f15922,f16270,f16452,f16455,f16328,f16329,f16330,f16331,f16401,f16402,f16423,f16426,f16757,f16764,f16799,f16658,f16659,f16677,f16680,f16683,f16708,f16709,f16727,f16730,f16733,f16744,f17278,f17230,f17231,f17249,f17252,f17255,f17337,f17338])).
fof(f9050,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK0)))) ) | $spl26),
  inference(superposition,[],[f2718,f8799])).
fof(f9049,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X8)))) ) | $spl26),
  inference(superposition,[],[f2554,f8799])).
fof(f9045,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',sK0)))) ) | $spl26),
  inference(superposition,[],[f283,f8799])).
fof(f9043,plain,(
  ( ! [X5] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num',sK0)))) ) | $spl26),
  inference(superposition,[],[f282,f8799])).
fof(f9042,plain,(
  ( ! [X4] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X4))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | $spl26),
  inference(superposition,[],[f282,f8799])).
fof(f9041,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK1)))))) ) | $spl26),
  inference(superposition,[],[f281,f8799])).
fof(f9040,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2)))))) ) | $spl26),
  inference(superposition,[],[f280,f8799])).
fof(f9039,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',sK0)))) ) | $spl26),
  inference(superposition,[],[f278,f8799])).
fof(f9038,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl26),
  inference(superposition,[],[f278,f8799])).
fof(f17964,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | ($spl0 | $spl5 | $spl26)),
  inference(forward_demodulation,[],[f17776,f2181])).
fof(f17776,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK0))) | ($spl0 | $spl5 | $spl26)),
  inference(backward_demodulation,[],[f17768,f10817])).
fof(f17965,plain,(
  $false | ($spl0 | $spl5 | $spl26 | $spl33)),
  inference(subsumption_resolution,[],[f17964,f10949])).
fof(f17718,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl19 | $spl28 | $spl34)),
  inference(subsumption_resolution,[],[f17717,f6217])).
fof(f6217,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | $spl19),
  inference(cnf_transformation,[],[f6217_D])).
fof(f6217_D,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f17717,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl28 | $spl34)),
  inference(backward_demodulation,[],[f17430,f13965])).
fof(f13965,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl28)),
  inference(forward_demodulation,[],[f13964,f10817])).
fof(f13964,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl28)),
  inference(forward_demodulation,[],[f13963,f3135])).
fof(f13963,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl28)),
  inference(subsumption_resolution,[],[f13921,f203])).
fof(f13921,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl28)),
  inference(superposition,[],[f288,f12337])).
fof(f12337,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))))) | ($spl0 | $spl3 | $spl28)),
  inference(unit_resulting_resolution,[],[f11439,f1746])).
fof(f17430,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1))) | ($spl5 | $spl34)),
  inference(backward_demodulation,[],[f17393,f7918])).
fof(f17393,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl34),
  inference(cnf_transformation,[],[f17393_D])).
fof(f17393_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f17395,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | $spl36),
  inference(cnf_transformation,[],[f17395_D])).
fof(f17395_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f17391,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl3),
  inference(subsumption_resolution,[],[f17348,f203])).
fof(f17348,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl3),
  inference(superposition,[],[f293,f8317])).
fof(f11180,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11105,f1843])).
fof(f11105,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl6),
  inference(superposition,[],[f1996,f215])).
fof(f11178,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11103,f1843])).
fof(f11103,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl6),
  inference(superposition,[],[f1996,f213])).
fof(f11176,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11101,f1843])).
fof(f11101,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl6),
  inference(superposition,[],[f1996,f205])).
fof(f11175,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11174,f1843])).
fof(f11174,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl6),
  inference(forward_demodulation,[],[f11100,f278])).
fof(f11100,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl6),
  inference(superposition,[],[f1996,f206])).
fof(f11158,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl6)),
  inference(subsumption_resolution,[],[f11088,f1843])).
fof(f11088,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | ($spl0 | $spl3 | $spl5 | $spl6)),
  inference(superposition,[],[f1996,f2773])).
fof(f11153,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl6)),
  inference(subsumption_resolution,[],[f11083,f1843])).
fof(f11083,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | ($spl0 | $spl3 | $spl5 | $spl6)),
  inference(superposition,[],[f1996,f2919])).
fof(f11151,plain,(
  $false | ($spl0 | $spl5 | $spl6)),
  inference(subsumption_resolution,[],[f11081,f1843])).
fof(f11081,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | ($spl0 | $spl5 | $spl6)),
  inference(superposition,[],[f1996,f6918])).
fof(f11150,plain,(
  $false | ($spl3 | $spl6)),
  inference(subsumption_resolution,[],[f11080,f1843])).
fof(f11080,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | ($spl3 | $spl6)),
  inference(superposition,[],[f1996,f6910])).
fof(f11149,plain,(
  $false | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f11079,f1843])).
fof(f11079,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | ($spl5 | $spl6)),
  inference(superposition,[],[f1996,f6909])).
fof(f11146,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11145,f1843])).
fof(f11145,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl6),
  inference(forward_demodulation,[],[f11076,f278])).
fof(f11076,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl6),
  inference(superposition,[],[f1996,f321])).
fof(f11144,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11075,f1843])).
fof(f11075,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl6),
  inference(superposition,[],[f1996,f216])).
fof(f11140,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11025,f7694])).
fof(f11025,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl6),
  inference(unit_resulting_resolution,[],[f1996,f238])).
fof(f11139,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11138,f7694])).
fof(f11138,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl6),
  inference(backward_demodulation,[],[f11028,f321])).
fof(f11028,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X0)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1996,f297])).
fof(f11136,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11036,f2718])).
fof(f11036,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl6),
  inference(unit_resulting_resolution,[],[f216,f1996,f307])).
fof(f11135,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f11038,f2718])).
fof(f11038,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl6),
  inference(unit_resulting_resolution,[],[f2401,f1996,f307])).
fof(f11065,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f276,f1996,f307])).
fof(f11063,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f273,f1996,f307])).
fof(f11061,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f272,f1996,f307])).
fof(f11059,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f320,f1996,f307])).
fof(f11057,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f319,f1996,f307])).
fof(f11055,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f217,f1996,f307])).
fof(f11053,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f219,f1996,f307])).
fof(f11051,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f218,f1996,f307])).
fof(f11049,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f322,f1996,f307])).
fof(f11047,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f214,f1996,f307])).
fof(f11043,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f283,f1996,f307])).
fof(f11041,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f3135,f1996,f307])).
fof(f11039,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f2401,f1996,f307])).
fof(f11037,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f216,f1996,f307])).
fof(f11027,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f2718,f1996,f288])).
fof(f10947,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) | $spl30),
  inference(cnf_transformation,[],[f10947_D])).
fof(f10947_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f10949,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | $spl33),
  inference(cnf_transformation,[],[f10949_D])).
fof(f10949_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f10846,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK1)))) | $spl0),
  inference(superposition,[],[f296,f2353])).
fof(f10815,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl18)),
  inference(subsumption_resolution,[],[f10773,f7694])).
fof(f10773,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl3 | $spl5 | $spl18)),
  inference(forward_demodulation,[],[f10667,f2181])).
fof(f10667,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl18)),
  inference(superposition,[],[f321,f10210])).
fof(f10210,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl18)),
  inference(forward_demodulation,[],[f10117,f4424])).
fof(f10117,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))))) | ($spl0 | $spl5 | $spl18)),
  inference(superposition,[],[f7552,f281])).
fof(f7552,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5 | $spl18)),
  inference(forward_demodulation,[],[f7551,f312])).
fof(f7551,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5 | $spl18)),
  inference(forward_demodulation,[],[f7550,f6250])).
fof(f6250,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl18),
  inference(superposition,[],[f3135,f6218])).
fof(f7550,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f7538,f276])).
fof(f7538,plain,(
  ( ! [X0] : (s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK3(X0,'const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))),'type.num.num')),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f276,f7206,f307])).
fof(f10774,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl9 | $spl18)),
  inference(subsumption_resolution,[],[f10773,f1998])).
fof(f9159,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl18 | $spl26)),
  inference(subsumption_resolution,[],[f9158,f315])).
fof(f9158,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | ($spl0 | $spl5 | $spl18 | $spl26)),
  inference(forward_demodulation,[],[f9047,f9142])).
fof(f9142,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X0)))) ) | ($spl0 | $spl5 | $spl18 | $spl26)),
  inference(forward_demodulation,[],[f9141,f8816])).
fof(f8816,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X0)))))) ) | ($spl0 | $spl5 | $spl26)),
  inference(backward_demodulation,[],[f8799,f7295])).
fof(f9141,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',X0)))))) ) | ($spl0 | $spl18 | $spl26)),
  inference(backward_demodulation,[],[f9040,f7478])).
fof(f7478,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))))))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f7392,f6250])).
fof(f7392,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))))))) ) | $spl0),
  inference(superposition,[],[f4586,f281])).
fof(f9047,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl26),
  inference(superposition,[],[f322,f8799])).
fof(f9157,plain,(
  $false | ($spl0 | $spl5 | $spl9 | $spl18 | $spl26)),
  inference(subsumption_resolution,[],[f9156,f1998])).
fof(f9156,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl5 | $spl18 | $spl26)),
  inference(forward_demodulation,[],[f9046,f9142])).
fof(f9046,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl26),
  inference(superposition,[],[f321,f8799])).
fof(f9151,plain,(
  $false | ($spl0 | $spl5 | $spl18 | $spl26)),
  inference(subsumption_resolution,[],[f9149,f317])).
fof(f9149,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | ($spl0 | $spl5 | $spl18 | $spl26)),
  inference(backward_demodulation,[],[f9142,f312])).
fof(f9140,plain,(
  $false | ($spl0 | $spl5 | $spl18 | $spl26)),
  inference(subsumption_resolution,[],[f9139,f2187])).
fof(f9139,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | ($spl18 | $spl26)),
  inference(forward_demodulation,[],[f9037,f6218])).
fof(f9037,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | $spl26),
  inference(superposition,[],[f217,f8799])).
fof(f8799,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl26),
  inference(cnf_transformation,[],[f8799_D])).
fof(f8799_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f8801,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | $spl28),
  inference(cnf_transformation,[],[f8801_D])).
fof(f8801_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f8797,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f8770,f203])).
fof(f8770,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | ($spl0 | $spl5)),
  inference(superposition,[],[f293,f7544])).
fof(f6686,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) | $spl22),
  inference(cnf_transformation,[],[f6686_D])).
fof(f6686_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f6688,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | $spl24),
  inference(cnf_transformation,[],[f6688_D])).
fof(f6688_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f6684,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(subsumption_resolution,[],[f6658,f203])).
fof(f6658,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(superposition,[],[f293,f4853])).
fof(f4853,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(unit_resulting_resolution,[],[f4728,f231])).
fof(f4728,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(unit_resulting_resolution,[],[f3961,f296])).
fof(f3961,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(superposition,[],[f3699,f3135])).
fof(f3699,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(backward_demodulation,[],[f3685,f3004])).
fof(f6218,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | $spl18),
  inference(cnf_transformation,[],[f6218_D])).
fof(f6218_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f6220,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK0)))) | $spl20),
  inference(cnf_transformation,[],[f6220_D])).
fof(f6220_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK0)))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f6216,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(subsumption_resolution,[],[f6191,f203])).
fof(f6191,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(superposition,[],[f293,f4209])).
fof(f4209,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(unit_resulting_resolution,[],[f3957,f231])).
fof(f3957,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK0))),s('type.num.num',sK0)))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(unit_resulting_resolution,[],[f3699,f296])).
fof(f4950,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(subsumption_resolution,[],[f4944,f2286])).
fof(f4944,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(backward_demodulation,[],[f4929,f4884])).
fof(f4884,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(unit_resulting_resolution,[],[f4847,f230])).
fof(f4847,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK0)))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(unit_resulting_resolution,[],[f4728,f299])).
fof(f4949,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(subsumption_resolution,[],[f4948,f333])).
fof(f4948,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(forward_demodulation,[],[f4943,f2286])).
fof(f4943,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(backward_demodulation,[],[f4929,f4883])).
fof(f4883,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5 | $spl10)),
  inference(unit_resulting_resolution,[],[f4847,f235])).
fof(f4947,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(subsumption_resolution,[],[f4942,f2198])).
fof(f4942,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(backward_demodulation,[],[f4929,f4853])).
fof(f4946,plain,(
  $false | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(subsumption_resolution,[],[f4941,f897])).
fof(f4941,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5 | $spl10 | $spl14)),
  inference(backward_demodulation,[],[f4929,f3961])).
fof(f4929,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) | $spl14),
  inference(cnf_transformation,[],[f4929_D])).
fof(f4929_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f4931,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | $spl16),
  inference(cnf_transformation,[],[f4931_D])).
fof(f4931_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f4927,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f4905,f203])).
fof(f4905,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f293,f3487])).
fof(f3685,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | $spl10),
  inference(cnf_transformation,[],[f3685_D])).
fof(f3685_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f3687,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | $spl12),
  inference(cnf_transformation,[],[f3687_D])).
fof(f3687_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f3683,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f3544,f203])).
fof(f3544,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | ($spl0 | $spl3 | $spl5)),
  inference(superposition,[],[f293,f3167])).
fof(f3167,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num',sK0))) | ($spl0 | $spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f2944,f231])).
fof(f2944,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))),s('type.num.num',sK0)))) | ($spl0 | $spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f2919,f296])).
fof(f1996,plain,(
  ( ! [X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X2))))) ) | $spl6),
  inference(cnf_transformation,[],[f1996_D])).
fof(f1996_D,plain,(
  ( ! [X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X2))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1998,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl9),
  inference(cnf_transformation,[],[f1998_D])).
fof(f1998_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f1941,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X2))))) )),
  inference(superposition,[],[f296,f321])).
fof(f326,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f325,f216])).
fof(f325,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f316,f313])).
fof(f324,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f323,f214])).
fof(f323,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f313,f314])).
fof(f312,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f312_D])).
fof(f312_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f316,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | $spl4),
  inference(cnf_transformation,[],[f316_D])).
fof(f316_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f314,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | $spl2),
  inference(cnf_transformation,[],[f314_D])).
fof(f314_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f200,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  (s('type.num.num',sK0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1)) & (s('type.num.num',sK0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f161])).
fof(f161,plain,(
  ? [X0,X1] : ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1))))),
  inference(flattening,[],[f160])).
fof(f160,plain,(
  ? [X0,X1] : ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & (s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1))))),
  inference(nnf_transformation,[],[f149])).
fof(f149,plain,(
  ? [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) <~> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)))),
  file('thm.arithmetic.SUB_EQ_EQ_|48|','thm.arithmetic.SUB_EQ_EQ_|48|')).
fof(f313,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f313_D])).
fof(f313_D,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f317,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) | $spl5),
  inference(cnf_transformation,[],[f317_D])).
fof(f317_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f201,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) | s('type.num.num',sK0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f162])).
fof(f315,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl3),
  inference(cnf_transformation,[],[f315_D])).
fof(f315_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f202,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.num.num',sK0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f162])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 260
% Passive clauses: 1792
% Generated clauses: 23821
% Final active clauses: 140
% Final passive clauses: 647
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 182
% Trivial inequalities: 110
% Fw subsumption resolutions: 648
% Fw demodulations: 6636
% Bw demodulations: 657
% Condensations: 229
% Global subsumptions: 313
% 
% Simple tautologies: 80
% Equational tautologies: 178
% Forward subsumptions: 13233
% Fw demodulations to eq. taut.: 53
% 
% Unit resulting resolution: 1641
% Factoring: 1
% Forward superposition: 4915
% Backward superposition: 7460
% Self superposition: 106
% Equality factoring: 30
% Equality resolution: 5
% 
% Split clauses: 11
% Split components: 23
% SAT solver clauses: 2485
% SAT solver unit clauses: 249
% SAT solver binary clauses: 837
% 
% Sat splits: 11
% Sat splitting refutations: 356
% 
% Memory used [KB]: 17782
% Time elapsed: 0.834 s
% ------------------------------
% ------------------------------
% Success in time 2.18 s
