Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.integral
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integral
% SZS output start Proof for thm.integral
fof(f8309,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f8307,f5640,f5599,f5608,f8213,f5609,f5641,f5606])).
fof(f5606,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),sK14))))) ) | $spl128),
  inference(cnf_transformation,[],[f5606_D])).
fof(f5606_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),sK14))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f5641,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))))) | $spl132),
  inference(cnf_transformation,[],[f5641_D])).
fof(f5641_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))))) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f5609,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),sK14))))) )),
  inference(resolution,[],[f423,f241])).
fof(f241,plain,(
  p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num',sK15))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))))))))),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK12),s('type.realax.real',sK13))),s(fun('type.num.num','type.realax.real'),sK14)))) & p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num',sK15))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15)))))))) & s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))))))) & s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))) != s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f112])).
fof(f112,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) & p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) & s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))) & s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) != s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2))))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) & p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) & s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) & s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) != s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2))))),
  inference(ennf_transformation,[],[f46])).
fof(f46,plain,(
  ~! [X0,X1,X2,X3] : ((p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) & p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) & s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) => s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ((p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X6),s('type.realax.real',X7))),s(fun('type.num.num','type.realax.real'),X8)))) & p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num',X9))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))) & s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))) => s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) = s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ((p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X6),s('type.realax.real',X7))),s(fun('type.num.num','type.realax.real'),X8)))) & p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num',X9))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))) & s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))) => s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) = s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X8))))),
  file('thm.integral.DIVISION_DSIZE_EQ','thm.integral.DIVISION_DSIZE_EQ')).
fof(f423,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2)))))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) | ~p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2)))))))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) | ~p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2)))))))),
  inference(ennf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) & p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2)))))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6,X7,X8,X9] : ((p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X6),s('type.realax.real',X7))),s(fun('type.num.num','type.realax.real'),X8)))) & p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num',X9))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X8)))))))),
  file('thm.integral.DIVISION_DSIZE_EQ','thm.integral.DIVISION_DSIZE_GE')).
fof(f8213,plain,(
  $false | $spl128),
  inference(resolution,[],[f5606,f240])).
fof(f240,plain,(
  p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK12),s('type.realax.real',sK13))),s(fun('type.num.num','type.realax.real'),sK14))))),
  inference(cnf_transformation,[],[f158])).
fof(f5608,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15)))))) | $spl130),
  inference(cnf_transformation,[],[f5608_D])).
fof(f5608_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15)))))) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f5599,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15)))))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),sK14))))) )),
  inference(trivial_inequality_removal,[],[f5598])).
fof(f5598,plain,(
  ( ! [X0,X1] : (s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))))) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15)))))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),sK14))))) )),
  inference(superposition,[],[f422,f242])).
fof(f242,plain,(
  s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15)))))))),
  inference(cnf_transformation,[],[f158])).
fof(f422,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2))),s('type.num.num',X3)))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2))))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) | s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2))),s('type.num.num',X3)))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) | s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2))),s('type.num.num',X3)))))),
  inference(ennf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X0),s('type.realax.real',X1))),s(fun('type.num.num','type.realax.real'),X2)))) & s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num',X3))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X2))),s('type.num.num',X3)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6,X7,X8,X9] : ((p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X6),s('type.realax.real',X7))),s(fun('type.num.num','type.realax.real'),X8)))) & s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num',X9))) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X8))),s('type.num.num',X9)))))),
  file('thm.integral.DIVISION_DSIZE_EQ','thm.integral.DIVISION_DSIZE_LE')).
fof(f5640,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))))) | $spl133),
  inference(cnf_transformation,[],[f5640_D])).
fof(f5640_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))))) <=> ~$spl133),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl133])])).
fof(f8307,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))))) | $spl130),
  inference(subsumption_resolution,[],[f8251,f243])).
fof(f243,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))) != s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))),
  inference(cnf_transformation,[],[f158])).
fof(f8251,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15))) = s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK14))) | $spl130),
  inference(resolution,[],[f5608,f303])).
fof(f303,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(flattening,[],[f184])).
fof(f184,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X10,X9] : (s('type.num.num',X9) = s('type.num.num',X10) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X9)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10))))))),
  file('thm.integral.DIVISION_DSIZE_EQ','thm.arithmetic.EQ_LESS_EQ')).
% SZS output end Proof for thm.integral
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 540
% Passive clauses: 2667
% Generated clauses: 8039
% Final active clauses: 535
% Final passive clauses: 1915
% Input formulas: 44
% Initial clauses: 184
% 
% Duplicate literals: 188
% Trivial inequalities: 25
% Fw subsumption resolutions: 646
% Fw demodulations: 412
% Bw demodulations: 3
% 
% Simple tautologies: 197
% Equational tautologies: 23
% Forward subsumptions: 3841
% 
% Binary resolution: 4148
% Factoring: 968
% Forward superposition: 636
% Backward superposition: 732
% Self superposition: 5
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 147
% Split components: 297
% SAT solver clauses: 229
% SAT solver unit clauses: 10
% SAT solver binary clauses: 40
% SAT solver learnt clauses: 1
% 
% Sat splits: 147
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 228
% TWLsolver calls for satisfiability: 193
% 
% Memory used [KB]: 3837
% Time elapsed: 0.117 s
% ------------------------------
% ------------------------------
% Success in time 0.12 s
