Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f461,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f460,f261,f405,f459,f449,f403,f260,f404,f407])).
fof(f407,plain,(
  p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',sK1)))) | $spl4),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',sK1)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f404,plain,(
  p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one','const.one.one_0')))) | $spl2),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one','const.one.one_0')))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f260,plain,(
  p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one','const.one.one_0')))) | p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',sK1))))),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  (p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',sK1)))) | p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one','const.one.one_0'))))) & (! [X1] : ~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',X1)))) | ~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one','const.one.one_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f186])).
fof(f186,plain,(
  ? [X0] : ((? [X2] : p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X2)))) | p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0'))))) & (! [X1] : ~p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X1)))) | ~p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0'))))))),
  inference(rectify,[],[f185])).
fof(f185,plain,(
  ? [X0] : ((? [X1] : p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X1)))) | p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0'))))) & (! [X1] : ~p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X1)))) | ~p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0'))))))),
  inference(nnf_transformation,[],[f163])).
fof(f163,plain,(
  ? [X0] : (? [X1] : p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X1)))) <~> p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0')))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0] : (? [X1] : p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X1)))) <=> p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : (? [X7] : p(s(bool,happ(s(fun('type.one.one',bool),X6),s('type.one.one',X7)))) <=> p(s(bool,happ(s(fun('type.one.one',bool),X6),s('type.one.one','const.one.one_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : (? [X7] : p(s(bool,happ(s(fun('type.one.one',bool),X6),s('type.one.one',X7)))) <=> p(s(bool,happ(s(fun('type.one.one',bool),X6),s('type.one.one','const.one.one_0')))))),
  file('thm.quantHeuristics.quantHeuristics_44_prove_ltb|split|1','thm.quantHeuristics.quantHeuristics_44_prove_ltb|split|1')).
fof(f403,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',X1))))) ) | $spl0),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',X1))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f449,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',X0))))) ) | $spl3),
  inference(superposition,[],[f405,f273])).
fof(f273,plain,(
  ( ! [X0] : (s('type.one.one','const.one.one_0') = s('type.one.one',X0)) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s('type.one.one','const.one.one_0') = s('type.one.one',X0)),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X8] : s('type.one.one','const.one.one_0') = s('type.one.one',X8)),
  file('thm.quantHeuristics.quantHeuristics_44_prove_ltb|split|1','thm.one.one')).
fof(f459,plain,(
  $false | ($spl0 | $spl4)),
  inference(subsumption_resolution,[],[f407,f403])).
fof(f405,plain,(
  ~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one','const.one.one_0')))) | $spl3),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  ~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one','const.one.one_0')))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f261,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one','const.one.one_0')))) | ~p(s(bool,happ(s(fun('type.one.one',bool),sK0),s('type.one.one',X1))))) )),
  inference(cnf_transformation,[],[f187])).
fof(f460,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f404,f403])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 14
% Passive clauses: 86
% Generated clauses: 196
% Final active clauses: 12
% Final passive clauses: 63
% Input formulas: 69
% Initial clauses: 140
% 
% Duplicate literals: 2
% Trivial inequalities: 1
% Fw subsumption resolutions: 2
% Bw demodulations: 1
% 
% Simple tautologies: 40
% Equational tautologies: 4
% Forward subsumptions: 34
% 
% Binary resolution: 10
% Forward superposition: 14
% Backward superposition: 6
% Self superposition: 10
% Equality resolution: 1
% 
% Split clauses: 25
% Split components: 52
% SAT solver clauses: 36
% SAT solver unit clauses: 5
% SAT solver binary clauses: 28
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 25
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 34
% TWLsolver calls for satisfiability: 5
% 
% Memory used [KB]: 767
% Time elapsed: 0.014 s
% ------------------------------
% ------------------------------
% Success in time 0.017 s
