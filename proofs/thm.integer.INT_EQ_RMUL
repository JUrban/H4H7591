Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.integer
% (69267)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 124
% Passive clauses: 2628
% Generated clauses: 18153
% Final active clauses: 118
% Final passive clauses: 2389
% Input formulas: 40
% Initial clauses: 53
% 
% Duplicate literals: 825
% Trivial inequalities: 210
% Fw subsumption resolutions: 2233
% Fw demodulations: 3042
% Bw demodulations: 3
% 
% Simple tautologies: 324
% Equational tautologies: 28
% Forward subsumptions: 8177
% 
% Binary resolution: 24
% Forward superposition: 7130
% Backward superposition: 4165
% Self superposition: 230
% Equality factoring: 86
% Equality resolution: 47
% 
% Split clauses: 473
% Split components: 947
% SAT solver clauses: 781
% SAT solver unit clauses: 56
% SAT solver binary clauses: 216
% 
% Sat splits: 473
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 781
% TWLsolver calls for satisfiability: 114
% 
% Memory used [KB]: 13688
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.integer
% (69300)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 124
% Passive clauses: 1205
% Generated clauses: 10964
% Final active clauses: 67
% Final passive clauses: 798
% Input formulas: 40
% Initial clauses: 53
% 
% Duplicate literals: 316
% Trivial inequalities: 86
% Fw subsumption resolutions: 301
% Fw demodulations: 2103
% Bw demodulations: 375
% Condensations: 461
% 
% Simple tautologies: 90
% Equational tautologies: 35
% Forward subsumptions: 4762
% Fw demodulations to eq. taut.: 7
% 
% Binary resolution: 17
% Forward superposition: 3915
% Backward superposition: 1901
% Self superposition: 161
% Equality factoring: 47
% Equality resolution: 46
% 
% Split clauses: 33
% Split components: 67
% SAT solver clauses: 1606
% SAT solver unit clauses: 63
% SAT solver binary clauses: 49
% 
% Sat splits: 33
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 1606
% TWLsolver calls for satisfiability: 361
% 
% Memory used [KB]: 17014
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f22986,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f137,f191,f136,f193,f189,f135,f190,f192,f188,f140,f197,f195,f204,f228,f231,f229,f248,f250,f253,f252,f853,f3168,f3169,f3109,f3171,f3188,f16447,f311,f310,f16689,f16688,f16690,f22025,f22488,f22581,f22973,f22977,f22933,f22966,f22982,f22981])).
fof(f22981,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl28),
  inference(cnf_transformation,[],[f22981_D])).
fof(f22981_D,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f22982,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',X0))) | s('type.integer.int',sK2) = s('type.integer.int',X0)) ) | $spl30),
  inference(cnf_transformation,[],[f22982_D])).
fof(f22982_D,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',X0))) | s('type.integer.int',sK2) = s('type.integer.int',X0)) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f22966,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',X0))) | s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK2) = s('type.integer.int',X0)) ) | $spl0),
  inference(superposition,[],[f168,f188])).
fof(f168,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int',X2)) )),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : ((s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int',X2)) & ((s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X1) != s('type.integer.int',X2)) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2] : ((s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int',X2))) & ((s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X1) != s('type.integer.int',X2)) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(nnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) <=> (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int',X2)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X7,X8] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))) <=> (s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X7) = s('type.integer.int',X8)))),
  file('thm.integer.INT_EQ_RMUL','thm.integer.INT_EQ_LMUL')).
fof(f22933,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',X0))) | s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK2) = s('type.integer.int',X0)) ) | $spl0),
  inference(superposition,[],[f168,f188])).
fof(f22977,plain,(
  $false | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f22976,f188])).
fof(f22976,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | ($spl3 | $spl5)),
  inference(forward_demodulation,[],[f22975,f19636])).
fof(f19636,plain,(
  ( ! [X2,X3] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X2)))) )),
  inference(superposition,[],[f1822,f153])).
fof(f153,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X0))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X1)))))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X0))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X1)))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X19,X20] : s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X19),s('type.integer.int',X20))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X19))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X20)))))))),
  file('thm.integer.INT_EQ_RMUL','thm.integer.int_mul')).
fof(f1822,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X1))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X0)))))))) )),
  inference(superposition,[],[f153,f152])).
fof(f152,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X1),s('type.pair.prod'('type.num.num','type.num.num'),X0)))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X1),s('type.pair.prod'('type.num.num','type.num.num'),X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X6),s('type.pair.prod'('type.num.num','type.num.num'),X7))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X7),s('type.pair.prod'('type.num.num','type.num.num'),X6)))),
  file('thm.integer.INT_EQ_RMUL','thm.integer.TINT_MUL_SYM')).
fof(f22975,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',sK0))) | ($spl3 | $spl5)),
  inference(forward_demodulation,[],[f22908,f19636])).
fof(f22908,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',sK1))) | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f191,f193,f168])).
fof(f22973,plain,(
  $false | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f22972,f188])).
fof(f22972,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | ($spl3 | $spl5)),
  inference(forward_demodulation,[],[f22971,f19636])).
fof(f22971,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',sK0))) | ($spl3 | $spl5)),
  inference(forward_demodulation,[],[f22912,f19636])).
fof(f22912,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',sK1))) | ($spl3 | $spl5)),
  inference(unit_resulting_resolution,[],[f191,f193,f168])).
fof(f22581,plain,(
  $false | ($spl1 | $spl4 | $spl16)),
  inference(subsumption_resolution,[],[f22306,f20994])).
fof(f20994,plain,(
  ( ! [X2,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',sK2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',sK2)))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f19977,f19977])).
fof(f19977,plain,(
  ( ! [X4,X3] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',sK2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X4)))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f17154,f1822])).
fof(f17154,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',sK2))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X1)))))))) ) | ($spl4 | $spl16)),
  inference(unit_resulting_resolution,[],[f253,f16718,f1828])).
fof(f1828,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int',X17))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X14),s('type.integer.int',X15))))) | s('type.integer.int',X17) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X14))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X15))))))) | s('type.integer.int',sK2) = s('type.integer.int',X16)) ) | $spl4),
  inference(superposition,[],[f205,f153])).
fof(f205,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | s('type.integer.int',X1) = s('type.integer.int',X2) | s('type.integer.int',sK2) = s('type.integer.int',X0)) ) | $spl4),
  inference(backward_demodulation,[],[f192,f168])).
fof(f16718,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X2)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f215,f170])).
fof(f170,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int',X1) != s('type.integer.int',X2) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))) )),
  inference(cnf_transformation,[],[f132])).
fof(f215,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X1)))) ) | $spl4),
  inference(forward_demodulation,[],[f210,f146])).
fof(f146,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9] : ! [X6] : s(X9,X6) = s(X9,'const.combin.I_1'(s(X9,X6)))),
  file('thm.integer.INT_EQ_RMUL','thm.combin.I_THM')).
fof(f210,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.combin.I_1'(s('type.integer.int',sK2))),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.combin.I_1'(s('type.integer.int',sK2))),s('type.integer.int',X1)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f146,f206])).
fof(f206,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int',sK2) != s('type.integer.int',X0) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))) ) | $spl4),
  inference(backward_demodulation,[],[f192,f169])).
fof(f169,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))) )),
  inference(cnf_transformation,[],[f132])).
fof(f22306,plain,(
  ( ! [X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',sK2)))) ) | ($spl1 | $spl4 | $spl16)),
  inference(superposition,[],[f189,f20994])).
fof(f22488,plain,(
  $false | ($spl1 | $spl4 | $spl16)),
  inference(subsumption_resolution,[],[f22130,f20994])).
fof(f22130,plain,(
  ( ! [X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',sK2)))) ) | ($spl1 | $spl4 | $spl16)),
  inference(superposition,[],[f189,f20994])).
fof(f22025,plain,(
  $false | ($spl1 | $spl4 | $spl16)),
  inference(unit_resulting_resolution,[],[f189,f20994])).
fof(f16690,plain,(
  $false | ($spl16 | $spl24)),
  inference(subsumption_resolution,[],[f16688,f253])).
fof(f16688,plain,(
  ( ! [X6] : (s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X6)))) ) | $spl24),
  inference(cnf_transformation,[],[f16688_D])).
fof(f16688_D,plain,(
  ( ! [X6] : (s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X6)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f16689,plain,(
  ( ! [X8,X7,X9] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X7))),s('type.integer.int',X8))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X7))),s('type.integer.int',X9))) | s('type.integer.int',X8) = s('type.integer.int',X9)) ) | $spl26),
  inference(cnf_transformation,[],[f16689_D])).
fof(f16689_D,plain,(
  ( ! [X8,X7,X9] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X7))),s('type.integer.int',X8))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X7))),s('type.integer.int',X9))) | s('type.integer.int',X8) = s('type.integer.int',X9)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f310,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X3))),s('type.integer.int',X4))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X3))),s('type.integer.int',X5))) | s('type.integer.int',X4) = s('type.integer.int',X5) | s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X2)))) ) | $spl4),
  inference(superposition,[],[f205,f215])).
fof(f311,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X7))),s('type.integer.int',X8))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X7))),s('type.integer.int',X9))) | s('type.integer.int',X8) = s('type.integer.int',X9) | s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X6)))) ) | $spl4),
  inference(superposition,[],[f205,f215])).
fof(f16447,plain,(
  $false | ($spl1 | $spl4 | $spl14)),
  inference(subsumption_resolution,[],[f16444,f16301])).
fof(f16301,plain,(
  ( ! [X1] : (s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',sK2)))) ) | ($spl4 | $spl14)),
  inference(superposition,[],[f15915,f153])).
fof(f15915,plain,(
  ( ! [X0] : (s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X0))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',sK2)))))))) ) | ($spl4 | $spl14)),
  inference(superposition,[],[f15883,f152])).
fof(f15883,plain,(
  ( ! [X0] : (s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',sK2))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X0)))))))) ) | ($spl4 | $spl14)),
  inference(condensation,[],[f15882])).
fof(f15882,plain,(
  ( ! [X2,X1] : (s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',sK2))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X2))))))) | s('type.integer.int',sK2) = s('type.integer.int',X1)) ) | ($spl4 | $spl14)),
  inference(forward_demodulation,[],[f15880,f327])).
fof(f327,plain,(
  ( ! [X0] : (s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0)))) ) | ($spl4 | $spl14)),
  inference(condensation,[],[f326])).
fof(f326,plain,(
  ( ! [X4,X2,X5] : (s('type.integer.int',X4) = s('type.integer.int',X5) | s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X2)))) ) | ($spl4 | $spl14)),
  inference(subsumption_resolution,[],[f310,f252])).
fof(f15880,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',sK2))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X2))))))) | s('type.integer.int',sK2) = s('type.integer.int',X1)) ) | ($spl4 | $spl14)),
  inference(trivial_inequality_removal,[],[f15863])).
fof(f15863,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',sK2))) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',sK2))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X2))))))) | s('type.integer.int',sK2) = s('type.integer.int',X1)) ) | ($spl4 | $spl14)),
  inference(superposition,[],[f15830,f327])).
fof(f15830,plain,(
  ( ! [X2,X3,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',sK2))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X3))))))) | s('type.integer.int',sK2) = s('type.integer.int',X1)) ) | ($spl4 | $spl14)),
  inference(forward_demodulation,[],[f15829,f327])).
fof(f15829,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X3))))))) | s('type.integer.int',sK2) = s('type.integer.int',X1)) ) | ($spl4 | $spl14)),
  inference(forward_demodulation,[],[f15788,f327])).
fof(f15788,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X3))))) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X3))))))) | s('type.integer.int',sK2) = s('type.integer.int',X1)) ) | ($spl4 | $spl14)),
  inference(superposition,[],[f1828,f327])).
fof(f16444,plain,(
  s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | ($spl1 | $spl4 | $spl14)),
  inference(backward_demodulation,[],[f16301,f189])).
fof(f3188,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0')))) ) | $spl22),
  inference(cnf_transformation,[],[f3188_D])).
fof(f3188_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0')))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f3171,plain,(
  s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) | $spl21),
  inference(cnf_transformation,[],[f3171_D])).
fof(f3171_D,plain,(
  s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f3109,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0')))) )),
  inference(equality_factoring,[],[f2917])).
fof(f2917,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f2916])).
fof(f2916,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f2733])).
fof(f2733,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f606,f145])).
fof(f145,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.integer.INT_EQ_RMUL',aHL_BOOL_CASES)).
fof(f606,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'const.combin.I_1'(s(bool,X15))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f219,f146])).
fof(f219,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f145,f145])).
fof(f3169,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,X30)) ) | $spl18),
  inference(cnf_transformation,[],[f3169_D])).
fof(f3169_D,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,X30)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f3168,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X30)) ) | $spl13),
  inference(subsumption_resolution,[],[f3046,f2953])).
fof(f2953,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f2881,f146])).
fof(f2881,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.I_1'(s(bool,'T_0'))) != s(bool,'const.combin.I_1'(s(bool,X0)))) )),
  inference(condensation,[],[f2880])).
fof(f2880,plain,(
  ( ! [X41,X42] : (s(bool,'const.combin.I_1'(s(bool,'T_0'))) != s(bool,'const.combin.I_1'(s(bool,X42))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X42)) )),
  inference(duplicate_literal_removal,[],[f2792])).
fof(f2792,plain,(
  ( ! [X41,X42] : (s(bool,'const.combin.I_1'(s(bool,'T_0'))) != s(bool,'const.combin.I_1'(s(bool,X42))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f1549,f606])).
fof(f1549,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.combin.I_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f1531])).
fof(f1531,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.combin.I_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f581])).
fof(f581,plain,(
  ( ! [X23,X22] : (s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X22)))) )),
  inference(superposition,[],[f219,f146])).
fof(f3046,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X30))) | s(bool,'T_0') = s(bool,X30)) ) | $spl13),
  inference(superposition,[],[f1711,f2917])).
fof(f1711,plain,(
  ( ! [X37] : (s(bool,'T_0') != s(bool,X37) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X37)))) ) | $spl13),
  inference(subsumption_resolution,[],[f1452,f231])).
fof(f1452,plain,(
  ( ! [X37] : (s(bool,'T_0') != s(bool,X37) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X37)))) ) | $spl13),
  inference(superposition,[],[f231,f581])).
fof(f853,plain,(
  $false | $spl7),
  inference(subsumption_resolution,[],[f852,f138])).
fof(f138,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.integer.INT_EQ_RMUL',aHL_TRUTH)).
fof(f852,plain,(
  ~p(s(bool,'T_0')) | $spl7),
  inference(backward_demodulation,[],[f841,f202])).
fof(f202,plain,(
  ~p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK3),s('type.pair.prod'('type.num.num','type.num.num'),sK4))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK3),s('type.pair.prod'('type.num.num','type.num.num'),sK4)))))) | $spl7),
  inference(forward_demodulation,[],[f201,f152])).
fof(f201,plain,(
  ~p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK4),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK3),s('type.pair.prod'('type.num.num','type.num.num'),sK4)))))) | $spl7),
  inference(forward_demodulation,[],[f200,f155])).
fof(f155,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X36,X37] : s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),X36),s('type.pair.prod'('type.num.num','type.num.num'),X37))) = s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X36))),s('type.pair.prod'('type.num.num','type.num.num'),X37)))),
  file('thm.integer.INT_EQ_RMUL','ARITY_0_2_const.integer.tint_mul')).
fof(f200,plain,(
  ~p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK4))),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_mul_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK3),s('type.pair.prod'('type.num.num','type.num.num'),sK4)))))) | $spl7),
  inference(forward_demodulation,[],[f199,f155])).
fof(f199,plain,(
  ~p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK4))),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK4)))))) | $spl7),
  inference(forward_demodulation,[],[f195,f154])).
fof(f154,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X36,X37] : s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X36),s('type.pair.prod'('type.num.num','type.num.num'),X37))) = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),X36))),s('type.pair.prod'('type.num.num','type.num.num'),X37)))),
  file('thm.integer.INT_EQ_RMUL','ARITY_0_2_const.integer.tint_eq')).
fof(f841,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X0)))) )),
  inference(unit_resulting_resolution,[],[f821,f222])).
fof(f222,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f141,f145])).
fof(f141,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.integer.INT_EQ_RMUL',aHL_FALSITY)).
fof(f821,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X0))))) )),
  inference(forward_demodulation,[],[f807,f198])).
fof(f198,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))) )),
  inference(forward_demodulation,[],[f148,f146])).
fof(f148,plain,(
  ( ! [X0,X1] : (s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1] : s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : ! [X1] : s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X9] : ! [X36] : s(X9,'const.combin.I_1'(s(X9,X36))) = s(X9,happ(s(fun(X9,X9),'const.combin.I_0'),s(X9,X36)))),
  file('thm.integer.INT_EQ_RMUL','ARITY_0_1_const.combin.I')).
fof(f807,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'const.combin.I_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X0))))) )),
  inference(unit_resulting_resolution,[],[f198,f156])).
fof(f156,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1)))) | s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),X1)) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),X1) | p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1)))))),
  inference(ennf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),X1) => p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X13,X14] : (s('type.pair.prod'('type.num.num','type.num.num'),X13) = s('type.pair.prod'('type.num.num','type.num.num'),X14) => p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X13),s('type.pair.prod'('type.num.num','type.num.num'),X14)))))),
  file('thm.integer.INT_EQ_RMUL','thm.integer.TINT_EQ_AP')).
fof(f252,plain,(
  ( ! [X2,X0,X3] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))),s('type.integer.int',X2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))),s('type.integer.int',X3)))) ) | $spl14),
  inference(cnf_transformation,[],[f252_D])).
fof(f252_D,plain,(
  ( ! [X2,X0,X3] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))),s('type.integer.int',X2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))),s('type.integer.int',X3)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f253,plain,(
  ( ! [X1] : (s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X1)))) ) | $spl16),
  inference(cnf_transformation,[],[f253_D])).
fof(f253_D,plain,(
  ( ! [X1] : (s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X1)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f250,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X1))) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))),s('type.integer.int',X2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))),s('type.integer.int',X3)))) ) | $spl4),
  inference(superposition,[],[f206,f215])).
fof(f248,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X1))) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))),s('type.integer.int',X2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK2),s('type.integer.int',X0))),s('type.integer.int',X3)))) ) | $spl4),
  inference(superposition,[],[f206,f215])).
fof(f229,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f231,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl13),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f228,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f145])).
fof(f204,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f203])).
fof(f203,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f189,f190])).
fof(f195,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK4))),s('type.pair.prod'('type.num.num','type.num.num'),sK3))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK4)))))) | $spl7),
  inference(cnf_transformation,[],[f195_D])).
fof(f195_D,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK4))),s('type.pair.prod'('type.num.num','type.num.num'),sK3))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK4)))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f197,plain,(
  p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0')))))))) | $spl8),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0')))))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f140,plain,(
  p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0')))))))) | ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK4))),s('type.pair.prod'('type.num.num','type.num.num'),sK3))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK4))))))),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK4))),s('type.pair.prod'('type.num.num','type.num.num'),sK3))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK4)))))) | p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4])],[f103])).
fof(f103,plain,(
  ? [X0,X1] : ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X1))),s('type.pair.prod'('type.num.num','type.num.num'),X0))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))))) | p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'))))))))),
  inference(ennf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X1))),s('type.pair.prod'('type.num.num','type.num.num'),X0))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))))) => p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'))))))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7,X6] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X6))),s('type.pair.prod'('type.num.num','type.num.num'),X7))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s('type.pair.prod'('type.num.num','type.num.num'),X7))),s('type.pair.prod'('type.num.num','type.num.num'),X6)))))) => p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_mul_0'))))))))),
  file('thm.integer.INT_EQ_RMUL','thm.integer.integer_68_prove_ltb')).
fof(f188,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | $spl0),
  inference(cnf_transformation,[],[f188_D])).
fof(f188_D,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f192,plain,(
  s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl4),
  inference(cnf_transformation,[],[f192_D])).
fof(f192_D,plain,(
  s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f190,plain,(
  s('type.integer.int',sK0) = s('type.integer.int',sK1) | $spl2),
  inference(cnf_transformation,[],[f190_D])).
fof(f190_D,plain,(
  s('type.integer.int',sK0) = s('type.integer.int',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f135,plain,(
  s('type.integer.int',sK0) = s('type.integer.int',sK1) | s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK0) = s('type.integer.int',sK1)) & (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | (s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',sK0) != s('type.integer.int',sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f122])).
fof(f122,plain,(
  ? [X0,X1,X2] : ((s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X0) = s('type.integer.int',X1)) & (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | (s('type.integer.int',X2) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X0) != s('type.integer.int',X1))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ? [X0,X1,X2] : ((s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | (s('type.integer.int',X2) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X0) = s('type.integer.int',X1))) & (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | (s('type.integer.int',X2) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X0) != s('type.integer.int',X1))))),
  inference(nnf_transformation,[],[f102])).
fof(f102,plain,(
  ? [X0,X1,X2] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) <~> (s('type.integer.int',X2) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X0) = s('type.integer.int',X1)))),
  inference(ennf_transformation,[],[f42])).
fof(f42,plain,(
  ~! [X0,X1,X2] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))) <=> (s('type.integer.int',X2) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X0) = s('type.integer.int',X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X8))) <=> (s('type.integer.int',X8) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X6) = s('type.integer.int',X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X8))) <=> (s('type.integer.int',X8) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X6) = s('type.integer.int',X7)))),
  file('thm.integer.INT_EQ_RMUL','thm.integer.INT_EQ_RMUL')).
fof(f189,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | $spl1),
  inference(cnf_transformation,[],[f189_D])).
fof(f189_D,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f193,plain,(
  s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl5),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f136,plain,(
  s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))),
  inference(cnf_transformation,[],[f123])).
fof(f191,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) | $spl3),
  inference(cnf_transformation,[],[f191_D])).
fof(f191_D,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f137,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))),
  inference(cnf_transformation,[],[f123])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 146
% Passive clauses: 1918
% Generated clauses: 22480
% Final active clauses: 90
% Final passive clauses: 978
% Input formulas: 40
% Initial clauses: 53
% 
% Duplicate literals: 690
% Trivial inequalities: 161
% Fw subsumption resolutions: 1257
% Fw demodulations: 5287
% Bw demodulations: 56
% Condensations: 1703
% 
% Simple tautologies: 144
% Equational tautologies: 134
% Forward subsumptions: 11147
% Fw demodulations to eq. taut.: 24
% 
% Unit resulting resolution: 640
% Forward superposition: 6772
% Backward superposition: 5405
% Self superposition: 284
% Equality factoring: 84
% Equality resolution: 55
% 
% Split clauses: 13
% Split components: 27
% SAT solver clauses: 1955
% SAT solver unit clauses: 156
% SAT solver binary clauses: 344
% 
% Sat splits: 13
% Sat splitting refutations: 9
% 
% Memory used [KB]: 26737
% Time elapsed: 1.702 s
% ------------------------------
% ------------------------------
% Success in time 3.036 s
