Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.gcd
% (100082)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 661
% Passive clauses: 10953
% Generated clauses: 19871
% Final active clauses: 657
% Final passive clauses: 9927
% Input formulas: 46
% Initial clauses: 202
% 
% Duplicate literals: 302
% Trivial inequalities: 13
% Fw subsumption resolutions: 1595
% Fw demodulations: 184
% Bw demodulations: 4
% 
% Simple tautologies: 232
% Equational tautologies: 54
% Forward subsumptions: 6018
% 
% Binary resolution: 13064
% Factoring: 1182
% Forward superposition: 2117
% Backward superposition: 992
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 342
% Split components: 690
% SAT solver clauses: 693
% SAT solver unit clauses: 23
% SAT solver binary clauses: 198
% 
% Sat splits: 342
% 
% TWLsolver clauses: 693
% TWLsolver calls for satisfiability: 431
% 
% Memory used [KB]: 10874
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f4098,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4087,f264,f477,f478,f480,f376,f524,f607,f609,f271,f484,f283,f487,f608,f610,f272,f485,f615,f618,f263,f475,f287,f489,f3120,f3147,f3113,f3115,f378,f522])).
fof(f522,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) ) | $spl64),
  inference(cnf_transformation,[],[f522_D])).
fof(f522_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f378,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f223])).
fof(f223,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X4] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK28])],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X4] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(rectify,[],[f221])).
fof(f221,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(flattening,[],[f220])).
fof(f220,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))))) & ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(nnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(ennf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X6,X19,X20] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X19),s('type.num.num',X20)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X20),s('type.num.num',X6)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X20),s('type.num.num',X19)))) & ! [X21] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X21),s('type.num.num',X6)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X21),s('type.num.num',X19))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X21),s('type.num.num',X20)))))))),
  file('thm.gcd.IS_GCD_|48|R','thm.gcd.is_gcd_def')).
fof(f3115,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12)))) | $spl1419),
  inference(cnf_transformation,[],[f3115_D])).
fof(f3115_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12)))) <=> ~$spl1419),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1419])])).
fof(f3113,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12)))) | ($spl2 | $spl5 | $spl64 | $spl218 | $spl220 | $spl222)),
  inference(subsumption_resolution,[],[f3112,f477])).
fof(f3112,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12)))) | ($spl2 | $spl5 | $spl64 | $spl218 | $spl220 | $spl222)),
  inference(forward_demodulation,[],[f3111,f610])).
fof(f3111,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl2 | $spl5 | $spl64 | $spl218 | $spl222)),
  inference(subsumption_resolution,[],[f3110,f477])).
fof(f3110,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl64 | $spl218 | $spl222)),
  inference(forward_demodulation,[],[f3109,f609])).
fof(f3109,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl64 | $spl222)),
  inference(subsumption_resolution,[],[f3091,f480])).
fof(f3091,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl64 | $spl222)),
  inference(superposition,[],[f522,f618])).
fof(f3147,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12))) | $spl1426),
  inference(cnf_transformation,[],[f3147_D])).
fof(f3147_D,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12))) <=> ~$spl1426),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1426])])).
fof(f3120,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK28(sK12,'const.num.|48|_0',sK12)),s('type.num.num',sK12))) | ($spl16 | $spl1419)),
  inference(resolution,[],[f3115,f489])).
fof(f489,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f489_D])).
fof(f489_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f287,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X10] : (s(bool,'F_0') = s(bool,X10) <=> ~p(s(bool,X10)))),
  file('thm.gcd.IS_GCD_|48|R','thm.bool.EQ_CLAUSES|split|2')).
fof(f475,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12)))) | $spl1),
  inference(cnf_transformation,[],[f475_D])).
fof(f475_D,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f263,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))))),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f117])).
fof(f117,plain,(
  ? [X0] : ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f48])).
fof(f48,plain,(
  ~! [X0] : p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))))),
  file('thm.gcd.IS_GCD_|48|R','thm.gcd.IS_GCD_|48|R')).
fof(f618,plain,(
  s(bool,'F_0') = s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))) | $spl222),
  inference(cnf_transformation,[],[f618_D])).
fof(f618_D,plain,(
  s(bool,'F_0') = s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f615,plain,(
  s(bool,'F_0') = s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))) | ($spl1 | $spl16)),
  inference(resolution,[],[f489,f475])).
fof(f485,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) | $spl8),
  inference(cnf_transformation,[],[f485_D])).
fof(f485_D,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f272,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6] : p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X6))))),
  file('thm.gcd.IS_GCD_|48|R','thm.divides.DIVIDES_REFL')).
fof(f610,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | $spl220),
  inference(cnf_transformation,[],[f610_D])).
fof(f610_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f608,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl8 | $spl12)),
  inference(resolution,[],[f487,f485])).
fof(f487,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f487_D])).
fof(f487_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f283,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.gcd.IS_GCD_|48|R','thm.bool.EQ_CLAUSES|split|1')).
fof(f484,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | $spl6),
  inference(cnf_transformation,[],[f484_D])).
fof(f484_D,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f271,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))))),
  file('thm.gcd.IS_GCD_|48|R','thm.divides.ALL_DIVIDES_|48|')).
fof(f609,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl218),
  inference(cnf_transformation,[],[f609_D])).
fof(f609_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f607,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | ($spl6 | $spl12)),
  inference(resolution,[],[f487,f484])).
fof(f524,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X0)))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) ) | $spl68),
  inference(cnf_transformation,[],[f524_D])).
fof(f524_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X0)))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f376,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK28(X2,X1,X0)),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f223])).
fof(f480,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f480_D])).
fof(f480_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f478,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f267,f264])).
fof(f267,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f49])).
fof(f49,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f18])).
fof(f18,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.gcd.IS_GCD_|48|R','thm.bool.NOT_CLAUSES|split|1')).
fof(f477,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f477_D])).
fof(f477_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f264,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.gcd.IS_GCD_|48|R',aHL_TRUTH)).
fof(f4087,plain,(
  $false | ($spl2 | $spl5 | $spl68 | $spl218 | $spl220 | $spl222 | $spl1426)),
  inference(subsumption_resolution,[],[f4086,f477])).
fof(f4086,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl5 | $spl68 | $spl218 | $spl220 | $spl222 | $spl1426)),
  inference(forward_demodulation,[],[f4085,f610])).
fof(f4085,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl2 | $spl5 | $spl68 | $spl218 | $spl222 | $spl1426)),
  inference(subsumption_resolution,[],[f4084,f477])).
fof(f4084,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl68 | $spl218 | $spl222 | $spl1426)),
  inference(forward_demodulation,[],[f4083,f609])).
fof(f4083,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl68 | $spl222 | $spl1426)),
  inference(subsumption_resolution,[],[f4082,f480])).
fof(f4082,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl68 | $spl222 | $spl1426)),
  inference(forward_demodulation,[],[f4081,f618])).
fof(f4081,plain,(
  p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl5 | $spl68 | $spl1426)),
  inference(subsumption_resolution,[],[f4012,f480])).
fof(f4012,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK12)))) | ($spl68 | $spl1426)),
  inference(superposition,[],[f524,f3147])).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 256
% Passive clauses: 1032
% Generated clauses: 3868
% Final active clauses: 245
% Final passive clauses: 726
% Input formulas: 46
% Initial clauses: 202
% 
% Duplicate literals: 78
% Trivial inequalities: 9
% Fw subsumption resolutions: 277
% Fw demodulations: 77
% Bw demodulations: 57
% Condensations: 42
% Global subsumptions: 13
% 
% Simple tautologies: 186
% Equational tautologies: 5
% Forward subsumptions: 1038
% 
% Binary resolution: 1538
% Factoring: 58
% Forward superposition: 215
% Backward superposition: 255
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 1309
% SAT solver unit clauses: 188
% SAT solver binary clauses: 63
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splits: 5
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1256
% TWLsolver calls for satisfiability: 1794
% 
% Memory used [KB]: 4477
% Time elapsed: 0.143 s
% ------------------------------
% ------------------------------
% Success in time 0.755 s
