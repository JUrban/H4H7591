Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.gcd
% (67480)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 244
% Passive clauses: 2327
% Generated clauses: 25594
% Final active clauses: 218
% Final passive clauses: 1795
% Input formulas: 22
% Initial clauses: 43
% 
% Duplicate literals: 905
% Trivial inequalities: 510
% Fw subsumption resolutions: 3901
% Fw demodulations: 4731
% Bw demodulations: 21
% 
% Simple tautologies: 490
% Equational tautologies: 24
% Forward subsumptions: 10794
% 
% Binary resolution: 608
% Forward superposition: 8200
% Backward superposition: 6339
% Self superposition: 125
% Equality factoring: 56
% Equality resolution: 83
% 
% Split clauses: 651
% Split components: 1314
% SAT solver clauses: 1607
% SAT solver unit clauses: 20
% SAT solver binary clauses: 173
% 
% Sat splits: 651
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1606
% TWLsolver calls for satisfiability: 266
% 
% Memory used [KB]: 12409
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f2062,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2061,f264,f269,f74,f129,f95,f148,f1114,f1116,f691,f693,f75,f135,f89,f147,f156,f161,f72,f133,f82,f142,f1078,f1079,f97,f150,f155,f159,f73,f131,f2027,f2029,f165,f169,f78,f139,f81,f143,f311,f313,f179,f181,f77,f137,f224,f226,f80,f141,f696,f709,f96,f149,f762,f779,f86,f144,f98,f151])).
fof(f151,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) ) | $spl34),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f98,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) => s('type.num.num',X8) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num',X7))))),
  file('thm.gcd.BINARY_GCD|split|1','thm.arithmetic.MULT_DIV')).
fof(f144,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl20),
  inference(cnf_transformation,[],[f144_D])).
fof(f144_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f86,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X12] : (s(bool,'F_0') = s(bool,X12) <=> ~p(s(bool,X12)))),
  file('thm.gcd.BINARY_GCD|split|1','thm.bool.EQ_CLAUSES|split|3')).
fof(f779,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',X9))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) ) | $spl148),
  inference(cnf_transformation,[],[f779_D])).
fof(f779_D,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',X9))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f762,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',X9))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) ) | ($spl20 | $spl34)),
  inference(resolution,[],[f151,f144])).
fof(f149,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl30),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f96,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))),
  file('thm.gcd.BINARY_GCD|split|1','thm.arithmetic.MULT_SYM')).
fof(f709,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2(sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl124),
  inference(cnf_transformation,[],[f709_D])).
fof(f709_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2(sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f696,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2(sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl30 | $spl122)),
  inference(superposition,[],[f693,f149])).
fof(f141,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))) ) | $spl14),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f80,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : (~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X18] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X18)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))))),
  file('thm.gcd.BINARY_GCD|split|1','thm.divides.PRIME_POS')).
fof(f226,plain,(
  ( ! [X0] : (~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl54),
  inference(cnf_transformation,[],[f226_D])).
fof(f226_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f224,plain,(
  ( ! [X0] : (~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | ($spl14 | $spl16)),
  inference(resolution,[],[f141,f142])).
fof(f137,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl8),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f77,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(cnf_transformation,[],[f19])).
fof(f19,axiom,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  file('thm.gcd.BINARY_GCD|split|1','thm.divides.PRIME_2')).
fof(f181,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl48),
  inference(cnf_transformation,[],[f181_D])).
fof(f181_D,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f179,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl8 | $spl16)),
  inference(resolution,[],[f137,f142])).
fof(f313,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl86),
  inference(cnf_transformation,[],[f313_D])).
fof(f313_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f311,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl6 | $spl48 | $spl54)),
  inference(subsumption_resolution,[],[f304,f135])).
fof(f304,plain,(
  ~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl48 | $spl54)),
  inference(superposition,[],[f226,f181])).
fof(f143,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) ) | $spl18),
  inference(cnf_transformation,[],[f143_D])).
fof(f143_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f81,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.gcd.BINARY_GCD|split|1','thm.bool.EQ_CLAUSES|split|1')).
fof(f139,plain,(
  ~p(s(bool,'F_0')) | $spl11),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f78,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.gcd.BINARY_GCD|split|1',aHL_FALSITY)).
fof(f169,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl47),
  inference(cnf_transformation,[],[f169_D])).
fof(f169_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f165,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl11 | $spl18)),
  inference(resolution,[],[f143,f139])).
fof(f2029,plain,(
  s('type.num.num',sK2(sK0)) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl430),
  inference(cnf_transformation,[],[f2029_D])).
fof(f2029_D,plain,(
  s('type.num.num',sK2(sK0)) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl430),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl430])])).
fof(f2027,plain,(
  s('type.num.num',sK2(sK0)) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl47 | $spl86 | $spl124 | $spl148)),
  inference(subsumption_resolution,[],[f2026,f169])).
fof(f2026,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.num.num',sK2(sK0)) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl86 | $spl124 | $spl148)),
  inference(forward_demodulation,[],[f1962,f313])).
fof(f1962,plain,(
  s('type.num.num',sK2(sK0)) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl124 | $spl148)),
  inference(superposition,[],[f779,f709])).
fof(f131,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) | $spl2),
  inference(cnf_transformation,[],[f131_D])).
fof(f131_D,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f73,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1))))),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) & s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f48])).
fof(f48,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) & s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))) & s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1] : ((p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))) => s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ((p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X7))))) => s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ((p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X7))))) => s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X7))))),
  file('thm.gcd.BINARY_GCD|split|1','thm.gcd.BINARY_GCD|split|1')).
fof(f159,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1))) | $spl42),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f155,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1))) | ($spl2 | $spl16)),
  inference(resolution,[],[f142,f131])).
fof(f150,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) | s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) | $spl32),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) | s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f97,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) | s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) => s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X7)))) => s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))))))),
  file('thm.gcd.BINARY_GCD|split|1','thm.gcd.gcd_49_prove_ltb')).
fof(f1079,plain,(
  ( ! [X0] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) | $spl220),
  inference(cnf_transformation,[],[f1079_D])).
fof(f1079_D,plain,(
  ( ! [X0] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f1078,plain,(
  ( ! [X0] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) | ($spl6 | $spl32 | $spl42)),
  inference(subsumption_resolution,[],[f1050,f135])).
fof(f1050,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) | ($spl32 | $spl42)),
  inference(superposition,[],[f150,f159])).
fof(f142,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f142_D])).
fof(f142_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f82,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f58])).
fof(f133,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | $spl4),
  inference(cnf_transformation,[],[f133_D])).
fof(f133_D,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f72,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))))),
  inference(cnf_transformation,[],[f57])).
fof(f161,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl44),
  inference(cnf_transformation,[],[f161_D])).
fof(f161_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f156,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | ($spl4 | $spl16)),
  inference(resolution,[],[f142,f133])).
fof(f147,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(X0))))) ) | $spl26),
  inference(cnf_transformation,[],[f147_D])).
fof(f147_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(X0))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f89,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(X0)))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(X0))))) & (! [X1] : s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f63])).
fof(f63,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))) & (! [X1] : s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f62])).
fof(f62,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) & (! [X1] : s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) <=> ? [X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X7)))) <=> ? [X6] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))))),
  file('thm.gcd.BINARY_GCD|split|1','thm.arithmetic.EVEN_EXISTS')).
fof(f135,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f135_D])).
fof(f135_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f75,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.gcd.BINARY_GCD|split|1',aHL_TRUTH)).
fof(f693,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(sK0)))) | $spl122),
  inference(cnf_transformation,[],[f693_D])).
fof(f693_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(sK0)))) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f691,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(sK0)))) | ($spl6 | $spl26 | $spl44)),
  inference(subsumption_resolution,[],[f678,f135])).
fof(f678,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(sK0)))) | ($spl26 | $spl44)),
  inference(superposition,[],[f147,f161])).
fof(f1116,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',sK2(sK0)))) | $spl222),
  inference(cnf_transformation,[],[f1116_D])).
fof(f1116_D,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',sK2(sK0)))) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f1114,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',sK2(sK0)))) | ($spl28 | $spl122 | $spl220)),
  inference(forward_demodulation,[],[f1094,f148])).
fof(f1094,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',sK0))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',sK2(sK0)))) | ($spl122 | $spl220)),
  inference(superposition,[],[f1079,f693])).
fof(f148,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl28),
  inference(cnf_transformation,[],[f148_D])).
fof(f148_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f95,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X19,X20] : s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X19),s('type.num.num',X20))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X20),s('type.num.num',X19)))),
  file('thm.gcd.BINARY_GCD|split|1','thm.gcd.GCD_SYM')).
fof(f129,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f129_D])).
fof(f129_D,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f74,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f57])).
fof(f269,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl71),
  inference(cnf_transformation,[],[f269_D])).
fof(f269_D,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl71),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl71])])).
fof(f264,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl28)),
  inference(superposition,[],[f129,f148])).
fof(f2061,plain,(
  $false | ($spl71 | $spl222 | $spl430)),
  inference(subsumption_resolution,[],[f2059,f1116])).
fof(f2059,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK1),s('type.num.num',sK2(sK0)))) | ($spl71 | $spl430)),
  inference(backward_demodulation,[],[f2029,f269])).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 62
% Passive clauses: 227
% Generated clauses: 1931
% Final active clauses: 56
% Final passive clauses: 162
% Input formulas: 22
% Initial clauses: 43
% 
% Duplicate literals: 83
% Trivial inequalities: 25
% Fw subsumption resolutions: 78
% Fw demodulations: 246
% Bw demodulations: 9
% Condensations: 101
% 
% Simple tautologies: 50
% Equational tautologies: 17
% Forward subsumptions: 761
% 
% Binary resolution: 54
% Forward superposition: 552
% Backward superposition: 432
% Self superposition: 40
% Equality factoring: 28
% Equality resolution: 7
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 370
% SAT solver unit clauses: 43
% SAT solver binary clauses: 22
% SAT solver learnt clauses: 1
% 
% Sat splits: 8
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 369
% TWLsolver calls for satisfiability: 206
% 
% Memory used [KB]: 2686
% Time elapsed: 0.072 s
% ------------------------------
% ------------------------------
% Success in time 0.686 s
