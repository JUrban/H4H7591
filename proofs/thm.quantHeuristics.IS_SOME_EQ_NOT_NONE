Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f124,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f123,f44,f68,f66,f108,f45,f69,f67])).
fof(f67,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1)))) | $spl1),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f69,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | $spl2),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f45,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1))))),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1)))) | s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1)) & (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f33])).
fof(f33,plain,(
  ? [X0,X1] : ((p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) | s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X1)) & (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  ? [X0,X1] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) <~> s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X1))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) <=> s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X1))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) <=> ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X7)))) <=> ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X7)))) <=> ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X7))),
  file('thm.quantHeuristics.IS_SOME_EQ_NOT_NONE','thm.quantHeuristics.IS_SOME_EQ_NOT_NONE')).
fof(f108,plain,(
  $false | ($spl1 | $spl3)),
  inference(subsumption_resolution,[],[f105,f68])).
fof(f105,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | $spl1),
  inference(resolution,[],[f58,f67])).
fof(f58,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : ((p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) & (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X1) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1))))))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) <=> s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : ! [X1] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1)))) <=> s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X7] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X7)))) <=> s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X7))),
  file('thm.quantHeuristics.IS_SOME_EQ_NOT_NONE','thm.option.NOT_IS_SOME_EQ_NONE')).
fof(f66,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1)))) | $spl0),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f68,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1) | $spl3),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f44,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1) | p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1))))),
  inference(cnf_transformation,[],[f34])).
fof(f123,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f122,f113])).
fof(f113,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0')))) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f69,f66])).
fof(f122,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0')))) | $spl2),
  inference(forward_demodulation,[],[f121,f69])).
fof(f121,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1)))) | $spl2),
  inference(trivial_inequality_removal,[],[f119])).
fof(f119,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.NONE_0') | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK1)))) | $spl2),
  inference(superposition,[],[f59,f69])).
fof(f59,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X1) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1))))) )),
  inference(cnf_transformation,[],[f39])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 15
% Passive clauses: 30
% Generated clauses: 78
% Final active clauses: 9
% Final passive clauses: 9
% Input formulas: 13
% Initial clauses: 21
% 
% Duplicate literals: 1
% Trivial inequalities: 2
% Fw subsumption resolutions: 5
% Fw demodulations: 2
% Bw demodulations: 2
% 
% Simple tautologies: 8
% Equational tautologies: 3
% Forward subsumptions: 16
% 
% Binary resolution: 6
% Forward superposition: 15
% Backward superposition: 8
% Self superposition: 4
% Equality factoring: 2
% Equality resolution: 1
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 16
% SAT solver unit clauses: 5
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 7
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 14
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 639
% Time elapsed: 0.340 s
% ------------------------------
% ------------------------------
% Success in time 0.341 s
