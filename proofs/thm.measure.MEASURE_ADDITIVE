Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.measure
% (114928)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 162
% Passive clauses: 2145
% Generated clauses: 21996
% Final active clauses: 101
% Final passive clauses: 1803
% Input formulas: 17
% Initial clauses: 40
% 
% Duplicate literals: 1067
% Trivial inequalities: 510
% Fw subsumption resolutions: 3960
% Fw demodulations: 2462
% Bw demodulations: 56
% 
% Simple tautologies: 537
% Equational tautologies: 57
% Forward subsumptions: 9124
% 
% Binary resolution: 521
% Forward superposition: 6287
% Backward superposition: 6431
% Self superposition: 188
% Equality factoring: 159
% Equality resolution: 40
% 
% Split clauses: 1428
% Split components: 2992
% SAT solver clauses: 2287
% SAT solver unit clauses: 52
% SAT solver binary clauses: 299
% 
% Sat splits: 1428
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 2281
% TWLsolver calls for satisfiability: 212
% 
% Memory used [KB]: 9083
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.measure
% (114949)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 72
% Passive clauses: 251
% Generated clauses: 8809
% Final active clauses: 65
% Final passive clauses: 175
% Input formulas: 17
% Initial clauses: 40
% 
% Duplicate literals: 1145
% Trivial inequalities: 88
% Fw subsumption resolutions: 947
% Fw demodulations: 263
% Bw demodulations: 10
% Condensations: 1800
% 
% Simple tautologies: 207
% Equational tautologies: 57
% Forward subsumptions: 3185
% 
% Binary resolution: 57
% Factoring: 1
% Forward superposition: 1584
% Backward superposition: 2452
% Self superposition: 162
% Equality factoring: 158
% Equality resolution: 17
% 
% Split clauses: 187
% Split components: 389
% SAT solver clauses: 829
% SAT solver unit clauses: 40
% SAT solver binary clauses: 63
% 
% Sat splits: 187
% 
% TWLsolver clauses: 829
% TWLsolver calls for satisfiability: 245
% 
% Memory used [KB]: 5884
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.measure
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.measure
% SZS output start Proof for thm.measure
fof(f16548,plain,(
  $false),
  inference(subsumption_resolution,[],[f16547,f70])).
fof(f70,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.measure.MEASURE_ADDITIVE','thm.bool.TRUTH')).
fof(f16547,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f16546,f2693])).
fof(f2693,plain,(
  s(bool,'T_0') = s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))),
  inference(subsumption_resolution,[],[f2684,f70])).
fof(f2684,plain,(
  ~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))),
  inference(superposition,[],[f255,f120])).
fof(f120,plain,(
  s(bool,'T_0') = s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))),
  inference(unit_resulting_resolution,[],[f64,f75])).
fof(f75,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.measure.MEASURE_ADDITIVE','thm.bool.EQ_CLAUSES|split|1')).
fof(f64,plain,(
  p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))) & p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))) & s(fun(sK0,bool),sK4) = s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f43])).
fof(f43,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) & s(fun(X6,bool),X10) = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X10))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) & s(fun(X6,bool),X10) = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X10))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9))))))),
  file('thm.measure.MEASURE_ADDITIVE','thm.measure.MEASURE_ADDITIVE')).
fof(f255,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | s(bool,'T_0') = s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) )),
  inference(subsumption_resolution,[],[f254,f72])).
fof(f72,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.measure.MEASURE_ADDITIVE',aHL_FALSITY)).
fof(f254,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | s(bool,'T_0') = s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) )),
  inference(superposition,[],[f82,f73])).
fof(f73,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.measure.MEASURE_ADDITIVE',aHL_BOOL_CASES)).
fof(f82,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1] : (~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) => p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) => p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) => p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))),
  file('thm.measure.MEASURE_ADDITIVE','thm.measure.MEASURE_SPACE_ADDITIVE')).
fof(f16546,plain,(
  ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(subsumption_resolution,[],[f16545,f70])).
fof(f16545,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(forward_demodulation,[],[f16544,f183])).
fof(f183,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))),
  inference(unit_resulting_resolution,[],[f65,f75])).
fof(f65,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))))),
  inference(cnf_transformation,[],[f52])).
fof(f16544,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(subsumption_resolution,[],[f16543,f69])).
fof(f69,plain,(
  s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK3)))))),
  inference(cnf_transformation,[],[f52])).
fof(f16543,plain,(
  s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(subsumption_resolution,[],[f16519,f70])).
fof(f16519,plain,(
  ~p(s(bool,'T_0')) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(superposition,[],[f2933,f190])).
fof(f190,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))),
  inference(unit_resulting_resolution,[],[f66,f75])).
fof(f66,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))))),
  inference(cnf_transformation,[],[f52])).
fof(f2933,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0)))))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),sK4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0))))) )),
  inference(forward_demodulation,[],[f2932,f68])).
fof(f68,plain,(
  s(fun(sK0,bool),sK4) = s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))),
  inference(cnf_transformation,[],[f52])).
fof(f2932,plain,(
  ( ! [X0] : (s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0))))) )),
  inference(trivial_inequality_removal,[],[f2930])).
fof(f2930,plain,(
  ( ! [X0] : (s(fun(sK0,bool),sK4) != s(fun(sK0,bool),sK4) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X0))))) )),
  inference(superposition,[],[f636,f68])).
fof(f636,plain,(
  ( ! [X0,X1] : (s(fun(sK0,bool),sK4) != s(fun(sK0,bool),X0) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),X0))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1))))) )),
  inference(subsumption_resolution,[],[f635,f70])).
fof(f635,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s(fun(sK0,bool),sK4) != s(fun(sK0,bool),X0) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),X0))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1))))) )),
  inference(forward_demodulation,[],[f626,f119])).
fof(f119,plain,(
  s(bool,'T_0') = s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))),
  inference(unit_resulting_resolution,[],[f67,f75])).
fof(f67,plain,(
  p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))),
  inference(cnf_transformation,[],[f52])).
fof(f626,plain,(
  ( ! [X0,X1] : (s(fun(sK0,bool),sK4) != s(fun(sK0,bool),X0) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),X0))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),X1))))) )),
  inference(superposition,[],[f88,f68])).
fof(f88,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,bool),X4) != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) | s(fun(X0,bool),X4) != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) | s(fun(X0,bool),X4) != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : ((p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X7,X8,X9,X10] : ((p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) & s(fun(X6,bool),X10) = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X10))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9))))))),
  file('thm.measure.MEASURE_ADDITIVE','thm.measure.ADDITIVE')).
% SZS output end Proof for thm.measure
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 131
% Passive clauses: 670
% Generated clauses: 16449
% Final active clauses: 71
% Final passive clauses: 174
% Input formulas: 17
% Initial clauses: 40
% 
% Duplicate literals: 1608
% Trivial inequalities: 199
% Fw subsumption resolutions: 1484
% Fw demodulations: 1265
% Bw demodulations: 378
% Condensations: 2823
% Global subsumptions: 52
% 
% Simple tautologies: 314
% Equational tautologies: 153
% Forward subsumptions: 7740
% Bw demodulations to eq. taut.: 9
% 
% Unit resulting resolution: 402
% Forward superposition: 4088
% Backward superposition: 3423
% Self superposition: 222
% Equality factoring: 166
% Equality resolution: 31
% 
% Split clauses: 161
% Split components: 327
% SAT solver clauses: 1076
% SAT solver unit clauses: 25
% SAT solver binary clauses: 59
% 
% Sat splits: 161
% Sat splitting refutations: 30
% 
% Memory used [KB]: 8315
% Time elapsed: 0.904 s
% ------------------------------
% ------------------------------
% Success in time 2.207 s
