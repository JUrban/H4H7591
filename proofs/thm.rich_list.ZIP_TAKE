Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f22191,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f22153,f182,f189])).
fof(f189,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f189_D])).
fof(f189_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f182,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f159])).
fof(f159,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X13] : (s(X6,X13) = s(X6,X13) <=> p(s(bool,'T_0')))),
  file('thm.rich_list.ZIP_TAKE','thm.bool.REFL_CLAUSE')).
fof(f22153,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f22152,f114])).
fof(f114,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),sK4))))))) != s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK1),sK4)))))))),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4))) & s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),sK4))))))) != s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK1),sK4)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))) != s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))) & s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))) != s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ~! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))) => s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))) = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))) => s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))) = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10)))) => s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X9),s('type.list.list'(X7),X10))))))) = s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X9))),s('type.list.list'(X7),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X7),X10))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10)))) => s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X9),s('type.list.list'(X7),X10))))))) = s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X9))),s('type.list.list'(X7),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X7),X10))))))))),
  file('thm.rich_list.ZIP_TAKE','thm.rich_list.ZIP_TAKE')).
fof(f22152,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),sK4))))))) = s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK1),sK4))))))) | $spl6),
  inference(forward_demodulation,[],[f22151,f270])).
fof(f270,plain,(
  s('type.list.list'(sK1),sK4) = s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4)))),
  inference(superposition,[],[f158,f113])).
fof(f113,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4)))),
  inference(cnf_transformation,[],[f78])).
fof(f158,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X20] : s('type.list.list'(X6),X20) = s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))),s('type.list.list'(X6),X20)))),
  file('thm.rich_list.ZIP_TAKE','thm.list.TAKE_LENGTH_ID')).
fof(f22151,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK1),sK4))))))) = s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))) | $spl6),
  inference(forward_demodulation,[],[f22150,f270])).
fof(f22150,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))) = s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))))) | $spl6),
  inference(subsumption_resolution,[],[f22149,f189])).
fof(f22149,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))) = s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))))) | $spl6),
  inference(forward_demodulation,[],[f22148,f195])).
fof(f195,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(resolution,[],[f121,f118])).
fof(f118,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X11] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X11))))),
  file('thm.rich_list.ZIP_TAKE','thm.arithmetic.LESS_EQ_REFL')).
fof(f121,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.rich_list.ZIP_TAKE','thm.bool.EQ_CLAUSES|split|0')).
fof(f22148,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))) = s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))))) | $spl6),
  inference(forward_demodulation,[],[f22115,f113])).
fof(f22115,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4)))))) | s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))) = s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(sK1),sK4))))))))))) | $spl6),
  inference(superposition,[],[f666,f270])).
fof(f666,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))))) | s('type.list.list'('type.pair.prod'(sK0,X4)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(X4)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(X4),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(X4),X5))))))) = s('type.list.list'('type.pair.prod'(sK0,X4)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,X4)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(X4)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(X4),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(X4),X5)))))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f648,f189])).
fof(f648,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))))) | s('type.list.list'('type.pair.prod'(sK0,X4)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(X4)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3))),s('type.list.list'(X4),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(X4),X5))))))) = s('type.list.list'('type.pair.prod'(sK0,X4)),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,X4)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(X4)),'const.pair.,_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(X4),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.list.list'(X4),X5)))))))))) )),
  inference(superposition,[],[f166,f205])).
fof(f205,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))),
  inference(resolution,[],[f112,f121])).
fof(f112,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))),
  inference(cnf_transformation,[],[f78])).
fof(f166,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))))) | s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))) = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.list.list'(X1),X4)))))))))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))))) | s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))) = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.list.list'(X1),X4))))))))))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))))) | s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))) = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.list.list'(X1),X4))))))))))),
  inference(ennf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))))) => s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))) = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.list.list'(X1),X4))))))))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))))) => s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X1),X4))))))) = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.list.list'(X1),X4))))))))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6,X7] : ! [X8,X9,X10] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10))))))) => s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X9))),s('type.list.list'(X7),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X7),X10))))))) = s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X9),s('type.list.list'(X7),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))),s('type.list.list'(X7),X10))))))))))),
  file('thm.rich_list.ZIP_TAKE','thm.rich_list.ZIP_TAKE_LEQ')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 144
% Passive clauses: 1935
% Generated clauses: 21508
% Final active clauses: 95
% Final passive clauses: 1645
% Input formulas: 28
% Initial clauses: 69
% 
% Duplicate literals: 1084
% Trivial inequalities: 394
% Fw subsumption resolutions: 3507
% Fw demodulations: 2355
% Bw demodulations: 46
% 
% Simple tautologies: 568
% Equational tautologies: 59
% Forward subsumptions: 9756
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 384
% Forward superposition: 6221
% Backward superposition: 6842
% Self superposition: 205
% Equality factoring: 165
% Equality resolution: 35
% 
% Split clauses: 1235
% Split components: 2583
% SAT solver clauses: 2000
% SAT solver unit clauses: 33
% SAT solver binary clauses: 164
% SAT solver learnt clauses: 1
% 
% Sat splits: 1235
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1981
% TWLsolver calls for satisfiability: 194
% 
% Memory used [KB]: 9850
% Time elapsed: 0.539 s
% ------------------------------
% ------------------------------
% Success in time 0.542 s
