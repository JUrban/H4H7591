Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f8195,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f8194,f8119,f262,f462,f460,f323,f463,f465,f269,f466,f261,f461,f459])).
fof(f459,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0')))) | $spl0),
  inference(cnf_transformation,[],[f459_D])).
fof(f459_D,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0')))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f461,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) | $spl2),
  inference(cnf_transformation,[],[f461_D])).
fof(f461_D,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f261,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) | p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f171])).
fof(f171,plain,(
  (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0')))) | s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11)) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0')))) | s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),sK11))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11])],[f170])).
fof(f170,plain,(
  ? [X0,X1] : ((p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)))),
  inference(nnf_transformation,[],[f131])).
fof(f131,plain,(
  ? [X0,X1] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) <~> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(ennf_transformation,[],[f56])).
fof(f56,plain,(
  ~! [X0,X1] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),'const.list.NIL_0')))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),'const.list.NIL_0')))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.rich_list.IS_PREFIX_NIL|split|1','thm.rich_list.IS_PREFIX_NIL|split|1')).
fof(f466,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f466_D])).
fof(f466_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f269,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.IS_PREFIX_NIL|split|1',aHL_FALSITY)).
fof(f465,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(cnf_transformation,[],[f465_D])).
fof(f465_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f463,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f463_D])).
fof(f463_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f323,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f200])).
fof(f200,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X8] : ((p(s(bool,'F_0')) => p(s(bool,X8))) <=> p(s(bool,'T_0')))),
  file('thm.rich_list.IS_PREFIX_NIL|split|1','thm.bool.IMP_CLAUSES|split|2')).
fof(f460,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0')))) | $spl1),
  inference(cnf_transformation,[],[f460_D])).
fof(f460_D,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0')))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f462,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),sK11) | $spl3),
  inference(cnf_transformation,[],[f462_D])).
fof(f462_D,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),sK11) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f262,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),sK11) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f171])).
fof(f8119,plain,(
  $false | ($spl0 | $spl3 | $spl4)),
  inference(subsumption_resolution,[],[f8118,f462])).
fof(f8118,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) | ($spl0 | $spl4)),
  inference(subsumption_resolution,[],[f7993,f476])).
fof(f476,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl4),
  inference(resolution,[],[f286,f463])).
fof(f286,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f176])).
fof(f176,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X8] : (s(bool,'F_0') = s(bool,X8) <=> ~p(s(bool,X8)))),
  file('thm.rich_list.IS_PREFIX_NIL|split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f7993,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) | $spl0),
  inference(superposition,[],[f4038,f774])).
fof(f774,plain,(
  s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),sK11),s('type.list.list'(sK10),'const.list.NIL_0'))) | $spl0),
  inference(resolution,[],[f459,f283])).
fof(f283,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X8] : (s(bool,'T_0') = s(bool,X8) <=> p(s(bool,X8)))),
  file('thm.rich_list.IS_PREFIX_NIL|split|1','thm.bool.EQ_CLAUSES|split|0')).
fof(f4038,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f343,f340])).
fof(f340,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,X0)),s('type.list.list'(X0),sK13(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f210])).
fof(f210,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,X0)),s('type.list.list'(X0),sK13(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f101])).
fof(f101,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6] : ! [X13] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X13) | ? [X14,X8] : s('type.list.list'(X6),X13) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X8))))),
  file('thm.rich_list.IS_PREFIX_NIL|split|1','thm.list.list_CASES')).
fof(f343,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6] : ! [X7,X13] : s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),X13))),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.rich_list.IS_PREFIX_NIL|split|1','thm.rich_list.IS_PREFIX|split|1')).
fof(f8194,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f8193,f463])).
fof(f8193,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f8192,f339])).
fof(f339,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f98])).
fof(f98,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X6] : ! [X13] : s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X13)))),
  file('thm.rich_list.IS_PREFIX_NIL|split|1','thm.list.isPREFIX|split|0')).
fof(f8192,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK10),'const.list.NIL_0'),s('type.list.list'(sK10),'const.list.NIL_0')))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f460,f461])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 450
% Passive clauses: 2394
% Generated clauses: 7938
% Final active clauses: 390
% Final passive clauses: 1614
% Input formulas: 53
% Initial clauses: 192
% 
% Duplicate literals: 215
% Trivial inequalities: 116
% Fw subsumption resolutions: 884
% Fw demodulations: 91
% Bw demodulations: 43
% 
% Simple tautologies: 186
% Equational tautologies: 52
% Forward subsumptions: 3887
% 
% Binary resolution: 3369
% Factoring: 815
% Forward superposition: 732
% Backward superposition: 1287
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 33
% 
% Split clauses: 188
% Split components: 377
% SAT solver clauses: 350
% SAT solver unit clauses: 9
% SAT solver binary clauses: 95
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 188
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 346
% TWLsolver calls for satisfiability: 216
% 
% Memory used [KB]: 3709
% Time elapsed: 0.192 s
% ------------------------------
% ------------------------------
% Success in time 0.195 s
