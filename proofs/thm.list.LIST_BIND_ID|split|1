Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f1058,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f1055])).
fof(f1055,plain,(
  s('type.list.list'(sK0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK0)),sK1))) != s('type.list.list'(sK0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK0)),sK1)))),
  inference(superposition,[],[f53,f1033])).
fof(f1033,plain,(
  ( ! [X2,X3] : (s('type.list.list'(X2),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X2)),X3))) = s('type.list.list'(X2),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(X2)),X3),s(fun('type.list.list'(X2),'type.list.list'(X2)),'const.combin.I_0')))) )),
  inference(superposition,[],[f78,f75])).
fof(f75,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X0,X0),'const.combin.I_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X0,X0),'const.combin.I_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X0,X0),'const.combin.I_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X6,X6),'const.combin.I_0'),s('type.list.list'(X6),X7)))),
  file('thm.list.LIST_BIND_ID|split|1','thm.list.MAP_ID|split|1')).
fof(f78,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X10] : ! [X7,X11] : s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'(X10),X7),s(fun(X10,'type.list.list'(X6)),X11))) = s('type.list.list'(X6),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X6)),'const.list.MAP_2'(s(fun(X10,'type.list.list'(X6)),X11),s('type.list.list'(X10),X7)))))),
  file('thm.list.LIST_BIND_ID|split|1','thm.list.LIST_BIND_def')).
fof(f53,plain,(
  s('type.list.list'(sK0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK0)),sK1))) != s('type.list.list'(sK0),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(sK0)),sK1),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.combin.I_0')))),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  s('type.list.list'(sK0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK0)),sK1))) != s('type.list.list'(sK0),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(sK0)),sK1),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.combin.I_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f38])).
fof(f38,plain,(
  ? [X0,X1] : s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),X1))) != s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(X0)),X1),s(fun('type.list.list'(X0),'type.list.list'(X0)),'const.combin.I_0')))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1] : s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),X1))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(X0)),X1),s(fun('type.list.list'(X0),'type.list.list'(X0)),'const.combin.I_0')))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0] : ! [X1] : s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),X1))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(X0)),X1),s(fun('type.list.list'(X0),'type.list.list'(X0)),'const.combin.I_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : s('type.list.list'(X6),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X6)),X7))) = s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(X6)),X7),s(fun('type.list.list'(X6),'type.list.list'(X6)),'const.combin.I_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X6)),X7))) = s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(X6)),X7),s(fun('type.list.list'(X6),'type.list.list'(X6)),'const.combin.I_0')))),
  file('thm.list.LIST_BIND_ID|split|1','thm.list.LIST_BIND_ID|split|1')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 25
% Passive clauses: 85
% Generated clauses: 940
% Final active clauses: 24
% Final passive clauses: 46
% Input formulas: 16
% Initial clauses: 27
% 
% Duplicate literals: 155
% Trivial inequalities: 26
% Fw subsumption resolutions: 31
% Fw demodulations: 34
% 
% Simple tautologies: 58
% Equational tautologies: 19
% Forward subsumptions: 488
% 
% Binary resolution: 3
% Forward superposition: 324
% Backward superposition: 228
% Self superposition: 61
% Equality factoring: 44
% Equality resolution: 2
% 
% Split clauses: 28
% Split components: 56
% SAT solver clauses: 52
% SAT solver unit clauses: 10
% SAT solver binary clauses: 28
% 
% Sat splits: 28
% 
% TWLsolver clauses: 52
% TWLsolver calls for satisfiability: 15
% 
% Memory used [KB]: 1023
% Time elapsed: 0.030 s
% ------------------------------
% ------------------------------
% Success in time 0.031 s
