Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.Omega
% (26008)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 163
% Passive clauses: 2565
% Generated clauses: 18676
% Final active clauses: 150
% Final passive clauses: 2185
% Input formulas: 37
% Initial clauses: 52
% 
% Duplicate literals: 690
% Trivial inequalities: 202
% Fw subsumption resolutions: 1463
% Fw demodulations: 2224
% Bw demodulations: 11
% 
% Simple tautologies: 301
% Equational tautologies: 24
% Forward subsumptions: 10621
% Fw demodulations to eq. taut.: 62
% 
% Binary resolution: 185
% Forward superposition: 7937
% Backward superposition: 5464
% Self superposition: 217
% Equality factoring: 54
% Equality resolution: 28
% 
% Split clauses: 417
% Split components: 845
% SAT solver clauses: 718
% SAT solver unit clauses: 26
% SAT solver binary clauses: 128
% 
% Sat splits: 417
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 717
% TWLsolver calls for satisfiability: 124
% 
% Memory used [KB]: 19317
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.Omega
% (26060)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 115
% Passive clauses: 786
% Generated clauses: 13547
% Final active clauses: 106
% Final passive clauses: 626
% Input formulas: 37
% Initial clauses: 52
% 
% Duplicate literals: 218
% Trivial inequalities: 171
% Fw subsumption resolutions: 478
% Fw demodulations: 3357
% Bw demodulations: 48
% Condensations: 558
% Global subsumptions: 6
% 
% Simple tautologies: 122
% Equational tautologies: 18
% Forward subsumptions: 6183
% Fw demodulations to eq. taut.: 18
% 
% Binary resolution: 29
% Forward superposition: 4444
% Backward superposition: 3177
% Self superposition: 155
% Equality factoring: 32
% Equality resolution: 17
% 
% Split clauses: 62
% Split components: 124
% SAT solver clauses: 1305
% SAT solver unit clauses: 88
% SAT solver binary clauses: 37
% SAT solver learnt clauses: 12
% SAT solver learnt literals: 2
% 
% Sat splits: 62
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1281
% TWLsolver calls for satisfiability: 269
% 
% Memory used [KB]: 21875
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.Omega
% (26124)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 529
% Passive clauses: 15703
% Generated clauses: 136295
% Final active clauses: 104
% Final passive clauses: 1071
% Input formulas: 37
% Initial clauses: 52
% Discarded non-redundant clauses: 3274
% 
% Duplicate literals: 2757
% Trivial inequalities: 875
% Fw subsumption resolutions: 5543
% Fw demodulations: 26086
% Bw demodulations: 10503
% Condensations: 6833
% Global subsumptions: 319
% 
% Simple tautologies: 764
% Equational tautologies: 518
% Forward subsumptions: 76134
% Fw demodulations to eq. taut.: 41
% Bw demodulations to eq. taut.: 805
% 
% Unit resulting resolution: 6492
% Forward superposition: 37019
% Backward superposition: 26946
% Self superposition: 565
% Equality factoring: 105
% Equality resolution: 72
% 
% Split clauses: 167
% Split components: 339
% SAT solver clauses: 16689
% SAT solver unit clauses: 621
% SAT solver binary clauses: 4115
% 
% Sat splits: 167
% Sat splitting refutations: 331
% 
% Memory used [KB]: 97994
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f654,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f143,f144,f180,f202,f203,f280,f172,f281,f175,f352,f353,f173,f371,f493,f200,f199,f652])).
fof(f652,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f640,f120])).
fof(f120,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.Omega.dark_shadow_cond_row_ind',aHL_FALSITY)).
fof(f640,plain,(
  p(s(bool,'F_0')) | $spl10),
  inference(superposition,[],[f611,f185])).
fof(f185,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))),
  inference(resolution,[],[f102,f115])).
fof(f115,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.Omega.dark_shadow_cond_row_ind','thm.bool.EQ_CLAUSES|split|3')).
fof(f102,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X4,X5,X6,X7,X8] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f81])).
fof(f81,plain,(
  ? [X0] : (! [X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X4,X5,X6,X7,X8] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))))) & ? [X1,X2,X3] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))),
  inference(rectify,[],[f76])).
fof(f76,plain,(
  ? [X0] : (! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X1,X2,X3,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5))))))) & ? [X8,X9,X10] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ? [X0] : ((! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X1,X2,X3,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))))))) & ? [X8,X9,X10] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))))))) => ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X7),s('type.integer.int',X8))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X7,X8,X9,X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X7),s('type.integer.int',X8))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X7),s('type.integer.int',X8))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11)))))))) => ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X13))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X14)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X7),s('type.integer.int',X8))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X7,X8,X9,X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X7),s('type.integer.int',X8))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X7),s('type.integer.int',X8))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11)))))))) => ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X13))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X14)))))),
  file('thm.Omega.dark_shadow_cond_row_ind','thm.Omega.dark_shadow_cond_row_ind')).
fof(f611,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6))))) ) | $spl10),
  inference(subsumption_resolution,[],[f610,f125])).
fof(f125,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.Omega.dark_shadow_cond_row_ind',aHL_TRUTH)).
fof(f610,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6))))) ) | $spl10),
  inference(forward_demodulation,[],[f583,f204])).
fof(f204,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),X6))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) )),
  inference(resolution,[],[f162,f119])).
fof(f119,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.Omega.dark_shadow_cond_row_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f162,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f100,f132])).
fof(f132,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK12(X2,X1,X0)),s(X1,sK13(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK12(X2,X1,X0)),s(X1,sK13(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X22,X23] : ! [X24] : ? [X26,X27] : s('type.pair.prod'(X22,X23),X24) = s('type.pair.prod'(X22,X23),'const.pair.,_2'(s(X22,X26),s(X23,X27)))),
  file('thm.Omega.dark_shadow_cond_row_ind','thm.pair.ABS_PAIR_THM')).
fof(f100,plain,(
  ( ! [X10,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f82])).
fof(f583,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK4(sK0)),s('type.integer.int',sK5(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) ) | $spl10),
  inference(resolution,[],[f353,f104])).
fof(f104,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(X0)),s('type.integer.int',sK7(X0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK8(X0)),s('type.integer.int',sK9(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK4(X0)),s('type.integer.int',sK5(X0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK4(X0)),s('type.integer.int',sK5(X0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(X0)),s('type.integer.int',sK7(X0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(X0)),s('type.integer.int',sK7(X0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK8(X0)),s('type.integer.int',sK9(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(X0)))))))) | ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6,sK7,sK8,sK9,sK10])],[f83])).
fof(f83,plain,(
  ! [X0] : (? [X9,X10] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ? [X4,X5,X6,X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))))) | ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))),
  inference(rectify,[],[f78])).
fof(f78,plain,(
  ! [X0] : (? [X6,X7] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ? [X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5))))))) | ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0] : ((? [X6,X7] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ? [X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))))))) | ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0] : ((! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))))))) => ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ((! [X15,X16] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X15),s('type.integer.int',X16))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X15,X16,X17,X18,X19] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X15),s('type.integer.int',X16))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X19)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X15),s('type.integer.int',X16))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X17),s('type.integer.int',X18))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X19)))))))) => ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X13))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X14)))))),
  file('thm.Omega.dark_shadow_cond_row_ind','thm.Omega.rshadow_row_ind')).
fof(f199,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK11(happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2)))),X1,'type.list.list'('type.pair.prod'('type.num.num','type.integer.int'))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X1))))) ) | $spl6),
  inference(cnf_transformation,[],[f199_D])).
fof(f199_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK11(happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2)))),X1,'type.list.list'('type.pair.prod'('type.num.num','type.integer.int'))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X1))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f200,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) | $spl8),
  inference(cnf_transformation,[],[f200_D])).
fof(f200_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f493,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK11(happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2)))),X3,'type.list.list'('type.pair.prod'('type.num.num','type.integer.int'))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X3))))) )),
  inference(subsumption_resolution,[],[f448,f120])).
fof(f448,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK11(happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2)))),X3,'type.list.list'('type.pair.prod'('type.num.num','type.integer.int'))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X3))))) )),
  inference(superposition,[],[f129,f185])).
fof(f129,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK11(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : ((! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK11(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK11(X2,X1,X0)))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11])],[f96])).
fof(f96,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X4] : (! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f80])).
fof(f80,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X3] : (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(ennf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X22] : ! [X10] : (p(s(bool,'const.relation.WF_1'(s(fun(X22,fun(X22,bool)),X10)))) => ! [X6] : (! [X24] : (! [X25] : (p(s(bool,happ(s(fun(X22,bool),happ(s(fun(X22,fun(X22,bool)),X10),s(X22,X25))),s(X22,X24)))) => p(s(bool,happ(s(fun(X22,bool),X6),s(X22,X25))))) => p(s(bool,happ(s(fun(X22,bool),X6),s(X22,X24))))) => ! [X24] : p(s(bool,happ(s(fun(X22,bool),X6),s(X22,X24))))))),
  file('thm.Omega.dark_shadow_cond_row_ind','thm.relation.WF_INDUCTION_THM')).
fof(f371,plain,(
  $false | $spl2),
  inference(resolution,[],[f173,f102])).
fof(f173,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))) ) | $spl2),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f353,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X10),s('type.integer.int',X11))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))))) ) | $spl10),
  inference(cnf_transformation,[],[f353_D])).
fof(f353_D,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X10),s('type.integer.int',X11))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f352,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X10),s('type.integer.int',X11))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X13))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X14))))) )),
  inference(subsumption_resolution,[],[f351,f125])).
fof(f351,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X10),s('type.integer.int',X11))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X13))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X14))))) )),
  inference(forward_demodulation,[],[f316,f204])).
fof(f316,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X10),s('type.integer.int',X11))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X13))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X14)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK4(sK0)),s('type.integer.int',sK5(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f101,f103])).
fof(f103,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X1),s('type.integer.int',X2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(X0)),s('type.integer.int',sK7(X0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK4(X0)),s('type.integer.int',sK5(X0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f84])).
fof(f101,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))))) )),
  inference(cnf_transformation,[],[f82])).
fof(f175,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK8(sK0)),s('type.integer.int',sK9(sK0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0))))))) | $spl5),
  inference(cnf_transformation,[],[f175_D])).
fof(f175_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK8(sK0)),s('type.integer.int',sK9(sK0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0))))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f281,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK8(sK0)),s('type.integer.int',sK9(sK0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))))) )),
  inference(subsumption_resolution,[],[f235,f125])).
fof(f235,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK8(sK0)),s('type.integer.int',sK9(sK0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))))) )),
  inference(superposition,[],[f104,f204])).
fof(f172,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0))))) | $spl0),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f280,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))) )),
  inference(subsumption_resolution,[],[f234,f125])).
fof(f234,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))) )),
  inference(superposition,[],[f103,f204])).
fof(f203,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK8(sK0)),s('type.integer.int',sK9(sK0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))))) )),
  inference(resolution,[],[f162,f104])).
fof(f202,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))) )),
  inference(resolution,[],[f162,f103])).
fof(f180,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK11(happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK1),s('type.integer.int',sK2)))),X1,'type.list.list'('type.pair.prod'('type.num.num','type.integer.int'))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X1))))) )),
  inference(resolution,[],[f102,f129])).
fof(f144,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK8(sK0)),s('type.integer.int',sK9(sK0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))))) )),
  inference(resolution,[],[f100,f104])).
fof(f143,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.pair.prod'('type.num.num','type.integer.int'),fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),sK0),s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(sK0)),s('type.integer.int',sK7(sK0)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK10(sK0)))))) )),
  inference(resolution,[],[f100,f103])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 47
% Passive clauses: 80
% Generated clauses: 510
% Final active clauses: 42
% Final passive clauses: 47
% Input formulas: 37
% Initial clauses: 43
% 
% Selected by SInE selection: 28
% SInE iterations: 1
% 
% Duplicate literals: 2
% Trivial inequalities: 12
% Fw subsumption resolutions: 52
% Fw demodulations: 58
% Bw demodulations: 4
% 
% Simple tautologies: 15
% Forward subsumptions: 298
% 
% Binary resolution: 69
% Forward superposition: 184
% Backward superposition: 121
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 12
% SAT solver unit clauses: 2
% SAT solver binary clauses: 9
% 
% Sat splits: 9
% Sat splitting refutations: 2
% 
% Memory used [KB]: 1791
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 11.771 s
