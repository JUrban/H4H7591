Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f1741,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1740,f1672,f266,f431,f429,f265,f430,f428])).
fof(f428,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl0),
  inference(cnf_transformation,[],[f428_D])).
fof(f428_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f430,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl2),
  inference(cnf_transformation,[],[f430_D])).
fof(f430_D,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f265,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))),
  inference(cnf_transformation,[],[f209])).
fof(f209,plain,(
  (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num',sK0) = s('type.num.num',sK1)) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num',sK0) != s('type.num.num',sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f208])).
fof(f208,plain,(
  ? [X0,X1] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s('type.num.num',X0) != s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f199])).
fof(f199,plain,(
  ? [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) <~> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f100])).
fof(f100,plain,(
  ~! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.integer.INT_EQ_REDUCE|split|9','thm.integer.INT_EQ_REDUCE|split|9')).
fof(f429,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl1),
  inference(cnf_transformation,[],[f429_D])).
fof(f429_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f431,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | $spl3),
  inference(cnf_transformation,[],[f431_D])).
fof(f431_D,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f266,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))),
  inference(cnf_transformation,[],[f209])).
fof(f1672,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f1661,f431])).
fof(f1661,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl0),
  inference(equality_resolution,[],[f1558])).
fof(f1558,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) | s('type.num.num',sK1) = s('type.num.num',X0)) ) | $spl0),
  inference(superposition,[],[f389,f981])).
fof(f981,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1))) | $spl0),
  inference(forward_demodulation,[],[f980,f280])).
fof(f280,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))),
  file('thm.integer.INT_EQ_REDUCE|split|9','thm.arithmetic.NUMERAL_DEF')).
fof(f980,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) | $spl0),
  inference(forward_demodulation,[],[f428,f280])).
fof(f389,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f250])).
fof(f250,plain,(
  ! [X0,X1] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X7,X6] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.integer.INT_EQ_REDUCE|split|9','thm.integer.INT_INJ')).
fof(f1740,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f1739])).
fof(f1739,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f1674,f430])).
fof(f1674,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1))) | $spl1),
  inference(forward_demodulation,[],[f1673,f280])).
fof(f1673,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))) | $spl1),
  inference(forward_demodulation,[],[f429,f280])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 64
% Passive clauses: 339
% Generated clauses: 1456
% Final active clauses: 53
% Final passive clauses: 222
% Input formulas: 98
% Initial clauses: 160
% 
% Duplicate literals: 4
% Trivial inequalities: 36
% Fw subsumption resolutions: 20
% Fw demodulations: 269
% Bw demodulations: 8
% 
% Simple tautologies: 58
% Equational tautologies: 9
% Forward subsumptions: 725
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 14
% Forward superposition: 546
% Backward superposition: 352
% Self superposition: 22
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 22
% Split components: 44
% SAT solver clauses: 32
% SAT solver unit clauses: 7
% SAT solver binary clauses: 21
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 22
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 30
% TWLsolver calls for satisfiability: 9
% 
% Memory used [KB]: 1407
% Time elapsed: 0.036 s
% ------------------------------
% ------------------------------
% Success in time 0.04 s
