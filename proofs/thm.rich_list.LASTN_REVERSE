Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (105003)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 947
% Passive clauses: 6800
% Generated clauses: 33541
% Final active clauses: 860
% Final passive clauses: 5477
% Input formulas: 517
% Initial clauses: 882
% 
% Duplicate literals: 143
% Trivial inequalities: 50
% Fw subsumption resolutions: 1688
% Fw demodulations: 2875
% Bw demodulations: 71
% 
% Simple tautologies: 305
% Equational tautologies: 27
% Forward subsumptions: 21524
% Fw demodulations to eq. taut.: 3
% 
% Binary resolution: 5505
% Factoring: 515
% Forward superposition: 11486
% Backward superposition: 10247
% Self superposition: 41
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 296
% Split components: 594
% SAT solver clauses: 480
% SAT solver unit clauses: 18
% SAT solver binary clauses: 83
% 
% Sat splits: 296
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 479
% TWLsolver calls for satisfiability: 323
% 
% Memory used [KB]: 17782
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (105004)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 656
% Passive clauses: 4279
% Generated clauses: 31144
% Final active clauses: 634
% Final passive clauses: 3489
% Input formulas: 517
% Initial clauses: 882
% 
% Duplicate literals: 109
% Trivial inequalities: 45
% Fw subsumption resolutions: 998
% Fw demodulations: 3615
% Bw demodulations: 153
% Condensations: 69
% Global subsumptions: 36
% 
% Simple tautologies: 312
% Equational tautologies: 16
% Forward subsumptions: 16862
% Fw demodulations to eq. taut.: 7
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 2571
% Factoring: 147
% Forward superposition: 10844
% Backward superposition: 7675
% Self superposition: 91
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 18
% Split components: 36
% SAT solver clauses: 5726
% SAT solver unit clauses: 1137
% SAT solver binary clauses: 284
% SAT solver learnt clauses: 72
% SAT solver learnt literals: 12
% 
% Sat splits: 18
% 
% TWLsolver clauses: 5582
% TWLsolver calls for satisfiability: 4818
% 
% Memory used [KB]: 33261
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f108125,plain,(
  $false),
  inference(subsumption_resolution,[],[f108118,f26344])).
fof(f26344,plain,(
  ( ! [X2,X0] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),'=_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),X2))))) )),
  inference(forward_demodulation,[],[f26140,f2116])).
fof(f2116,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f784])).
fof(f784,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f783])).
fof(f783,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f392])).
fof(f392,axiom,(
  ! [X6] : ! [X15,X12] : s('type.list.list'(X6),X12) = s('type.list.list'(X6),'const.list.TL_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X12)))))),
  file('thm.rich_list.LASTN_REVERSE','thm.list.TL')).
fof(f26140,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),'=_1'(s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))))),s('type.list.list'(X0),X2))))) )),
  inference(unit_resulting_resolution,[],[f2116,f2590])).
fof(f2590,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'=_1'(s(X0,X1))),s(X0,X2)))) | s(X0,X1) != s(X0,X2)) )),
  inference(cnf_transformation,[],[f1805])).
fof(f1805,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),'=_1'(s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),'=_1'(s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f1322])).
fof(f1322,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),'=_1'(s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f418])).
fof(f418,axiom,(
  ! [X74,X75,X76] : (p(s(bool,happ(s(fun(X74,bool),'=_1'(s(X74,X75))),s(X74,X76)))) <=> s(X74,X75) = s(X74,X76))),
  file('thm.rich_list.LASTN_REVERSE',arity_1_HL_EQ)).
fof(f108118,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'(sK13),bool),'=_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))))))),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))))))))),
  inference(backward_demodulation,[],[f107780,f25532])).
fof(f25532,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'(sK13),bool),'=_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))))))),s('type.list.list'(sK13),'const.rich_list.LASTN_2'(s('type.num.num',sK14),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK15))))))))),
  inference(unit_resulting_resolution,[],[f1863,f2589])).
fof(f2589,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),'=_1'(s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f1805])).
fof(f1863,plain,(
  s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))))) != s('type.list.list'(sK13),'const.rich_list.LASTN_2'(s('type.num.num',sK14),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK15)))))),
  inference(cnf_transformation,[],[f1555])).
fof(f1555,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) & s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'(sK13),sK15))))) != s('type.list.list'(sK13),'const.rich_list.LASTN_2'(s('type.num.num',sK14),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK15)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15])],[f1368])).
fof(f1368,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) & s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))) != s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f520])).
fof(f520,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f519])).
fof(f519,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8))))) = s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8))))) = s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.LASTN_REVERSE','thm.rich_list.LASTN_REVERSE')).
fof(f107780,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),'const.list.TAKE_2'(s('type.num.num',X4),s('type.list.list'(X2),X3))))) = s('type.list.list'(X2),'const.rich_list.LASTN_2'(s('type.num.num',X4),s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),X3)))))) )),
  inference(superposition,[],[f2139,f2045])).
fof(f2045,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f670])).
fof(f670,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f669])).
fof(f669,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X8] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.LASTN_REVERSE','thm.list.REVERSE_REVERSE')).
fof(f2139,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f830])).
fof(f830,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(flattening,[],[f829])).
fof(f829,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X9] : s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),X9))) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X9)))))))),
  file('thm.rich_list.LASTN_REVERSE','thm.rich_list.LASTN_def')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1316
% Passive clauses: 12861
% Generated clauses: 109250
% Final active clauses: 1087
% Final passive clauses: 6890
% Input formulas: 517
% Initial clauses: 882
% 
% Duplicate literals: 10
% Trivial inequalities: 168
% Fw subsumption resolutions: 2058
% Fw demodulations: 23170
% Bw demodulations: 3054
% Condensations: 28
% 
% Simple tautologies: 216
% Equational tautologies: 92
% Forward subsumptions: 66870
% Fw demodulations to eq. taut.: 1372
% Bw demodulations to eq. taut.: 54
% 
% Unit resulting resolution: 24514
% Factoring: 2
% Forward superposition: 29482
% Backward superposition: 22587
% Self superposition: 196
% Equality factoring: 2
% Equality resolution: 34
% 
% Split clauses: 27
% Split components: 54
% SAT solver clauses: 15108
% SAT solver unit clauses: 5390
% SAT solver binary clauses: 8042
% 
% Sat splits: 27
% Sat splitting refutations: 2191
% 
% Memory used [KB]: 55521
% Time elapsed: 3.444 s
% ------------------------------
% ------------------------------
% Success in time 4.79 s
