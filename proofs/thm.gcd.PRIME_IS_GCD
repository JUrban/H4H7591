Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.gcd
% (69253)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 725
% Passive clauses: 9717
% Generated clauses: 20585
% Final active clauses: 640
% Final passive clauses: 8481
% Input formulas: 65
% Initial clauses: 248
% 
% Duplicate literals: 309
% Trivial inequalities: 207
% Fw subsumption resolutions: 2119
% Fw demodulations: 440
% Bw demodulations: 83
% 
% Simple tautologies: 274
% Equational tautologies: 65
% Forward subsumptions: 7227
% 
% Binary resolution: 11224
% Factoring: 1192
% Forward superposition: 1864
% Backward superposition: 2614
% Self superposition: 26
% Equality factoring: 28
% Equality resolution: 38
% 
% Split clauses: 314
% Split components: 629
% SAT solver clauses: 628
% SAT solver unit clauses: 17
% SAT solver binary clauses: 158
% 
% Sat splits: 314
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 626
% TWLsolver calls for satisfiability: 368
% 
% Memory used [KB]: 9466
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.gcd
% (69268)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 455
% Passive clauses: 3083
% Generated clauses: 11898
% Final active clauses: 446
% Final passive clauses: 2621
% Input formulas: 65
% Initial clauses: 248
% 
% Duplicate literals: 186
% Trivial inequalities: 38
% Fw subsumption resolutions: 903
% Fw demodulations: 376
% Bw demodulations: 16
% Condensations: 310
% Global subsumptions: 22
% 
% Simple tautologies: 280
% Equational tautologies: 18
% Forward subsumptions: 3190
% 
% Binary resolution: 4273
% Factoring: 219
% Forward superposition: 1293
% Backward superposition: 871
% Self superposition: 24
% Equality factoring: 28
% Equality resolution: 5
% 
% Split clauses: 43
% Split components: 86
% SAT solver clauses: 3695
% SAT solver unit clauses: 234
% SAT solver binary clauses: 93
% SAT solver learnt clauses: 44
% SAT solver learnt literals: 10
% 
% Sat splits: 43
% 
% TWLsolver clauses: 3607
% TWLsolver calls for satisfiability: 1985
% 
% Memory used [KB]: 14200
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.gcd
% (69301)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1928
% Passive clauses: 8852
% Generated clauses: 156733
% Final active clauses: 907
% Final passive clauses: 1386
% Input formulas: 65
% Initial clauses: 248
% 
% Duplicate literals: 6870
% Trivial inequalities: 307
% Fw subsumption resolutions: 7501
% Fw demodulations: 18917
% Bw demodulations: 3520
% Condensations: 14704
% Global subsumptions: 1425
% 
% Simple tautologies: 389
% Equational tautologies: 4099
% Forward subsumptions: 89356
% Bw demodulations to eq. taut.: 154
% 
% Unit resulting resolution: 45251
% Factoring: 7
% Forward superposition: 36188
% Backward superposition: 15567
% Self superposition: 276
% Equality factoring: 234
% Equality resolution: 16
% 
% Split clauses: 606
% Split components: 1221
% SAT solver clauses: 15329
% SAT solver unit clauses: 3261
% SAT solver binary clauses: 3252
% 
% Sat splits: 606
% Sat splitting refutations: 3838
% 
% Memory used [KB]: 102087
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 182 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.gcd
% (69668)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 5245
% Passive clauses: 51691
% Generated clauses: 281941
% Final active clauses: 1579
% Final passive clauses: 13737
% Input formulas: 65
% Initial clauses: 186
% 
% Selected by SInE selection: 48
% SInE iterations: 1
% 
% Duplicate literals: 10126
% Trivial inequalities: 298
% Fw subsumption resolutions: 23791
% Fw demodulations: 5185
% Bw demodulations: 1111
% 
% Simple tautologies: 23461
% Equational tautologies: 24
% Forward subsumptions: 167074
% 
% Binary resolution: 182383
% Factoring: 41
% Forward superposition: 32501
% Backward superposition: 12251
% Self superposition: 84
% Equality factoring: 16
% Equality resolution: 57
% 
% Split clauses: 5644
% Split components: 11838
% SAT solver clauses: 6117
% SAT solver unit clauses: 22
% SAT solver binary clauses: 633
% 
% Sat splits: 5644
% Sat splitting refutations: 341
% 
% Memory used [KB]: 67674
% Time elapsed: 4.0000 s
% ------------------------------
% ------------------------------
% remaining time: 142 next slice time: 6
lrs+1002_2:3_br=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:sas=minisat:stl=30:sac=on:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none:sp=reverse_arity:urr=on_4 on thm.gcd
% (69748)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 567
% Passive clauses: 3248
% Generated clauses: 18993
% Final active clauses: 560
% Final passive clauses: 2532
% Input formulas: 65
% Initial clauses: 248
% 
% Duplicate literals: 438
% Trivial inequalities: 242
% Fw subsumption resolutions: 1845
% Fw demodulations: 690
% Bw demodulations: 6
% Global subsumptions: 13
% 
% Simple tautologies: 527
% Equational tautologies: 52
% Forward subsumptions: 11289
% 
% Unit resulting resolution: 6522
% Factoring: 18
% Forward superposition: 4957
% Backward superposition: 3831
% Self superposition: 76
% Equality factoring: 10
% Equality resolution: 22
% 
% Split clauses: 30
% Split components: 60
% SAT solver clauses: 3816
% SAT solver unit clauses: 916
% SAT solver binary clauses: 227
% 
% Sat splits: 30
% Sat splitting refutations: 522
% 
% Memory used [KB]: 10874
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 135 next slice time: 15
lrs+1011_12_bs=on:bsr=unit_only:cond=on:gs=on:gsaa=from_current:gsssp=full:nwc=1.1:sas=minisat:stl=60:sos=all:sac=on:sdd=off:sser=off:sfr=on:ssfp=100000:ssfq=1.2:ssnc=none:sp=reverse_arity:updr=off_14 on thm.gcd
% (69781)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1090
% Passive clauses: 6260
% Generated clauses: 25048
% Final active clauses: 667
% Final passive clauses: 3911
% Input formulas: 65
% Initial clauses: 248
% 
% Duplicate literals: 1194
% Trivial inequalities: 77
% Fw subsumption resolutions: 1849
% Bw subsumption resolutions: 347
% Fw demodulations: 2002
% Bw demodulations: 842
% Condensations: 1791
% Global subsumptions: 164
% 
% Simple tautologies: 1839
% Equational tautologies: 40
% Forward subsumptions: 9588
% Backward subsumptions: 617
% 
% Binary resolution: 9146
% Factoring: 38
% Forward superposition: 3216
% Backward superposition: 2660
% Self superposition: 42
% Equality factoring: 4
% Equality resolution: 13
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 6612
% SAT solver unit clauses: 335
% SAT solver binary clauses: 820
% 
% Sat splits: 1
% Sat splitting refutations: 185
% 
% Memory used [KB]: 16119
% Time elapsed: 1.600 s
% ------------------------------
% ------------------------------
% remaining time: 119 next slice time: 9
lrs+10_8:1_bd=preordered:bs=on:ccuc=first:fsr=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:nicw=on:sas=minisat:stl=120:sos=on:sscc=on:sser=off:sfr=on:ssfp=4000:ssfq=1.0:ssnc=none:sp=reverse_arity:urr=on_7 on thm.gcd
% (69854)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 869
% Passive clauses: 4040
% Generated clauses: 23042
% Final active clauses: 783
% Final passive clauses: 2573
% Input formulas: 65
% Initial clauses: 248
% 
% Duplicate literals: 381
% Trivial inequalities: 165
% Fw demodulations: 2488
% Bw demodulations: 15
% Global subsumptions: 300
% 
% Simple tautologies: 771
% Equational tautologies: 529
% Forward subsumptions: 13142
% Backward subsumptions: 712
% 
% Binary resolution: 8388
% Unit resulting resolution: 7284
% Factoring: 9
% Forward superposition: 591
% Backward superposition: 2437
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 19
% 
% Split clauses: 183
% Split components: 368
% SAT solver clauses: 6570
% SAT solver unit clauses: 40
% SAT solver binary clauses: 2288
% 
% Sat splits: 183
% Sat splitting refutations: 86
% 
% Memory used [KB]: 16247
% Time elapsed: 1.0000 s
% ------------------------------
% ------------------------------
% remaining time: 109 next slice time: 85
lrs+1_5:4_cond=on:fsr=off:fde=none:gs=on:gsem=on:lwlo=on:nm=64:nwc=1:stl=60:sos=all:spl=off_80 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f49180,plain,(
  $false),
  inference(global_subsumption,[],[f48976,f978])).
fof(f978,plain,(
  s(bool,'T_0') != s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2)))),
  inference(resolution,[],[f302,f325])).
fof(f325,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f206])).
fof(f206,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X8] : (s(bool,'T_0') = s(bool,X8) <=> p(s(bool,X8)))),
  file('thm.gcd.PRIME_IS_GCD','thm.bool.EQ_CLAUSES|split|0')).
fof(f302,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2))))),
  inference(cnf_transformation,[],[f203])).
fof(f203,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) & ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK1),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2])],[f163])).
fof(f163,plain,(
  ? [X0,X1] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) & ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(flattening,[],[f162])).
fof(f162,plain,(
  ? [X0,X1] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) & ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(ennf_transformation,[],[f67])).
fof(f67,plain,(
  ~! [X0,X1] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) => (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X6)))) => (p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X7)))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X6)))) => (p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X7)))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  file('thm.gcd.PRIME_IS_GCD','thm.gcd.PRIME_IS_GCD')).
fof(f48976,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2)))),
  inference(backward_demodulation,[],[f48816,f20633])).
fof(f20633,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK2)))),
  inference(resolution,[],[f20509,f326])).
fof(f326,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f206])).
fof(f20509,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK2))))),
  inference(resolution,[],[f10029,f311])).
fof(f311,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X20] : p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X20))))),
  file('thm.gcd.PRIME_IS_GCD','thm.divides.ONE_DIVIDES_ALL')).
fof(f10029,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK2))))),
  inference(resolution,[],[f1136,f311])).
fof(f1136,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))))),
  inference(resolution,[],[f303,f463])).
fof(f463,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19(X2,X1,X0)),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f286])).
fof(f286,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X4] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19(X2,X1,X0)),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19(X2,X1,X0)),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19(X2,X1,X0)),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19])],[f285])).
fof(f285,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X4] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(rectify,[],[f284])).
fof(f284,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(flattening,[],[f283])).
fof(f283,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))))) & ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(nnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(flattening,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(ennf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X20,X7,X21] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X20),s('type.num.num',X7),s('type.num.num',X21)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X21),s('type.num.num',X20)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X21),s('type.num.num',X7)))) & ! [X22] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X22),s('type.num.num',X20)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X22),s('type.num.num',X7))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X22),s('type.num.num',X21)))))))),
  file('thm.gcd.PRIME_IS_GCD','thm.gcd.is_gcd_def')).
fof(f303,plain,(
  ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK1),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(cnf_transformation,[],[f203])).
fof(f48816,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(resolution,[],[f47835,f304])).
fof(f304,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.gcd.PRIME_IS_GCD',aHL_TRUTH)).
fof(f47835,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(duplicate_literal_removal,[],[f47834])).
fof(f47834,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(forward_demodulation,[],[f47833,f47593])).
fof(f47593,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))) )),
  inference(resolution,[],[f39161,f310])).
fof(f310,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.gcd.PRIME_IS_GCD',aHL_FALSITY)).
fof(f39161,plain,(
  ( ! [X600] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X600)))) )),
  inference(forward_demodulation,[],[f38485,f980])).
fof(f980,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2)))),
  inference(resolution,[],[f302,f330])).
fof(f330,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f208])).
fof(f208,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X8] : (s(bool,'F_0') = s(bool,X8) <=> ~p(s(bool,X8)))),
  file('thm.gcd.PRIME_IS_GCD','thm.bool.EQ_CLAUSES|split|2')).
fof(f38485,plain,(
  ( ! [X600] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) | s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X600)))) )),
  inference(superposition,[],[f311,f36759])).
fof(f36759,plain,(
  ( ! [X94] : (s(bool,X94) = s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(global_subsumption,[],[f33143,f924])).
fof(f924,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(forward_demodulation,[],[f857,f855])).
fof(f855,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num',sK1)))),
  inference(resolution,[],[f301,f326])).
fof(f301,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK1))))),
  inference(cnf_transformation,[],[f203])).
fof(f857,plain,(
  s(bool,'F_0') != s(bool,'const.divides.prime_1'(s('type.num.num',sK1)))),
  inference(resolution,[],[f301,f329])).
fof(f329,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f208])).
fof(f33143,plain,(
  ( ! [X94] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X94) = s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f31498,f980])).
fof(f31498,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(resolution,[],[f31206,f326])).
fof(f31206,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_resolution,[],[f26975])).
fof(f26975,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,X2) | s(bool,'T_0') = s(bool,X1) | p(s(bool,X0)) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f26777])).
fof(f26777,plain,(
  ( ! [X57,X54,X56,X55] : (p(s(bool,X54)) | s(bool,'T_0') = s(bool,X55) | s(bool,X55) != s(bool,X56) | s(bool,X56) = s(bool,X57) | p(s(bool,X57))) )),
  inference(resolution,[],[f26650,f409])).
fof(f409,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f181])).
fof(f181,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9,X10] : ((p(s(bool,X9)) => p(s(bool,X10))) => ((p(s(bool,X10)) => p(s(bool,X9))) => s(bool,X9) = s(bool,X10)))),
  file('thm.gcd.PRIME_IS_GCD','thm.bool.IMP_ANTISYM_AX')).
fof(f26650,plain,(
  ( ! [X101,X102,X100] : (~p(s(bool,X100)) | p(s(bool,X102)) | s(bool,'T_0') = s(bool,X101) | s(bool,X100) != s(bool,X101)) )),
  inference(trivial_inequality_removal,[],[f26628])).
fof(f26628,plain,(
  ( ! [X101,X102,X100] : (s(bool,X100) != s(bool,X101) | p(s(bool,X102)) | s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X101) | ~p(s(bool,X100))) )),
  inference(superposition,[],[f9590,f328])).
fof(f328,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f207])).
fof(f207,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X8] : (s(bool,'T_0') = s(bool,X8) <=> p(s(bool,X8)))),
  file('thm.gcd.PRIME_IS_GCD','thm.bool.EQ_CLAUSES|split|1')).
fof(f9590,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,X7) | p(s(bool,X8)) | s(bool,'T_0') != s(bool,X7) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f9460,f314])).
fof(f314,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : (s(bool,'T_0') = s(bool,X8) | s(bool,'F_0') = s(bool,X8))),
  file('thm.gcd.PRIME_IS_GCD','thm.bool.BOOL_CASES_AX')).
fof(f9460,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,X4) | p(s(bool,X5)) | s(bool,'T_0') != s(bool,X4)) )),
  inference(global_subsumption,[],[f9373,f1877,f1071])).
fof(f1071,plain,(
  ( ! [X26,X27] : (~sP0(X27,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X26) | p(s(bool,X26)) | s(bool,'F_0') != s(bool,X27)) )),
  inference(forward_demodulation,[],[f997,f980])).
fof(f997,plain,(
  ( ! [X26,X27] : (p(s(bool,X26)) | s(bool,X27) != s(bool,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | ~sP0(X27,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X26)) )),
  inference(resolution,[],[f302,f701])).
fof(f701,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | s(bool,X0) != s(bool,X1) | p(s(bool,X1)) | ~sP0(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f542])).
fof(f542,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | s(bool,X0) != s(bool,X1) | p(s(bool,X2)) | p(s(bool,X2)) | p(s(bool,X1)) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f294])).
fof(f294,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | (sP0(X0,X1,X2) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP0(X0,X1,X2) | (~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(flattening,[],[f293])).
fof(f293,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | (sP0(X0,X1,X2) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP0(X0,X1,X2) | (~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> (sP0(X0,X1,X2) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(definition_folding,[],[f155,f201])).
fof(f201,plain,(
  ! [X0,X1,X2] : (sP0(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f155,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X23,X24,X6] : ((p(s(bool,X6)) <=> s(bool,X23) = s(bool,X24)) <=> ((p(s(bool,X6)) | p(s(bool,X24)) | p(s(bool,X23))) & (p(s(bool,X6)) | ~p(s(bool,X23)) | ~p(s(bool,X24))) & (p(s(bool,X24)) | ~p(s(bool,X23)) | ~p(s(bool,X6))) & (p(s(bool,X23)) | ~p(s(bool,X24)) | ~p(s(bool,X6)))))),
  file('thm.gcd.PRIME_IS_GCD','thm.sat.sat_2|49|_prove_ltb')).
fof(f1877,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | sP0(X6,'const.divides.divides_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X7) | p(s(bool,X7))) )),
  inference(superposition,[],[f978,f481])).
fof(f481,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f294])).
fof(f9373,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,X4) | p(s(bool,X5)) | sP0('F_0',X3,X5) | s(bool,'T_0') != s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f4174,f313])).
fof(f313,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.gcd.PRIME_IS_GCD',aHL_BOOL_CASES)).
fof(f4174,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,X5) | p(s(bool,X4)) | sP0('F_0',X3,X4) | s(bool,'T_0') != s(bool,X5)) )),
  inference(resolution,[],[f2154,f325])).
fof(f2154,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | sP0('F_0',X1,X2) | p(s(bool,X2)) | s(bool,X0) != s(bool,X1)) )),
  inference(superposition,[],[f1326,f328])).
fof(f1326,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | sP0('F_0',X8,X9) | p(s(bool,X9))) )),
  inference(superposition,[],[f924,f481])).
fof(f47833,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(duplicate_literal_removal,[],[f47832])).
fof(f47832,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(forward_demodulation,[],[f47748,f47593])).
fof(f47748,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(backward_demodulation,[],[f47593,f20482])).
fof(f20482,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(global_subsumption,[],[f20479,f924])).
fof(f20479,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(backward_demodulation,[],[f20388,f14661])).
fof(f14661,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) | s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1))),
  inference(superposition,[],[f1137,f4331])).
fof(f4331,plain,(
  ( ! [X14] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X14),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',X14)) )),
  inference(resolution,[],[f854,f330])).
fof(f854,plain,(
  ( ! [X0] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(resolution,[],[f301,f334])).
fof(f334,plain,(
  ( ! [X2,X0] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X0) = s('type.num.num',X2) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X2] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X2) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK3(X0)),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',sK3(X0)) & s('type.num.num',sK3(X0)) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f212])).
fof(f212,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X2] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X2) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f211])).
fof(f211,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(flattening,[],[f210])).
fof(f210,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(flattening,[],[f173])).
fof(f173,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(ennf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) => (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (~s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) => (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X20] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X20)))) <=> (~s('type.num.num',X20) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X7] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X7),s('type.num.num',X20)))) => (s('type.num.num',X7) = s('type.num.num',X20) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  file('thm.gcd.PRIME_IS_GCD','thm.divides.prime_def')).
fof(f1137,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))))),
  inference(resolution,[],[f303,f464])).
fof(f464,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19(X2,X1,X0)),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f286])).
fof(f20388,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK1)))),
  inference(resolution,[],[f20261,f326])).
fof(f20261,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK1))))),
  inference(resolution,[],[f9920,f311])).
fof(f9920,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK1))))),
  inference(resolution,[],[f1135,f311])).
fof(f1135,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK2,sK1)),s('type.num.num',sK1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))))),
  inference(resolution,[],[f303,f462])).
fof(f462,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK19(X2,X1,X0)),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f286])).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 423
% Passive clauses: 5567
% Generated clauses: 47936
% Final active clauses: 397
% Final passive clauses: 4938
% Input formulas: 65
% Initial clauses: 377
% 
% Duplicate literals: 3751
% Trivial inequalities: 627
% Fw demodulations: 2756
% Bw demodulations: 298
% Condensations: 4748
% Global subsumptions: 175
% 
% Simple tautologies: 2932
% Equational tautologies: 71
% Forward subsumptions: 27687
% Bw demodulations to eq. taut.: 20
% 
% Binary resolution: 15132
% Factoring: 11
% Forward superposition: 13587
% Backward superposition: 7081
% Self superposition: 33
% Equality factoring: 32
% Equality resolution: 46
% 
% SAT solver clauses: 6389
% SAT solver unit clauses: 361
% SAT solver binary clauses: 275
% SAT solver learnt clauses: 349
% SAT solver learnt literals: 1224
% 
% TWLsolver clauses: 5742
% TWLsolver calls for satisfiability: 206151
% 
% Memory used [KB]: 29679
% Time elapsed: 1.825 s
% ------------------------------
% ------------------------------
% Success in time 20.881 s
