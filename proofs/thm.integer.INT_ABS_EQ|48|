Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.integer
% (88582)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 134
% Passive clauses: 1713
% Generated clauses: 22815
% Final active clauses: 94
% Final passive clauses: 1433
% Input formulas: 15
% Initial clauses: 25
% 
% Duplicate literals: 1443
% Trivial inequalities: 306
% Fw subsumption resolutions: 3802
% Fw demodulations: 2512
% Bw demodulations: 39
% 
% Simple tautologies: 448
% Equational tautologies: 61
% Forward subsumptions: 10422
% 
% Binary resolution: 205
% Forward superposition: 6777
% Backward superposition: 7048
% Self superposition: 239
% Equality factoring: 180
% Equality resolution: 19
% 
% Split clauses: 1243
% Split components: 2590
% SAT solver clauses: 2218
% SAT solver unit clauses: 38
% SAT solver binary clauses: 264
% 
% Sat splits: 1243
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2216
% TWLsolver calls for satisfiability: 144
% 
% Memory used [KB]: 9594
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f1909,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1908,f52,f81,f303,f310,f185,f190,f46,f74,f72,f180,f106,f47,f75,f73,f51,f80,f54,f86,f1016,f988,f1445,f1309,f1306,f213,f215,f191,f192,f67,f91,f1490,f195,f108,f193,f194,f66,f92])).
fof(f92,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))) ) | $spl32),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f66,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(nnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) <=> s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X8] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X8))) <=> s('type.integer.int',X8) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.integer.INT_ABS_EQ|48|','thm.integer.INT_NEG_EQ|48|')).
fof(f194,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0)))) ) | $spl78),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0)))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f193,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))) ) | ($spl0 | $spl32)),
  inference(forward_demodulation,[],[f187,f72])).
fof(f187,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f72,f92])).
fof(f108,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | $spl47),
  inference(cnf_transformation,[],[f108_D])).
fof(f108_D,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f195,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | ($spl0 | $spl3)),
  inference(superposition,[],[f75,f72])).
fof(f1490,plain,(
  $false | ($spl47 | $spl78 | $spl344)),
  inference(subsumption_resolution,[],[f1489,f108])).
fof(f1489,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | ($spl78 | $spl344)),
  inference(trivial_inequality_removal,[],[f1476])).
fof(f1476,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int',sK0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | ($spl78 | $spl344)),
  inference(superposition,[],[f194,f1149])).
fof(f1149,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | $spl344),
  inference(cnf_transformation,[],[f1149_D])).
fof(f1149_D,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) <=> ~$spl344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl344])])).
fof(f91,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl30),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f67,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f43])).
fof(f192,plain,(
  ( ! [X0] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))) ) | $spl76),
  inference(cnf_transformation,[],[f192_D])).
fof(f192_D,plain,(
  ( ! [X0] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f191,plain,(
  ( ! [X0] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))) ) | ($spl0 | $spl30)),
  inference(forward_demodulation,[],[f186,f72])).
fof(f186,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl0 | $spl30)),
  inference(backward_demodulation,[],[f72,f91])).
fof(f215,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))))) | $spl86),
  inference(cnf_transformation,[],[f215_D])).
fof(f215_D,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))))) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f213,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))))) | ($spl0 | $spl76)),
  inference(forward_demodulation,[],[f210,f72])).
fof(f210,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl76)),
  inference(trivial_inequality_removal,[],[f208])).
fof(f208,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl76)),
  inference(superposition,[],[f192,f72])).
fof(f1306,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | $spl366),
  inference(cnf_transformation,[],[f1306_D])).
fof(f1306_D,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) <=> ~$spl366),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl366])])).
fof(f1309,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | ($spl74 | $spl86 | $spl312 | $spl345)),
  inference(subsumption_resolution,[],[f1241,f1150])).
fof(f1150,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | $spl345),
  inference(cnf_transformation,[],[f1150_D])).
fof(f1150_D,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) <=> ~$spl345),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl345])])).
fof(f1241,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | ($spl74 | $spl86 | $spl312)),
  inference(duplicate_literal_removal,[],[f1240])).
fof(f1240,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | ($spl74 | $spl86 | $spl312)),
  inference(forward_demodulation,[],[f1221,f215])).
fof(f1221,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | ($spl74 | $spl312)),
  inference(superposition,[],[f190,f988])).
fof(f1445,plain,(
  $false | ($spl8 | $spl10 | $spl345 | $spl366)),
  inference(subsumption_resolution,[],[f1444,f1150])).
fof(f1444,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | ($spl8 | $spl10 | $spl366)),
  inference(forward_demodulation,[],[f1432,f81])).
fof(f1432,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))) | ($spl8 | $spl366)),
  inference(superposition,[],[f80,f1306])).
fof(f988,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | $spl312),
  inference(cnf_transformation,[],[f988_D])).
fof(f988_D,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) <=> ~$spl312),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl312])])).
fof(f1016,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | ($spl8 | $spl316)),
  inference(superposition,[],[f992,f80])).
fof(f992,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2('const.integer.int_neg_1'(s('type.integer.int',sK0)))))))) | $spl316),
  inference(cnf_transformation,[],[f992_D])).
fof(f992_D,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2('const.integer.int_neg_1'(s('type.integer.int',sK0)))))))) <=> ~$spl316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl316])])).
fof(f86,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X0)))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X0))))) ) | $spl20),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X0)))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X0))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f54,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X0)))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X0))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0] : ((s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X0)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1(X0))) | (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X0)))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2(X0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2])],[f22])).
fof(f22,plain,(
  ! [X0] : (? [X2] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) | ? [X1] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : (? [X2] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) | ? [X1] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : (? [X10] : (s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X10)) | ? [X10] : (s('type.integer.int',X6) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X10)) | s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.integer.INT_ABS_EQ|48|','thm.integer.INT_NUM_CASES')).
fof(f80,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) | $spl8),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f51,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X10] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10)))))),
  file('thm.integer.INT_ABS_EQ|48|','thm.integer.INT_ABS_NUM')).
fof(f73,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f75,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl3),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f47,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f36])).
fof(f36,plain,(
  ? [X0] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ? [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) <~> s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) <=> s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X6))) <=> s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X6))) <=> s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.integer.INT_ABS_EQ|48|','thm.integer.INT_ABS_EQ|48|')).
fof(f106,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f73,f74])).
fof(f180,plain,(
  $false | ($spl2 | $spl8 | $spl47)),
  inference(subsumption_resolution,[],[f177,f108])).
fof(f177,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | ($spl2 | $spl8)),
  inference(superposition,[],[f80,f74])).
fof(f72,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl0),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f74,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl2),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f46,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f37])).
fof(f190,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X0)))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X0))))) ) | $spl74),
  inference(cnf_transformation,[],[f190_D])).
fof(f190_D,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X0)))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X0))))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f185,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X0)))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X0))))) ) | ($spl0 | $spl20)),
  inference(backward_demodulation,[],[f72,f86])).
fof(f310,plain,(
  ( ! [X1] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X1))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X1)))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X1))))) ) | $spl106),
  inference(cnf_transformation,[],[f310_D])).
fof(f310_D,plain,(
  ( ! [X1] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X1))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X1)))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X1))))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f303,plain,(
  ( ! [X1] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X1))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2(X1)))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1(X1))))) ) | ($spl10 | $spl74)),
  inference(superposition,[],[f81,f190])).
fof(f81,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) ) | $spl10),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f52,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0] : s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X6))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6)))))),
  file('thm.integer.INT_ABS_EQ|48|','thm.integer.INT_ABS_NEG')).
fof(f1908,plain,(
  $false | ($spl10 | $spl106 | $spl317 | $spl345 | $spl367)),
  inference(subsumption_resolution,[],[f1907,f1305])).
fof(f1305,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | $spl367),
  inference(cnf_transformation,[],[f1305_D])).
fof(f1305_D,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) <=> ~$spl367),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl367])])).
fof(f1907,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | ($spl10 | $spl106 | $spl317 | $spl345)),
  inference(subsumption_resolution,[],[f1906,f1150])).
fof(f1906,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | ($spl10 | $spl106 | $spl317)),
  inference(subsumption_resolution,[],[f1904,f81])).
fof(f1904,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))) | s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK1('const.integer.int_neg_1'(s('type.integer.int',sK0)))))) | ($spl106 | $spl317)),
  inference(superposition,[],[f991,f310])).
fof(f991,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2('const.integer.int_neg_1'(s('type.integer.int',sK0)))))))) | $spl317),
  inference(cnf_transformation,[],[f991_D])).
fof(f991_D,plain,(
  s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',sK0))) != s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK2('const.integer.int_neg_1'(s('type.integer.int',sK0)))))))) <=> ~$spl317),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl317])])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 99
% Passive clauses: 249
% Generated clauses: 1960
% Final active clauses: 60
% Final passive clauses: 107
% Input formulas: 15
% Initial clauses: 25
% 
% Duplicate literals: 125
% Trivial inequalities: 104
% Fw subsumption resolutions: 103
% Fw demodulations: 265
% Bw demodulations: 42
% Condensations: 37
% 
% Simple tautologies: 92
% Equational tautologies: 18
% Forward subsumptions: 686
% Fw demodulations to eq. taut.: 7
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 9
% Forward superposition: 367
% Backward superposition: 460
% Self superposition: 25
% Equality factoring: 26
% Equality resolution: 14
% 
% Split clauses: 23
% Split components: 50
% SAT solver clauses: 318
% SAT solver unit clauses: 33
% SAT solver binary clauses: 32
% SAT solver learnt clauses: 7
% SAT solver learnt literals: 8
% 
% Sat splits: 23
% Sat splitting refutations: 24
% 
% TWLsolver clauses: 311
% TWLsolver calls for satisfiability: 203
% 
% Memory used [KB]: 2174
% Time elapsed: 0.058 s
% ------------------------------
% ------------------------------
% Success in time 0.671 s
