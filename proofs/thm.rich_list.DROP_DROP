Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f527,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f526])).
fof(f526,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.list.list'(sK0),sK3))) != s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.list.list'(sK0),sK3)))),
  inference(superposition,[],[f73,f99])).
fof(f99,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.list.list'(X6),X9))) = s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X8),s('type.list.list'(X6),X9)))))),
  file('thm.rich_list.DROP_DROP','thm.rich_list.DROP_DROP_T')).
fof(f73,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.list.list'(sK0),sK3))) != s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3)))))),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) & s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.list.list'(sK0),sK3))) != s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.list.list'(X0),X3))) != s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) => s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.list.list'(X6),X9))) = s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X8),s('type.list.list'(X6),X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) => s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.list.list'(X6),X9))) = s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X8),s('type.list.list'(X6),X9))))))),
  file('thm.rich_list.DROP_DROP','thm.rich_list.DROP_DROP')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 23
% Passive clauses: 72
% Generated clauses: 422
% Final active clauses: 18
% Final passive clauses: 30
% Input formulas: 18
% Initial clauses: 44
% 
% Duplicate literals: 57
% Trivial inequalities: 20
% Fw subsumption resolutions: 23
% Fw demodulations: 2
% Bw demodulations: 3
% 
% Simple tautologies: 48
% Equational tautologies: 15
% Forward subsumptions: 149
% 
% Binary resolution: 17
% Forward superposition: 91
% Backward superposition: 98
% Self superposition: 32
% Equality factoring: 26
% Equality resolution: 3
% 
% Split clauses: 24
% Split components: 50
% SAT solver clauses: 46
% SAT solver unit clauses: 4
% SAT solver binary clauses: 20
% 
% Sat splits: 24
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 46
% TWLsolver calls for satisfiability: 17
% 
% Memory used [KB]: 767
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.021 s
