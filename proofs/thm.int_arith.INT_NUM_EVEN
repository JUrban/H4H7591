Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.int_arith
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.int_arith
% SZS output start Proof for thm.int_arith
fof(f1483,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1482,f62,f65,f274,f282,f279,f289,f449,f72,f75,f73,f84,f49,f64,f1276,f270,f277,f275,f391,f395,f1144,f276,f626,f627,f612,f613,f290])).
fof(f290,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl18),
  inference(cnf_transformation,[],[f290_D])).
fof(f290_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f613,plain,(
  ( ! [X4] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X4)))) ) | $spl32),
  inference(cnf_transformation,[],[f613_D])).
fof(f613_D,plain,(
  ( ! [X4] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X4)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f612,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X4)))) ) | $spl1),
  inference(subsumption_resolution,[],[f603,f69])).
fof(f69,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f64,f50])).
fof(f50,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.int_arith.INT_NUM_EVEN',aHL_BOOL_CASES)).
fof(f603,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X4)))) )),
  inference(superposition,[],[f52,f67])).
fof(f67,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f50,f50])).
fof(f52,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) & (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.INT_NUM_EVEN','thm.arithmetic.EVEN_ODD')).
fof(f627,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X3)))) ) | $spl34),
  inference(cnf_transformation,[],[f627_D])).
fof(f627_D,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X3)))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f626,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X3)))) ) | ($spl1 | $spl32)),
  inference(subsumption_resolution,[],[f621,f69])).
fof(f621,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X3)))) ) | $spl32),
  inference(superposition,[],[f613,f67])).
fof(f276,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl10),
  inference(cnf_transformation,[],[f276_D])).
fof(f276_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1144,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | ($spl25 | $spl34)),
  inference(trivial_inequality_removal,[],[f1130])).
fof(f1130,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | ($spl25 | $spl34)),
  inference(superposition,[],[f400,f627])).
fof(f400,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | $spl25),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f395,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | $spl20),
  inference(cnf_transformation,[],[f395_D])).
fof(f395_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f391,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl2 | $spl10)),
  inference(duplicate_literal_removal,[],[f344])).
fof(f344,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl2 | $spl10)),
  inference(superposition,[],[f337,f50])).
fof(f337,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl10)),
  inference(subsumption_resolution,[],[f331,f65])).
fof(f331,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl10)),
  inference(superposition,[],[f254,f276])).
fof(f254,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X14)))) | s(bool,X15) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X14))) | s(bool,'T_0') = s(bool,X15)) ) | $spl2),
  inference(subsumption_resolution,[],[f176,f65])).
fof(f176,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X14)))) | s(bool,X15) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X14))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f51,f67])).
fof(f51,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f275,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f275_D])).
fof(f275_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f277,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl11),
  inference(cnf_transformation,[],[f277_D])).
fof(f277_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f270,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | s(bool,X0) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f42,f67])).
fof(f42,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0)))))),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f30])).
fof(f30,plain,(
  ? [X0] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.INT_NUM_EVEN','thm.int_arith.INT_NUM_EVEN')).
fof(f1276,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | ($spl1 | $spl8 | $spl20)),
  inference(subsumption_resolution,[],[f1275,f64])).
fof(f1275,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X1)) ) | ($spl1 | $spl8 | $spl20)),
  inference(forward_demodulation,[],[f1274,f395])).
fof(f1274,plain,(
  ( ! [X1] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f1239,f69])).
fof(f1239,plain,(
  ( ! [X1] : (p(s(bool,X1)) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl8),
  inference(superposition,[],[f54,f275])).
fof(f54,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))) <=> ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6)))))))),
  file('thm.int_arith.INT_NUM_EVEN','thm.int_arith.INT_NUM_ODD')).
fof(f64,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f49,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.int_arith.INT_NUM_EVEN',aHL_FALSITY)).
fof(f84,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(resolution,[],[f81,f65])).
fof(f81,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f64,f73])).
fof(f73,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl4),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f75,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl7),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f72,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f50])).
fof(f449,plain,(
  $false | ($spl7 | $spl18)),
  inference(trivial_inequality_removal,[],[f443])).
fof(f443,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl7 | $spl18)),
  inference(superposition,[],[f75,f290])).
fof(f289,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X2)) ) | $spl17),
  inference(subsumption_resolution,[],[f285,f50])).
fof(f285,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X2)) ) | $spl17),
  inference(superposition,[],[f282,f67])).
fof(f279,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))) | $spl12),
  inference(cnf_transformation,[],[f279_D])).
fof(f279_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f282,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl17),
  inference(cnf_transformation,[],[f282_D])).
fof(f282_D,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f274,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0)))))),
  inference(superposition,[],[f42,f50])).
fof(f65,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f62,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f57])).
fof(f57,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7] : ! [X9] : (s(X7,X9) = s(X7,X9) <=> p(s(bool,'T_0')))),
  file('thm.int_arith.INT_NUM_EVEN','thm.bool.REFL_CLAUSE')).
fof(f1482,plain,(
  $false | ($spl2 | $spl12 | $spl24)),
  inference(subsumption_resolution,[],[f1481,f65])).
fof(f1481,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl12 | $spl24)),
  inference(forward_demodulation,[],[f1480,f399])).
fof(f399,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | $spl24),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f1480,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f1469,f65])).
fof(f1469,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl12),
  inference(superposition,[],[f53,f279])).
fof(f53,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f36])).
% SZS output end Proof for thm.int_arith
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 65
% Passive clauses: 183
% Generated clauses: 1467
% Final active clauses: 21
% Final passive clauses: 35
% Input formulas: 13
% Initial clauses: 20
% 
% Duplicate literals: 174
% Trivial inequalities: 19
% Fw subsumption resolutions: 147
% Fw demodulations: 55
% Bw demodulations: 20
% 
% Simple tautologies: 48
% Equational tautologies: 20
% Forward subsumptions: 676
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 40
% Forward superposition: 433
% Backward superposition: 390
% Self superposition: 46
% Equality factoring: 36
% Equality resolution: 1
% 
% Split clauses: 95
% Split components: 192
% SAT solver clauses: 191
% SAT solver unit clauses: 5
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 95
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 187
% TWLsolver calls for satisfiability: 45
% 
% Memory used [KB]: 1151
% Time elapsed: 0.037 s
% ------------------------------
% ------------------------------
% Success in time 0.038 s
