Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.numeral
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.numeral
% SZS output start Proof for thm.numeral
fof(f5063,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5056,f5052,f95,f136,f133,f137,f5053,f5051])).
fof(f5051,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | $spl85),
  inference(cnf_transformation,[],[f5051_D])).
fof(f5051_D,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) <=> ~$spl85),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl85])])).
fof(f5053,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f5017,f1421])).
fof(f1421,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(resolution,[],[f1382,f103])).
fof(f103,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) & (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.ODD|split|1')).
fof(f1382,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f1381,f141])).
fof(f141,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f89,f88])).
fof(f88,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.ALT_ZERO')).
fof(f89,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f12])).
fof(f12,axiom,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.ODD|split|0')).
fof(f1381,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f1380,f88])).
fof(f1380,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f1350,f144])).
fof(f144,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f97,f88])).
fof(f97,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f1350,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(superposition,[],[f131,f88])).
fof(f131,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) & (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <=> s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <=> ~s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X7,X6] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6)))))) <=> ~s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X7))))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.ODD_ADD')).
fof(f5017,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | s(bool,'F_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))))) | ($spl1 | $spl2)),
  inference(superposition,[],[f1160,f3941])).
fof(f3941,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))))) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f3917,f136])).
fof(f3917,plain,(
  p(s(bool,'F_0')) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))))) | ($spl1 | $spl2)),
  inference(superposition,[],[f1370,f3764])).
fof(f3764,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))))) | ($spl1 | $spl2)),
  inference(backward_demodulation,[],[f3748,f1715])).
fof(f1715,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f1694,f137])).
fof(f1694,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))) | $spl1),
  inference(superposition,[],[f1421,f160])).
fof(f160,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))) | $spl1),
  inference(subsumption_resolution,[],[f156,f136])).
fof(f156,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0)))))),
  inference(superposition,[],[f85,f100])).
fof(f100,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.numeral.numeral_evenodd|split|4',aHL_BOOL_CASES)).
fof(f85,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f61])).
fof(f61,plain,(
  ? [X0] : p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ~! [X0] : ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ~! [X0] : ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))))),
  file('thm.numeral.numeral_evenodd|split|4','thm.numeral.numeral_evenodd|split|4')).
fof(f3748,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f1265,f1848])).
fof(f1848,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f1847,f854])).
fof(f854,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f814,f127])).
fof(f127,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f814,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f813,f143])).
fof(f143,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f96,f88])).
fof(f96,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.ADD_|48|')).
fof(f813,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f458,f127])).
fof(f458,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f98,f88])).
fof(f98,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.BIT|49|')).
fof(f1847,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))))) )),
  inference(forward_demodulation,[],[f1803,f127])).
fof(f1803,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f1583,f127])).
fof(f1583,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(forward_demodulation,[],[f1582,f143])).
fof(f1582,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f1581,f88])).
fof(f1581,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f1580,f127])).
fof(f1580,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f99,f127])).
fof(f99,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.BIT2')).
fof(f1265,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(forward_demodulation,[],[f1264,f854])).
fof(f1264,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))))))) )),
  inference(forward_demodulation,[],[f1232,f126])).
fof(f126,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X7] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',X6)))),
  file('thm.numeral.numeral_evenodd|split|4','thm.arithmetic.ADD_CLAUSES|split|2')).
fof(f1232,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f854,f127])).
fof(f1370,plain,(
  ( ! [X3] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X3)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X3))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f131,f814])).
fof(f1160,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | s(bool,'F_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f1159,f141])).
fof(f1159,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f1158,f88])).
fof(f1158,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f1133,f144])).
fof(f1133,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(superposition,[],[f130,f88])).
fof(f130,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f83])).
fof(f137,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f133,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f122])).
fof(f122,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X8] : ! [X10] : (s(X8,X10) = s(X8,X10) <=> p(s(bool,'T_0')))),
  file('thm.numeral.numeral_evenodd|split|4','thm.bool.REFL_CLAUSE')).
fof(f136,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f95,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.numeral.numeral_evenodd|split|4',aHL_FALSITY)).
fof(f5052,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | $spl84),
  inference(cnf_transformation,[],[f5052_D])).
fof(f5052_D,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f5056,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f5019,f1185])).
fof(f1185,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | s(bool,'F_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(resolution,[],[f1160,f104])).
fof(f104,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f5019,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))))) | ($spl1 | $spl2)),
  inference(superposition,[],[f1382,f3941])).
% SZS output end Proof for thm.numeral
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 149
% Passive clauses: 706
% Generated clauses: 4937
% Final active clauses: 101
% Final passive clauses: 419
% Input formulas: 29
% Initial clauses: 48
% 
% Duplicate literals: 179
% Trivial inequalities: 68
% Fw subsumption resolutions: 456
% Fw demodulations: 1213
% Bw demodulations: 46
% 
% Simple tautologies: 116
% Equational tautologies: 18
% Forward subsumptions: 2099
% Fw demodulations to eq. taut.: 12
% 
% Binary resolution: 170
% Forward superposition: 1418
% Backward superposition: 1221
% Self superposition: 46
% Equality factoring: 32
% 
% Split clauses: 93
% Split components: 186
% SAT solver clauses: 202
% SAT solver unit clauses: 4
% SAT solver binary clauses: 31
% SAT solver learnt clauses: 1
% 
% Sat splits: 93
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 188
% TWLsolver calls for satisfiability: 64
% 
% Memory used [KB]: 2686
% Time elapsed: 0.103 s
% ------------------------------
% ------------------------------
% Success in time 0.105 s
