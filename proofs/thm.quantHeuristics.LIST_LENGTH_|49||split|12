Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (33930)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 342
% Passive clauses: 3424
% Generated clauses: 28596
% Final active clauses: 249
% Final passive clauses: 2763
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 92
% Trivial inequalities: 590
% Fw subsumption resolutions: 1462
% Fw demodulations: 8472
% Bw demodulations: 80
% 
% Simple tautologies: 25
% Equational tautologies: 18
% Forward subsumptions: 14747
% Fw demodulations to eq. taut.: 11
% Bw demodulations to eq. taut.: 5
% 
% Binary resolution: 35
% Forward superposition: 7352
% Backward superposition: 10422
% Self superposition: 100
% Equality factoring: 28
% Equality resolution: 23
% 
% Split clauses: 35
% Split components: 70
% SAT solver clauses: 48
% SAT solver unit clauses: 2
% SAT solver binary clauses: 13
% 
% Sat splits: 35
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 48
% TWLsolver calls for satisfiability: 24
% 
% Memory used [KB]: 21748
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (33939)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 297
% Passive clauses: 2082
% Generated clauses: 25512
% Final active clauses: 210
% Final passive clauses: 1331
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 58
% Trivial inequalities: 1615
% Fw subsumption resolutions: 802
% Fw demodulations: 7744
% Bw demodulations: 537
% Condensations: 51
% 
% Simple tautologies: 22
% Equational tautologies: 16
% Forward subsumptions: 10334
% Fw demodulations to eq. taut.: 138
% 
% Binary resolution: 24
% Forward superposition: 4824
% Backward superposition: 7442
% Self superposition: 75
% Equality factoring: 26
% Equality resolution: 44
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 2614
% SAT solver unit clauses: 72
% SAT solver binary clauses: 44
% 
% Sat splits: 11
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2614
% TWLsolver calls for satisfiability: 444
% 
% Memory used [KB]: 20596
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f13620,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f101,f152,f151,f100,f154,f99,f156,f150,f223,f226,f224,f261,f275,f273,f265,f279,f277,f266,f281,f267,f284,f268,f285,f270,f283,f286,f271,f290,f288,f683,f688,f686,f684,f692,f690,f1524,f1526,f3874,f3876,f3869,f3806,f3863,f3875,f3826,f3877,f3878,f3987,f5665,f5667,f5670,f5672,f5673,f5675,f5676,f5678,f5679,f5681,f5682,f5684,f5685,f5687,f5688,f5689,f5690,f5691,f5662,f5669,f5692,f6112,f6114,f6115,f6116,f6117,f6118,f6206,f6224,f6237,f6591,f6602,f6592,f6604,f6606,f6593,f6610,f6608,f6789,f6792,f6793,f6794,f6918,f6980,f6981,f6982,f6977,f6924,f6984,f6998,f7000,f6979,f7002,f7006,f7004,f7032,f7094,f7095,f7096,f7091,f7038,f7098,f7112,f7114,f7093,f7116,f7120,f7118,f7531,f287,f7584,f8531,f8535,f8533,f8643,f8647,f8645,f9198,f9202,f9200,f9204,f9208,f9206,f13459,f13605])).
fof(f13605,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f13458,f12081])).
fof(f12081,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl0),
  inference(forward_demodulation,[],[f12080,f11682])).
fof(f11682,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f11681,f7253])).
fof(f7253,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(backward_demodulation,[],[f7132,f6140])).
fof(f6140,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f150,f1581])).
fof(f1581,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(backward_demodulation,[],[f1579,f104])).
fof(f104,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f20])).
fof(f20,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|13')).
fof(f1579,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(backward_demodulation,[],[f1578,f694])).
fof(f694,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(equality_resolution,[],[f125])).
fof(f125,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.list.LENGTH_NIL')).
fof(f1578,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),'const.list.NIL_0')))) )),
  inference(subsumption_resolution,[],[f959,f1525])).
fof(f1525,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f1482,f110])).
fof(f110,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X17] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X17)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f1482,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f110,f145])).
fof(f145,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X15,X16] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X16))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|8')).
fof(f959,plain,(
  ( ! [X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),'const.list.NIL_0')))) )),
  inference(superposition,[],[f120,f694])).
fof(f120,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X15] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X15))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|18')).
fof(f7132,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(unit_resulting_resolution,[],[f1611,f1624])).
fof(f1624,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f1579,f737])).
fof(f737,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f147,f104])).
fof(f147,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) <=> s('type.num.num',X15) = s('type.num.num',X16))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|19')).
fof(f1611,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(backward_demodulation,[],[f1579,f401])).
fof(f401,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f116,f305])).
fof(f305,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f293,f112])).
fof(f112,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X15] : s('type.num.num',X15) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|7')).
fof(f293,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f112,f121])).
fof(f121,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f84])).
fof(f116,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X15] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|14')).
fof(f11681,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f11680,f140])).
fof(f140,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X16,X15] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.arithmetic.ADD_SYM')).
fof(f11680,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f11505,f5576])).
fof(f5576,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f5560,f5210])).
fof(f5210,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))) )),
  inference(unit_resulting_resolution,[],[f5158,f1594])).
fof(f1594,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(backward_demodulation,[],[f1579,f124])).
fof(f124,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f86])).
fof(f5158,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f1584,f135])).
fof(f135,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X3,X2,X1,X0)),s('type.list.list'(X0),sK9(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X8,X11,X12] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12))) <=> ? [X13,X14] : (s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X13))) & s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X14))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X13),s('type.list.list'(X6),X14)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.list.LENGTH_EQ_SUM')).
fof(f1584,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f1579,f108])).
fof(f108,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X15] : s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|1')).
fof(f5560,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0)),s('type.list.list'(X0),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f1584,f136])).
fof(f136,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X3,X2,X1,X0)),s('type.list.list'(X0),sK9(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f96])).
fof(f11505,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f5576,f10942,f7171])).
fof(f7171,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) )),
  inference(backward_demodulation,[],[f7132,f1597])).
fof(f1597,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f1579,f158])).
fof(f158,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(forward_demodulation,[],[f130,f104])).
fof(f130,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X2,X1,X0)),s('type.list.list'(X0),sK5(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.quantHeuristics.LIST_LENGTH_|49||split|10')).
fof(f10942,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))))) | $spl0),
  inference(forward_demodulation,[],[f10941,f1583])).
fof(f1583,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f1579,f107])).
fof(f107,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X15] : s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.arithmetic.ADD|split|0')).
fof(f10941,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))))) | $spl0),
  inference(forward_demodulation,[],[f10384,f5576])).
fof(f10384,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl0),
  inference(unit_resulting_resolution,[],[f1578,f6246,f5576,f137])).
fof(f137,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f96])).
fof(f6246,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f6140,f134])).
fof(f134,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f96])).
fof(f12080,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f12033,f5577])).
fof(f5577,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),sK9('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0))))) )),
  inference(forward_demodulation,[],[f5559,f4385])).
fof(f4385,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK8('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0))) )),
  inference(unit_resulting_resolution,[],[f3671,f1594])).
fof(f3671,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f1583,f134])).
fof(f5559,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0)),s('type.list.list'(X0),sK9('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f1583,f136])).
fof(f12033,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))),sK0))))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f10942,f5577,f7171])).
fof(f13458,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f13390])).
fof(f13390,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | ($spl0 | $spl2)),
  inference(superposition,[],[f7255,f12934])).
fof(f12934,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK2,sK1,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f12081,f7173])).
fof(f7173,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f7132,f1599])).
fof(f1599,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f1579,f160])).
fof(f160,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f128,f104])).
fof(f128,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f7255,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(X0,X1,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0)) ) | $spl2),
  inference(backward_demodulation,[],[f7132,f6222])).
fof(f6222,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(X0,X1,sK0)))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1)))) ) | $spl2),
  inference(superposition,[],[f152,f1598])).
fof(f1598,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X2,X1,X0)),s('type.list.list'(X0),sK5(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f1579,f159])).
fof(f159,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X2,X1,X0)),s('type.list.list'(X0),sK5(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f129,f104])).
fof(f129,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X2,X1,X0)),s('type.list.list'(X0),sK5(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f13459,plain,(
  $false | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f13312])).
fof(f13312,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f12081,f12934,f7255])).
fof(f9206,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl121),
  inference(cnf_transformation,[],[f9206_D])).
fof(f9206_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl121),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl121])])).
fof(f9208,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl122),
  inference(cnf_transformation,[],[f9208_D])).
fof(f9208_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f9204,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f9203,f7256])).
fof(f7256,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(backward_demodulation,[],[f7132,f6245])).
fof(f6245,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f6140,f135])).
fof(f9203,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(forward_demodulation,[],[f9156,f7177])).
fof(f7177,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f7132,f1610])).
fof(f1610,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f1579,f400])).
fof(f400,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f116,f104])).
fof(f9156,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(superposition,[],[f7264,f7177])).
fof(f7264,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))) ) | $spl0),
  inference(backward_demodulation,[],[f7132,f6422])).
fof(f6422,plain,(
  ( ! [X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))) ) | $spl0),
  inference(forward_demodulation,[],[f6392,f1611])).
fof(f6392,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X20) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))) ) | $spl0),
  inference(superposition,[],[f147,f6245])).
fof(f9200,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl117),
  inference(cnf_transformation,[],[f9200_D])).
fof(f9200_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl117),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl117])])).
fof(f9202,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl118),
  inference(cnf_transformation,[],[f9202_D])).
fof(f9202_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f9198,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f9197,f7256])).
fof(f9197,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(forward_demodulation,[],[f9155,f7175])).
fof(f7175,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f7132,f1608])).
fof(f1608,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f1579,f331])).
fof(f331,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f113,f104])).
fof(f113,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X15] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X15))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|16')).
fof(f9155,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(superposition,[],[f7264,f7175])).
fof(f8645,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl113),
  inference(cnf_transformation,[],[f8645_D])).
fof(f8645_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl113),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl113])])).
fof(f8647,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl114),
  inference(cnf_transformation,[],[f8647_D])).
fof(f8647_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f8643,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f8642,f6246])).
fof(f8642,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(forward_demodulation,[],[f8630,f7177])).
fof(f8630,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(superposition,[],[f6329,f7177])).
fof(f6329,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))) ) | $spl0),
  inference(superposition,[],[f147,f6246])).
fof(f8533,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl109),
  inference(cnf_transformation,[],[f8533_D])).
fof(f8533_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl109),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl109])])).
fof(f8535,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl110),
  inference(cnf_transformation,[],[f8535_D])).
fof(f8535_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f8531,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f8530,f6246])).
fof(f8530,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(forward_demodulation,[],[f8490,f7175])).
fof(f8490,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(superposition,[],[f6329,f7175])).
fof(f7584,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl106),
  inference(cnf_transformation,[],[f7584_D])).
fof(f7584_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f287,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl31),
  inference(cnf_transformation,[],[f287_D])).
fof(f287_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f7531,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f3595,f7169])).
fof(f7169,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(backward_demodulation,[],[f7132,f1581])).
fof(f3595,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X24)))) )),
  inference(superposition,[],[f1592,f3365])).
fof(f3365,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f3364,f1583])).
fof(f3364,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f3289,f1583])).
fof(f3289,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f146,f1607])).
fof(f1607,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(backward_demodulation,[],[f1579,f305])).
fof(f146,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X15,X16] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|2')).
fof(f1592,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f1579,f120])).
fof(f7118,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl103),
  inference(cnf_transformation,[],[f7118_D])).
fof(f7118_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl103),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl103])])).
fof(f7120,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl104),
  inference(cnf_transformation,[],[f7120_D])).
fof(f7120_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f7116,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl0),
  inference(forward_demodulation,[],[f7115,f6140])).
fof(f7115,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f7087,f1613])).
fof(f1613,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f1579,f540])).
fof(f540,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f116,f401])).
fof(f7087,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(superposition,[],[f6268,f1610])).
fof(f6268,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl0),
  inference(superposition,[],[f147,f6140])).
fof(f7093,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl97),
  inference(cnf_transformation,[],[f7093_D])).
fof(f7093_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f7114,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl100),
  inference(cnf_transformation,[],[f7114_D])).
fof(f7114_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f7112,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f7111,f1610])).
fof(f7111,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(forward_demodulation,[],[f7086,f1613])).
fof(f7086,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f3595,f1610])).
fof(f7098,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl98),
  inference(cnf_transformation,[],[f7098_D])).
fof(f7098_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f7038,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f3595,f1610])).
fof(f7091,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl94),
  inference(cnf_transformation,[],[f7091_D])).
fof(f7091_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f7096,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f7035,f1607])).
fof(f7035,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f2003,f1610])).
fof(f2003,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) | s('type.num.num',X26) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f1982,f1607])).
fof(f1982,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) | s('type.num.num',X26) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f147,f1607])).
fof(f7095,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f7034,f1578])).
fof(f7034,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),'const.list.NIL_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f1675,f1610])).
fof(f1675,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),'const.list.NIL_0')))) )),
  inference(backward_demodulation,[],[f1579,f1548])).
fof(f1548,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),'const.list.NIL_0')))) )),
  inference(backward_demodulation,[],[f1525,f967])).
fof(f967,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),'const.list.NIL_0')))) )),
  inference(superposition,[],[f147,f694])).
fof(f7094,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f7033,f446])).
fof(f446,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(unit_resulting_resolution,[],[f385,f120])).
fof(f385,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f371,f103])).
fof(f103,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f32])).
fof(f32,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.prim_rec.PRE|split|0')).
fof(f371,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f113,f305])).
fof(f7033,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1626,f1610])).
fof(f1626,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) | s('type.num.num',X24) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f1579,f774])).
fof(f774,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) | s('type.num.num',X24) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f731,f305])).
fof(f731,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) | s('type.num.num',X24) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f147,f446])).
fof(f7032,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1592,f1610])).
fof(f7004,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl91),
  inference(cnf_transformation,[],[f7004_D])).
fof(f7004_D,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl91),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl91])])).
fof(f7006,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl92),
  inference(cnf_transformation,[],[f7006_D])).
fof(f7006_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f7002,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl0),
  inference(forward_demodulation,[],[f7001,f6140])).
fof(f7001,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f6973,f1614])).
fof(f1614,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f1579,f541])).
fof(f541,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f113,f401])).
fof(f6973,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(superposition,[],[f6268,f1608])).
fof(f6979,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl85),
  inference(cnf_transformation,[],[f6979_D])).
fof(f6979_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl85),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl85])])).
fof(f7000,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl88),
  inference(cnf_transformation,[],[f7000_D])).
fof(f7000_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f6998,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f6997,f1608])).
fof(f6997,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(forward_demodulation,[],[f6972,f1614])).
fof(f6972,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f3595,f1608])).
fof(f6984,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl86),
  inference(cnf_transformation,[],[f6984_D])).
fof(f6984_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f6924,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f3595,f1608])).
fof(f6977,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl82),
  inference(cnf_transformation,[],[f6977_D])).
fof(f6977_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f6982,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f6921,f1607])).
fof(f6921,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f2003,f1608])).
fof(f6981,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f6920,f1578])).
fof(f6920,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),'const.list.NIL_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f1675,f1608])).
fof(f6980,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f6919,f446])).
fof(f6919,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1626,f1608])).
fof(f6918,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1592,f1608])).
fof(f6794,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f6786,f6140])).
fof(f6786,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl2 | $spl6)),
  inference(superposition,[],[f6772,f140])).
fof(f6772,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl0 | $spl2 | $spl6)),
  inference(forward_demodulation,[],[f6769,f156])).
fof(f6769,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | ($spl0 | $spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f6691,f1598])).
fof(f6691,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK5(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0))))) ) | ($spl0 | $spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f6597,f152])).
fof(f6597,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(equality_resolution,[],[f6243])).
fof(f6243,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f5471,f6140])).
fof(f5471,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f5470,f156])).
fof(f5470,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f5433,f140])).
fof(f5433,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(superposition,[],[f1599,f156])).
fof(f6793,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f6785,f6140])).
fof(f6785,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl2 | $spl6)),
  inference(superposition,[],[f6772,f140])).
fof(f6792,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(trivial_inequality_removal,[],[f6791])).
fof(f6791,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl2 | $spl6)),
  inference(forward_demodulation,[],[f6790,f6140])).
fof(f6790,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl0 | $spl2 | $spl6)),
  inference(forward_demodulation,[],[f6783,f140])).
fof(f6783,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))))) | ($spl0 | $spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f6772,f147])).
fof(f6789,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(trivial_inequality_removal,[],[f6788])).
fof(f6788,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl2 | $spl6)),
  inference(forward_demodulation,[],[f6787,f6140])).
fof(f6787,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl0 | $spl2 | $spl6)),
  inference(forward_demodulation,[],[f6784,f140])).
fof(f6784,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))))) | ($spl0 | $spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f6772,f147])).
fof(f6608,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl78),
  inference(cnf_transformation,[],[f6608_D])).
fof(f6608_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f6610,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl81),
  inference(cnf_transformation,[],[f6610_D])).
fof(f6610_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl81),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl81])])).
fof(f6593,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(superposition,[],[f6243,f6245])).
fof(f6606,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl76),
  inference(cnf_transformation,[],[f6606_D])).
fof(f6606_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f6604,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl75),
  inference(cnf_transformation,[],[f6604_D])).
fof(f6604_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f6592,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(superposition,[],[f6243,f6246])).
fof(f6602,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl72),
  inference(cnf_transformation,[],[f6602_D])).
fof(f6602_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f6591,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(superposition,[],[f6243,f156])).
fof(f6237,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6223,f156])).
fof(f6223,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f6221])).
fof(f6221,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(superposition,[],[f152,f154])).
fof(f6224,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6205,f156])).
fof(f6205,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f154,f152])).
fof(f6206,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f156,f154,f152])).
fof(f6118,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6062,f1600])).
fof(f1600,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1),
  inference(backward_demodulation,[],[f1579,f161])).
fof(f161,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1),
  inference(forward_demodulation,[],[f151,f104])).
fof(f6062,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f140,f5743])).
fof(f5743,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f5742,f156])).
fof(f5742,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f5697,f3553])).
fof(f3553,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f3365,f147])).
fof(f5697,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f3553,f154,f1597])).
fof(f6117,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6061,f1600])).
fof(f6061,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f140,f5743])).
fof(f6116,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6059,f1600])).
fof(f6059,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5743,f140])).
fof(f6115,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6058,f1600])).
fof(f6058,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5743,f140])).
fof(f6114,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6113,f1619])).
fof(f1619,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1),
  inference(backward_demodulation,[],[f1579,f707])).
fof(f707,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f161,f147])).
fof(f6113,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f6056,f140])).
fof(f6056,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f5743,f148])).
fof(f148,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f97])).
fof(f6112,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6111,f1619])).
fof(f6111,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f6057,f140])).
fof(f6057,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f5743,f148])).
fof(f5692,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl70),
  inference(cnf_transformation,[],[f5692_D])).
fof(f5692_D,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f5669,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl53),
  inference(cnf_transformation,[],[f5669_D])).
fof(f5669_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f5662,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(superposition,[],[f5471,f1578])).
fof(f5691,plain,(
  ( ! [X10,X9] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X9),X10)),X10,X9),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X9))))) ) | $spl68),
  inference(cnf_transformation,[],[f5691_D])).
fof(f5691_D,plain,(
  ( ! [X10,X9] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X9),X10)),X10,X9),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X9))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f5690,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X9),X10)),X10,X9),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X9))))) ) | $spl6),
  inference(forward_demodulation,[],[f5661,f1578])).
fof(f5661,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X9),X10)),X10,X9),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X9))))) ) | $spl6),
  inference(superposition,[],[f5471,f5210])).
fof(f5689,plain,(
  ( ! [X8,X7] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(X7),X8)),'const.arithmetic.ZERO_0',X8,X7),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X7))))) ) | $spl66),
  inference(cnf_transformation,[],[f5689_D])).
fof(f5689_D,plain,(
  ( ! [X8,X7] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(X7),X8)),'const.arithmetic.ZERO_0',X8,X7),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X7))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f5688,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(X7),X8)),'const.arithmetic.ZERO_0',X8,X7),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X7))))) ) | $spl6),
  inference(forward_demodulation,[],[f5660,f1578])).
fof(f5660,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(X7),X8)),'const.arithmetic.ZERO_0',X8,X7),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X7))))) ) | $spl6),
  inference(superposition,[],[f5471,f4385])).
fof(f5687,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl64),
  inference(cnf_transformation,[],[f5687_D])).
fof(f5687_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f5685,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f5657,f1578])).
fof(f5657,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5471,f5524])).
fof(f5524,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0)) | $spl4),
  inference(superposition,[],[f5210,f5299])).
fof(f5299,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)) | $spl4),
  inference(unit_resulting_resolution,[],[f5214,f1594])).
fof(f5214,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f5158,f154])).
fof(f5684,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl62),
  inference(cnf_transformation,[],[f5684_D])).
fof(f5684_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f5682,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f5656,f1578])).
fof(f5656,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5471,f5520])).
fof(f5520,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0)) | $spl4),
  inference(superposition,[],[f5210,f4453])).
fof(f4453,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)) | $spl4),
  inference(unit_resulting_resolution,[],[f4389,f1594])).
fof(f4389,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(superposition,[],[f3671,f154])).
fof(f5681,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl60),
  inference(cnf_transformation,[],[f5681_D])).
fof(f5681_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f5679,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f5655,f1578])).
fof(f5655,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5471,f5299])).
fof(f5678,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl58),
  inference(cnf_transformation,[],[f5678_D])).
fof(f5678_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f5676,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f5654,f1578])).
fof(f5654,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5471,f5401])).
fof(f5401,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK9('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0)) | $spl4),
  inference(superposition,[],[f4385,f5299])).
fof(f5675,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl56),
  inference(cnf_transformation,[],[f5675_D])).
fof(f5675_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f5673,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f5653,f1578])).
fof(f5653,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5471,f4667])).
fof(f4667,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),sK0)) | $spl4),
  inference(superposition,[],[f4385,f4609])).
fof(f4609,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0)) | $spl4),
  inference(superposition,[],[f4385,f4453])).
fof(f5672,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl54),
  inference(cnf_transformation,[],[f5672_D])).
fof(f5672_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f5670,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f5652,f1578])).
fof(f5652,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.arithmetic.ZERO_0',sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5471,f4609])).
fof(f5667,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl50),
  inference(cnf_transformation,[],[f5667_D])).
fof(f5667_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f5665,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f5651,f1578])).
fof(f5651,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5(sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f5471,f4453])).
fof(f3987,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f3879,f102])).
fof(f102,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12',aHL_TRUTH)).
fof(f3879,plain,(
  ~p(s(bool,'T_0')) | $spl42),
  inference(backward_demodulation,[],[f3875,f105])).
fof(f105,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12',aHL_FALSITY)).
fof(f3878,plain,(
  ( ! [X23] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl48),
  inference(cnf_transformation,[],[f3878_D])).
fof(f3878_D,plain,(
  ( ! [X23] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f3877,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num'))) ) | $spl46),
  inference(cnf_transformation,[],[f3877_D])).
fof(f3877_D,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num'))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f3826,plain,(
  ( ! [X24,X23] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24,'type.num.num')) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(superposition,[],[f1182,f3260])).
fof(f3260,plain,(
  ( ! [X39,X40] : (s(bool,X40) = s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X39,'type.num.num')) | s(bool,'T_0') = s(bool,X40)) ) | $spl6),
  inference(subsumption_resolution,[],[f3141,f102])).
fof(f3141,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X39,'type.num.num')) | s(bool,X40) = s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X40)) ) | $spl6),
  inference(superposition,[],[f1003,f218])).
fof(f218,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f119,f119])).
fof(f119,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12',aHL_BOOL_CASES)).
fof(f1003,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f974,f156])).
fof(f974,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f132,f156])).
fof(f132,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK7(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X18,X19] : (? [X7] : (s(X6,X7) = s(X6,X19) & p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X7))))) <=> p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X19)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.bool.UNWIND_THM2')).
fof(f1182,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f1175,f111])).
fof(f111,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X15] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|20')).
fof(f1175,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f142,f305])).
fof(f142,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X15,X16] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',X16))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|22')).
fof(f3875,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(cnf_transformation,[],[f3875_D])).
fof(f3875_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f3863,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f3820])).
fof(f3820,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(superposition,[],[f119,f3260])).
fof(f3806,plain,(
  ( ! [X24,X23] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24,'type.num.num')) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(superposition,[],[f3260,f1182])).
fof(f3869,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num')) | s(bool,'T_0') = s(bool,X15)) ) | $spl6),
  inference(duplicate_literal_removal,[],[f3805])).
fof(f3805,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num')) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl6),
  inference(superposition,[],[f3260,f119])).
fof(f3876,plain,(
  ( ! [X2,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num'))) ) | $spl44),
  inference(cnf_transformation,[],[f3876_D])).
fof(f3876_D,plain,(
  ( ! [X2,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num'))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f3874,plain,(
  ( ! [X2,X0,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f3800])).
fof(f3800,plain,(
  ( ! [X2,X0,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(superposition,[],[f3260,f3260])).
fof(f1526,plain,(
  $false | $spl23),
  inference(subsumption_resolution,[],[f1525,f283])).
fof(f1524,plain,(
  $false | $spl23),
  inference(subsumption_resolution,[],[f1523,f283])).
fof(f1523,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f1481,f110])).
fof(f1481,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f145,f110])).
fof(f690,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl38),
  inference(cnf_transformation,[],[f690_D])).
fof(f690_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f692,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl41),
  inference(cnf_transformation,[],[f692_D])).
fof(f692_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f684,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl6),
  inference(superposition,[],[f124,f156])).
fof(f686,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl34),
  inference(cnf_transformation,[],[f686_D])).
fof(f686_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f688,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl37),
  inference(cnf_transformation,[],[f688_D])).
fof(f688_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f683,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl4),
  inference(superposition,[],[f124,f154])).
fof(f288,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl30),
  inference(cnf_transformation,[],[f288_D])).
fof(f288_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f290,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl33),
  inference(cnf_transformation,[],[f290_D])).
fof(f290_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f271,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f120,f104])).
fof(f286,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) | $spl28),
  inference(cnf_transformation,[],[f286_D])).
fof(f286_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f283,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl23),
  inference(cnf_transformation,[],[f283_D])).
fof(f283_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f270,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f120,f106])).
fof(f106,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X15] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|4')).
fof(f285,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X4)))) ) | $spl26),
  inference(cnf_transformation,[],[f285_D])).
fof(f285_D,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X4)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f268,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X4)))) )),
  inference(superposition,[],[f120,f110])).
fof(f284,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) | $spl24),
  inference(cnf_transformation,[],[f284_D])).
fof(f284_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f267,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) )),
  inference(superposition,[],[f120,f109])).
fof(f109,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X15] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|6')).
fof(f281,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl20),
  inference(cnf_transformation,[],[f281_D])).
fof(f281_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f266,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f120,f103])).
fof(f277,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f277_D])).
fof(f277_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f279,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(cnf_transformation,[],[f279_D])).
fof(f279_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f265,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f120,f157])).
fof(f157,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f115,f104])).
fof(f115,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X15] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.numeral.numeral_distrib|split|11')).
fof(f273,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl12),
  inference(cnf_transformation,[],[f273_D])).
fof(f273_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f275,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl15),
  inference(cnf_transformation,[],[f275_D])).
fof(f275_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f261,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(superposition,[],[f120,f156])).
fof(f224,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f224_D])).
fof(f224_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f226,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f226_D])).
fof(f226_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f223,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f119])).
fof(f150,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl0),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f156,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f99,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X3,X4] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f82])).
fof(f82,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f81])).
fof(f81,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(nnf_transformation,[],[f79])).
fof(f79,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <~> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|12','thm.quantHeuristics.LIST_LENGTH_|49||split|12')).
fof(f154,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl4),
  inference(cnf_transformation,[],[f154_D])).
fof(f154_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f100,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(cnf_transformation,[],[f83])).
fof(f151,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f152,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) | $spl2),
  inference(cnf_transformation,[],[f152_D])).
fof(f152_D,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f101,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f83])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 295
% Passive clauses: 1281
% Generated clauses: 13550
% Final active clauses: 170
% Final passive clauses: 542
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 92
% Trivial inequalities: 67
% Fw subsumption resolutions: 200
% Fw demodulations: 4771
% Bw demodulations: 391
% Condensations: 68
% 
% Simple tautologies: 52
% Equational tautologies: 32
% Forward subsumptions: 6628
% Fw demodulations to eq. taut.: 293
% Bw demodulations to eq. taut.: 22
% 
% Unit resulting resolution: 1567
% Forward superposition: 2821
% Backward superposition: 3230
% Self superposition: 79
% Equality factoring: 32
% Equality resolution: 16
% 
% Split clauses: 50
% Split components: 100
% SAT solver clauses: 1401
% SAT solver unit clauses: 258
% SAT solver binary clauses: 716
% 
% Sat splits: 50
% Sat splitting refutations: 18
% 
% Memory used [KB]: 8827
% Time elapsed: 0.412 s
% ------------------------------
% ------------------------------
% Success in time 1.74 s
