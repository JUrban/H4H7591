Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (46052)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1111
% Passive clauses: 7415
% Generated clauses: 37066
% Final active clauses: 947
% Final passive clauses: 5612
% Input formulas: 261
% Initial clauses: 606
% 
% Duplicate literals: 237
% Trivial inequalities: 66
% Fw subsumption resolutions: 1995
% Fw demodulations: 2727
% Bw demodulations: 161
% 
% Simple tautologies: 236
% Equational tautologies: 27
% Forward subsumptions: 24508
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 7176
% Factoring: 1278
% Forward superposition: 13995
% Backward superposition: 9100
% Self superposition: 50
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 268
% Split components: 537
% SAT solver clauses: 509
% SAT solver unit clauses: 13
% SAT solver binary clauses: 74
% 
% Sat splits: 268
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 509
% TWLsolver calls for satisfiability: 460
% 
% Memory used [KB]: 19829
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (46064)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 488
% Passive clauses: 3477
% Generated clauses: 19303
% Final active clauses: 273
% Final passive clauses: 1168
% Input formulas: 261
% Initial clauses: 606
% 
% Duplicate literals: 79
% Trivial inequalities: 52
% Fw subsumption resolutions: 1038
% Fw demodulations: 3107
% Bw demodulations: 1972
% Condensations: 33
% Global subsumptions: 24
% 
% Simple tautologies: 265
% Equational tautologies: 7
% Forward subsumptions: 7657
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 1951
% Factoring: 58
% Forward superposition: 2318
% Backward superposition: 3363
% Self superposition: 61
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 22
% Split components: 44
% SAT solver clauses: 3768
% SAT solver unit clauses: 672
% SAT solver binary clauses: 297
% SAT solver learnt clauses: 49
% SAT solver learnt literals: 14
% 
% Sat splits: 22
% Sat splitting refutations: 49
% 
% TWLsolver clauses: 3671
% TWLsolver calls for satisfiability: 3558
% 
% Memory used [KB]: 15095
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f68145,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1113,f1732,f1731,f1112,f1734,f1730,f4602,f4623,f4606,f4627,f4608,f4628,f4610,f4629,f4612,f4630,f4613,f4633,f4631,f4614,f4635,f4622,f4640,f4638,f6440,f6005,f6450,f5881,f4625,f6452,f47181,f47185,f47183,f48868,f48872,f48870,f54927,f54931,f54929,f61276,f61373,f61301,f68141])).
fof(f68141,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f68140,f1114])).
fof(f1114,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19',aHL_TRUTH)).
fof(f68140,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f68132,f61496])).
fof(f61496,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f1114,f1730,f1554])).
fof(f1554,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f678])).
fof(f678,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f677])).
fof(f677,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f606])).
fof(f606,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X27,X28] : ((p(s(bool,X27)) => p(s(bool,X28))) => ((p(s(bool,X28)) => p(s(bool,X27))) => s(bool,X27) = s(bool,X28)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.bool.IMP_ANTISYM_AX')).
fof(f68132,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl2),
  inference(unit_resulting_resolution,[],[f1732,f1767])).
fof(f1767,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK230(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK231(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK232(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK233(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK234(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK235(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK236(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK237(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK238(X1,X0)),s('type.list.list'(X0),sK229(X1,X0))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f1521,f1324])).
fof(f1324,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK230(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK231(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK232(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK233(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK234(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK235(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK236(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK237(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK238(X1,X0)),s('type.list.list'(X0),sK229(X1,X0)))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f860])).
fof(f860,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK230(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK231(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK232(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK233(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK234(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK235(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK236(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK237(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK238(X1,X0)),s('type.list.list'(X0),sK229(X1,X0))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK229,sK230,sK231,sK232,sK233,sK234,sK235,sK236,sK237,sK238])],[f859])).
fof(f859,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),X12)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f858])).
fof(f858,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f431])).
fof(f431,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(flattening,[],[f430])).
fof(f430,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.quantHeuristics.LIST_LENGTH_|49||48||split|18')).
fof(f1521,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f576])).
fof(f576,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X23,X24] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X23),s('type.num.num',X24))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num',X23)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.arithmetic.GREATER_EQ')).
fof(f61301,plain,(
  $false | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f1734,f1732])).
fof(f61373,plain,(
  $false | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f61372])).
fof(f61372,plain,(
  s('type.list.list'(sK10),sK11) != s('type.list.list'(sK10),sK11) | ($spl2 | $spl4)),
  inference(superposition,[],[f1732,f1734])).
fof(f61276,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f61275,f1735])).
fof(f1735,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f1122,f1114])).
fof(f1122,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f713])).
fof(f713,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f265])).
fof(f265,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f190])).
fof(f190,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.bool.NOT_CLAUSES|split|1')).
fof(f61275,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f61220,f2096])).
fof(f2096,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f1731,f1183])).
fof(f1183,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f717])).
fof(f717,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f322])).
fof(f322,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f321])).
fof(f321,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f197])).
fof(f197,axiom,(
  ! [X35] : (s(bool,'F_0') = s(bool,X35) <=> ~p(s(bool,X35)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.bool.EQ_CLAUSES|split|3')).
fof(f61220,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1734,f1768])).
fof(f1768,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) )),
  inference(backward_demodulation,[],[f1521,f1325])).
fof(f1325,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) )),
  inference(cnf_transformation,[],[f860])).
fof(f54929,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl41),
  inference(cnf_transformation,[],[f54929_D])).
fof(f54929_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f54931,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK42('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK43('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK44('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK45('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK46('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK47('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))))))) | $spl42),
  inference(cnf_transformation,[],[f54931_D])).
fof(f54931_D,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK42('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK43('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK44('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK45('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK46('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK47('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))))))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f54927,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK42('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK43('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK44('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK45('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK46('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK47('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(forward_demodulation,[],[f54912,f1734])).
fof(f54912,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12))))))))))))))))))) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK42('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK43('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK44('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK45('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK46('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK47('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))))))) | $spl4),
  inference(superposition,[],[f1266,f1734])).
fof(f1266,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK42(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK43(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK44(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK45(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK46(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK47(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))) )),
  inference(cnf_transformation,[],[f777])).
fof(f777,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK42(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK43(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK44(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK45(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK46(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK47(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))) & (! [X2,X3,X4,X5,X6,X7] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK42,sK43,sK44,sK45,sK46,sK47])],[f776])).
fof(f776,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X8,X9,X10,X11,X12,X13] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))) & (! [X2,X3,X4,X5,X6,X7] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f775])).
fof(f775,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X2,X3,X4,X5,X6,X7] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))) & (! [X2,X3,X4,X5,X6,X7] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(nnf_transformation,[],[f373])).
fof(f373,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4,X5,X6,X7] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))),
  inference(flattening,[],[f372])).
fof(f372,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4,X5,X6,X7] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))),
  inference(rectify,[],[f176])).
fof(f176,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10,X11,X12,X13,X14] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.quantHeuristics.LIST_LENGTH_7|split|15')).
fof(f48870,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl37),
  inference(cnf_transformation,[],[f48870_D])).
fof(f48870_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f48872,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK32('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK33('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK34('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK35('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK36('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))))) | $spl38),
  inference(cnf_transformation,[],[f48872_D])).
fof(f48872_D,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK32('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK33('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK34('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK35('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK36('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f48868,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK32('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK33('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK34('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK35('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK36('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(forward_demodulation,[],[f48853,f1734])).
fof(f48853,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12))))))))))))))))))) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK32('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK33('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK34('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK35('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK36('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))))) | $spl4),
  inference(superposition,[],[f1262,f1734])).
fof(f1262,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK32(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK33(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK34(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK35(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK36(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))) )),
  inference(cnf_transformation,[],[f771])).
fof(f771,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK32(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK33(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK34(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK35(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK36(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))) & (! [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK32,sK33,sK34,sK35,sK36])],[f770])).
fof(f770,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0')))))))))))) & (! [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f769])).
fof(f769,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0')))))))))))) & (! [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(nnf_transformation,[],[f369])).
fof(f369,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))),
  inference(flattening,[],[f368])).
fof(f368,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))),
  inference(rectify,[],[f148])).
fof(f148,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10,X11,X12,X13] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.quantHeuristics.LIST_LENGTH_5|split|1')).
fof(f47183,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl33),
  inference(cnf_transformation,[],[f47183_D])).
fof(f47183_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f47185,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK24('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK25('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK26('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK27('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))) | $spl34),
  inference(cnf_transformation,[],[f47185_D])).
fof(f47185_D,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK24('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK25('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK26('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK27('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f47181,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK24('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK25('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK26('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK27('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(forward_demodulation,[],[f47166,f1734])).
fof(f47166,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12))))))))))))))))))) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK24('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK25('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK26('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK27('const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))),sK10)),s('type.list.list'(sK10),'const.list.NIL_0'))))))))) | $spl4),
  inference(superposition,[],[f1258,f1734])).
fof(f1258,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))) )),
  inference(cnf_transformation,[],[f765])).
fof(f765,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))) & (! [X2,X3,X4,X5] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.NIL_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24,sK25,sK26,sK27])],[f764])).
fof(f764,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0')))))))))) & (! [X2,X3,X4,X5] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.NIL_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f763])).
fof(f763,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X2,X3,X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.NIL_0')))))))))) & (! [X2,X3,X4,X5] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.NIL_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(nnf_transformation,[],[f365])).
fof(f365,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.NIL_0'))))))))))),
  inference(flattening,[],[f364])).
fof(f364,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.NIL_0'))))))))))),
  inference(rectify,[],[f164])).
fof(f164,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10,X11,X12] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.NIL_0'))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.quantHeuristics.LIST_LENGTH_4|split|0')).
fof(f6452,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24)))))))) ) | $spl30),
  inference(cnf_transformation,[],[f6452_D])).
fof(f6452_D,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24)))))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f4625,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl9),
  inference(cnf_transformation,[],[f4625_D])).
fof(f4625_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f5881,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24)))))))) )),
  inference(superposition,[],[f1186,f1155])).
fof(f1155,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f297])).
fof(f297,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X23] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_distrib|split|9')).
fof(f1186,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f719])).
fof(f719,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f325])).
fof(f325,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X23] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X23))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_distrib|split|17')).
fof(f6450,plain,(
  ( ! [X25] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))))))) ) | $spl28),
  inference(cnf_transformation,[],[f6450_D])).
fof(f6450_D,plain,(
  ( ! [X25] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f6005,plain,(
  ( ! [X25] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))))))) )),
  inference(superposition,[],[f1186,f1156])).
fof(f1156,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f298])).
fof(f298,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X23] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_distrib|split|10')).
fof(f6440,plain,(
  $false | $spl9),
  inference(subsumption_resolution,[],[f6439,f1114])).
fof(f6439,plain,(
  ~p(s(bool,'T_0')) | $spl9),
  inference(backward_demodulation,[],[f6409,f4990])).
fof(f4990,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl9),
  inference(unit_resulting_resolution,[],[f4653,f1192])).
fof(f1192,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f722])).
fof(f722,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f328])).
fof(f328,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X23] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X23)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X23))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_distrib|split|30')).
fof(f4653,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | $spl9),
  inference(unit_resulting_resolution,[],[f4625,f1187])).
fof(f1187,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f719])).
fof(f6409,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f1521,f1140])).
fof(f1140,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f282])).
fof(f282,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f209])).
fof(f209,axiom,(
  ! [X23] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X23)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_lte|split|0')).
fof(f4638,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl24),
  inference(cnf_transformation,[],[f4638_D])).
fof(f4638_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f4640,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl27),
  inference(cnf_transformation,[],[f4640_D])).
fof(f4640_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f4622,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f1186,f1120])).
fof(f1120,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f38])).
fof(f38,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_distrib|split|13')).
fof(f4635,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl22),
  inference(cnf_transformation,[],[f4635_D])).
fof(f4635_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f4614,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f1186,f1117])).
fof(f1117,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f39])).
fof(f39,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.prim_rec.PRE|split|0')).
fof(f4631,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) ) | $spl18),
  inference(cnf_transformation,[],[f4631_D])).
fof(f4631_D,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f4633,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl21),
  inference(cnf_transformation,[],[f4633_D])).
fof(f4633_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f4613,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1186,f1739])).
fof(f1739,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f1161,f1120])).
fof(f1161,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f303])).
fof(f303,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X23] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_distrib|split|11')).
fof(f4630,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X9)))) ) | $spl16),
  inference(cnf_transformation,[],[f4630_D])).
fof(f4630_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X9)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f4612,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X9)))) )),
  inference(superposition,[],[f1186,f1138])).
fof(f1138,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f280])).
fof(f280,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X32] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X32),s('type.num.num',X32)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f4629,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) | $spl14),
  inference(cnf_transformation,[],[f4629_D])).
fof(f4629_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f4610,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) )),
  inference(superposition,[],[f1186,f1129])).
fof(f1129,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f271])).
fof(f271,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X23] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X23)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_distrib|split|6')).
fof(f4628,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) ) | $spl12),
  inference(cnf_transformation,[],[f4628_D])).
fof(f4628_D,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f4608,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f1186,f1136])).
fof(f1136,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f278])).
fof(f278,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X23] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X23)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.arithmetic.MULT|split|0')).
fof(f4627,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) ) | $spl10),
  inference(cnf_transformation,[],[f4627_D])).
fof(f4627_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f4606,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1186,f1131])).
fof(f1131,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f273])).
fof(f273,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X23] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X23),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.numeral.numeral_distrib|split|4')).
fof(f4623,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl6),
  inference(cnf_transformation,[],[f4623_D])).
fof(f4623_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f4602,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(superposition,[],[f1186,f1128])).
fof(f1128,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f251])).
fof(f251,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.list.LENGTH|split|0')).
fof(f1730,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl0),
  inference(cnf_transformation,[],[f1730_D])).
fof(f1730_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1734,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12))))))))))))))))))) | $spl4),
  inference(cnf_transformation,[],[f1734_D])).
fof(f1734_D,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12))))))))))))))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1112,plain,(
  s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(cnf_transformation,[],[f712])).
fof(f712,plain,(
  (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(sK10),sK11) = s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK14),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK15),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK16),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK17),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK18),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK19),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK20),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK21),s('type.list.list'(sK10),sK12)))))))))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(sK10),sK11) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X3),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X4),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X5),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X6),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X7),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X8),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X9),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X10),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X11),s('type.list.list'(sK10),X2))))))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f711])).
fof(f711,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),X12)))))))))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))))),
  inference(rectify,[],[f710])).
fof(f710,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))))),
  inference(nnf_transformation,[],[f659])).
fof(f659,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <~> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8))))))))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|19','thm.quantHeuristics.LIST_LENGTH_|49||48||split|19')).
fof(f1731,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl1),
  inference(cnf_transformation,[],[f1731_D])).
fof(f1731_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f1732,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X11,X9] : (s('type.list.list'(sK10),sK11) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X3),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X4),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X5),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X6),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X7),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X8),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X9),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X10),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X11),s('type.list.list'(sK10),X2)))))))))))))))))))) ) | $spl2),
  inference(cnf_transformation,[],[f1732_D])).
fof(f1732_D,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X11,X9] : (s('type.list.list'(sK10),sK11) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X3),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X4),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X5),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X6),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X7),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X8),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X9),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X10),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X11),s('type.list.list'(sK10),X2)))))))))))))))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f1113,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X11,X9] : (s('type.list.list'(sK10),sK11) != s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X3),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X4),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X5),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X6),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X7),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X8),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X9),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X10),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,X11),s('type.list.list'(sK10),X2))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) )),
  inference(cnf_transformation,[],[f712])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1142
% Passive clauses: 11480
% Generated clauses: 66459
% Final active clauses: 671
% Final passive clauses: 6104
% Input formulas: 261
% Initial clauses: 606
% Discarded non-redundant clauses: 3824
% 
% Duplicate literals: 6
% Trivial inequalities: 29
% Fw subsumption resolutions: 539
% Fw demodulations: 21393
% Bw demodulations: 411
% Condensations: 19
% Global subsumptions: 3
% 
% Simple tautologies: 149
% Equational tautologies: 33
% Forward subsumptions: 32453
% Fw demodulations to eq. taut.: 222
% Bw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 10367
% Factoring: 2
% Forward superposition: 25350
% Backward superposition: 7572
% Self superposition: 97
% Equality factoring: 2
% Equality resolution: 26
% 
% Split clauses: 15
% Split components: 30
% SAT solver clauses: 11520
% SAT solver unit clauses: 1452
% SAT solver binary clauses: 8771
% 
% Sat splits: 15
% Sat splitting refutations: 5
% 
% Memory used [KB]: 105925
% Time elapsed: 5.039 s
% ------------------------------
% ------------------------------
% Success in time 6.38 s
