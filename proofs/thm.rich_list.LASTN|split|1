Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f15091,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f15080])).
fof(f15080,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))))) != s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3)))))),
  inference(superposition,[],[f65,f10176])).
fof(f10176,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.list.list'(X15),'const.list.SNOC_2'(s(X15,X17),s('type.list.list'(X15),'const.rich_list.LASTN_2'(s('type.num.num',X16),s('type.list.list'(X15),X18))))) = s('type.list.list'(X15),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'(X15),'const.list.SNOC_2'(s(X15,X17),s('type.list.list'(X15),X18)))))) )),
  inference(forward_demodulation,[],[f10153,f1609])).
fof(f1609,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.list.list'(X2),'const.list.SNOC_2'(s(X2,X5),s('type.list.list'(X2),'const.rich_list.LASTN_2'(s('type.num.num',X3),s('type.list.list'(X2),X4))))) = s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X5),s('type.list.list'(X2),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),X4)))))))))) )),
  inference(forward_demodulation,[],[f1559,f92])).
fof(f92,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X10] : ! [X8,X9] : s('type.list.list'(X10),'const.list.SNOC_2'(s(X10,X8),s('type.list.list'(X10),X9))) = s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),X9),s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X8),s('type.list.list'(X10),'const.list.NIL_0')))))),
  file('thm.rich_list.LASTN|split|1','thm.list.SNOC_APPEND')).
fof(f1559,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X5),s('type.list.list'(X2),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(X2),'const.list.REVERSE_1'(s('type.list.list'(X2),X4))))))))) = s('type.list.list'(X2),'const.list.APPEND_2'(s('type.list.list'(X2),'const.rich_list.LASTN_2'(s('type.num.num',X3),s('type.list.list'(X2),X4))),s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X5),s('type.list.list'(X2),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f94,f91])).
fof(f91,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X10] : ! [X7,X13] : s('type.list.list'(X10),'const.rich_list.LASTN_2'(s('type.num.num',X7),s('type.list.list'(X10),X13))) = s('type.list.list'(X10),'const.list.REVERSE_1'(s('type.list.list'(X10),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X10),'const.list.REVERSE_1'(s('type.list.list'(X10),X13)))))))),
  file('thm.rich_list.LASTN|split|1','thm.rich_list.LASTN_def')).
fof(f94,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X10] : ! [X12,X11] : s('type.list.list'(X10),'const.list.REVERSE_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X12),s('type.list.list'(X10),X11))))) = s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),'const.list.REVERSE_1'(s('type.list.list'(X10),X11))),s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X12),s('type.list.list'(X10),'const.list.NIL_0')))))),
  file('thm.rich_list.LASTN|split|1','thm.list.REVERSE_DEF|split|1')).
fof(f10153,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.list.list'(X15),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'(X15),'const.list.SNOC_2'(s(X15,X17),s('type.list.list'(X15),X18))))) = s('type.list.list'(X15),'const.list.REVERSE_1'(s('type.list.list'(X15),'const.list.CONS_2'(s(X15,X17),s('type.list.list'(X15),'const.list.TAKE_2'(s('type.num.num',X16),s('type.list.list'(X15),'const.list.REVERSE_1'(s('type.list.list'(X15),X18)))))))))) )),
  inference(superposition,[],[f91,f2949])).
fof(f2949,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))))) )),
  inference(superposition,[],[f95,f93])).
fof(f93,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X10] : ! [X8,X9] : s('type.list.list'(X10),'const.list.REVERSE_1'(s('type.list.list'(X10),'const.list.SNOC_2'(s(X10,X8),s('type.list.list'(X10),X9))))) = s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X8),s('type.list.list'(X10),'const.list.REVERSE_1'(s('type.list.list'(X10),X9)))))),
  file('thm.rich_list.LASTN|split|1','thm.list.REVERSE_SNOC')).
fof(f95,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X10] : ! [X7,X8,X9] : s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X8),s('type.list.list'(X10),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X10),X9))))) = s('type.list.list'(X10),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X8),s('type.list.list'(X10),X9)))))),
  file('thm.rich_list.LASTN|split|1','thm.rich_list.TAKE|split|1')).
fof(f65,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))))) != s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK2),s('type.list.list'(sK0),sK3)))))),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))))) != s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK2),s('type.list.list'(sK0),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))))) != s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X8),s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),X9))))) = s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X8),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X8),s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),X9))))) = s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X8),s('type.list.list'(X6),X9)))))),
  file('thm.rich_list.LASTN|split|1','thm.rich_list.LASTN|split|1')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 78
% Passive clauses: 1708
% Generated clauses: 14452
% Final active clauses: 72
% Final passive clauses: 1559
% Input formulas: 20
% Initial clauses: 32
% 
% Duplicate literals: 961
% Trivial inequalities: 201
% Fw subsumption resolutions: 1879
% Fw demodulations: 570
% Bw demodulations: 4
% 
% Simple tautologies: 319
% Equational tautologies: 98
% Forward subsumptions: 6799
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 27
% Forward superposition: 6153
% Backward superposition: 3981
% Self superposition: 362
% Equality factoring: 274
% Equality resolution: 11
% 
% Split clauses: 666
% Split components: 1338
% SAT solver clauses: 1978
% SAT solver unit clauses: 244
% SAT solver binary clauses: 557
% 
% Sat splits: 666
% 
% TWLsolver clauses: 1974
% TWLsolver calls for satisfiability: 79
% 
% Memory used [KB]: 7803
% Time elapsed: 0.436 s
% ------------------------------
% ------------------------------
% Success in time 0.439 s
