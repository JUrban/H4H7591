Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f340,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f339,f331,f57,f91,f89,f58,f92,f90])).
fof(f90,plain,(
  s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) != s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK3),s(sK0,sK4))) | $spl1),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) != s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK3),s(sK0,sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f92,plain,(
  s(sK1,sK2) != s(sK1,sK3) | $spl3),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  s(sK1,sK2) != s(sK1,sK3) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f58,plain,(
  s(sK1,sK2) != s(sK1,sK3) | s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) != s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK3),s(sK0,sK4)))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  (s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) = s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK3),s(sK0,sK4))) | s(sK1,sK2) = s(sK1,sK3)) & (s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) != s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK3),s(sK0,sK4))) | s(sK1,sK2) != s(sK1,sK3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2,X3,X4] : ((s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X4))) = s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X3),s(X0,X4))) | s(X1,X2) = s(X1,X3)) & (s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X4))) != s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X3),s(X0,X4))) | s(X1,X2) != s(X1,X3)))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X4))) = s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X3),s(X0,X4))) <~> s(X1,X2) = s(X1,X3))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X4))) = s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X3),s(X0,X4))) <=> s(X1,X2) = s(X1,X3))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X4))) = s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X3),s(X0,X4))) <=> s(X1,X2) = s(X1,X3))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (s('type.pair.prod'(X7,X6),'const.pair.,_2'(s(X7,X8),s(X6,X10))) = s('type.pair.prod'(X7,X6),'const.pair.,_2'(s(X7,X9),s(X6,X10))) <=> s(X7,X8) = s(X7,X9))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (s('type.pair.prod'(X7,X6),'const.pair.,_2'(s(X7,X8),s(X6,X10))) = s('type.pair.prod'(X7,X6),'const.pair.,_2'(s(X7,X9),s(X6,X10))) <=> s(X7,X8) = s(X7,X9))),
  file('thm.quantHeuristics.PAIR_EQ_SIMPLE_EXPAND|split|1','thm.quantHeuristics.PAIR_EQ_SIMPLE_EXPAND|split|1')).
fof(f89,plain,(
  s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) = s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK3),s(sK0,sK4))) | $spl0),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) = s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK3),s(sK0,sK4))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f91,plain,(
  s(sK1,sK2) = s(sK1,sK3) | $spl2),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s(sK1,sK2) = s(sK1,sK3) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f57,plain,(
  s(sK1,sK2) = s(sK1,sK3) | s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) = s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK3),s(sK0,sK4)))),
  inference(cnf_transformation,[],[f41])).
fof(f331,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f330])).
fof(f330,plain,(
  s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) != s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f90,f91])).
fof(f339,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f338,f92])).
fof(f338,plain,(
  s(sK1,sK2) = s(sK1,sK3) | $spl0),
  inference(forward_demodulation,[],[f333,f81])).
fof(f81,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7,X6] : ! [X10,X9] : s(X6,X10) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X10),s(X7,X9)))))),
  file('thm.quantHeuristics.PAIR_EQ_SIMPLE_EXPAND|split|1','thm.pair.FST')).
fof(f333,plain,(
  s(sK1,sK3) = s(sK1,'const.pair.FST_1'(s('type.pair.prod'(sK1,sK0),'const.pair.,_2'(s(sK1,sK2),s(sK0,sK4))))) | $spl0),
  inference(superposition,[],[f81,f89])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 13
% Passive clauses: 50
% Generated clauses: 266
% Final active clauses: 11
% Final passive clauses: 29
% Input formulas: 16
% Initial clauses: 30
% 
% Duplicate literals: 38
% Trivial inequalities: 4
% Fw subsumption resolutions: 1
% Fw demodulations: 6
% 
% Simple tautologies: 27
% Equational tautologies: 15
% Forward subsumptions: 116
% 
% Binary resolution: 3
% Forward superposition: 49
% Backward superposition: 73
% Self superposition: 28
% Equality factoring: 26
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 16
% SAT solver unit clauses: 5
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 7
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 14
% TWLsolver calls for satisfiability: 7
% 
% Memory used [KB]: 767
% Time elapsed: 0.016 s
% ------------------------------
% ------------------------------
% Success in time 0.018 s
