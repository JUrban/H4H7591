Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f95,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f82,f90,f88,f86,f84,f55,f83,f79,f85,f80,f87,f81,f89])).
fof(f89,plain,(
  p(s(bool,sK3)) | $spl6),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  p(s(bool,sK3)) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f81,plain,(
  p(s(bool,sK3))),
  inference(duplicate_literal_removal,[],[f53])).
fof(f53,plain,(
  p(s(bool,sK3)) | p(s(bool,sK3))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) & p(s(bool,'T_0')) & p(s(bool,sK3))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) & p(s(bool,sK3)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) | ~p(s(bool,'T_0')) | ~p(s(bool,sK3)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) | ~p(s(bool,sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f28])).
fof(f28,plain,(
  ? [X0,X1,X2,X3] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) & p(s(bool,'T_0')) & p(s(bool,X3))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) & p(s(bool,X3)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,'T_0')) | ~p(s(bool,X3)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,X3))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ? [X0,X1,X2,X3] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) & p(s(bool,'T_0')) & p(s(bool,X3))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) & p(s(bool,X3)))) & ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,'T_0')) | ~p(s(bool,X3))) | (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,X3)))))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) & p(s(bool,'T_0')) & p(s(bool,X3))) <~> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) & p(s(bool,X3))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1,X2,X3] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) & p(s(bool,'T_0')) & p(s(bool,X3))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) & p(s(bool,X3))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) & p(s(bool,'T_0')) & p(s(bool,X9))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) & p(s(bool,X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) & p(s(bool,'T_0')) & p(s(bool,X9))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) & p(s(bool,X9))))),
  file('thm.Omega.eval_step_extra|49|','thm.Omega.eval_step_extra|49|')).
fof(f87,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) | $spl4),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f80,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2))))),
  inference(duplicate_literal_removal,[],[f47])).
fof(f47,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2))))),
  inference(cnf_transformation,[],[f29])).
fof(f85,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl2),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f79,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(duplicate_literal_removal,[],[f42])).
fof(f42,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f29])).
fof(f83,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f55,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.Omega.eval_step_extra|49|',aHL_TRUTH)).
fof(f84,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(cnf_transformation,[],[f84_D])).
fof(f84_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f86,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl3),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f88,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) | $spl5),
  inference(cnf_transformation,[],[f88_D])).
fof(f88_D,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f90,plain,(
  ~p(s(bool,sK3)) | $spl7),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ~p(s(bool,sK3)) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f82,plain,(
  ~p(s(bool,sK3)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'T_0'))),
  inference(duplicate_literal_removal,[],[f54])).
fof(f54,plain,(
  ~p(s(bool,sK3)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,sK3)) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK2)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f29])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 3
% Generated clauses: 41
% Final passive clauses: 3
% Input formulas: 12
% Initial clauses: 35
% 
% Duplicate literals: 7
% Trivial inequalities: 1
% 
% Simple tautologies: 11
% Equational tautologies: 1
% 
% Split clauses: 14
% Split components: 30
% SAT solver clauses: 21
% SAT solver unit clauses: 6
% SAT solver binary clauses: 13
% SAT solver learnt clauses: 1
% 
% Sat splits: 14
% 
% TWLsolver clauses: 20
% TWLsolver calls for satisfiability: 1
% 
% Memory used [KB]: 639
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 0.015 s
