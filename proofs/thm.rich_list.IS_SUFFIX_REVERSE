Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f542,plain,(
  $false),
  inference(subsumption_resolution,[],[f22,f440])).
fof(f440,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) = s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))) )),
  inference(superposition,[],[f308,f26])).
fof(f26,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9] : s('type.list.list'(X6),X9) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X9)))))),
  file('thm.rich_list.IS_SUFFIX_REVERSE','thm.list.REVERSE_REVERSE')).
fof(f308,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))))) = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))) )),
  inference(superposition,[],[f27,f26])).
fof(f27,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2] : s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8,X7] : s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X6),X8),s('type.list.list'(X6),X7))) = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.IS_SUFFIX_REVERSE','thm.rich_list.IS_PREFIX_REVERSE')).
fof(f22,plain,(
  s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2))) != s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2))) != s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2] : s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2] : s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0] : ! [X1,X2] : s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) = s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) = s(bool,'const.rich_list.IS_SUFFIX_2'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7)))))),
  file('thm.rich_list.IS_SUFFIX_REVERSE','thm.rich_list.IS_SUFFIX_REVERSE')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 26
% Passive clauses: 117
% Generated clauses: 510
% Final active clauses: 15
% Final passive clauses: 77
% Input formulas: 7
% Initial clauses: 7
% 
% Duplicate literals: 67
% Trivial inequalities: 8
% Fw subsumption resolutions: 13
% Fw demodulations: 32
% Bw demodulations: 5
% 
% Simple tautologies: 24
% Equational tautologies: 15
% Forward subsumptions: 198
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 6
% Forward superposition: 161
% Backward superposition: 131
% Self superposition: 29
% Equality factoring: 28
% Equality resolution: 1
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 26
% SAT solver unit clauses: 2
% SAT solver binary clauses: 15
% 
% Sat splits: 11
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 26
% TWLsolver calls for satisfiability: 9
% 
% Memory used [KB]: 895
% Time elapsed: 0.023 s
% ------------------------------
% ------------------------------
% Success in time 0.031 s
