Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (81996)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 251
% Passive clauses: 4396
% Generated clauses: 21058
% Final active clauses: 190
% Final passive clauses: 3888
% Input formulas: 14
% Initial clauses: 30
% 
% Duplicate literals: 635
% Trivial inequalities: 367
% Fw subsumption resolutions: 2130
% Fw demodulations: 5409
% Bw demodulations: 57
% 
% Simple tautologies: 257
% Equational tautologies: 41
% Forward subsumptions: 7203
% 
% Binary resolution: 260
% Factoring: 1
% Forward superposition: 5439
% Backward superposition: 6216
% Self superposition: 153
% Equality factoring: 96
% Equality resolution: 31
% 
% Split clauses: 556
% Split components: 1124
% SAT solver clauses: 866
% SAT solver unit clauses: 11
% SAT solver binary clauses: 50
% 
% Sat splits: 556
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 866
% TWLsolver calls for satisfiability: 174
% 
% Memory used [KB]: 14328
% Time elapsed: 0.630 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (82013)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 142
% Passive clauses: 969
% Generated clauses: 11572
% Final active clauses: 116
% Final passive clauses: 623
% Input formulas: 14
% Initial clauses: 30
% 
% Duplicate literals: 866
% Trivial inequalities: 160
% Fw subsumption resolutions: 853
% Fw demodulations: 982
% Bw demodulations: 224
% Condensations: 1752
% 
% Simple tautologies: 182
% Equational tautologies: 56
% Forward subsumptions: 4625
% 
% Binary resolution: 88
% Factoring: 1
% Forward superposition: 2312
% Backward superposition: 3036
% Self superposition: 178
% Equality factoring: 146
% Equality resolution: 28
% 
% Split clauses: 178
% Split components: 356
% SAT solver clauses: 1189
% SAT solver unit clauses: 27
% SAT solver binary clauses: 49
% 
% Sat splits: 178
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1189
% TWLsolver calls for satisfiability: 284
% 
% Memory used [KB]: 10874
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f7450,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f60,f91,f90,f59,f93,f58,f95,f89,f102,f105,f103,f122,f126,f124,f134,f169,f174,f172,f170,f178,f176,f241,f245,f243,f246,f249,f248,f331,f335,f333,f336,f339,f338,f371,f374,f373,f422,f428,f426,f424,f431,f429,f453,f456,f455,f466,f469,f468,f576,f618,f616,f983,f1040,f1038,f1701,f1704,f1703,f1705,f1708,f1707,f1709,f1712,f1711,f1713,f1716,f1687,f1715,f1721,f1722,f1725,f1724,f2830,f2839,f2831,f2832,f2833,f2843,f2836,f2834,f2842,f2837,f2840,f3363,f3366,f3390,f3388,f4234,f4238,f4236,f4239,f4243,f4244,f4248,f4205,f4246,f4254,f4206,f4241,f4256,f4258,f4261,f4213,f4260,f4262,f4357,f4414,f4362,f4416,f4418,f4427,f4431,f4429,f4432,f4436,f4434,f4437,f4441,f4442,f4446,f4395,f4444,f4452,f4396,f4439,f4454,f4456,f4459,f4403,f4458,f4460,f4624,f4628,f4626,f4629,f4633,f4634,f4638,f4595,f4636,f4644,f4596,f4631,f4646,f4648,f4651,f4603,f4650,f4652,f4997,f4999,f5000,f5001,f5002,f4988,f5003,f5004,f5005,f5006,f4998,f4972,f5011,f4971,f5012,f4970,f5013,f4969,f5014,f4968,f5015,f4961,f5022,f4956,f5023,f4955,f5024,f5032,f5034,f5033,f123,f5098,f2356,f5103,f5101,f2068,f5106,f5104,f5627,f5631,f5601,f5629,f5635,f5790,f5839,f5837,f5791,f5843,f5841,f5852,f5856,f5821,f5854,f5860,f6010,f6060,f6058,f6011,f6064,f6062,f6073,f6077,f6041,f6075,f6081,f6105,f6155,f6153,f6164,f6168,f6135,f6166,f6172,f6300,f6359,f6301,f6363,f6302,f6361,f6365,f6374,f6378,f6325,f6376,f6382,f6529,f6536,f6530,f6538,f6540,f6531,f6544,f6542,f6532,f6548,f6546,f6552,f6578,f6592,f6593,f6594,f6595,f6596,f6597,f6598,f6599,f6600,f6601,f6602,f6603,f6604,f6605,f6606,f6607,f6608,f6609,f6610,f6611,f6612,f6613,f6614,f6615,f6616,f6617,f6618,f6619,f6620,f6621,f6622,f6623,f6624,f6625,f6626,f6627,f6628,f6629,f6630,f6631,f6632,f6633,f6634,f6635,f6636,f6637,f6638,f6639,f6640,f6641,f6642,f6643,f6644,f6645,f6646,f6647,f6648,f6649,f6650,f6651,f6652,f6653,f6654,f6655,f6656,f6657,f6658,f6659,f6660,f6661,f6662,f6663,f6664,f6665,f6666,f6667,f6668,f6669,f6670,f6671,f6672,f6673,f6674,f6675,f6676,f6677,f6678,f6679,f6680,f6681,f6682,f6683,f6684,f6685,f6686,f6687,f6688,f6689,f6690,f6691,f6692,f6693,f6694,f6695,f6696,f6697,f6698,f6699,f6700,f6701,f6702,f6703,f6704,f6705,f6973,f6975,f6974,f7193,f7228,f7194,f7232,f7195,f7230,f7234,f7449])).
fof(f7449,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(equality_resolution,[],[f7419])).
fof(f7419,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))) ) | ($spl1 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f95,f93,f7048,f80])).
fof(f80,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X3,X2,X1,X0)),s('type.list.list'(X0),sK9(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X8,X21,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))) <=> ? [X9,X10] : (s('type.num.num',X21) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.num.num',X22) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10)))))),
  file('thm.quantHeuristics.LENGTH_LE_NUM','thm.list.LENGTH_EQ_SUM')).
fof(f7048,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f90,f86])).
fof(f86,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK10(X1,X0))))) & (! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10])],[f55])).
fof(f55,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ? [X3] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X3)))) & (! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(rectify,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ? [X2] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2)))) & (! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> ? [X2] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X11,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X7)))) <=> ? [X12] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12))))),
  file('thm.quantHeuristics.LENGTH_LE_NUM','thm.arithmetic.LESS_EQ_EXISTS')).
fof(f7234,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl294),
  inference(cnf_transformation,[],[f7234_D])).
fof(f7234_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl294])])).
fof(f7230,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl291),
  inference(cnf_transformation,[],[f7230_D])).
fof(f7230_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl291),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl291])])).
fof(f7195,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl24)),
  inference(superposition,[],[f438,f6745])).
fof(f6745,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10(sK1,sK1)))) | $spl24),
  inference(unit_resulting_resolution,[],[f242,f85])).
fof(f85,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK10(X1,X0))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f242,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl24),
  inference(cnf_transformation,[],[f242_D])).
fof(f242_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f438,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X1,X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X1,X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f432,f93])).
fof(f432,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X1,X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X1,X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f79,f93])).
fof(f79,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X3,X2,X1,X0)),s('type.list.list'(X0),sK9(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f7232,plain,(
  s('type.num.num',sK10(sK1,sK1)) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl292),
  inference(cnf_transformation,[],[f7232_D])).
fof(f7232_D,plain,(
  s('type.num.num',sK10(sK1,sK1)) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl292),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl292])])).
fof(f7194,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK10(sK1,sK1)) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl24)),
  inference(superposition,[],[f348,f6745])).
fof(f348,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X1,X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f78,f93])).
fof(f78,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f7228,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl288),
  inference(cnf_transformation,[],[f7228_D])).
fof(f7228_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f7193,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10(sK1,sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl24)),
  inference(superposition,[],[f340,f6745])).
fof(f340,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X1,X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f77,f93])).
fof(f77,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f6974,plain,(
  ( ! [X6,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl284),
  inference(cnf_transformation,[],[f6974_D])).
fof(f6974_D,plain,(
  ( ! [X6,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f6975,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl286),
  inference(cnf_transformation,[],[f6975_D])).
fof(f6975_D,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f6973,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl64)),
  inference(subsumption_resolution,[],[f6943,f63])).
fof(f63,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LENGTH_LE_NUM',aHL_FALSITY)).
fof(f6943,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'F_0')) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl64)),
  inference(backward_demodulation,[],[f6890,f3172])).
fof(f3172,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f3162,f61])).
fof(f61,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LENGTH_LE_NUM',aHL_TRUTH)).
fof(f3162,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f305,f96])).
fof(f96,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f64,f64])).
fof(f64,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LENGTH_LE_NUM',aHL_BOOL_CASES)).
fof(f305,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X11),s(bool,X12)))) | s(bool,X10) != s(bool,X12) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f74,f64])).
fof(f74,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK7(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X17,X18] : (? [X15] : (s(X6,X15) = s(X6,X18) & p(s(bool,happ(s(fun(X6,bool),X17),s(X6,X15))))) <=> p(s(bool,happ(s(fun(X6,bool),X17),s(X6,X18)))))),
  file('thm.quantHeuristics.LENGTH_LE_NUM','thm.bool.UNWIND_THM2')).
fof(f6890,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) ) | ($spl1 | $spl64)),
  inference(unit_resulting_resolution,[],[f63,f6737,f81])).
fof(f81,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X13,X14] : ((p(s(bool,X13)) => p(s(bool,X14))) => ((p(s(bool,X14)) => p(s(bool,X13))) => s(bool,X13) = s(bool,X14)))),
  file('thm.quantHeuristics.LENGTH_LE_NUM','thm.bool.IMP_ANTISYM_AX')).
fof(f6737,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) | ($spl1 | $spl64)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f112,f181,f193,f188,f189,f195,f197,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f517,f983,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1630,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2626,f2627,f2655,f2663,f2664,f2675,f2676,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f90,f1038,f6708])).
fof(f6708,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) | $spl64),
  inference(backward_demodulation,[],[f1038,f76])).
fof(f3518,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))),s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X2)))))) )),
  inference(equality_resolution,[],[f444])).
fof(f3517,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X16) | s('type.num.num',X17) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),X18))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),'const.list.APPEND_2'(s('type.list.list'(X15),'const.list.NIL_0'),s('type.list.list'(X15),X18)))))) )),
  inference(superposition,[],[f444,f181])).
fof(f3500,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(unit_resulting_resolution,[],[f181,f181,f444])).
fof(f3386,plain,(
  ( ! [X6,X4,X5] : (s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,g(s(X4,sK11(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,f(s(X4,sK11(X5,X6,bool,X4))))) )),
  inference(trivial_inequality_removal,[],[f3375])).
fof(f3375,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,g(s(X4,sK11(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,f(s(X4,sK11(X5,X6,bool,X4))))) )),
  inference(superposition,[],[f363,f64])).
fof(f3005,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'F_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f2978,f61])).
fof(f2978,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'F_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f304,f96])).
fof(f2794,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(equality_resolution,[],[f415])).
fof(f2705,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X3,X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2689,f61])).
fof(f2689,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X3,X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f258,f96])).
fof(f2676,plain,(
  ( ! [X35,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,X34)))) | p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),X35,bool)) | s(bool,'T_0') = s(bool,X34)) ) | $spl1),
  inference(superposition,[],[f258,f517])).
fof(f2675,plain,(
  ( ! [X33,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,X32)))) | p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X33,bool)) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f258,f64])).
fof(f2664,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X5,X7,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f258,f96])).
fof(f2663,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X2,X3,bool)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f258,f96])).
fof(f2655,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X4),s(X3,sK7(X5,X4,X3)))) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),X4),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f2639,f61])).
fof(f2639,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X4),s(X3,sK7(X5,X4,X3)))) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),X4),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f260,f96])).
fof(f2627,plain,(
  ( ! [X46] : (~p(s(bool,happ(s(fun(bool,bool),X46),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X46),s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),X46,bool))))) ) | $spl1),
  inference(superposition,[],[f260,f112])).
fof(f2626,plain,(
  ( ! [X45,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,X44)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X45),s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),X45,bool)))) | s(bool,'T_0') = s(bool,X44)) ) | $spl1),
  inference(superposition,[],[f260,f517])).
fof(f2625,plain,(
  ( ! [X43,X42] : (~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X42)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X43),s(bool,sK7('F_0',X43,bool)))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f260,f64])).
fof(f2623,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,X36)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X37),s(bool,sK7('T_0',X37,bool)))) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f260,f96])).
fof(f2614,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,X16)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X17),s(bool,sK7(X15,X17,bool)))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f260,f96])).
fof(f2613,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X13),s(bool,sK7(X12,X13,bool)))) | s(bool,X12) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f260,f96])).
fof(f2612,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X11),s(bool,sK7(X10,X11,bool)))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f260,f64])).
fof(f2610,plain,(
  ( ! [X8,X7] : (~p(s(bool,happ(s(fun('type.num.num',bool),X8),s('type.num.num','const.num.|48|_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X8),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(X7),'const.list.NIL_0')),X8,'type.num.num'))))) )),
  inference(superposition,[],[f260,f181])).
fof(f2522,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) = s(bool,sK7(X3,X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2512,f61])).
fof(f2512,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,X3) = s(bool,sK7(X3,X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f189,f96])).
fof(f2251,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') = s(bool,sK7('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2227,f61])).
fof(f2227,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f188,f96])).
fof(f1358,plain,(
  ( ! [X125,X123,X124,X122] : (s(X124,f(s(bool,'T_0'))) != s(X124,g(s(bool,'T_0'))) | s(fun(bool,X124),X122) = s(fun(bool,X124),X123) | s(bool,X125) = s(bool,sK11(X122,X123,X124,bool)) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f87,f96])).
fof(f1357,plain,(
  ( ! [X121,X120,X119] : (p(s(bool,happ(s(fun(bool,bool),X120),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X120),s(bool,X119)))) | s(bool,X121) = s(bool,sK7(X119,X120,bool)) | s(bool,'T_0') = s(bool,X121)) )),
  inference(superposition,[],[f76,f96])).
fof(f1356,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,'T_0') != s(bool,f(s(X115,sK11(X116,X117,bool,X115)))) | s(fun(X115,bool),X116) = s(fun(X115,bool),X117) | s(bool,X118) = s(bool,g(s(X115,sK11(X116,X117,bool,X115)))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f87,f96])).
fof(f1355,plain,(
  ( ! [X111,X109,X110] : (~p(s(bool,happ(s(fun(bool,bool),X110),s(bool,'T_0')))) | s(bool,X109) = s(bool,sK7(X109,X110,bool)) | s(bool,X109) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f75,f96])).
fof(f1354,plain,(
  ( ! [X107,X105,X108,X106] : (~p(s(bool,happ(s(fun(bool,bool),X106),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X106),s(bool,X107)))) | s(bool,X105) != s(bool,X107) | s(bool,X105) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f74,f96])).
fof(f1630,plain,(
  ( ! [X90,X91] : (s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),X90,bool)) | s(bool,X91) = s(bool,happ(s(fun(bool,bool),X90),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X91)) ) | $spl1),
  inference(subsumption_resolution,[],[f1348,f61])).
fof(f1348,plain,(
  ( ! [X90,X91] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),X90,bool)) | s(bool,X91) = s(bool,happ(s(fun(bool,bool),X90),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X91)) ) | $spl1),
  inference(superposition,[],[f195,f96])).
fof(f1626,plain,(
  ( ! [X78,X76,X79,X77] : (s(X76,X78) = s(X76,sK7(X78,X77,X76)) | s(bool,X79) = s(bool,happ(s(fun(X76,bool),X77),s(X76,X78))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(subsumption_resolution,[],[f1343,f61])).
fof(f1343,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(X76,X78) = s(X76,sK7(X78,X77,X76)) | s(bool,X79) = s(bool,happ(s(fun(X76,bool),X77),s(X76,X78))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f75,f96])).
fof(f1625,plain,(
  ( ! [X74,X72,X71,X75,X73] : (p(s(bool,happ(s(fun(X71,bool),X72),s(X71,X74)))) | s(X71,X73) != s(X71,X74) | s(bool,X75) = s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(subsumption_resolution,[],[f1342,f61])).
fof(f1342,plain,(
  ( ! [X74,X72,X71,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X71,bool),X72),s(X71,X74)))) | s(X71,X73) != s(X71,X74) | s(bool,X75) = s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f74,f96])).
fof(f1623,plain,(
  ( ! [X64,X62,X63] : (s('type.num.num',X63) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',sK10(X63,X62)))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X62),s('type.num.num',X63))) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f1337,f61])).
fof(f1337,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,'T_0')) | s('type.num.num',X63) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',sK10(X63,X62)))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X62),s('type.num.num',X63))) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f85,f96])).
fof(f1621,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X9)) | s(bool,X8) = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f1308,f61])).
fof(f1308,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | s(bool,X8) = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f84,f96])).
fof(f1304,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,happ(s(fun(bool,bool),X38),s(bool,X37)))) | s(bool,'T_0') = s(bool,sK7('T_0',X38,bool)) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f75,f96])).
fof(f1303,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,happ(s(fun(bool,bool),X34),s(bool,X33)))) | p(s(bool,happ(s(fun(bool,bool),X34),s(bool,X35)))) | s(bool,'T_0') != s(bool,X35) | s(bool,X33) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f74,f96])).
fof(f1238,plain,(
  ( ! [X130,X128,X131,X129] : (s(X130,f(s(bool,X131))) != s(X130,g(s(bool,X131))) | s(fun(bool,X130),X128) = s(fun(bool,X130),X129) | s(bool,'T_0') = s(bool,X131) | s(bool,'T_0') = s(bool,sK11(X128,X129,X130,bool))) )),
  inference(superposition,[],[f87,f96])).
fof(f1237,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,happ(s(fun(bool,bool),X126),s(bool,X127)))) | ~p(s(bool,happ(s(fun(bool,bool),X126),s(bool,X125)))) | s(bool,'T_0') = s(bool,X127) | s(bool,'T_0') = s(bool,sK7(X125,X126,bool))) )),
  inference(superposition,[],[f76,f96])).
fof(f1236,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X124) != s(bool,f(s(X121,sK11(X122,X123,bool,X121)))) | s(fun(X121,bool),X122) = s(fun(X121,bool),X123) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X121,sK11(X122,X123,bool,X121))))) )),
  inference(superposition,[],[f87,f96])).
fof(f1235,plain,(
  ( ! [X116,X114,X115] : (~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,X115)))) | s(bool,X114) = s(bool,sK7(X114,X116,bool)) | s(bool,'T_0') = s(bool,X115) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f75,f96])).
fof(f1234,plain,(
  ( ! [X111,X112,X110,X113] : (~p(s(bool,happ(s(fun(bool,bool),X112),s(bool,X111)))) | p(s(bool,happ(s(fun(bool,bool),X112),s(bool,X113)))) | s(bool,X110) != s(bool,X113) | s(bool,'T_0') = s(bool,X111) | s(bool,'T_0') = s(bool,X110)) )),
  inference(superposition,[],[f74,f96])).
fof(f1141,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f96,f96])).
fof(f517,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl1),
  inference(subsumption_resolution,[],[f513,f63])).
fof(f513,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl1),
  inference(superposition,[],[f125,f112])).
fof(f444,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',X4) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2)))))) )),
  inference(equality_resolution,[],[f80])).
fof(f437,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.APPEND_2'(s('type.list.list'(X4),sK8('const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X6,X5,X4)),s('type.list.list'(X4),sK9('const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X6,X5,X4))))) )),
  inference(superposition,[],[f79,f181])).
fof(f435,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.list.list'(X4),X5) = s('type.list.list'(X4),'const.list.APPEND_2'(s('type.list.list'(X4),sK8(X6,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X5,X4)),s('type.list.list'(X4),sK9(X6,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X5,X4))))) )),
  inference(superposition,[],[f79,f181])).
fof(f433,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) | s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),'const.list.APPEND_2'(s('type.list.list'(X2),sK8(X4,X3,'const.list.NIL_0',X2)),s('type.list.list'(X2),sK9(X4,X3,'const.list.NIL_0',X2))))) )),
  inference(superposition,[],[f79,f181])).
fof(f415,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) )),
  inference(equality_resolution,[],[f73])).
fof(f414,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) | s('type.list.list'(X3),X5) != s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X6),s('type.list.list'(X3),'const.list.NIL_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X5)))) )),
  inference(superposition,[],[f73,f181])).
fof(f387,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,sK5(X2,'const.list.NIL_0',X1)),s('type.list.list'(X1),sK6(X2,'const.list.NIL_0',X1))))) )),
  inference(superposition,[],[f72,f181])).
fof(f384,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) | s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK5('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),X4,X3)),s('type.list.list'(X3),sK6('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),X4,X3))))) )),
  inference(superposition,[],[f72,f181])).
fof(f363,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK11(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK11(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f87,f64])).
fof(f362,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK11(X0,X1,X2,bool))) )),
  inference(superposition,[],[f87,f64])).
fof(f355,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK9('const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X6,X5,X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f353,f181])).
fof(f353,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK9('const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X6,X5,X4))))) )),
  inference(superposition,[],[f78,f181])).
fof(f351,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK9(X6,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X5,X4))))) )),
  inference(superposition,[],[f78,f181])).
fof(f349,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK9(X4,X3,'const.list.NIL_0',X2))))) )),
  inference(superposition,[],[f78,f181])).
fof(f345,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X6) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK8('const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X6,X5,X4))))) )),
  inference(superposition,[],[f77,f181])).
fof(f347,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK8(X6,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X5,X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) )),
  inference(forward_demodulation,[],[f343,f181])).
fof(f343,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK8(X6,'const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0')),X5,X4))))) )),
  inference(superposition,[],[f77,f181])).
fof(f341,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK8(X4,X3,'const.list.NIL_0',X2))))) )),
  inference(superposition,[],[f77,f181])).
fof(f304,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X7)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | s(bool,'F_0') != s(bool,X9) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f74,f64])).
fof(f279,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK6(X2,'const.list.NIL_0',X1))))) )),
  inference(superposition,[],[f71,f181])).
fof(f281,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK6('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),X4,X3)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4)))) )),
  inference(forward_demodulation,[],[f276,f181])).
fof(f276,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK6('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),X4,X3))))) )),
  inference(superposition,[],[f71,f181])).
fof(f260,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) )),
  inference(subsumption_resolution,[],[f259,f63])).
fof(f259,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) )),
  inference(superposition,[],[f76,f64])).
fof(f258,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X0,X1,bool))) )),
  inference(superposition,[],[f76,f64])).
fof(f236,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f230,f181])).
fof(f230,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2))))) )),
  inference(superposition,[],[f85,f181])).
fof(f234,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10(X2,'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f228,f181])).
fof(f228,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))),s('type.num.num',sK10(X2,'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))))))) )),
  inference(superposition,[],[f85,f181])).
fof(f212,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f61,f205,f84])).
fof(f213,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))) )),
  inference(unit_resulting_resolution,[],[f205,f205,f84])).
fof(f205,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(equality_resolution,[],[f86])).
fof(f197,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),X1,bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f195,f64])).
fof(f195,plain,(
  ( ! [X8] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),X8,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f190,f112])).
fof(f190,plain,(
  ( ! [X8] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),X8,bool))) ) | $spl1),
  inference(superposition,[],[f75,f112])).
fof(f189,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,X6) = s(bool,sK7(X6,X7,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f75,f64])).
fof(f188,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,X4)))) | s(bool,'F_0') = s(bool,sK7('F_0',X5,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f75,f64])).
fof(f193,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f186,f181])).
fof(f186,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2,'type.num.num'))) )),
  inference(superposition,[],[f75,f181])).
fof(f181,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(equality_resolution,[],[f68])).
fof(f112,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl1),
  inference(unit_resulting_resolution,[],[f63,f90,f81])).
fof(f76,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f75,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f50])).
fof(f125,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f118,f63])).
fof(f118,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f81,f64])).
fof(f98,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f63,f64])).
fof(f87,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK11(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK11(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK11(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK11(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11])],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LENGTH_LE_NUM',aHL_EXT)).
fof(f84,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f37])).
fof(f71,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X5,X6] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X8,X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> ? [X19,X20] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LENGTH_LE_NUM','thm.list.LENGTH_CONS')).
fof(f72,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f47])).
fof(f73,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f47])).
fof(f67,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LENGTH_LE_NUM','thm.list.LENGTH_NIL')).
fof(f68,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f43])).
fof(f6705,plain,(
  $false | ($spl24 | $spl63 | $spl96)),
  inference(global_subsumption,[],[f2840,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f1460,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X58)) ) | $spl63),
  inference(trivial_inequality_removal,[],[f1400])).
fof(f1400,plain,(
  ( ! [X58] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X58)) ) | $spl63),
  inference(superposition,[],[f618,f96])).
fof(f1481,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X58)) ) | $spl63),
  inference(trivial_inequality_removal,[],[f1334])).
fof(f1334,plain,(
  ( ! [X58] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X58)) ) | $spl63),
  inference(superposition,[],[f618,f96])).
fof(f620,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl63),
  inference(unit_resulting_resolution,[],[f618,f64])).
fof(f621,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl63),
  inference(unit_resulting_resolution,[],[f618,f98])).
fof(f622,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl63),
  inference(unit_resulting_resolution,[],[f63,f618,f125])).
fof(f625,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl63),
  inference(unit_resulting_resolution,[],[f61,f618,f84])).
fof(f627,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl63),
  inference(unit_resulting_resolution,[],[f61,f618,f84])).
fof(f6704,plain,(
  $false | ($spl24 | $spl63 | $spl98)),
  inference(global_subsumption,[],[f2841,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f2841,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl98),
  inference(cnf_transformation,[],[f2841_D])).
fof(f2841_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f6703,plain,(
  $false | ($spl24 | $spl63 | $spl90)),
  inference(global_subsumption,[],[f2867,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f2867,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK11(X11,X12,bool,bool))) ) | $spl90),
  inference(superposition,[],[f362,f2836])).
fof(f6702,plain,(
  $false | ($spl24 | $spl63 | $spl64)),
  inference(global_subsumption,[],[f1038,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f6701,plain,(
  $false | ($spl24 | $spl42 | $spl63)),
  inference(global_subsumption,[],[f374,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f6700,plain,(
  $false | ($spl24 | $spl40 | $spl63)),
  inference(global_subsumption,[],[f372,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f372,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl40),
  inference(cnf_transformation,[],[f372_D])).
fof(f372_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f6699,plain,(
  $false | ($spl24 | $spl30 | $spl63)),
  inference(global_subsumption,[],[f249,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f6698,plain,(
  $false | ($spl24 | $spl28 | $spl63)),
  inference(global_subsumption,[],[f247,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f247,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | $spl28),
  inference(cnf_transformation,[],[f247_D])).
fof(f247_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f6697,plain,(
  $false | ($spl24 | $spl26 | $spl63)),
  inference(global_subsumption,[],[f245,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f6696,plain,(
  $false | ($spl24 | $spl63)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f627,f625,f622,f621,f620,f1481,f1460,f242])).
fof(f6695,plain,(
  $false | ($spl6 | $spl24 | $spl63)),
  inference(global_subsumption,[],[f95,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f6694,plain,(
  $false | ($spl1 | $spl24 | $spl63)),
  inference(global_subsumption,[],[f90,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f6693,plain,(
  $false | ($spl24 | $spl63 | $spl69 | $spl211)),
  inference(global_subsumption,[],[f5338,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f5338,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl69 | $spl211)),
  inference(forward_demodulation,[],[f5238,f1743])).
fof(f1743,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl69),
  inference(unit_resulting_resolution,[],[f63,f1703,f81])).
fof(f5238,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl63 | $spl211)),
  inference(unit_resulting_resolution,[],[f618,f5106,f96])).
fof(f6692,plain,(
  $false | ($spl24 | $spl63 | $spl69 | $spl211)),
  inference(global_subsumption,[],[f5333,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f5333,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl69 | $spl211)),
  inference(forward_demodulation,[],[f5246,f1743])).
fof(f5246,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl63 | $spl211)),
  inference(unit_resulting_resolution,[],[f618,f5106,f96])).
fof(f6691,plain,(
  $false | ($spl24 | $spl63 | $spl161)),
  inference(global_subsumption,[],[f4772,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f4772,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl161)),
  inference(forward_demodulation,[],[f4747,f4754])).
fof(f4754,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl161),
  inference(unit_resulting_resolution,[],[f63,f4626,f81])).
fof(f4747,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl63 | $spl161)),
  inference(unit_resulting_resolution,[],[f618,f4626,f125])).
fof(f6690,plain,(
  $false | ($spl24 | $spl63 | $spl139)),
  inference(global_subsumption,[],[f4693,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f4693,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl139)),
  inference(forward_demodulation,[],[f4668,f4675])).
fof(f4675,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl139),
  inference(unit_resulting_resolution,[],[f63,f4434,f81])).
fof(f4668,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl63 | $spl139)),
  inference(unit_resulting_resolution,[],[f618,f4434,f125])).
fof(f6689,plain,(
  $false | ($spl24 | $spl63 | $spl135)),
  inference(global_subsumption,[],[f4501,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f4501,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl135)),
  inference(forward_demodulation,[],[f4476,f4483])).
fof(f4483,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | $spl135),
  inference(unit_resulting_resolution,[],[f63,f4429,f81])).
fof(f4476,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | ($spl63 | $spl135)),
  inference(unit_resulting_resolution,[],[f618,f4429,f125])).
fof(f6688,plain,(
  $false | ($spl24 | $spl63 | $spl107)),
  inference(global_subsumption,[],[f4303,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f4303,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl107)),
  inference(forward_demodulation,[],[f4278,f4285])).
fof(f4285,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl107),
  inference(unit_resulting_resolution,[],[f63,f4236,f81])).
fof(f4278,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl63 | $spl107)),
  inference(unit_resulting_resolution,[],[f618,f4236,f125])).
fof(f6687,plain,(
  $false | ($spl24 | $spl63 | $spl69)),
  inference(global_subsumption,[],[f2103,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f2103,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl69)),
  inference(forward_demodulation,[],[f1976,f1743])).
fof(f1976,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl63 | $spl69)),
  inference(unit_resulting_resolution,[],[f618,f1758])).
fof(f1758,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl69),
  inference(subsumption_resolution,[],[f1746,f61])).
fof(f1746,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl69),
  inference(superposition,[],[f1703,f96])).
fof(f6686,plain,(
  $false | ($spl24 | $spl63 | $spl69)),
  inference(global_subsumption,[],[f1757,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f1757,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl69)),
  inference(forward_demodulation,[],[f1736,f1743])).
fof(f1736,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl63 | $spl69)),
  inference(unit_resulting_resolution,[],[f618,f1703,f125])).
fof(f6685,plain,(
  $false | ($spl24 | $spl63)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f242,f627,f625,f622,f621,f620,f1481,f1460])).
fof(f6684,plain,(
  $false | ($spl24 | $spl63)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f242,f627,f625,f622,f621,f620,f1481])).
fof(f6683,plain,(
  $false | ($spl11 | $spl24 | $spl63)),
  inference(global_subsumption,[],[f1072,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f242,f627,f625,f622,f621,f620])).
fof(f1072,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl11 | $spl63)),
  inference(unit_resulting_resolution,[],[f618,f105,f96])).
fof(f6682,plain,(
  $false | ($spl11 | $spl24 | $spl63)),
  inference(global_subsumption,[],[f1077,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f242,f627,f625,f622,f621,f620])).
fof(f1077,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl11 | $spl63)),
  inference(unit_resulting_resolution,[],[f105,f618,f96])).
fof(f6681,plain,(
  $false | ($spl24 | $spl63)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f242,f627,f625,f622,f621,f620])).
fof(f6680,plain,(
  $false | ($spl24 | $spl63)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f242,f627,f625,f622,f621])).
fof(f6679,plain,(
  $false | ($spl24 | $spl63)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f242,f627,f625,f622])).
fof(f6678,plain,(
  $false | ($spl24 | $spl63)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f242,f627,f625])).
fof(f6677,plain,(
  $false | ($spl24 | $spl63)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f242,f627])).
fof(f6676,plain,(
  $false | ($spl24 | $spl63 | $spl69 | $spl207 | $spl211)),
  inference(global_subsumption,[],[f5336,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5336,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl69 | $spl207 | $spl211)),
  inference(forward_demodulation,[],[f5240,f1743])).
fof(f5240,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl207 | $spl211)),
  inference(unit_resulting_resolution,[],[f5103,f5106,f96])).
fof(f6675,plain,(
  $false | ($spl24 | $spl63 | $spl69 | $spl207 | $spl211)),
  inference(global_subsumption,[],[f5331,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5331,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl69 | $spl207 | $spl211)),
  inference(forward_demodulation,[],[f5248,f1743])).
fof(f5248,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl207 | $spl211)),
  inference(unit_resulting_resolution,[],[f5103,f5106,f96])).
fof(f6674,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5193,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5193,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) ) | $spl207),
  inference(trivial_inequality_removal,[],[f5186])).
fof(f5186,plain,(
  ( ! [X4] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) ) | $spl207),
  inference(superposition,[],[f5103,f96])).
fof(f6673,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5194,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5194,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl207),
  inference(trivial_inequality_removal,[],[f5183])).
fof(f5183,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl207),
  inference(superposition,[],[f5103,f96])).
fof(f6672,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5136,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5136,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl207),
  inference(unit_resulting_resolution,[],[f5103,f64])).
fof(f6671,plain,(
  $false | ($spl11 | $spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5137,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5137,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl11 | $spl207)),
  inference(unit_resulting_resolution,[],[f105,f5103,f96])).
fof(f6670,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5139,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5139,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl63 | $spl207)),
  inference(unit_resulting_resolution,[],[f618,f5103,f96])).
fof(f6669,plain,(
  $false | ($spl11 | $spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5144,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5144,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl11 | $spl207)),
  inference(unit_resulting_resolution,[],[f105,f5103,f96])).
fof(f6668,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5146,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5146,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl63 | $spl207)),
  inference(unit_resulting_resolution,[],[f618,f5103,f96])).
fof(f6667,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5151,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5151,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl207),
  inference(unit_resulting_resolution,[],[f5103,f98])).
fof(f6666,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5152,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5152,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl207),
  inference(unit_resulting_resolution,[],[f63,f5103,f125])).
fof(f6665,plain,(
  $false | ($spl24 | $spl63 | $spl69 | $spl207)),
  inference(global_subsumption,[],[f5220,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5220,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl69 | $spl207)),
  inference(forward_demodulation,[],[f5157,f1743])).
fof(f5157,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl69 | $spl207)),
  inference(unit_resulting_resolution,[],[f5103,f1758])).
fof(f6664,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5176,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5176,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl207),
  inference(unit_resulting_resolution,[],[f61,f5103,f84])).
fof(f6663,plain,(
  $false | ($spl24 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5179,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f5179,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl207),
  inference(unit_resulting_resolution,[],[f61,f5103,f84])).
fof(f6662,plain,(
  $false | ($spl24 | $spl63 | $spl202)),
  inference(global_subsumption,[],[f5033,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f6661,plain,(
  $false | ($spl24 | $spl63 | $spl188)),
  inference(global_subsumption,[],[f5012,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f6660,plain,(
  $false | ($spl24 | $spl63 | $spl186)),
  inference(global_subsumption,[],[f5011,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f6659,plain,(
  $false | ($spl24 | $spl63 | $spl184)),
  inference(global_subsumption,[],[f5003,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f6658,plain,(
  $false | ($spl24 | $spl63 | $spl182)),
  inference(global_subsumption,[],[f4998,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f6657,plain,(
  $false | ($spl24 | $spl63 | $spl74)),
  inference(global_subsumption,[],[f1708,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f618,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f1460,f1481,f620,f621,f622,f625,f627,f242])).
fof(f6656,plain,(
  $false | ($spl1 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f90,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f1706,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl72),
  inference(cnf_transformation,[],[f1706_D])).
fof(f1706_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f6655,plain,(
  $false | ($spl6 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f95,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6654,plain,(
  $false | ($spl24 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f242,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6653,plain,(
  $false | ($spl26 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f245,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6652,plain,(
  $false | ($spl28 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f247,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6651,plain,(
  $false | ($spl30 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f249,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6650,plain,(
  $false | ($spl40 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f372,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6649,plain,(
  $false | ($spl42 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f374,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6648,plain,(
  $false | ($spl64 | $spl72 | $spl207)),
  inference(global_subsumption,[],[f1038,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6647,plain,(
  $false | ($spl72 | $spl207)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f181,f193,f188,f189,f205,f213,f212,f234,f236,f258,f260,f281,f279,f304,f305,f341,f347,f345,f349,f351,f355,f362,f363,f384,f387,f414,f415,f433,f435,f437,f444,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1623,f1625,f1626,f1354,f1355,f1356,f1357,f1358,f2251,f2522,f2610,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3500,f3517,f3518,f5103,f5193,f5194,f5136,f5151,f5152,f5176,f5179,f1706])).
fof(f6646,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl74)),
  inference(global_subsumption,[],[f1708,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f5131,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f93,f91])).
fof(f5641,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))) ) | $spl4),
  inference(equality_resolution,[],[f443])).
fof(f443,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))) ) | $spl4),
  inference(superposition,[],[f80,f93])).
fof(f4947,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,happ(s(fun(bool,bool),X100),s(bool,X99)))) | s(bool,happ(s(fun('type.num.num',bool),X98),s('type.num.num',sK1))) = s(bool,sK7(happ(s(fun('type.num.num',bool),X98),s('type.num.num',sK1)),X100,bool)) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X98,'type.num.num')) | s(bool,'T_0') = s(bool,X99)) ) | $spl6),
  inference(superposition,[],[f75,f1634])).
fof(f4946,plain,(
  ( ! [X94,X97,X95,X96] : (~p(s(bool,happ(s(fun(bool,bool),X96),s(bool,X95)))) | p(s(bool,happ(s(fun(bool,bool),X96),s(bool,X97)))) | s(bool,X97) != s(bool,happ(s(fun('type.num.num',bool),X94),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X94,'type.num.num')) | s(bool,'T_0') = s(bool,X95)) ) | $spl6),
  inference(superposition,[],[f74,f1634])).
fof(f4945,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),X93),s(bool,X92)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X93),s(bool,sK7(happ(s(fun('type.num.num',bool),X91),s('type.num.num',sK1)),X93,bool)))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X91,'type.num.num')) | s(bool,'T_0') = s(bool,X92)) ) | $spl6),
  inference(superposition,[],[f260,f1634])).
fof(f4927,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,happ(s(fun(bool,bool),X46),s(bool,X45)))) | p(s(bool,happ(s(fun(bool,bool),X46),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK1)),X46,bool)) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X44,'type.num.num')) | s(bool,'T_0') = s(bool,X45)) ) | $spl6),
  inference(superposition,[],[f258,f1634])).
fof(f4908,plain,(
  ( ! [X239,X237,X240,X238] : (s(X239,f(s(bool,happ(s(fun('type.num.num',bool),X240),s('type.num.num',sK1))))) != s(X239,g(s(bool,happ(s(fun('type.num.num',bool),X240),s('type.num.num',sK1))))) | s(fun(bool,X239),X237) = s(fun(bool,X239),X238) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X240,'type.num.num')) | s(bool,'T_0') = s(bool,sK11(X237,X238,X239,bool))) ) | $spl6),
  inference(superposition,[],[f87,f1634])).
fof(f4907,plain,(
  ( ! [X235,X236,X234] : (p(s(bool,happ(s(fun(bool,bool),X235),s(bool,happ(s(fun('type.num.num',bool),X236),s('type.num.num',sK1)))))) | ~p(s(bool,happ(s(fun(bool,bool),X235),s(bool,X234)))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X236,'type.num.num')) | s(bool,'T_0') = s(bool,sK7(X234,X235,bool))) ) | $spl6),
  inference(superposition,[],[f76,f1634])).
fof(f4906,plain,(
  ( ! [X231,X229,X230,X232] : (s(bool,f(s(X229,sK11(X230,X231,bool,X229)))) != s(bool,happ(s(fun('type.num.num',bool),X232),s('type.num.num',sK1))) | s(fun(X229,bool),X230) = s(fun(X229,bool),X231) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X232,'type.num.num')) | s(bool,'T_0') = s(bool,g(s(X229,sK11(X230,X231,bool,X229))))) ) | $spl6),
  inference(superposition,[],[f87,f1634])).
fof(f4905,plain,(
  ( ! [X222,X223,X221] : (~p(s(bool,happ(s(fun(bool,bool),X223),s(bool,happ(s(fun('type.num.num',bool),X222),s('type.num.num',sK1)))))) | s(bool,X221) = s(bool,sK7(X221,X223,bool)) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X222,'type.num.num')) | s(bool,'T_0') = s(bool,X221)) ) | $spl6),
  inference(superposition,[],[f75,f1634])).
fof(f4904,plain,(
  ( ! [X218,X220,X219,X217] : (~p(s(bool,happ(s(fun(bool,bool),X219),s(bool,happ(s(fun('type.num.num',bool),X218),s('type.num.num',sK1)))))) | p(s(bool,happ(s(fun(bool,bool),X219),s(bool,X220)))) | s(bool,X217) != s(bool,X220) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X218,'type.num.num')) | s(bool,'T_0') = s(bool,X217)) ) | $spl6),
  inference(superposition,[],[f74,f1634])).
fof(f4903,plain,(
  ( ! [X216,X215,X214] : (~p(s(bool,happ(s(fun(bool,bool),X216),s(bool,happ(s(fun('type.num.num',bool),X215),s('type.num.num',sK1)))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,sK7(X214,X216,bool)))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X215,'type.num.num')) | s(bool,'T_0') = s(bool,X214)) ) | $spl6),
  inference(superposition,[],[f260,f1634])).
fof(f4847,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num',sK1)))))) | p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X33,X35,bool)) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X34,'type.num.num')) | s(bool,'T_0') = s(bool,X33)) ) | $spl6),
  inference(superposition,[],[f258,f1634])).
fof(f4726,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))))) ) | ($spl4 | $spl6)),
  inference(equality_resolution,[],[f1793])).
fof(f4654,plain,(
  ( ! [X84] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X84,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))))) ) | $spl6),
  inference(forward_demodulation,[],[f4610,f3497])).
fof(f4610,plain,(
  ( ! [X84] : (~p(s(bool,happ(s(fun('type.num.num',bool),X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X84,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f75,f3497])).
fof(f4608,plain,(
  ( ! [X81] : (~p(s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X81,'type.num.num'))))) ) | $spl6),
  inference(superposition,[],[f260,f3497])).
fof(f4600,plain,(
  ( ! [X71] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X71))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X71,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X71,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f3497])).
fof(f4599,plain,(
  ( ! [X70] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X70,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X70,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f3497])).
fof(f4598,plain,(
  ( ! [X68,X69] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X68),X69))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.list.list'(X68),X69) = s('type.list.list'(X68),'const.list.APPEND_2'(s('type.list.list'(X68),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X69,X68)),s('type.list.list'(X68),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X69,X68))))) ) | $spl6),
  inference(superposition,[],[f436,f3497])).
fof(f4597,plain,(
  ( ! [X66,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),X67))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X66),X67) = s('type.list.list'(X66),'const.list.APPEND_2'(s('type.list.list'(X66),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X67,X66)),s('type.list.list'(X66),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X67,X66))))) ) | $spl6),
  inference(superposition,[],[f434,f3497])).
fof(f4593,plain,(
  ( ! [X64,X65] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),X65))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X65,X64))))) ) | $spl6),
  inference(superposition,[],[f354,f3497])).
fof(f4642,plain,(
  ( ! [X62,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X63,X62)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),X63))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))))) ) | $spl6),
  inference(forward_demodulation,[],[f4592,f3497])).
fof(f4592,plain,(
  ( ! [X62,X63] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),X63))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X63,X62))))) ) | $spl6),
  inference(superposition,[],[f350,f3497])).
fof(f4591,plain,(
  ( ! [X61] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X61))) | s('type.num.num',X61) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X61,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f3497])).
fof(f4641,plain,(
  ( ! [X60] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X60,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4590,f3497])).
fof(f4590,plain,(
  ( ! [X60] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X60,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f3497])).
fof(f4589,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X59,X58))))) ) | $spl6),
  inference(superposition,[],[f346,f3497])).
fof(f4640,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X57,X56)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f4588,f3497])).
fof(f4588,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X57,X56))))) ) | $spl6),
  inference(superposition,[],[f344,f3497])).
fof(f4639,plain,(
  ( ! [X55] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X55,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X55)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4587,f3497])).
fof(f4587,plain,(
  ( ! [X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X55))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X55,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f3497])).
fof(f4586,plain,(
  ( ! [X54] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X54) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X54,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f3497])).
fof(f4623,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(forward_demodulation,[],[f4622,f3497])).
fof(f4622,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(subsumption_resolution,[],[f4621,f61])).
fof(f4621,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(forward_demodulation,[],[f4580,f212])).
fof(f4580,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(superposition,[],[f233,f3497])).
fof(f4618,plain,(
  ( ! [X47] : (s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK10(X47,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X47))))) ) | $spl6),
  inference(forward_demodulation,[],[f4576,f3497])).
fof(f4576,plain,(
  ( ! [X47] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X47)))) | s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))),s('type.num.num',sK10(X47,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))))))) ) | $spl6),
  inference(superposition,[],[f85,f3497])).
fof(f4617,plain,(
  ( ! [X46] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X46)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))))) ) | $spl6),
  inference(forward_demodulation,[],[f4575,f3497])).
fof(f4575,plain,(
  ( ! [X46] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X46))))) ) | $spl6),
  inference(superposition,[],[f85,f3497])).
fof(f4574,plain,(
  ( ! [X45,X43,X44] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X44))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X43),X44) = s('type.list.list'(X43),'const.list.APPEND_2'(s('type.list.list'(X43),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X45,X44,X43)),s('type.list.list'(X43),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X45,X44,X43))))) ) | $spl6),
  inference(superposition,[],[f79,f3497])).
fof(f4573,plain,(
  ( ! [X41,X42,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X40),X41))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X42))) | s('type.list.list'(X40),X41) = s('type.list.list'(X40),'const.list.APPEND_2'(s('type.list.list'(X40),sK8(X42,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X41,X40)),s('type.list.list'(X40),sK9(X42,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X41,X40))))) ) | $spl6),
  inference(superposition,[],[f79,f3497])).
fof(f4616,plain,(
  ( ! [X39,X37,X38] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X39,X38,X37)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),X38))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))))) ) | $spl6),
  inference(forward_demodulation,[],[f4572,f3497])).
fof(f4572,plain,(
  ( ! [X39,X37,X38] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),X38))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X39,X38,X37))))) ) | $spl6),
  inference(superposition,[],[f78,f3497])).
fof(f4571,plain,(
  ( ! [X35,X36,X34] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X34),X35))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X36))) | s('type.num.num',X36) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X34),sK9(X36,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X35,X34))))) ) | $spl6),
  inference(superposition,[],[f78,f3497])).
fof(f4570,plain,(
  ( ! [X33,X31,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),X32))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X33) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X33,X32,X31))))) ) | $spl6),
  inference(superposition,[],[f77,f3497])).
fof(f4615,plain,(
  ( ! [X30,X28,X29] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK8(X30,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X29,X28)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30)))) ) | $spl6),
  inference(forward_demodulation,[],[f4569,f3497])).
fof(f4569,plain,(
  ( ! [X30,X28,X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK8(X30,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X29,X28))))) ) | $spl6),
  inference(superposition,[],[f77,f3497])).
fof(f4567,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X22),X23) = s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X23,X22)),s('type.list.list'(X22),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X23,X22))))) ) | $spl6),
  inference(superposition,[],[f72,f3497])).
fof(f4613,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X21,X20)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))))) ) | $spl6),
  inference(forward_demodulation,[],[f4566,f3497])).
fof(f4566,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),X21,X20))))) ) | $spl6),
  inference(superposition,[],[f71,f3497])).
fof(f4565,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num',X17) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X18) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),X19)))))) ) | $spl6),
  inference(superposition,[],[f444,f3497])).
fof(f4564,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f436,f3497])).
fof(f4563,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X15))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X15,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK9(X15,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f434,f3497])).
fof(f4561,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X14,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f354,f3497])).
fof(f4560,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X13))) | s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X13,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f350,f3497])).
fof(f4559,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X12))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X12,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f346,f3497])).
fof(f4558,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK1))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X11,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f344,f3497])).
fof(f4556,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X10,X9,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK9(X10,X9,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f79,f3497])).
fof(f4555,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))) | s('type.num.num',X8) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X8,X7,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f78,f3497])).
fof(f4554,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num',X5) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X6,X5,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f77,f3497])).
fof(f4553,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) | $spl6),
  inference(superposition,[],[f73,f3497])).
fof(f4552,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK6(X1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f72,f3497])).
fof(f4551,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f71,f3497])).
fof(f4527,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f3497,f444])).
fof(f4528,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f3497,f444])).
fof(f4530,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f3497,f444])).
fof(f4531,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f3497,f444])).
fof(f4532,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f3497,f444])).
fof(f4533,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f3497,f444])).
fof(f4534,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f3497,f444])).
fof(f4535,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f3497,f444])).
fof(f4536,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f3497,f444])).
fof(f4537,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3497,f3497,f444])).
fof(f4538,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f3497,f444])).
fof(f4539,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f3497,f444])).
fof(f4540,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),sK3))))) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f3497,f444])).
fof(f4541,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f3497,f444])).
fof(f4542,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f3497,f444])).
fof(f4543,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK9('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3497,f434])).
fof(f4544,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3497,f350])).
fof(f4545,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3497,f346])).
fof(f4546,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.num.|48|_0',sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK9('const.num.|48|_0',sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3497,f79])).
fof(f4547,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.num.|48|_0',sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3497,f78])).
fof(f4548,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.num.|48|_0',sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3497,f77])).
fof(f4462,plain,(
  ( ! [X84] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X84,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))))) ) | $spl6),
  inference(forward_demodulation,[],[f4410,f3485])).
fof(f4410,plain,(
  ( ! [X84] : (~p(s(bool,happ(s(fun('type.num.num',bool),X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X84,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f75,f3485])).
fof(f4408,plain,(
  ( ! [X81] : (~p(s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X81,'type.num.num'))))) ) | $spl6),
  inference(superposition,[],[f260,f3485])).
fof(f4400,plain,(
  ( ! [X71] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X71))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X71,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X71,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f3485])).
fof(f4399,plain,(
  ( ! [X70] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X70,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X70,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f3485])).
fof(f4398,plain,(
  ( ! [X68,X69] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X68),X69))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.list.list'(X68),X69) = s('type.list.list'(X68),'const.list.APPEND_2'(s('type.list.list'(X68),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X69,X68)),s('type.list.list'(X68),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X69,X68))))) ) | $spl6),
  inference(superposition,[],[f436,f3485])).
fof(f4397,plain,(
  ( ! [X66,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),X67))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.list.list'(X66),X67) = s('type.list.list'(X66),'const.list.APPEND_2'(s('type.list.list'(X66),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X67,X66)),s('type.list.list'(X66),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X67,X66))))) ) | $spl6),
  inference(superposition,[],[f434,f3485])).
fof(f4393,plain,(
  ( ! [X64,X65] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),X65))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X65,X64))))) ) | $spl6),
  inference(superposition,[],[f354,f3485])).
fof(f4450,plain,(
  ( ! [X62,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X63,X62)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),X63))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f4392,f3485])).
fof(f4392,plain,(
  ( ! [X62,X63] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),X63))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X63,X62))))) ) | $spl6),
  inference(superposition,[],[f350,f3485])).
fof(f4391,plain,(
  ( ! [X61] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X61))) | s('type.num.num',X61) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X61,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f3485])).
fof(f4449,plain,(
  ( ! [X60] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X60,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4390,f3485])).
fof(f4390,plain,(
  ( ! [X60] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X60,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f3485])).
fof(f4389,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X59,X58))))) ) | $spl6),
  inference(superposition,[],[f346,f3485])).
fof(f4448,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X57,X56)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f4388,f3485])).
fof(f4388,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X57,X56))))) ) | $spl6),
  inference(superposition,[],[f344,f3485])).
fof(f4447,plain,(
  ( ! [X55] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X55,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X55)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4387,f3485])).
fof(f4387,plain,(
  ( ! [X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X55))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X55,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f3485])).
fof(f4386,plain,(
  ( ! [X54] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num',X54) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X54,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f3485])).
fof(f4424,plain,(
  ( ! [X47] : (s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK10(X47,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X47))))) ) | $spl6),
  inference(forward_demodulation,[],[f4376,f3485])).
fof(f4376,plain,(
  ( ! [X47] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X47)))) | s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))),s('type.num.num',sK10(X47,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))))))) ) | $spl6),
  inference(superposition,[],[f85,f3485])).
fof(f4423,plain,(
  ( ! [X46] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X46)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))))) ) | $spl6),
  inference(forward_demodulation,[],[f4375,f3485])).
fof(f4375,plain,(
  ( ! [X46] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X46))))) ) | $spl6),
  inference(superposition,[],[f85,f3485])).
fof(f4374,plain,(
  ( ! [X45,X43,X44] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X44))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.list.list'(X43),X44) = s('type.list.list'(X43),'const.list.APPEND_2'(s('type.list.list'(X43),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X45,X44,X43)),s('type.list.list'(X43),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X45,X44,X43))))) ) | $spl6),
  inference(superposition,[],[f79,f3485])).
fof(f4373,plain,(
  ( ! [X41,X42,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X40),X41))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X42))) | s('type.list.list'(X40),X41) = s('type.list.list'(X40),'const.list.APPEND_2'(s('type.list.list'(X40),sK8(X42,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X41,X40)),s('type.list.list'(X40),sK9(X42,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X41,X40))))) ) | $spl6),
  inference(superposition,[],[f79,f3485])).
fof(f4422,plain,(
  ( ! [X39,X37,X38] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X39,X38,X37)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),X38))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f4372,f3485])).
fof(f4372,plain,(
  ( ! [X39,X37,X38] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),X38))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X39,X38,X37))))) ) | $spl6),
  inference(superposition,[],[f78,f3485])).
fof(f4371,plain,(
  ( ! [X35,X36,X34] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X34),X35))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X36))) | s('type.num.num',X36) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X34),sK9(X36,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X35,X34))))) ) | $spl6),
  inference(superposition,[],[f78,f3485])).
fof(f4370,plain,(
  ( ! [X33,X31,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),X32))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num',X33) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X33,X32,X31))))) ) | $spl6),
  inference(superposition,[],[f77,f3485])).
fof(f4421,plain,(
  ( ! [X30,X28,X29] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK8(X30,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X29,X28)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X30)))) ) | $spl6),
  inference(forward_demodulation,[],[f4369,f3485])).
fof(f4369,plain,(
  ( ! [X30,X28,X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X30))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK8(X30,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X29,X28))))) ) | $spl6),
  inference(superposition,[],[f77,f3485])).
fof(f4367,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.list.list'(X22),X23) = s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X23,X22)),s('type.list.list'(X22),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X23,X22))))) ) | $spl6),
  inference(superposition,[],[f72,f3485])).
fof(f4419,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X21,X20)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f4366,f3485])).
fof(f4366,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),X21,X20))))) ) | $spl6),
  inference(superposition,[],[f71,f3485])).
fof(f4365,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num',X17) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',X18) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),X19)))))) ) | $spl6),
  inference(superposition,[],[f444,f3485])).
fof(f4364,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f436,f3485])).
fof(f4363,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X15))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X15,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9(X15,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f434,f3485])).
fof(f4361,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X14,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f354,f3485])).
fof(f4360,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X13))) | s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X13,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f350,f3485])).
fof(f4359,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X12))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X12,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f346,f3485])).
fof(f4358,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK1))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X11,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f344,f3485])).
fof(f4356,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X10,X9,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9(X10,X9,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f79,f3485])).
fof(f4355,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))) | s('type.num.num',X8) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X8,X7,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f78,f3485])).
fof(f4354,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num',X5) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X6,X5,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f77,f3485])).
fof(f4353,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) | $spl6),
  inference(superposition,[],[f73,f3485])).
fof(f4352,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X1,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6(X1,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f72,f3485])).
fof(f4351,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X0,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f71,f3485])).
fof(f4329,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f3485,f444])).
fof(f4331,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f3485,f444])).
fof(f4332,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f3485,f444])).
fof(f4333,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f3485,f444])).
fof(f4334,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f3485,f444])).
fof(f4335,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f3485,f444])).
fof(f4336,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f3485,f444])).
fof(f4337,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f3485,f444])).
fof(f4338,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f3485,f444])).
fof(f4339,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f3485,f444])).
fof(f4340,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK3))))) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f3485,f444])).
fof(f4341,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f3485,f444])).
fof(f4342,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f3485,f444])).
fof(f4343,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f436])).
fof(f4344,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f354])).
fof(f4345,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f344])).
fof(f4346,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK1,'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9(sK1,'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f79])).
fof(f4347,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK1,'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f78])).
fof(f4348,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK1,'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3485,f77])).
fof(f4264,plain,(
  ( ! [X84] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X84,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))))) ) | $spl6),
  inference(forward_demodulation,[],[f4220,f3482])).
fof(f4220,plain,(
  ( ! [X84] : (~p(s(bool,happ(s(fun('type.num.num',bool),X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X84,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f75,f3482])).
fof(f4218,plain,(
  ( ! [X81] : (~p(s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X81,'type.num.num'))))) ) | $spl6),
  inference(superposition,[],[f260,f3482])).
fof(f4210,plain,(
  ( ! [X71] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X71))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X71,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X71,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f3482])).
fof(f4209,plain,(
  ( ! [X70] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X70,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X70,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f3482])).
fof(f4208,plain,(
  ( ! [X68,X69] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X68),X69))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.list.list'(X68),X69) = s('type.list.list'(X68),'const.list.APPEND_2'(s('type.list.list'(X68),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X69,X68)),s('type.list.list'(X68),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X69,X68))))) ) | $spl6),
  inference(superposition,[],[f436,f3482])).
fof(f4207,plain,(
  ( ! [X66,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),X67))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.list.list'(X66),X67) = s('type.list.list'(X66),'const.list.APPEND_2'(s('type.list.list'(X66),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X67,X66)),s('type.list.list'(X66),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X67,X66))))) ) | $spl6),
  inference(superposition,[],[f434,f3482])).
fof(f4203,plain,(
  ( ! [X64,X65] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),X65))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X65,X64))))) ) | $spl6),
  inference(superposition,[],[f354,f3482])).
fof(f4252,plain,(
  ( ! [X62,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X63,X62)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),X63))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f4202,f3482])).
fof(f4202,plain,(
  ( ! [X62,X63] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),X63))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X63,X62))))) ) | $spl6),
  inference(superposition,[],[f350,f3482])).
fof(f4201,plain,(
  ( ! [X61] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X61))) | s('type.num.num',X61) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X61,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f3482])).
fof(f4251,plain,(
  ( ! [X60] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X60,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4200,f3482])).
fof(f4200,plain,(
  ( ! [X60] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X60,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f3482])).
fof(f4199,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X59,X58))))) ) | $spl6),
  inference(superposition,[],[f346,f3482])).
fof(f4250,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X57,X56)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f4198,f3482])).
fof(f4198,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X57,X56))))) ) | $spl6),
  inference(superposition,[],[f344,f3482])).
fof(f4249,plain,(
  ( ! [X55] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X55,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X55)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4197,f3482])).
fof(f4197,plain,(
  ( ! [X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X55))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X55,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f3482])).
fof(f4196,plain,(
  ( ! [X54] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num',X54) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X54,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f3482])).
fof(f4233,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(forward_demodulation,[],[f4232,f3482])).
fof(f4232,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(subsumption_resolution,[],[f4231,f61])).
fof(f4231,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(forward_demodulation,[],[f4190,f212])).
fof(f4190,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(superposition,[],[f233,f3482])).
fof(f4228,plain,(
  ( ! [X47] : (s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK10(X47,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X47))))) ) | $spl6),
  inference(forward_demodulation,[],[f4186,f3482])).
fof(f4186,plain,(
  ( ! [X47] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X47)))) | s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))),s('type.num.num',sK10(X47,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))))))) ) | $spl6),
  inference(superposition,[],[f85,f3482])).
fof(f4227,plain,(
  ( ! [X46] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X46)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))))) ) | $spl6),
  inference(forward_demodulation,[],[f4185,f3482])).
fof(f4185,plain,(
  ( ! [X46] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X46))))) ) | $spl6),
  inference(superposition,[],[f85,f3482])).
fof(f4184,plain,(
  ( ! [X45,X43,X44] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X44))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.list.list'(X43),X44) = s('type.list.list'(X43),'const.list.APPEND_2'(s('type.list.list'(X43),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X45,X44,X43)),s('type.list.list'(X43),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X45,X44,X43))))) ) | $spl6),
  inference(superposition,[],[f79,f3482])).
fof(f4183,plain,(
  ( ! [X41,X42,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X40),X41))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X42))) | s('type.list.list'(X40),X41) = s('type.list.list'(X40),'const.list.APPEND_2'(s('type.list.list'(X40),sK8(X42,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X41,X40)),s('type.list.list'(X40),sK9(X42,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X41,X40))))) ) | $spl6),
  inference(superposition,[],[f79,f3482])).
fof(f4226,plain,(
  ( ! [X39,X37,X38] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X39,X38,X37)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),X38))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f4182,f3482])).
fof(f4182,plain,(
  ( ! [X39,X37,X38] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),X38))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X37),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X39,X38,X37))))) ) | $spl6),
  inference(superposition,[],[f78,f3482])).
fof(f4181,plain,(
  ( ! [X35,X36,X34] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X34),X35))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X36))) | s('type.num.num',X36) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X34),sK9(X36,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X35,X34))))) ) | $spl6),
  inference(superposition,[],[f78,f3482])).
fof(f4180,plain,(
  ( ! [X33,X31,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),X32))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num',X33) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X33,X32,X31))))) ) | $spl6),
  inference(superposition,[],[f77,f3482])).
fof(f4225,plain,(
  ( ! [X30,X28,X29] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK8(X30,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X29,X28)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X30)))) ) | $spl6),
  inference(forward_demodulation,[],[f4179,f3482])).
fof(f4179,plain,(
  ( ! [X30,X28,X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',X30))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK8(X30,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X29,X28))))) ) | $spl6),
  inference(superposition,[],[f77,f3482])).
fof(f4177,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.list.list'(X22),X23) = s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X23,X22)),s('type.list.list'(X22),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X23,X22))))) ) | $spl6),
  inference(superposition,[],[f72,f3482])).
fof(f4223,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X21,X20)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f4176,f3482])).
fof(f4176,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),X21,X20))))) ) | $spl6),
  inference(superposition,[],[f71,f3482])).
fof(f4175,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num',X17) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num',X18) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),X19)))))) ) | $spl6),
  inference(superposition,[],[f444,f3482])).
fof(f4174,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f436,f3482])).
fof(f4173,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X15))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X15,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9(X15,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f434,f3482])).
fof(f4171,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X14,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f354,f3482])).
fof(f4170,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X13))) | s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X13,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f350,f3482])).
fof(f4169,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X12))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X12,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f346,f3482])).
fof(f4168,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK1))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X11,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f344,f3482])).
fof(f4166,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X10,X9,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9(X10,X9,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f79,f3482])).
fof(f4165,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))) | s('type.num.num',X8) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X8,X7,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f78,f3482])).
fof(f4164,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num',X5) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X6,X5,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f77,f3482])).
fof(f4163,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) | $spl6),
  inference(superposition,[],[f73,f3482])).
fof(f4162,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6(X1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f72,f3482])).
fof(f4161,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f71,f3482])).
fof(f4139,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f3482,f444])).
fof(f4140,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f3482,f444])).
fof(f4141,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f3482,f444])).
fof(f4142,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f3482,f444])).
fof(f4143,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f3482,f444])).
fof(f4144,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f3482,f444])).
fof(f4145,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f3482,f444])).
fof(f4146,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f3482,f444])).
fof(f4147,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK3))))) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f3482,f444])).
fof(f4148,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f3482,f444])).
fof(f4149,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f3482,f444])).
fof(f4150,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9(sK1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f434])).
fof(f4151,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f350])).
fof(f4152,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f346])).
fof(f4153,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f436])).
fof(f4154,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f354])).
fof(f4155,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f344])).
fof(f4156,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f79])).
fof(f4157,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f78])).
fof(f4158,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3482,f77])).
fof(f3516,plain,(
  ( ! [X14,X12,X13,X11] : (s('type.num.num',sK1) != s('type.num.num',X12) | s('type.num.num',X13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X14))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),X14)))))) ) | $spl6),
  inference(superposition,[],[f444,f1643])).
fof(f3515,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.num.num',sK1) != s('type.num.num',X8) | s('type.num.num',X9) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),X10)))))) ) | $spl6),
  inference(superposition,[],[f444,f1645])).
fof(f3514,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),X6)))))) ) | $spl6),
  inference(superposition,[],[f444,f1641])).
fof(f3513,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2)))))) ) | $spl6),
  inference(superposition,[],[f444,f95])).
fof(f3482,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f95,f444])).
fof(f3483,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK3)))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f95,f444])).
fof(f3484,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK3)))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f95,f444])).
fof(f3485,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f95,f444])).
fof(f3486,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK3)))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f95,f444])).
fof(f3487,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f1645,f444])).
fof(f3488,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f1645,f444])).
fof(f3489,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f1645,f444])).
fof(f3490,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f1645,f444])).
fof(f3491,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f1645,f444])).
fof(f3492,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f1643,f444])).
fof(f3493,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f1643,f444])).
fof(f3494,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f1643,f444])).
fof(f3495,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f1643,f444])).
fof(f3496,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f1643,f444])).
fof(f3497,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f181,f444])).
fof(f3498,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f181,f444])).
fof(f3499,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f181,f444])).
fof(f3501,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f181,f444])).
fof(f3502,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f1641,f444])).
fof(f3503,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1645,f1641,f444])).
fof(f3504,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1643,f1641,f444])).
fof(f3505,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f181,f1641,f444])).
fof(f3506,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f1641,f444])).
fof(f2817,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')))) | s(bool,X2) = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f2807,f61])).
fof(f2807,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')))) | s(bool,X2) = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl6),
  inference(superposition,[],[f2606,f96])).
fof(f2611,plain,(
  ( ! [X9] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X9),s('type.list.list'(sK0),sK2)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),X9),s('type.list.list'(sK0),sK7('const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),X9,'type.list.list'(sK0)))))) ) | $spl4),
  inference(superposition,[],[f260,f93])).
fof(f2609,plain,(
  ( ! [X6,X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK3)),sK0))),X6,'type.num.num'))))) ) | $spl6),
  inference(superposition,[],[f260,f1643])).
fof(f2608,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0))),X4,'type.num.num'))))) ) | $spl6),
  inference(superposition,[],[f260,f1645])).
fof(f2607,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))),X2,'type.num.num'))))) ) | $spl6),
  inference(superposition,[],[f260,f1641])).
fof(f2606,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num'))))) ) | $spl6),
  inference(superposition,[],[f260,f95])).
fof(f2605,plain,(
  ( ! [X128,X129] : (s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X128),s('type.list.list'(sK0),sK3)),sK0))),X129,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X129),s('type.num.num',sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f2586,f1643])).
fof(f2586,plain,(
  ( ! [X128,X129] : (~p(s(bool,happ(s(fun('type.num.num',bool),X129),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X128),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X128),s('type.list.list'(sK0),sK3)),sK0))),X129,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f75,f1643])).
fof(f2580,plain,(
  ( ! [X118,X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X118))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X118,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X117),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X118,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X117),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f1643])).
fof(f2579,plain,(
  ( ! [X116,X115] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X116),s('type.num.num',sK1))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X115),s('type.list.list'(sK0),sK3)),sK0))),X116,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X115),s('type.list.list'(sK0),sK3)),sK0))),X116,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f1643])).
fof(f2578,plain,(
  ( ! [X114,X112,X113] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X113),X114))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.list.list'(X113),X114) = s('type.list.list'(X113),'const.list.APPEND_2'(s('type.list.list'(X113),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X112),s('type.list.list'(sK0),sK3)),sK0))),X114,X113)),s('type.list.list'(X113),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X112),s('type.list.list'(sK0),sK3)),sK0))),X114,X113))))) ) | $spl6),
  inference(superposition,[],[f436,f1643])).
fof(f2577,plain,(
  ( ! [X111,X109,X110] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X110),X111))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.list.list'(X110),X111) = s('type.list.list'(X110),'const.list.APPEND_2'(s('type.list.list'(X110),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X109),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X111,X110)),s('type.list.list'(X110),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X109),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X111,X110))))) ) | $spl6),
  inference(superposition,[],[f434,f1643])).
fof(f2573,plain,(
  ( ! [X103,X105,X104] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X103),s('type.list.list'(sK0),sK3)),sK0))),X105,X104))))) ) | $spl6),
  inference(superposition,[],[f354,f1643])).
fof(f2602,plain,(
  ( ! [X101,X102,X100] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X101),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X100),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X102,X101)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X101),X102))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f2572,f1643])).
fof(f2572,plain,(
  ( ! [X101,X102,X100] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X101),X102))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X100),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X101),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X100),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X102,X101))))) ) | $spl6),
  inference(superposition,[],[f350,f1643])).
fof(f2571,plain,(
  ( ! [X99,X98] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X99))) | s('type.num.num',X99) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X99,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X98),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f1643])).
fof(f2601,plain,(
  ( ! [X97,X96] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X96),s('type.list.list'(sK0),sK3)),sK0))),X97,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',sK1)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f2570,f1643])).
fof(f2570,plain,(
  ( ! [X97,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X96),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X96),s('type.list.list'(sK0),sK3)),sK0))),X97,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f1643])).
fof(f2569,plain,(
  ( ! [X94,X95,X93] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X94),X95))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X94),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X93),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X95,X94))))) ) | $spl6),
  inference(superposition,[],[f346,f1643])).
fof(f2600,plain,(
  ( ! [X92,X90,X91] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X91),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X90),s('type.list.list'(sK0),sK3)),sK0))),X92,X91)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X91),X92))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f2568,f1643])).
fof(f2568,plain,(
  ( ! [X92,X90,X91] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X91),X92))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X90),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X91),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X90),s('type.list.list'(sK0),sK3)),sK0))),X92,X91))))) ) | $spl6),
  inference(superposition,[],[f344,f1643])).
fof(f2599,plain,(
  ( ! [X88,X89] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X89,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X88),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X89)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f2567,f1643])).
fof(f2567,plain,(
  ( ! [X88,X89] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X89))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X88),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X89,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X88),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f1643])).
fof(f2566,plain,(
  ( ! [X87,X86] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',sK1))) | s('type.num.num',X87) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X86),s('type.list.list'(sK0),sK3)),sK0))),X87,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f1643])).
fof(f2594,plain,(
  ( ! [X70,X69] : (s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10(X70,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),sK3)),sK0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X70))))) ) | $spl6),
  inference(forward_demodulation,[],[f2556,f1643])).
fof(f2556,plain,(
  ( ! [X70,X69] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X70)))) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),sK3)),sK0)))),s('type.num.num',sK10(X70,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),sK3)),sK0)))))))) ) | $spl6),
  inference(superposition,[],[f85,f1643])).
fof(f2593,plain,(
  ( ! [X68,X67] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X67),s('type.list.list'(sK0),sK3)),sK0))),X68)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X68),s('type.num.num',sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f2555,f1643])).
fof(f2555,plain,(
  ( ! [X68,X67] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X68),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X67),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X67),s('type.list.list'(sK0),sK3)),sK0))),X68))))) ) | $spl6),
  inference(superposition,[],[f85,f1643])).
fof(f2554,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),X65))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',sK1))) | s('type.list.list'(X64),X65) = s('type.list.list'(X64),'const.list.APPEND_2'(s('type.list.list'(X64),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X63),s('type.list.list'(sK0),sK3)),sK0))),X66,X65,X64)),s('type.list.list'(X64),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X63),s('type.list.list'(sK0),sK3)),sK0))),X66,X65,X64))))) ) | $spl6),
  inference(superposition,[],[f79,f1643])).
fof(f2553,plain,(
  ( ! [X61,X59,X62,X60] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X62))) | s('type.list.list'(X60),X61) = s('type.list.list'(X60),'const.list.APPEND_2'(s('type.list.list'(X60),sK8(X62,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X59),s('type.list.list'(sK0),sK3)),sK0))),X61,X60)),s('type.list.list'(X60),sK9(X62,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X59),s('type.list.list'(sK0),sK3)),sK0))),X61,X60))))) ) | $spl6),
  inference(superposition,[],[f79,f1643])).
fof(f2592,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X55),s('type.list.list'(sK0),sK3)),sK0))),X58,X57,X56)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f2552,f1643])).
fof(f2552,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X55),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X55),s('type.list.list'(sK0),sK3)),sK0))),X58,X57,X56))))) ) | $spl6),
  inference(superposition,[],[f78,f1643])).
fof(f2551,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X52),X53))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X54))) | s('type.num.num',X54) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X52),sK9(X54,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X51),s('type.list.list'(sK0),sK3)),sK0))),X53,X52))))) ) | $spl6),
  inference(superposition,[],[f78,f1643])).
fof(f2550,plain,(
  ( ! [X47,X50,X48,X49] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X49))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',sK1))) | s('type.num.num',X50) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X47),s('type.list.list'(sK0),sK3)),sK0))),X50,X49,X48))))) ) | $spl6),
  inference(superposition,[],[f77,f1643])).
fof(f2591,plain,(
  ( ! [X45,X43,X46,X44] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X44),sK8(X46,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X43),s('type.list.list'(sK0),sK3)),sK0))),X45,X44)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X44),X45))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X46)))) ) | $spl6),
  inference(forward_demodulation,[],[f2549,f1643])).
fof(f2549,plain,(
  ( ! [X45,X43,X46,X44] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X44),X45))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X46))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X43),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X44),sK8(X46,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X43),s('type.list.list'(sK0),sK3)),sK0))),X45,X44))))) ) | $spl6),
  inference(superposition,[],[f77,f1643])).
fof(f2547,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),X37) = s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X35),s('type.list.list'(sK0),sK3)),sK0))),X37,X36)),s('type.list.list'(X36),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X35),s('type.list.list'(sK0),sK3)),sK0))),X37,X36))))) ) | $spl6),
  inference(superposition,[],[f72,f1643])).
fof(f2589,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X32),s('type.list.list'(sK0),sK3)),sK0))),X34,X33)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34)))) ) | $spl6),
  inference(forward_demodulation,[],[f2546,f1643])).
fof(f2546,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X32),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X32),s('type.list.list'(sK0),sK3)),sK0))),X34,X33))))) ) | $spl6),
  inference(superposition,[],[f71,f1643])).
fof(f2545,plain,(
  ( ! [X30,X31] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK1))) | s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),sK3)),sK0)) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),sK3)),sK0),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f436,f1643])).
fof(f2542,plain,(
  ( ! [X26,X25] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X26,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X25),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f354,f1643])).
fof(f2539,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK1))) | s('type.num.num',X20) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X20,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f344,f1643])).
fof(f2537,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) | s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3)),sK0)) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X17,X16,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3)),sK0),sK0)),s('type.list.list'(sK0),sK9(X17,X16,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f79,f1643])).
fof(f2536,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) | s('type.num.num',X14) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X14,X13,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f78,f1643])).
fof(f2535,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X11,X10,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f77,f1643])).
fof(f2534,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.num.num',sK1) != s('type.num.num',X6) | s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK3)),sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7)))) ) | $spl6),
  inference(superposition,[],[f73,f1643])).
fof(f2533,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) | s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0)) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X4,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0),sK0)),s('type.list.list'(sK0),sK6(X4,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f72,f1643])).
fof(f2532,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X2,sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f71,f1643])).
fof(f1974,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(X5),'const.list.NIL_0')),X6,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(X5),'const.list.NIL_0')),X6,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f438,f181])).
fof(f1973,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK1))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0))),X4,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0))),X4,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f1645])).
fof(f1972,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))),X2,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))),X2,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f1641])).
fof(f1970,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X6,'const.list.LENGTH_1'(s('type.list.list'(X5),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X6,'const.list.LENGTH_1'(s('type.list.list'(X5),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f438,f181])).
fof(f1969,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X4))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X4,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X4,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f1645])).
fof(f1968,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X2))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X2,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X2,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f438,f1641])).
fof(f1966,plain,(
  ( ! [X125,X124] : (s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X124),s('type.list.list'(sK0),sK3)),sK0))),X125,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X125),s('type.num.num',sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f1947,f1645])).
fof(f1947,plain,(
  ( ! [X125,X124] : (~p(s(bool,happ(s(fun('type.num.num',bool),X125),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X124),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X124),s('type.list.list'(sK0),sK3)),sK0))),X125,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f75,f1645])).
fof(f1941,plain,(
  ( ! [X114,X112,X113] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X113),X114))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.list.list'(X113),X114) = s('type.list.list'(X113),'const.list.APPEND_2'(s('type.list.list'(X113),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X112),s('type.list.list'(sK0),sK3)),sK0))),X114,X113)),s('type.list.list'(X113),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X112),s('type.list.list'(sK0),sK3)),sK0))),X114,X113))))) ) | $spl6),
  inference(superposition,[],[f436,f1645])).
fof(f1940,plain,(
  ( ! [X111,X109,X110] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X110),X111))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.list.list'(X110),X111) = s('type.list.list'(X110),'const.list.APPEND_2'(s('type.list.list'(X110),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X109),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X111,X110)),s('type.list.list'(X110),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X109),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X111,X110))))) ) | $spl6),
  inference(superposition,[],[f434,f1645])).
fof(f1936,plain,(
  ( ! [X103,X105,X104] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X103),s('type.list.list'(sK0),sK3)),sK0))),X105,X104))))) ) | $spl6),
  inference(superposition,[],[f354,f1645])).
fof(f1963,plain,(
  ( ! [X101,X102,X100] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X101),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X100),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X102,X101)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X101),X102))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f1935,f1645])).
fof(f1935,plain,(
  ( ! [X101,X102,X100] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X101),X102))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X100),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X101),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X100),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X102,X101))))) ) | $spl6),
  inference(superposition,[],[f350,f1645])).
fof(f1934,plain,(
  ( ! [X99,X98] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X99))) | s('type.num.num',X99) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X99,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X98),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f1645])).
fof(f1962,plain,(
  ( ! [X97,X96] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X96),s('type.list.list'(sK0),sK3)),sK0))),X97,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',sK1)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1933,f1645])).
fof(f1933,plain,(
  ( ! [X97,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X96),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X96),s('type.list.list'(sK0),sK3)),sK0))),X97,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f1645])).
fof(f1932,plain,(
  ( ! [X94,X95,X93] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X94),X95))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X94),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X93),s('type.list.list'(sK0),sK3)),sK0))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X95,X94))))) ) | $spl6),
  inference(superposition,[],[f346,f1645])).
fof(f1961,plain,(
  ( ! [X92,X90,X91] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X91),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X90),s('type.list.list'(sK0),sK3)),sK0))),X92,X91)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X91),X92))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f1931,f1645])).
fof(f1931,plain,(
  ( ! [X92,X90,X91] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X91),X92))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X90),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X91),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X90),s('type.list.list'(sK0),sK3)),sK0))),X92,X91))))) ) | $spl6),
  inference(superposition,[],[f344,f1645])).
fof(f1960,plain,(
  ( ! [X88,X89] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X89,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X88),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X89)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1930,f1645])).
fof(f1930,plain,(
  ( ! [X88,X89] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X89))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X88),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X89,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X88),s('type.list.list'(sK0),sK3)),sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f1645])).
fof(f1929,plain,(
  ( ! [X87,X86] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',sK1))) | s('type.num.num',X87) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X86),s('type.list.list'(sK0),sK3)),sK0))),X87,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f1645])).
fof(f1955,plain,(
  ( ! [X70,X69] : (s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10(X70,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),sK3)),sK0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X70))))) ) | $spl6),
  inference(forward_demodulation,[],[f1919,f1645])).
fof(f1919,plain,(
  ( ! [X70,X69] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X70)))) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),sK3)),sK0)))),s('type.num.num',sK10(X70,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),sK3)),sK0)))))))) ) | $spl6),
  inference(superposition,[],[f85,f1645])).
fof(f1954,plain,(
  ( ! [X68,X67] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X67),s('type.list.list'(sK0),sK3)),sK0))),X68)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X68),s('type.num.num',sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f1918,f1645])).
fof(f1918,plain,(
  ( ! [X68,X67] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X68),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X67),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X67),s('type.list.list'(sK0),sK3)),sK0))),X68))))) ) | $spl6),
  inference(superposition,[],[f85,f1645])).
fof(f1917,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),X65))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',sK1))) | s('type.list.list'(X64),X65) = s('type.list.list'(X64),'const.list.APPEND_2'(s('type.list.list'(X64),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X63),s('type.list.list'(sK0),sK3)),sK0))),X66,X65,X64)),s('type.list.list'(X64),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X63),s('type.list.list'(sK0),sK3)),sK0))),X66,X65,X64))))) ) | $spl6),
  inference(superposition,[],[f79,f1645])).
fof(f1916,plain,(
  ( ! [X61,X59,X62,X60] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X62))) | s('type.list.list'(X60),X61) = s('type.list.list'(X60),'const.list.APPEND_2'(s('type.list.list'(X60),sK8(X62,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X59),s('type.list.list'(sK0),sK3)),sK0))),X61,X60)),s('type.list.list'(X60),sK9(X62,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X59),s('type.list.list'(sK0),sK3)),sK0))),X61,X60))))) ) | $spl6),
  inference(superposition,[],[f79,f1645])).
fof(f1953,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X55),s('type.list.list'(sK0),sK3)),sK0))),X58,X57,X56)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f1915,f1645])).
fof(f1915,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X55),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X55),s('type.list.list'(sK0),sK3)),sK0))),X58,X57,X56))))) ) | $spl6),
  inference(superposition,[],[f78,f1645])).
fof(f1914,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X52),X53))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X54))) | s('type.num.num',X54) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X52),sK9(X54,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X51),s('type.list.list'(sK0),sK3)),sK0))),X53,X52))))) ) | $spl6),
  inference(superposition,[],[f78,f1645])).
fof(f1913,plain,(
  ( ! [X47,X50,X48,X49] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X49))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',sK1))) | s('type.num.num',X50) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X47),s('type.list.list'(sK0),sK3)),sK0))),X50,X49,X48))))) ) | $spl6),
  inference(superposition,[],[f77,f1645])).
fof(f1952,plain,(
  ( ! [X45,X43,X46,X44] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X44),sK8(X46,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X43),s('type.list.list'(sK0),sK3)),sK0))),X45,X44)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X44),X45))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X46)))) ) | $spl6),
  inference(forward_demodulation,[],[f1912,f1645])).
fof(f1912,plain,(
  ( ! [X45,X43,X46,X44] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X44),X45))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X46))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X43),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X44),sK8(X46,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X43),s('type.list.list'(sK0),sK3)),sK0))),X45,X44))))) ) | $spl6),
  inference(superposition,[],[f77,f1645])).
fof(f1910,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),X37) = s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X35),s('type.list.list'(sK0),sK3)),sK0))),X37,X36)),s('type.list.list'(X36),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X35),s('type.list.list'(sK0),sK3)),sK0))),X37,X36))))) ) | $spl6),
  inference(superposition,[],[f72,f1645])).
fof(f1950,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X32),s('type.list.list'(sK0),sK3)),sK0))),X34,X33)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34)))) ) | $spl6),
  inference(forward_demodulation,[],[f1909,f1645])).
fof(f1909,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X32),s('type.list.list'(sK0),sK3)),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X32),s('type.list.list'(sK0),sK3)),sK0))),X34,X33))))) ) | $spl6),
  inference(superposition,[],[f71,f1645])).
fof(f1908,plain,(
  ( ! [X30,X31] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK1))) | s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),sK3)),sK0)) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,sK6(sK1,'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),sK3)),sK0),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,sK6(sK1,'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f436,f1645])).
fof(f1905,plain,(
  ( ! [X26,X25] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X26,sK6(sK1,'const.list.CONS_2'(s(sK0,X25),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f354,f1645])).
fof(f1902,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK1))) | s('type.num.num',X20) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X20,sK6(sK1,'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f344,f1645])).
fof(f1900,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) | s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3)),sK0)) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X17,X16,sK6(sK1,'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3)),sK0),sK0)),s('type.list.list'(sK0),sK9(X17,X16,sK6(sK1,'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f79,f1645])).
fof(f1899,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) | s('type.num.num',X14) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X14,X13,sK6(sK1,'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f78,f1645])).
fof(f1898,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X11,X10,sK6(sK1,'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f77,f1645])).
fof(f1897,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.num.num',sK1) != s('type.num.num',X6) | s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK3)),sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7)))) ) | $spl6),
  inference(superposition,[],[f73,f1645])).
fof(f1896,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) | s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0)) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X4,sK6(sK1,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0),sK0)),s('type.list.list'(sK0),sK6(X4,sK6(sK1,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f72,f1645])).
fof(f1895,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X2,sK6(sK1,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0),sK0))))) ) | $spl6),
  inference(superposition,[],[f71,f1645])).
fof(f1846,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X5),'const.list.NIL_0')),X7,X6)),s('type.list.list'(X6),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X5),'const.list.NIL_0')),X7,X6))))) ) | $spl6),
  inference(superposition,[],[f436,f181])).
fof(f1845,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.APPEND_2'(s('type.list.list'(X3),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK3)))),X4,X3)),s('type.list.list'(X3),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK3)))),X4,X3))))) ) | $spl6),
  inference(superposition,[],[f436,f1641])).
fof(f1843,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK1))) | s('type.list.list'(X3),'const.list.NIL_0') = s('type.list.list'(X3),'const.list.APPEND_2'(s('type.list.list'(X3),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,'const.list.NIL_0',X3)),s('type.list.list'(X3),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,'const.list.NIL_0',X3))))) ) | $spl6),
  inference(superposition,[],[f436,f181])).
fof(f1842,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f436,f1641])).
fof(f1847,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1841,f93])).
fof(f1841,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f436,f93])).
fof(f1799,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),sK8('const.list.LENGTH_1'(s('type.list.list'(X5),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X7,X6)),s('type.list.list'(X6),sK9('const.list.LENGTH_1'(s('type.list.list'(X5),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X7,X6))))) ) | $spl6),
  inference(superposition,[],[f434,f181])).
fof(f1798,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.APPEND_2'(s('type.list.list'(X3),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,X3)),s('type.list.list'(X3),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,X3))))) ) | $spl6),
  inference(superposition,[],[f434,f1641])).
fof(f1797,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0)),s('type.list.list'(X0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(superposition,[],[f434,f95])).
fof(f1800,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X0,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X0,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1794,f93])).
fof(f1794,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X0,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9(X0,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f434,f93])).
fof(f1793,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4))) | s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1792,f93])).
fof(f1792,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))) ) | ($spl4 | $spl6)),
  inference(trivial_inequality_removal,[],[f1790])).
fof(f1790,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f448,f93])).
fof(f1728,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f383])).
fof(f1727,plain,(
  ( ! [X111,X110] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X110),s('type.list.list'(sK0),sK3)))),X111,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X111),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | $spl6),
  inference(forward_demodulation,[],[f1691,f1641])).
fof(f1691,plain,(
  ( ! [X111,X110] : (~p(s(bool,happ(s(fun('type.num.num',bool),X111),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X110),s('type.list.list'(sK0),sK3))))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X110),s('type.list.list'(sK0),sK3)))),X111,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f75,f1641])).
fof(f1685,plain,(
  ( ! [X99,X100,X98] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X99),X100))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X99),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X98),s('type.list.list'(sK0),sK3)))),X100,X99))))) ) | $spl6),
  inference(superposition,[],[f354,f1641])).
fof(f1720,plain,(
  ( ! [X97,X95,X96] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X96),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X95),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X97,X96)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X96),X97))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f1684,f1641])).
fof(f1684,plain,(
  ( ! [X97,X95,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X96),X97))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X95),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X96),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X95),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X97,X96))))) ) | $spl6),
  inference(superposition,[],[f350,f1641])).
fof(f1683,plain,(
  ( ! [X94,X93] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X94))) | s('type.num.num',X94) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X94,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X93),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f1641])).
fof(f1719,plain,(
  ( ! [X92,X91] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X91),s('type.list.list'(sK0),sK3)))),X92,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1682,f1641])).
fof(f1682,plain,(
  ( ! [X92,X91] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X91),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X91),s('type.list.list'(sK0),sK3)))),X92,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f348,f1641])).
fof(f1681,plain,(
  ( ! [X90,X88,X89] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X89),X90))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X89),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X88),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X90,X89))))) ) | $spl6),
  inference(superposition,[],[f346,f1641])).
fof(f1718,plain,(
  ( ! [X87,X85,X86] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X85),s('type.list.list'(sK0),sK3)))),X87,X86)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),X87))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f1680,f1641])).
fof(f1680,plain,(
  ( ! [X87,X85,X86] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),X87))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X85),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X85),s('type.list.list'(sK0),sK3)))),X87,X86))))) ) | $spl6),
  inference(superposition,[],[f344,f1641])).
fof(f1717,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X84,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X83),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X84)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1679,f1641])).
fof(f1679,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X84))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X83),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X84,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X83),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f1641])).
fof(f1678,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',X82) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X81),s('type.list.list'(sK0),sK3)))),X82,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f340,f1641])).
fof(f1698,plain,(
  ( ! [X64,X65] : (s('type.num.num',X65) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK10(X65,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X64),s('type.list.list'(sK0),sK3)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X65))))) ) | $spl6),
  inference(forward_demodulation,[],[f1668,f1641])).
fof(f1668,plain,(
  ( ! [X64,X65] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X65)))) | s('type.num.num',X65) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X64),s('type.list.list'(sK0),sK3))))),s('type.num.num',sK10(X65,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X64),s('type.list.list'(sK0),sK3))))))))) ) | $spl6),
  inference(superposition,[],[f85,f1641])).
fof(f1697,plain,(
  ( ! [X62,X63] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X62),s('type.list.list'(sK0),sK3)))),X63)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | $spl6),
  inference(forward_demodulation,[],[f1667,f1641])).
fof(f1667,plain,(
  ( ! [X62,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X62),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X62),s('type.list.list'(sK0),sK3)))),X63))))) ) | $spl6),
  inference(superposition,[],[f85,f1641])).
fof(f1666,plain,(
  ( ! [X61,X59,X60,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),X60))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.list.list'(X59),X60) = s('type.list.list'(X59),'const.list.APPEND_2'(s('type.list.list'(X59),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X58),s('type.list.list'(sK0),sK3)))),X61,X60,X59)),s('type.list.list'(X59),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X58),s('type.list.list'(sK0),sK3)))),X61,X60,X59))))) ) | $spl6),
  inference(superposition,[],[f79,f1641])).
fof(f1665,plain,(
  ( ! [X57,X54,X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X57))) | s('type.list.list'(X55),X56) = s('type.list.list'(X55),'const.list.APPEND_2'(s('type.list.list'(X55),sK8(X57,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X54),s('type.list.list'(sK0),sK3)))),X56,X55)),s('type.list.list'(X55),sK9(X57,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X54),s('type.list.list'(sK0),sK3)))),X56,X55))))) ) | $spl6),
  inference(superposition,[],[f79,f1641])).
fof(f1696,plain,(
  ( ! [X52,X50,X53,X51] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X50),s('type.list.list'(sK0),sK3)))),X53,X52,X51)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f1664,f1641])).
fof(f1664,plain,(
  ( ! [X52,X50,X53,X51] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X50),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X50),s('type.list.list'(sK0),sK3)))),X53,X52,X51))))) ) | $spl6),
  inference(superposition,[],[f78,f1641])).
fof(f1663,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X47),X48))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X49))) | s('type.num.num',X49) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X47),sK9(X49,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X46),s('type.list.list'(sK0),sK3)))),X48,X47))))) ) | $spl6),
  inference(superposition,[],[f78,f1641])).
fof(f1662,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X44))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',X45) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X42),s('type.list.list'(sK0),sK3)))),X45,X44,X43))))) ) | $spl6),
  inference(superposition,[],[f77,f1641])).
fof(f1695,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),sK8(X41,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X38),s('type.list.list'(sK0),sK3)))),X40,X39)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),X40))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X41)))) ) | $spl6),
  inference(forward_demodulation,[],[f1661,f1641])).
fof(f1661,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),X40))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X41))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X38),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),sK8(X41,'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X38),s('type.list.list'(sK0),sK3)))),X40,X39))))) ) | $spl6),
  inference(superposition,[],[f77,f1641])).
fof(f1659,plain,(
  ( ! [X30,X31,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),X32))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.list.list'(X31),X32) = s('type.list.list'(X31),'const.list.CONS_2'(s(X31,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),sK3)))),X32,X31)),s('type.list.list'(X31),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),sK3)))),X32,X31))))) ) | $spl6),
  inference(superposition,[],[f72,f1641])).
fof(f1693,plain,(
  ( ! [X28,X29,X27] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X27),s('type.list.list'(sK0),sK3)))),X29,X28)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f1658,f1641])).
fof(f1658,plain,(
  ( ! [X28,X29,X27] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X27),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X27),s('type.list.list'(sK0),sK3)))),X29,X28))))) ) | $spl6),
  inference(superposition,[],[f71,f1641])).
fof(f1657,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X26,'const.list.CONS_2'(s(sK0,X25),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f354,f1641])).
fof(f1656,plain,(
  ( ! [X24,X23] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X24))) | s('type.num.num',X24) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X24,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X23),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f350,f1641])).
fof(f1655,plain,(
  ( ! [X21,X22] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X22))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X22,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f346,f1641])).
fof(f1654,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK1))) | s('type.num.num',X20) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X20,'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f344,f1641])).
fof(f1652,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(X17,X16,'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK9(X17,X16,'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f79,f1641])).
fof(f1651,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) | s('type.num.num',X14) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X14,X13,'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f78,f1641])).
fof(f1650,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X11,X10,'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f77,f1641])).
fof(f1649,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.num.num',X6) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.list.list'(sK0),X7) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7)))) ) | $spl6),
  inference(superposition,[],[f73,f1641])).
fof(f1648,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X4,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6(X4,'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f72,f1641])).
fof(f1647,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X2,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(superposition,[],[f71,f1641])).
fof(f1643,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f280])).
fof(f1644,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f72])).
fof(f1645,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1641,f71])).
fof(f1641,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))) ) | $spl6),
  inference(forward_demodulation,[],[f1636,f95])).
fof(f1636,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f95,f636])).
fof(f1635,plain,(
  ( ! [X103,X104] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK7('const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),X103,'type.list.list'(sK0))) | s(bool,X104) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X103),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X104)) ) | $spl4),
  inference(subsumption_resolution,[],[f1353,f61])).
fof(f1353,plain,(
  ( ! [X103,X104] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK7('const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),X103,'type.list.list'(sK0))) | s(bool,X104) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X103),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X104)) ) | $spl4),
  inference(superposition,[],[f194,f96])).
fof(f1634,plain,(
  ( ! [X101,X102] : (s(bool,X102) = s(bool,happ(s(fun('type.num.num',bool),X101),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X101,'type.num.num')) | s(bool,'T_0') = s(bool,X102)) ) | $spl6),
  inference(subsumption_resolution,[],[f1352,f61])).
fof(f1352,plain,(
  ( ! [X101,X102] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X101,'type.num.num')) | s(bool,X102) = s(bool,happ(s(fun('type.num.num',bool),X101),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X102)) ) | $spl6),
  inference(superposition,[],[f192,f96])).
fof(f1624,plain,(
  ( ! [X66,X65] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X65)))) | s(bool,X66) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X66)) ) | $spl6),
  inference(subsumption_resolution,[],[f1338,f61])).
fof(f1338,plain,(
  ( ! [X66,X65] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X65)))) | s(bool,X66) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X66)) ) | $spl6),
  inference(superposition,[],[f235,f96])).
fof(f1622,plain,(
  ( ! [X48,X49] : (s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10(X48,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | s(bool,X49) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X48))) | s(bool,'T_0') = s(bool,X49)) ) | $spl6),
  inference(subsumption_resolution,[],[f1327,f61])).
fof(f1327,plain,(
  ( ! [X48,X49] : (~p(s(bool,'T_0')) | s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10(X48,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | s(bool,X49) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X48))) | s(bool,'T_0') = s(bool,X49)) ) | $spl6),
  inference(superposition,[],[f233,f96])).
fof(f915,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f913,f181])).
fof(f913,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f348,f181])).
fof(f911,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X2,'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f348,f181])).
fof(f766,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f340,f181])).
fof(f768,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X2,'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) ) | $spl4),
  inference(forward_demodulation,[],[f764,f181])).
fof(f764,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X2,'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f340,f181])).
fof(f636,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))))) ) | $spl6),
  inference(equality_resolution,[],[f413])).
fof(f507,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),X4,X3))))) ) | $spl6),
  inference(superposition,[],[f354,f181])).
fof(f505,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'const.list.NIL_0',X1))))) ) | $spl6),
  inference(superposition,[],[f354,f181])).
fof(f504,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f354,f93])).
fof(f495,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK9('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f493,f181])).
fof(f493,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK9('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,X3))))) ) | $spl6),
  inference(superposition,[],[f350,f181])).
fof(f494,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f492,f95])).
fof(f492,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(superposition,[],[f350,f95])).
fof(f490,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(X0,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f350,f93])).
fof(f473,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK8('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,X3))))) ) | $spl6),
  inference(superposition,[],[f346,f181])).
fof(f470,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(X0,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f346,f93])).
fof(f463,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),X4,X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f461,f181])).
fof(f461,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')),X4,X3))))) ) | $spl6),
  inference(superposition,[],[f344,f181])).
fof(f462,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f460,f95])).
fof(f460,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(superposition,[],[f344,f95])).
fof(f459,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'const.list.NIL_0',X1))))) ) | $spl6),
  inference(superposition,[],[f344,f181])).
fof(f458,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f344,f93])).
fof(f448,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.num.num',sK1) != s('type.num.num',X1) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f443,f95])).
fof(f436,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,X1,X0)),s('type.list.list'(X0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,X1,X0))))) ) | $spl6),
  inference(superposition,[],[f79,f95])).
fof(f434,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0)),s('type.list.list'(X0),sK9(X2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(superposition,[],[f79,f95])).
fof(f413,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK3))) | s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X1)))) ) | $spl6),
  inference(superposition,[],[f73,f95])).
fof(f386,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X0,sK3,sK0)),s('type.list.list'(sK0),sK6(X0,sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f72,f95])).
fof(f388,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6(X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f385,f93])).
fof(f385,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6(X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f72,f93])).
fof(f383,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0)),s('type.list.list'(X0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(superposition,[],[f72,f95])).
fof(f354,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,X1,X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f352,f95])).
fof(f352,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,X1,X0))))) ) | $spl6),
  inference(superposition,[],[f78,f95])).
fof(f350,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK9(X2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(superposition,[],[f78,f95])).
fof(f344,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,X1,X0))))) ) | $spl6),
  inference(superposition,[],[f77,f95])).
fof(f346,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f342,f95])).
fof(f342,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(superposition,[],[f77,f95])).
fof(f278,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X0,sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f71,f95])).
fof(f277,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X0,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f71,f93])).
fof(f280,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f275,f95])).
fof(f275,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,X0))))) ) | $spl6),
  inference(superposition,[],[f71,f95])).
fof(f235,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f229,f95])).
fof(f229,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(superposition,[],[f85,f95])).
fof(f233,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10(X0,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) ) | $spl6),
  inference(forward_demodulation,[],[f227,f95])).
fof(f227,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK10(X0,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) ) | $spl6),
  inference(superposition,[],[f85,f95])).
fof(f194,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X3),s('type.list.list'(sK0),sK2)))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK7('const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),X3,'type.list.list'(sK0)))) ) | $spl4),
  inference(forward_demodulation,[],[f187,f93])).
fof(f187,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X3),s('type.list.list'(sK0),sK2)))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) = s('type.list.list'(sK0),sK7('const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),X3,'type.list.list'(sK0)))) ) | $spl4),
  inference(superposition,[],[f75,f93])).
fof(f192,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f185,f95])).
fof(f185,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f75,f95])).
fof(f6645,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl182)),
  inference(global_subsumption,[],[f4998,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6644,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl184)),
  inference(global_subsumption,[],[f5003,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6643,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl186)),
  inference(global_subsumption,[],[f5011,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6642,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl188)),
  inference(global_subsumption,[],[f5012,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6641,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl202)),
  inference(global_subsumption,[],[f5033,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6640,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99)),
  inference(global_subsumption,[],[f2916,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2916,plain,(
  ~p(s(bool,f(s(bool,'F_0')))) | $spl99),
  inference(unit_resulting_resolution,[],[f61,f2842,f84])).
fof(f6639,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl69 | $spl99)),
  inference(global_subsumption,[],[f2932,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2932,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl69 | $spl99)),
  inference(forward_demodulation,[],[f2910,f1743])).
fof(f2910,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl69 | $spl99)),
  inference(unit_resulting_resolution,[],[f2842,f1758])).
fof(f6638,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99)),
  inference(global_subsumption,[],[f2904,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2904,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl99),
  inference(unit_resulting_resolution,[],[f63,f2842,f125])).
fof(f6637,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99)),
  inference(global_subsumption,[],[f2903,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2903,plain,(
  ~p(s(bool,f(s(bool,'F_0')))) | $spl99),
  inference(unit_resulting_resolution,[],[f2842,f98])).
fof(f6636,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl11 | $spl99)),
  inference(global_subsumption,[],[f2894,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2894,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl11 | $spl99)),
  inference(unit_resulting_resolution,[],[f105,f2842,f96])).
fof(f6635,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl11 | $spl99)),
  inference(global_subsumption,[],[f2885,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2885,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl11 | $spl99)),
  inference(unit_resulting_resolution,[],[f105,f2842,f96])).
fof(f6634,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99)),
  inference(global_subsumption,[],[f2884,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2884,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl99),
  inference(unit_resulting_resolution,[],[f2842,f64])).
fof(f6633,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99 | $spl107)),
  inference(global_subsumption,[],[f4300,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f4300,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl99 | $spl107)),
  inference(forward_demodulation,[],[f4281,f4285])).
fof(f4281,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl99 | $spl107)),
  inference(unit_resulting_resolution,[],[f2842,f4236,f125])).
fof(f6632,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99 | $spl135)),
  inference(global_subsumption,[],[f4498,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f4498,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl99 | $spl135)),
  inference(forward_demodulation,[],[f4479,f4483])).
fof(f4479,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | ($spl99 | $spl135)),
  inference(unit_resulting_resolution,[],[f2842,f4429,f125])).
fof(f6631,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99 | $spl139)),
  inference(global_subsumption,[],[f4690,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f4690,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl99 | $spl139)),
  inference(forward_demodulation,[],[f4671,f4675])).
fof(f4671,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl99 | $spl139)),
  inference(unit_resulting_resolution,[],[f2842,f4434,f125])).
fof(f6630,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99 | $spl161)),
  inference(global_subsumption,[],[f4769,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f4769,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl99 | $spl161)),
  inference(forward_demodulation,[],[f4750,f4754])).
fof(f4750,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl99 | $spl161)),
  inference(unit_resulting_resolution,[],[f2842,f4626,f125])).
fof(f6629,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl207)),
  inference(global_subsumption,[],[f5179,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6628,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl207)),
  inference(global_subsumption,[],[f5176,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6627,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl69 | $spl207)),
  inference(global_subsumption,[],[f5220,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6626,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl207)),
  inference(global_subsumption,[],[f5152,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6625,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl207)),
  inference(global_subsumption,[],[f5151,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6624,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99 | $spl207)),
  inference(global_subsumption,[],[f5149,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f5149,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl99 | $spl207)),
  inference(unit_resulting_resolution,[],[f2842,f5103,f96])).
fof(f6623,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5146,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6622,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl11 | $spl207)),
  inference(global_subsumption,[],[f5144,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6621,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl99 | $spl207)),
  inference(global_subsumption,[],[f5142,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f5142,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl99 | $spl207)),
  inference(unit_resulting_resolution,[],[f2842,f5103,f96])).
fof(f6620,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl207)),
  inference(global_subsumption,[],[f5139,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6619,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl11 | $spl207)),
  inference(global_subsumption,[],[f5137,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6618,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl207)),
  inference(global_subsumption,[],[f5136,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6617,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl207)),
  inference(global_subsumption,[],[f5194,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6616,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl207)),
  inference(global_subsumption,[],[f5193,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6615,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl69 | $spl99 | $spl211)),
  inference(global_subsumption,[],[f5330,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f5330,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl69 | $spl99 | $spl211)),
  inference(forward_demodulation,[],[f5249,f1743])).
fof(f5249,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl99 | $spl211)),
  inference(unit_resulting_resolution,[],[f2842,f5106,f96])).
fof(f6614,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl69 | $spl207 | $spl211)),
  inference(global_subsumption,[],[f5331,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6613,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl69 | $spl99 | $spl211)),
  inference(global_subsumption,[],[f5335,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f5335,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl69 | $spl99 | $spl211)),
  inference(forward_demodulation,[],[f5241,f1743])).
fof(f5241,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl99 | $spl211)),
  inference(unit_resulting_resolution,[],[f2842,f5106,f96])).
fof(f6612,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl69 | $spl207 | $spl211)),
  inference(global_subsumption,[],[f5336,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6611,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63)),
  inference(global_subsumption,[],[f627,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6610,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63)),
  inference(global_subsumption,[],[f625,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6609,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63)),
  inference(global_subsumption,[],[f622,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6608,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63)),
  inference(global_subsumption,[],[f621,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6607,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63)),
  inference(global_subsumption,[],[f620,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6606,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl11 | $spl63)),
  inference(global_subsumption,[],[f1077,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6605,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl11 | $spl63)),
  inference(global_subsumption,[],[f1072,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6604,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63)),
  inference(global_subsumption,[],[f1481,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6603,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63)),
  inference(global_subsumption,[],[f1460,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6602,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl69)),
  inference(global_subsumption,[],[f1757,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6601,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl69)),
  inference(global_subsumption,[],[f2103,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6600,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl99)),
  inference(global_subsumption,[],[f2898,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2898,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl99)),
  inference(unit_resulting_resolution,[],[f618,f2842,f96])).
fof(f6599,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl99)),
  inference(global_subsumption,[],[f2889,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f2889,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl63 | $spl99)),
  inference(unit_resulting_resolution,[],[f618,f2842,f96])).
fof(f6598,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl107)),
  inference(global_subsumption,[],[f4303,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6597,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl135)),
  inference(global_subsumption,[],[f4501,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6596,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl139)),
  inference(global_subsumption,[],[f4693,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6595,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl161)),
  inference(global_subsumption,[],[f4772,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6594,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl69 | $spl211)),
  inference(global_subsumption,[],[f5333,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6593,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl63 | $spl69 | $spl211)),
  inference(global_subsumption,[],[f5338,f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6592,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f60,f59,f58,f61,f64,f68,f67,f73,f72,f71,f80,f79,f78,f77,f84,f81,f87,f95,f93,f96,f98,f102,f122,f125,f126,f75,f74,f76,f86,f85,f63,f169,f170,f181,f192,f193,f194,f188,f189,f205,f213,f212,f233,f234,f235,f236,f241,f246,f258,f260,f280,f281,f277,f278,f279,f304,f305,f331,f336,f340,f341,f346,f347,f344,f345,f348,f349,f350,f351,f354,f355,f362,f363,f371,f383,f384,f388,f386,f387,f413,f414,f415,f422,f424,f438,f433,f434,f435,f436,f437,f448,f444,f453,f458,f459,f462,f463,f466,f470,f473,f490,f494,f495,f504,f505,f507,f636,f768,f766,f911,f915,f1141,f1234,f1235,f1236,f1237,f1238,f1303,f1304,f1621,f1622,f1623,f1624,f1625,f1626,f1634,f1635,f1354,f1355,f1356,f1357,f1358,f1641,f1645,f1644,f1643,f1647,f1648,f1649,f1650,f1651,f1652,f1654,f1655,f1656,f1657,f1693,f1659,f1695,f1662,f1663,f1696,f1665,f1666,f1697,f1698,f1701,f1705,f1709,f1713,f1678,f1717,f1718,f1681,f1719,f1683,f1720,f1685,f1687,f1722,f1727,f1728,f1793,f1800,f1797,f1798,f1799,f1847,f1842,f1843,f1845,f1846,f1895,f1896,f1897,f1898,f1899,f1900,f1902,f1905,f1908,f1950,f1910,f1952,f1913,f1914,f1953,f1916,f1917,f1954,f1955,f1929,f1960,f1961,f1932,f1962,f1934,f1963,f1936,f1940,f1941,f1966,f1968,f1969,f1970,f1972,f1973,f1974,f2251,f2522,f2532,f2533,f2534,f2535,f2536,f2537,f2539,f2542,f2545,f2589,f2547,f2591,f2550,f2551,f2592,f2553,f2554,f2593,f2594,f2566,f2599,f2600,f2569,f2601,f2571,f2602,f2573,f2577,f2578,f2579,f2580,f2605,f2606,f2607,f2608,f2609,f2610,f2611,f2612,f2613,f2614,f2623,f2625,f2655,f2663,f2664,f2675,f2705,f2794,f2817,f2830,f2831,f2832,f2833,f2834,f3005,f3172,f3363,f3366,f3386,f3506,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3498,f3497,f3496,f3495,f3494,f3493,f3492,f3491,f3490,f3489,f3488,f3487,f3486,f3485,f3484,f3483,f3482,f3513,f3514,f3515,f3516,f3517,f3518,f4158,f4157,f4156,f4155,f4154,f4153,f4152,f4151,f4150,f4149,f4148,f4147,f4146,f4145,f4144,f4143,f4142,f4141,f4140,f4139,f4161,f4162,f4163,f4164,f4165,f4166,f4168,f4169,f4170,f4171,f4173,f4174,f4175,f4223,f4177,f4225,f4180,f4181,f4226,f4183,f4184,f4227,f4228,f4233,f4234,f4239,f4244,f4196,f4249,f4250,f4199,f4251,f4201,f4252,f4203,f4205,f4206,f4207,f4208,f4209,f4210,f4258,f4213,f4218,f4264,f4348,f4347,f4346,f4345,f4344,f4343,f4342,f4341,f4340,f4339,f4338,f4337,f4336,f4335,f4334,f4333,f4332,f4331,f4329,f4351,f4352,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4364,f4365,f4419,f4367,f4421,f4370,f4371,f4422,f4373,f4374,f4423,f4424,f4427,f4432,f4437,f4442,f4386,f4447,f4448,f4389,f4449,f4391,f4450,f4393,f4395,f4396,f4397,f4398,f4399,f4400,f4456,f4403,f4408,f4462,f4548,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4539,f4538,f4537,f4536,f4535,f4534,f4533,f4532,f4531,f4530,f4528,f4527,f4551,f4552,f4553,f4554,f4555,f4556,f4558,f4559,f4560,f4561,f4563,f4564,f4565,f4613,f4567,f4615,f4570,f4571,f4616,f4573,f4574,f4617,f4618,f4623,f4624,f4629,f4634,f4586,f4639,f4640,f4589,f4641,f4591,f4642,f4593,f4595,f4596,f4597,f4598,f4599,f4600,f4648,f4603,f4608,f4654,f4726,f4997,f4988,f4972,f4847,f4971,f4903,f4904,f4905,f4906,f4907,f4908,f5032,f5034,f4927,f4945,f4946,f4947,f443,f91,f5641,f5131])).
fof(f6578,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f6551,f5563])).
fof(f5563,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f5107,f77])).
fof(f5107,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))) | $spl0),
  inference(unit_resulting_resolution,[],[f89,f85])).
fof(f6551,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f5561,f91])).
fof(f5561,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)),s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f5107,f79])).
fof(f6552,plain,(
  $false | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f5563,f5561,f91])).
fof(f6546,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)),sK0)))) | $spl280),
  inference(cnf_transformation,[],[f6546_D])).
fof(f6546_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)),sK0)))) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f6548,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl283),
  inference(cnf_transformation,[],[f6548_D])).
fof(f6548_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl283),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl283])])).
fof(f6532,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)),sK0)))) | $spl0),
  inference(superposition,[],[f5572,f5617])).
fof(f5617,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2))))) | $spl0),
  inference(forward_demodulation,[],[f5565,f5107])).
fof(f5565,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))))) | $spl0),
  inference(unit_resulting_resolution,[],[f181,f5107,f444])).
fof(f5572,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,X1,X0))))) ) | $spl0),
  inference(superposition,[],[f77,f5107])).
fof(f6542,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl276),
  inference(cnf_transformation,[],[f6542_D])).
fof(f6542_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f6544,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | $spl279),
  inference(cnf_transformation,[],[f6544_D])).
fof(f6544_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl279),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl279])])).
fof(f6531,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl0),
  inference(superposition,[],[f5572,f5615])).
fof(f5615,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl0),
  inference(forward_demodulation,[],[f5567,f5107])).
fof(f5567,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))),s('type.num.num','const.num.|48|_0'))) | $spl0),
  inference(unit_resulting_resolution,[],[f181,f5107,f444])).
fof(f6540,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0),sK0)))) | $spl274),
  inference(cnf_transformation,[],[f6540_D])).
fof(f6540_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0),sK0)))) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f6538,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) | $spl273),
  inference(cnf_transformation,[],[f6538_D])).
fof(f6538_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) <=> ~$spl273),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl273])])).
fof(f6530,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f5572,f5559])).
fof(f5559,plain,(
  s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(unit_resulting_resolution,[],[f5107,f348])).
fof(f6536,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0),sK0)))) | $spl270),
  inference(cnf_transformation,[],[f6536_D])).
fof(f6536_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0),sK0)))) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f6529,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0),sK0)))) | $spl0),
  inference(superposition,[],[f5572,f5562])).
fof(f5562,plain,(
  s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f5107,f78])).
fof(f6382,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl268),
  inference(cnf_transformation,[],[f6382_D])).
fof(f6382_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f6376,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))))) | $spl265),
  inference(cnf_transformation,[],[f6376_D])).
fof(f6376_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))))) <=> ~$spl265),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl265])])).
fof(f6325,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f388,f5614])).
fof(f5614,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl0),
  inference(forward_demodulation,[],[f5568,f5107])).
fof(f5568,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))))) | $spl0),
  inference(unit_resulting_resolution,[],[f5107,f5107,f444])).
fof(f6378,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl266),
  inference(cnf_transformation,[],[f6378_D])).
fof(f6378_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f6374,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f6319,f5614])).
fof(f6319,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f277,f5614])).
fof(f6365,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl262),
  inference(cnf_transformation,[],[f6365_D])).
fof(f6365_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f6361,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) | $spl259),
  inference(cnf_transformation,[],[f6361_D])).
fof(f6361_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) <=> ~$spl259),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl259])])).
fof(f6302,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f438,f5614])).
fof(f6363,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl260),
  inference(cnf_transformation,[],[f6363_D])).
fof(f6363_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f6301,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f348,f5614])).
fof(f6359,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl256),
  inference(cnf_transformation,[],[f6359_D])).
fof(f6359_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f6300,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f340,f5614])).
fof(f6172,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl254),
  inference(cnf_transformation,[],[f6172_D])).
fof(f6172_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f6166,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | $spl251),
  inference(cnf_transformation,[],[f6166_D])).
fof(f6166_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) <=> ~$spl251),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl251])])).
fof(f6135,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f388,f5617])).
fof(f6168,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl252),
  inference(cnf_transformation,[],[f6168_D])).
fof(f6168_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f6164,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f6129,f5617])).
fof(f6129,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f277,f5617])).
fof(f6153,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2))) | $spl246),
  inference(cnf_transformation,[],[f6153_D])).
fof(f6153_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2))) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f6155,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl249),
  inference(cnf_transformation,[],[f6155_D])).
fof(f6155_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl249),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl249])])).
fof(f6105,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2))) | $spl0),
  inference(superposition,[],[f67,f5617])).
fof(f6081,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl244),
  inference(cnf_transformation,[],[f6081_D])).
fof(f6081_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f6075,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))))) | $spl241),
  inference(cnf_transformation,[],[f6075_D])).
fof(f6075_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))))) <=> ~$spl241),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl241])])).
fof(f6041,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f388,f5615])).
fof(f6077,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl242),
  inference(cnf_transformation,[],[f6077_D])).
fof(f6077_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f6073,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f6035,f5615])).
fof(f6035,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f277,f5615])).
fof(f6062,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl236),
  inference(cnf_transformation,[],[f6062_D])).
fof(f6062_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f6064,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | $spl239),
  inference(cnf_transformation,[],[f6064_D])).
fof(f6064_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl239),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl239])])).
fof(f6011,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl0),
  inference(superposition,[],[f67,f5615])).
fof(f6058,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),X0)))) ) | $spl232),
  inference(cnf_transformation,[],[f6058_D])).
fof(f6058_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),X0)))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f6060,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(cnf_transformation,[],[f6060_D])).
fof(f6060_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl235),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl235])])).
fof(f6010,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),X0)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f91,f5615])).
fof(f5860,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl230),
  inference(cnf_transformation,[],[f5860_D])).
fof(f5860_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f5854,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))) | $spl227),
  inference(cnf_transformation,[],[f5854_D])).
fof(f5854_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))) <=> ~$spl227),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl227])])).
fof(f5821,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f388,f5562])).
fof(f5856,plain,(
  s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl228),
  inference(cnf_transformation,[],[f5856_D])).
fof(f5856_D,plain,(
  s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f5852,plain,(
  s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f5815,f5562])).
fof(f5815,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f277,f5562])).
fof(f5841,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)) | $spl222),
  inference(cnf_transformation,[],[f5841_D])).
fof(f5841_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f5843,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) | $spl225),
  inference(cnf_transformation,[],[f5843_D])).
fof(f5843_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) <=> ~$spl225),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl225])])).
fof(f5791,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)) | $spl0),
  inference(superposition,[],[f67,f5562])).
fof(f5837,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)),s('type.list.list'(sK0),X0)))) ) | $spl218),
  inference(cnf_transformation,[],[f5837_D])).
fof(f5837_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)),s('type.list.list'(sK0),X0)))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f5839,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) | $spl221),
  inference(cnf_transformation,[],[f5839_D])).
fof(f5839_D,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) <=> ~$spl221),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl221])])).
fof(f5790,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK9(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1),sK1,sK2,sK0)),s('type.list.list'(sK0),X0)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f91,f5562])).
fof(f5635,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl216),
  inference(cnf_transformation,[],[f5635_D])).
fof(f5635_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f5629,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl213),
  inference(cnf_transformation,[],[f5629_D])).
fof(f5629_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl213),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl213])])).
fof(f5601,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f388,f5107])).
fof(f5631,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl214),
  inference(cnf_transformation,[],[f5631_D])).
fof(f5631_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f5627,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f5595,f5107])).
fof(f5595,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK1))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f277,f5107])).
fof(f5104,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl208),
  inference(cnf_transformation,[],[f5104_D])).
fof(f5104_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f5106,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl211),
  inference(cnf_transformation,[],[f5106_D])).
fof(f5106_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl211),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl211])])).
fof(f2068,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl69),
  inference(equality_factoring,[],[f1758])).
fof(f5101,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl204),
  inference(cnf_transformation,[],[f5101_D])).
fof(f5101_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f5103,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl207),
  inference(cnf_transformation,[],[f5103_D])).
fof(f5103_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) <=> ~$spl207),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl207])])).
fof(f2356,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl73),
  inference(equality_factoring,[],[f1786])).
fof(f1786,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl73),
  inference(subsumption_resolution,[],[f1774,f61])).
fof(f1774,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl73),
  inference(superposition,[],[f1707,f96])).
fof(f5098,plain,(
  $false | ($spl0 | $spl67 | $spl161)),
  inference(subsumption_resolution,[],[f5097,f63])).
fof(f5097,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl67 | $spl161)),
  inference(forward_demodulation,[],[f89,f4775])).
fof(f4775,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl67 | $spl161)),
  inference(forward_demodulation,[],[f4744,f4754])).
fof(f4744,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl67 | $spl161)),
  inference(unit_resulting_resolution,[],[f1040,f4626,f125])).
fof(f123,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f5033,plain,(
  ( ! [X15,X13] : (p(s(bool,X15)) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X13,'type.num.num')) | s(bool,X15) = s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num',sK1)))) ) | $spl202),
  inference(cnf_transformation,[],[f5033_D])).
fof(f5033_D,plain,(
  ( ! [X15,X13] : (p(s(bool,X15)) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X13,'type.num.num')) | s(bool,X15) = s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num',sK1)))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f5034,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,X18)) | s(bool,X18) = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num')) | s(bool,'T_0') = s(bool,X17)) ) | $spl6),
  inference(subsumption_resolution,[],[f4917,f98])).
fof(f4917,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,X17)) | p(s(bool,X18)) | s(bool,X18) = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num')) | s(bool,'T_0') = s(bool,X17)) ) | $spl6),
  inference(superposition,[],[f81,f1634])).
fof(f5032,plain,(
  ( ! [X14,X15,X13] : (p(s(bool,X15)) | s(bool,X15) = s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X13,'type.num.num')) | s(bool,'T_0') = s(bool,X14)) ) | $spl6),
  inference(subsumption_resolution,[],[f4916,f98])).
fof(f4916,plain,(
  ( ! [X14,X15,X13] : (p(s(bool,X14)) | p(s(bool,X15)) | s(bool,X15) = s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X13,'type.num.num')) | s(bool,'T_0') = s(bool,X14)) ) | $spl6),
  inference(superposition,[],[f81,f1634])).
fof(f5024,plain,(
  ( ! [X75] : (~p(s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X75),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X75,'type.num.num'))) ) | $spl200),
  inference(cnf_transformation,[],[f5024_D])).
fof(f5024_D,plain,(
  ( ! [X75] : (~p(s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X75),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X75,'type.num.num'))) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f4955,plain,(
  ( ! [X74,X75] : (~p(s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X75),s('type.num.num',sK1)))))) | s(bool,'T_0') = s(bool,X74) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X75,'type.num.num'))) ) | ($spl6 | $spl73 | $spl99)),
  inference(duplicate_literal_removal,[],[f4863])).
fof(f4863,plain,(
  ( ! [X74,X75] : (~p(s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X75),s('type.num.num',sK1)))))) | s(bool,'T_0') = s(bool,X74) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X75,'type.num.num')) | s(bool,'T_0') = s(bool,X74)) ) | ($spl6 | $spl73 | $spl99)),
  inference(superposition,[],[f3994,f1634])).
fof(f3994,plain,(
  ( ! [X1] : (~p(s(bool,f(s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl73 | $spl99)),
  inference(duplicate_literal_removal,[],[f3993])).
fof(f3993,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | ~p(s(bool,f(s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl73 | $spl99)),
  inference(condensation,[],[f3992])).
fof(f3992,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,f(s(bool,X9)))) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X8)) ) | ($spl73 | $spl99)),
  inference(subsumption_resolution,[],[f3673,f125])).
fof(f3673,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,f(s(bool,X9)))) | ~p(s(bool,X10)) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X8)) ) | ($spl73 | $spl99)),
  inference(superposition,[],[f84,f3128])).
fof(f3128,plain,(
  ( ! [X2,X3] : (s(bool,X3) = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3)) ) | ($spl73 | $spl99)),
  inference(duplicate_literal_removal,[],[f3087])).
fof(f3087,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl73 | $spl99)),
  inference(superposition,[],[f3012,f96])).
fof(f3012,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl73 | $spl99)),
  inference(superposition,[],[f2930,f64])).
fof(f2930,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl73 | $spl99)),
  inference(forward_demodulation,[],[f2911,f1771])).
fof(f1771,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl73),
  inference(unit_resulting_resolution,[],[f63,f1707,f81])).
fof(f2911,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl73 | $spl99)),
  inference(unit_resulting_resolution,[],[f2842,f1786])).
fof(f5023,plain,(
  ( ! [X73] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X73),s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X73,'type.num.num'))) ) | $spl198),
  inference(cnf_transformation,[],[f5023_D])).
fof(f5023_D,plain,(
  ( ! [X73] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X73),s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X73,'type.num.num'))) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f4956,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X73),s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X72) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X73,'type.num.num'))) ) | ($spl6 | $spl14 | $spl73 | $spl99)),
  inference(duplicate_literal_removal,[],[f4862])).
fof(f4862,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X73),s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X72) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X73,'type.num.num')) | s(bool,'T_0') = s(bool,X72)) ) | ($spl6 | $spl14 | $spl73 | $spl99)),
  inference(superposition,[],[f3154,f1634])).
fof(f3154,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,f(s(bool,X16))) | s(bool,'T_0') = s(bool,X16)) ) | ($spl14 | $spl73 | $spl99)),
  inference(subsumption_resolution,[],[f3107,f98])).
fof(f3107,plain,(
  ( ! [X16] : (p(s(bool,X16)) | s(bool,'F_0') = s(bool,f(s(bool,X16))) | s(bool,'T_0') = s(bool,X16)) ) | ($spl14 | $spl73 | $spl99)),
  inference(superposition,[],[f124,f3012])).
fof(f5022,plain,(
  ( ! [X62] : (s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num',sK1))) = s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X62,'type.num.num'))) ) | $spl196),
  inference(cnf_transformation,[],[f5022_D])).
fof(f5022_D,plain,(
  ( ! [X62] : (s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num',sK1))) = s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X62,'type.num.num'))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f4961,plain,(
  ( ! [X61,X62] : (s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num',sK1))) = s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X61) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X62,'type.num.num'))) ) | ($spl6 | $spl73 | $spl99)),
  inference(duplicate_literal_removal,[],[f4858])).
fof(f4858,plain,(
  ( ! [X61,X62] : (s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num',sK1))) = s(bool,f(s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X61) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X62,'type.num.num')) | s(bool,'T_0') = s(bool,X61)) ) | ($spl6 | $spl73 | $spl99)),
  inference(superposition,[],[f3012,f1634])).
fof(f5015,plain,(
  ( ! [X47,X48] : (~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,happ(s(fun('type.num.num',bool),X47),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X47,'type.num.num')) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X48,bool))) ) | $spl194),
  inference(cnf_transformation,[],[f5015_D])).
fof(f5015_D,plain,(
  ( ! [X47,X48] : (~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,happ(s(fun('type.num.num',bool),X47),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X47,'type.num.num')) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X48,bool))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f4968,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,happ(s(fun('type.num.num',bool),X47),s('type.num.num',sK1)))))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X48,bool)) | s(bool,'T_0') = s(bool,X46) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X47,'type.num.num'))) ) | ($spl6 | $spl41)),
  inference(duplicate_literal_removal,[],[f4851])).
fof(f4851,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,happ(s(fun('type.num.num',bool),X47),s('type.num.num',sK1)))))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X48,bool)) | s(bool,'T_0') = s(bool,X46) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X47,'type.num.num')) | s(bool,'T_0') = s(bool,X46)) ) | ($spl6 | $spl41)),
  inference(superposition,[],[f419,f1634])).
fof(f419,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X1,bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl41),
  inference(superposition,[],[f409,f64])).
fof(f409,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X5,bool))) ) | $spl41),
  inference(forward_demodulation,[],[f403,f379])).
fof(f379,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl41),
  inference(unit_resulting_resolution,[],[f63,f373,f81])).
fof(f403,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X5,bool))) ) | $spl41),
  inference(superposition,[],[f75,f379])).
fof(f5014,plain,(
  ( ! [X45,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X44,'type.num.num')) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X45,bool))) ) | $spl192),
  inference(cnf_transformation,[],[f5014_D])).
fof(f5014_D,plain,(
  ( ! [X45,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X44,'type.num.num')) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X45,bool))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f4969,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK1)))))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X45,bool)) | s(bool,'T_0') = s(bool,X43) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X44,'type.num.num'))) ) | ($spl6 | $spl29)),
  inference(duplicate_literal_removal,[],[f4850])).
fof(f4850,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK1)))))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X45,bool)) | s(bool,'T_0') = s(bool,X43) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X44,'type.num.num')) | s(bool,'T_0') = s(bool,X43)) ) | ($spl6 | $spl29)),
  inference(superposition,[],[f359,f1634])).
fof(f359,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X1,bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl29),
  inference(superposition,[],[f328,f64])).
fof(f328,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X5,bool))) ) | $spl29),
  inference(forward_demodulation,[],[f322,f265])).
fof(f265,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl29),
  inference(unit_resulting_resolution,[],[f63,f248,f81])).
fof(f322,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X5,bool))) ) | $spl29),
  inference(superposition,[],[f75,f265])).
fof(f5013,plain,(
  ( ! [X41,X42] : (~p(s(bool,happ(s(fun(bool,bool),X42),s(bool,happ(s(fun('type.num.num',bool),X41),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X41,'type.num.num')) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X42,bool))) ) | $spl190),
  inference(cnf_transformation,[],[f5013_D])).
fof(f5013_D,plain,(
  ( ! [X41,X42] : (~p(s(bool,happ(s(fun(bool,bool),X42),s(bool,happ(s(fun('type.num.num',bool),X41),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X41,'type.num.num')) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X42,bool))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f4970,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,happ(s(fun(bool,bool),X42),s(bool,happ(s(fun('type.num.num',bool),X41),s('type.num.num',sK1)))))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X42,bool)) | s(bool,'T_0') = s(bool,X40) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X41,'type.num.num'))) ) | ($spl6 | $spl25)),
  inference(duplicate_literal_removal,[],[f4849])).
fof(f4849,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,happ(s(fun(bool,bool),X42),s(bool,happ(s(fun('type.num.num',bool),X41),s('type.num.num',sK1)))))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X42,bool)) | s(bool,'T_0') = s(bool,X40) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X41,'type.num.num')) | s(bool,'T_0') = s(bool,X40)) ) | ($spl6 | $spl25)),
  inference(superposition,[],[f356,f1634])).
fof(f356,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X1,bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl25),
  inference(superposition,[],[f294,f64])).
fof(f294,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X3,bool))) ) | $spl25),
  inference(forward_demodulation,[],[f289,f254])).
fof(f254,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl25),
  inference(unit_resulting_resolution,[],[f63,f243,f81])).
fof(f289,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,sK7('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X3,bool))) ) | $spl25),
  inference(superposition,[],[f75,f254])).
fof(f5012,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,happ(s(fun(bool,bool),X38),s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X37,'type.num.num')) | s(bool,'F_0') != s(bool,X39) | p(s(bool,happ(s(fun(bool,bool),X38),s(bool,X39))))) ) | $spl188),
  inference(cnf_transformation,[],[f5012_D])).
fof(f5012_D,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,happ(s(fun(bool,bool),X38),s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X37,'type.num.num')) | s(bool,'F_0') != s(bool,X39) | p(s(bool,happ(s(fun(bool,bool),X38),s(bool,X39))))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f4971,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),X38),s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',sK1)))))) | p(s(bool,happ(s(fun(bool,bool),X38),s(bool,X39)))) | s(bool,'F_0') != s(bool,X39) | s(bool,'T_0') = s(bool,X36) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X37,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f4848])).
fof(f4848,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),X38),s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',sK1)))))) | p(s(bool,happ(s(fun(bool,bool),X38),s(bool,X39)))) | s(bool,'F_0') != s(bool,X39) | s(bool,'T_0') = s(bool,X36) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X37,'type.num.num')) | s(bool,'T_0') = s(bool,X36)) ) | $spl6),
  inference(superposition,[],[f304,f1634])).
fof(f5011,plain,(
  ( ! [X31,X32] : (~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,'type.num.num')) | s(bool,'F_0') = s(bool,sK7('F_0',X32,bool))) ) | $spl186),
  inference(cnf_transformation,[],[f5011_D])).
fof(f5011_D,plain,(
  ( ! [X31,X32] : (~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,'type.num.num')) | s(bool,'F_0') = s(bool,sK7('F_0',X32,bool))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f4972,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num',sK1)))))) | s(bool,'F_0') = s(bool,sK7('F_0',X32,bool)) | s(bool,'T_0') = s(bool,X30) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f4846])).
fof(f4846,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num',sK1)))))) | s(bool,'F_0') = s(bool,sK7('F_0',X32,bool)) | s(bool,'T_0') = s(bool,X30) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,'type.num.num')) | s(bool,'T_0') = s(bool,X30)) ) | $spl6),
  inference(superposition,[],[f188,f1634])).
fof(f4998,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl182),
  inference(cnf_transformation,[],[f4998_D])).
fof(f4998_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f5006,plain,(
  ( ! [X43,X42] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X43),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X43,'type.num.num')) | s(bool,'T_0') = s(bool,X42)) ) | ($spl6 | $spl14 | $spl73 | $spl99)),
  inference(subsumption_resolution,[],[f4812,f2917])).
fof(f2917,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl99),
  inference(superposition,[],[f2842,f64])).
fof(f4812,plain,(
  ( ! [X43,X42] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X43),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X43,'type.num.num')) | s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X42)) ) | ($spl6 | $spl14 | $spl73 | $spl99)),
  inference(superposition,[],[f1634,f3154])).
fof(f5005,plain,(
  ( ! [X28,X27] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X28,'type.num.num')) | s(bool,'T_0') = s(bool,X27)) ) | ($spl6 | $spl73)),
  inference(forward_demodulation,[],[f4986,f1771])).
fof(f4986,plain,(
  ( ! [X28,X27] : (s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X28,'type.num.num')) | s(bool,'T_0') = s(bool,X27)) ) | ($spl6 | $spl73)),
  inference(duplicate_literal_removal,[],[f4809])).
fof(f4809,plain,(
  ( ! [X28,X27] : (s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X28,'type.num.num')) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | ($spl6 | $spl73)),
  inference(superposition,[],[f1634,f1786])).
fof(f5004,plain,(
  ( ! [X26,X25] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X26),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X26,'type.num.num')) | s(bool,'T_0') = s(bool,X25)) ) | ($spl6 | $spl69)),
  inference(forward_demodulation,[],[f4987,f1743])).
fof(f4987,plain,(
  ( ! [X26,X25] : (s(bool,happ(s(fun('type.num.num',bool),X26),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X26,'type.num.num')) | s(bool,'T_0') = s(bool,X25)) ) | ($spl6 | $spl69)),
  inference(duplicate_literal_removal,[],[f4808])).
fof(f4808,plain,(
  ( ! [X26,X25] : (s(bool,happ(s(fun('type.num.num',bool),X26),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X26,'type.num.num')) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | ($spl6 | $spl69)),
  inference(superposition,[],[f1634,f1758])).
fof(f5003,plain,(
  ( ! [X24,X23] : (s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X23,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24,'type.num.num'))) ) | $spl184),
  inference(cnf_transformation,[],[f5003_D])).
fof(f5003_D,plain,(
  ( ! [X24,X23] : (s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X23,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24,'type.num.num'))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f4988,plain,(
  ( ! [X24,X23,X22] : (s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24,'type.num.num')) | s(bool,'T_0') = s(bool,X22) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X23,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f4807])).
fof(f4807,plain,(
  ( ! [X24,X23,X22] : (s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X24),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24,'type.num.num')) | s(bool,'T_0') = s(bool,X22) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X23,'type.num.num')) | s(bool,'T_0') = s(bool,X22)) ) | $spl6),
  inference(superposition,[],[f1634,f1634])).
fof(f5002,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X21,'type.num.num')) | s(bool,'T_0') = s(bool,X20)) ) | ($spl6 | $spl41)),
  inference(forward_demodulation,[],[f4989,f379])).
fof(f4989,plain,(
  ( ! [X21,X20] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X21,'type.num.num')) | s(bool,'T_0') = s(bool,X20)) ) | ($spl6 | $spl41)),
  inference(duplicate_literal_removal,[],[f4806])).
fof(f4806,plain,(
  ( ! [X21,X20] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X21,'type.num.num')) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | ($spl6 | $spl41)),
  inference(superposition,[],[f1634,f520])).
fof(f520,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X7)) ) | $spl41),
  inference(subsumption_resolution,[],[f516,f63])).
fof(f516,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X7)) ) | $spl41),
  inference(superposition,[],[f125,f379])).
fof(f5001,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X19,'type.num.num')) | s(bool,'T_0') = s(bool,X18)) ) | ($spl6 | $spl29)),
  inference(forward_demodulation,[],[f4990,f265])).
fof(f4990,plain,(
  ( ! [X19,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X19,'type.num.num')) | s(bool,'T_0') = s(bool,X18)) ) | ($spl6 | $spl29)),
  inference(duplicate_literal_removal,[],[f4805])).
fof(f4805,plain,(
  ( ! [X19,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X19,'type.num.num')) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | ($spl6 | $spl29)),
  inference(superposition,[],[f1634,f519])).
fof(f519,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl29),
  inference(subsumption_resolution,[],[f515,f63])).
fof(f515,plain,(
  ( ! [X6] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl29),
  inference(superposition,[],[f125,f265])).
fof(f5000,plain,(
  ( ! [X17,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X17,'type.num.num')) | s(bool,'T_0') = s(bool,X16)) ) | ($spl6 | $spl25)),
  inference(forward_demodulation,[],[f4991,f254])).
fof(f4991,plain,(
  ( ! [X17,X16] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X17,'type.num.num')) | s(bool,'T_0') = s(bool,X16)) ) | ($spl6 | $spl25)),
  inference(duplicate_literal_removal,[],[f4804])).
fof(f4804,plain,(
  ( ! [X17,X16] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X17,'type.num.num')) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl6 | $spl25)),
  inference(superposition,[],[f1634,f518])).
fof(f518,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X5)) ) | $spl25),
  inference(subsumption_resolution,[],[f514,f63])).
fof(f514,plain,(
  ( ! [X5] : (p(s(bool,'F_0')) | s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X5)) ) | $spl25),
  inference(superposition,[],[f125,f254])).
fof(f4999,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X15,'type.num.num')) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl6)),
  inference(forward_demodulation,[],[f4992,f112])).
fof(f4992,plain,(
  ( ! [X14,X15] : (s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X15,'type.num.num')) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl6)),
  inference(duplicate_literal_removal,[],[f4803])).
fof(f4803,plain,(
  ( ! [X14,X15] : (s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X15,'type.num.num')) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl6)),
  inference(superposition,[],[f1634,f517])).
fof(f4997,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(duplicate_literal_removal,[],[f4798])).
fof(f4798,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK7('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(superposition,[],[f1634,f64])).
fof(f4652,plain,(
  ( ! [X77] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.NIL_0',X77))))) ) | $spl180),
  inference(cnf_transformation,[],[f4652_D])).
fof(f4652_D,plain,(
  ( ! [X77] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.NIL_0',X77))))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f4650,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl177),
  inference(cnf_transformation,[],[f4650_D])).
fof(f4650_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl177),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl177])])).
fof(f4603,plain,(
  ( ! [X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.NIL_0',X77))))) ) | $spl6),
  inference(superposition,[],[f505,f3497])).
fof(f4651,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.NIL_0',X76))))) ) | $spl178),
  inference(cnf_transformation,[],[f4651_D])).
fof(f4651_D,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.NIL_0',X76))))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f4648,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.NIL_0',X76)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f4602,f3497])).
fof(f4602,plain,(
  ( ! [X76] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.NIL_0',X76))))) ) | $spl6),
  inference(superposition,[],[f459,f3497])).
fof(f4646,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl174),
  inference(cnf_transformation,[],[f4646_D])).
fof(f4646_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f4631,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | $spl165),
  inference(cnf_transformation,[],[f4631_D])).
fof(f4631_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) <=> ~$spl165),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl165])])).
fof(f4596,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f388,f3497])).
fof(f4644,plain,(
  s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)))) | $spl172),
  inference(cnf_transformation,[],[f4644_D])).
fof(f4644_D,plain,(
  s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)))) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f4636,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | $spl169),
  inference(cnf_transformation,[],[f4636_D])).
fof(f4636_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) <=> ~$spl169),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl169])])).
fof(f4595,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f386,f3497])).
fof(f4638,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)))) | $spl170),
  inference(cnf_transformation,[],[f4638_D])).
fof(f4638_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)))) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f4634,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | $spl6),
  inference(forward_demodulation,[],[f4585,f3497])).
fof(f4585,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f278,f3497])).
fof(f4633,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl166),
  inference(cnf_transformation,[],[f4633_D])).
fof(f4633_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f4629,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4584,f3497])).
fof(f4584,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f277,f3497])).
fof(f4626,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | $spl161),
  inference(cnf_transformation,[],[f4626_D])).
fof(f4626_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) <=> ~$spl161),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl161])])).
fof(f4628,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | $spl162),
  inference(cnf_transformation,[],[f4628_D])).
fof(f4628_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))))))) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f4624,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f4581,f3497])).
fof(f4581,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0'))))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | $spl6),
  inference(superposition,[],[f235,f3497])).
fof(f4460,plain,(
  ( ! [X77] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X77))))) ) | $spl158),
  inference(cnf_transformation,[],[f4460_D])).
fof(f4460_D,plain,(
  ( ! [X77] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X77))))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f4458,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl155),
  inference(cnf_transformation,[],[f4458_D])).
fof(f4458_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) <=> ~$spl155),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl155])])).
fof(f4403,plain,(
  ( ! [X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X77))))) ) | $spl6),
  inference(superposition,[],[f505,f3485])).
fof(f4459,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X76))))) ) | $spl156),
  inference(cnf_transformation,[],[f4459_D])).
fof(f4459_D,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X76))))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f4456,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X76)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f4402,f3485])).
fof(f4402,plain,(
  ( ! [X76] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X76))))) ) | $spl6),
  inference(superposition,[],[f459,f3485])).
fof(f4454,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl152),
  inference(cnf_transformation,[],[f4454_D])).
fof(f4454_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f4439,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | $spl143),
  inference(cnf_transformation,[],[f4439_D])).
fof(f4439_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) <=> ~$spl143),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl143])])).
fof(f4396,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f388,f3485])).
fof(f4452,plain,(
  s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | $spl150),
  inference(cnf_transformation,[],[f4452_D])).
fof(f4452_D,plain,(
  s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f4444,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | $spl147),
  inference(cnf_transformation,[],[f4444_D])).
fof(f4444_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) <=> ~$spl147),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl147])])).
fof(f4395,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f386,f3485])).
fof(f4446,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | $spl148),
  inference(cnf_transformation,[],[f4446_D])).
fof(f4446_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f4442,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | $spl6),
  inference(forward_demodulation,[],[f4385,f3485])).
fof(f4385,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f278,f3485])).
fof(f4441,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl144),
  inference(cnf_transformation,[],[f4441_D])).
fof(f4441_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f4437,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4384,f3485])).
fof(f4384,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f277,f3485])).
fof(f4434,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl139),
  inference(cnf_transformation,[],[f4434_D])).
fof(f4434_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1)))) <=> ~$spl139),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl139])])).
fof(f4436,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))))))) | $spl140),
  inference(cnf_transformation,[],[f4436_D])).
fof(f4436_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))))))) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f4432,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f4381,f3485])).
fof(f4381,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))))))) | $spl6),
  inference(superposition,[],[f235,f3485])).
fof(f4429,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) | $spl135),
  inference(cnf_transformation,[],[f4429_D])).
fof(f4429_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) <=> ~$spl135),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl135])])).
fof(f4431,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl136),
  inference(cnf_transformation,[],[f4431_D])).
fof(f4431_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f4427,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) | $spl6),
  inference(forward_demodulation,[],[f4380,f3485])).
fof(f4380,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(superposition,[],[f233,f3485])).
fof(f4418,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl132),
  inference(cnf_transformation,[],[f4418_D])).
fof(f4418_D,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f4416,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl131),
  inference(cnf_transformation,[],[f4416_D])).
fof(f4416_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) <=> ~$spl131),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl131])])).
fof(f4362,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(superposition,[],[f383,f3485])).
fof(f4414,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl128),
  inference(cnf_transformation,[],[f4414_D])).
fof(f4414_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f4357,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(superposition,[],[f280,f3485])).
fof(f4262,plain,(
  ( ! [X77] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X77))))) ) | $spl126),
  inference(cnf_transformation,[],[f4262_D])).
fof(f4262_D,plain,(
  ( ! [X77] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X77))))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f4260,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl123),
  inference(cnf_transformation,[],[f4260_D])).
fof(f4260_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) <=> ~$spl123),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl123])])).
fof(f4213,plain,(
  ( ! [X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK9('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X77))))) ) | $spl6),
  inference(superposition,[],[f505,f3482])).
fof(f4261,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X76))))) ) | $spl124),
  inference(cnf_transformation,[],[f4261_D])).
fof(f4261_D,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X76))))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f4258,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X76)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f4212,f3482])).
fof(f4212,plain,(
  ( ! [X76] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X76))))) ) | $spl6),
  inference(superposition,[],[f459,f3482])).
fof(f4256,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl120),
  inference(cnf_transformation,[],[f4256_D])).
fof(f4256_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f4241,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | $spl111),
  inference(cnf_transformation,[],[f4241_D])).
fof(f4241_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) <=> ~$spl111),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl111])])).
fof(f4206,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f388,f3482])).
fof(f4254,plain,(
  s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | $spl118),
  inference(cnf_transformation,[],[f4254_D])).
fof(f4254_D,plain,(
  s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f4246,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | $spl115),
  inference(cnf_transformation,[],[f4246_D])).
fof(f4246_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) <=> ~$spl115),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl115])])).
fof(f4205,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f386,f3482])).
fof(f4248,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | $spl116),
  inference(cnf_transformation,[],[f4248_D])).
fof(f4248_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f4244,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | $spl6),
  inference(forward_demodulation,[],[f4195,f3482])).
fof(f4195,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f278,f3482])).
fof(f4243,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl112),
  inference(cnf_transformation,[],[f4243_D])).
fof(f4243_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f4239,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4194,f3482])).
fof(f4194,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f277,f3482])).
fof(f4236,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl107),
  inference(cnf_transformation,[],[f4236_D])).
fof(f4236_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1)))) <=> ~$spl107),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl107])])).
fof(f4238,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) | $spl108),
  inference(cnf_transformation,[],[f4238_D])).
fof(f4238_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f4234,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f4191,f3482])).
fof(f4191,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) | $spl6),
  inference(superposition,[],[f235,f3482])).
fof(f3388,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK11(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK11(X2,X3,bool,bool))))) ) | $spl102),
  inference(cnf_transformation,[],[f3388_D])).
fof(f3388_D,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK11(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK11(X2,X3,bool,bool))))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f3390,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl105),
  inference(cnf_transformation,[],[f3390_D])).
fof(f3390_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl105),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl105])])).
fof(f3366,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,g(s(bool,sK11(X11,X12,bool,bool)))) | s(bool,X13) = s(bool,sK11(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f363,f96])).
fof(f3363,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,g(s(bool,sK11(X2,X3,bool,bool)))) | s(bool,X4) = s(bool,sK11(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f363,f96])).
fof(f2840,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl96),
  inference(cnf_transformation,[],[f2840_D])).
fof(f2840_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f2837,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK11(X0,X1,bool,bool))) ) | $spl92),
  inference(cnf_transformation,[],[f2837_D])).
fof(f2837_D,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK11(X0,X1,bool,bool))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f2842,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl99),
  inference(cnf_transformation,[],[f2842_D])).
fof(f2842_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl99),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl99])])).
fof(f2834,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK11(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f362,f96])).
fof(f2836,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl90),
  inference(cnf_transformation,[],[f2836_D])).
fof(f2836_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f2843,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl100),
  inference(cnf_transformation,[],[f2843_D])).
fof(f2843_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f2833,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK11(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f362,f96])).
fof(f2832,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK11(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f362,f96])).
fof(f2831,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK11(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f362,f96])).
fof(f2839,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl95),
  inference(cnf_transformation,[],[f2839_D])).
fof(f2839_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl95),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl95])])).
fof(f2830,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK11(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f362,f64])).
fof(f1724,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl87),
  inference(cnf_transformation,[],[f1724_D])).
fof(f1724_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) <=> ~$spl87),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl87])])).
fof(f1725,plain,(
  ( ! [X103,X104] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X103),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X104))))) ) | $spl88),
  inference(cnf_transformation,[],[f1725_D])).
fof(f1725_D,plain,(
  ( ! [X103,X104] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X103),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X104))))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f1722,plain,(
  ( ! [X103,X104] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X103),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X104)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f1688,f1641])).
fof(f1688,plain,(
  ( ! [X103,X104] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X103),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X103),s('type.list.list'(sK0),sK3)))),'const.list.NIL_0',X104))))) ) | $spl6),
  inference(superposition,[],[f459,f1641])).
fof(f1721,plain,(
  ( ! [X102] : (s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X102),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X102),s('type.list.list'(sK0),sK3)))),sK3,sK0))))) ) | $spl84),
  inference(cnf_transformation,[],[f1721_D])).
fof(f1721_D,plain,(
  ( ! [X102] : (s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X102),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X102),s('type.list.list'(sK0),sK3)))),sK3,sK0))))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f1715,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl81),
  inference(cnf_transformation,[],[f1715_D])).
fof(f1715_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl81),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl81])])).
fof(f1687,plain,(
  ( ! [X102] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X102),s('type.list.list'(sK0),sK3)))),sK3,sK0)),s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X102),s('type.list.list'(sK0),sK3)))),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f386,f1641])).
fof(f1716,plain,(
  ( ! [X80] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X80),s('type.list.list'(sK0),sK3)))),sK3,sK0))))) ) | $spl82),
  inference(cnf_transformation,[],[f1716_D])).
fof(f1716_D,plain,(
  ( ! [X80] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X80),s('type.list.list'(sK0),sK3)))),sK3,sK0))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f1713,plain,(
  ( ! [X80] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X80),s('type.list.list'(sK0),sK3)))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl6),
  inference(forward_demodulation,[],[f1677,f1641])).
fof(f1677,plain,(
  ( ! [X80] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X80),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X80),s('type.list.list'(sK0),sK3)))),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f278,f1641])).
fof(f1711,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl77),
  inference(cnf_transformation,[],[f1711_D])).
fof(f1711_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f1712,plain,(
  ( ! [X79] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X79),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl78),
  inference(cnf_transformation,[],[f1712_D])).
fof(f1712_D,plain,(
  ( ! [X79] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X79),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f1709,plain,(
  ( ! [X79] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X79),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1676,f1641])).
fof(f1676,plain,(
  ( ! [X79] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X79),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X79),s('type.list.list'(sK0),sK3)))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | ($spl4 | $spl6)),
  inference(superposition,[],[f277,f1641])).
fof(f1707,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl73),
  inference(cnf_transformation,[],[f1707_D])).
fof(f1707_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) <=> ~$spl73),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl73])])).
fof(f1708,plain,(
  ( ! [X76] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X76),s('type.list.list'(sK0),sK3))))))))) ) | $spl74),
  inference(cnf_transformation,[],[f1708_D])).
fof(f1708_D,plain,(
  ( ! [X76] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X76),s('type.list.list'(sK0),sK3))))))))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f1705,plain,(
  ( ! [X76] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X76),s('type.list.list'(sK0),sK3)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f1673,f1641])).
fof(f1673,plain,(
  ( ! [X76] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X76),s('type.list.list'(sK0),sK3))))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X76),s('type.list.list'(sK0),sK3))))))))) ) | $spl6),
  inference(superposition,[],[f235,f1641])).
fof(f1703,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | $spl69),
  inference(cnf_transformation,[],[f1703_D])).
fof(f1703_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f1704,plain,(
  ( ! [X75] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X75),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) ) | $spl70),
  inference(cnf_transformation,[],[f1704_D])).
fof(f1704_D,plain,(
  ( ! [X75] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X75),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f1701,plain,(
  ( ! [X75] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X75),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) ) | $spl6),
  inference(forward_demodulation,[],[f1672,f1641])).
fof(f1672,plain,(
  ( ! [X75] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X75),s('type.list.list'(sK0),sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X75),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) ) | $spl6),
  inference(superposition,[],[f233,f1641])).
fof(f1038,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl64),
  inference(cnf_transformation,[],[f1038_D])).
fof(f1038_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f1040,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl67),
  inference(cnf_transformation,[],[f1040_D])).
fof(f1040_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl67),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl67])])).
fof(f983,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1),
  inference(equality_factoring,[],[f517])).
fof(f616,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl60),
  inference(cnf_transformation,[],[f616_D])).
fof(f616_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f618,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl63),
  inference(cnf_transformation,[],[f618_D])).
fof(f618_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f576,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl25),
  inference(equality_factoring,[],[f518])).
fof(f468,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl57),
  inference(cnf_transformation,[],[f468_D])).
fof(f468_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) <=> ~$spl57),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl57])])).
fof(f469,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),'const.list.NIL_0',X2))))) ) | $spl58),
  inference(cnf_transformation,[],[f469_D])).
fof(f469_D,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),'const.list.NIL_0',X2))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f466,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),'const.list.NIL_0',X2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl6),
  inference(forward_demodulation,[],[f465,f181])).
fof(f465,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK8('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),'const.list.NIL_0',X2))))) ) | $spl6),
  inference(superposition,[],[f459,f181])).
fof(f455,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl53),
  inference(cnf_transformation,[],[f455_D])).
fof(f455_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f456,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl54),
  inference(cnf_transformation,[],[f456_D])).
fof(f456_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f453,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl4),
  inference(forward_demodulation,[],[f452,f181])).
fof(f452,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0))))) ) | $spl4),
  inference(superposition,[],[f277,f181])).
fof(f429,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.NIL_0',X0))))) ) | $spl48),
  inference(cnf_transformation,[],[f429_D])).
fof(f429_D,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.NIL_0',X0))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f431,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl51),
  inference(cnf_transformation,[],[f431_D])).
fof(f431_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f424,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.NIL_0',X0))))) ) | $spl6),
  inference(superposition,[],[f280,f181])).
fof(f426,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | $spl44),
  inference(cnf_transformation,[],[f426_D])).
fof(f426_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f428,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl47),
  inference(cnf_transformation,[],[f428_D])).
fof(f428_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f422,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f280,f93])).
fof(f373,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl41),
  inference(cnf_transformation,[],[f373_D])).
fof(f373_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f374,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl42),
  inference(cnf_transformation,[],[f374_D])).
fof(f374_D,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f371,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f366,f181])).
fof(f366,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl6),
  inference(superposition,[],[f235,f181])).
fof(f338,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl37),
  inference(cnf_transformation,[],[f338_D])).
fof(f338_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f339,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK3,sK0))))) ) | $spl38),
  inference(cnf_transformation,[],[f339_D])).
fof(f339_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK3,sK0))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f336,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f330,f181])).
fof(f330,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f278,f181])).
fof(f333,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl33),
  inference(cnf_transformation,[],[f333_D])).
fof(f333_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f335,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK3,sK0)))) | $spl34),
  inference(cnf_transformation,[],[f335_D])).
fof(f335_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK3,sK0)))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f331,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl6),
  inference(forward_demodulation,[],[f329,f95])).
fof(f329,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f278,f95])).
fof(f248,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | $spl29),
  inference(cnf_transformation,[],[f248_D])).
fof(f248_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f249,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) ) | $spl30),
  inference(cnf_transformation,[],[f249_D])).
fof(f249_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f246,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) ) | $spl6),
  inference(forward_demodulation,[],[f238,f181])).
fof(f238,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) ) | $spl6),
  inference(superposition,[],[f233,f181])).
fof(f243,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl25),
  inference(cnf_transformation,[],[f243_D])).
fof(f243_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f245,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl26),
  inference(cnf_transformation,[],[f245_D])).
fof(f245_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f241,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f237,f95])).
fof(f237,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(superposition,[],[f233,f95])).
fof(f176,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl20),
  inference(cnf_transformation,[],[f176_D])).
fof(f176_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f178,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl23),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f170,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl6),
  inference(superposition,[],[f67,f95])).
fof(f172,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) | $spl16),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f174,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl19),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f169,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) | $spl4),
  inference(superposition,[],[f67,f93])).
fof(f134,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f128,f61])).
fof(f128,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f123,f63])).
fof(f124,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) | $spl14),
  inference(cnf_transformation,[],[f124_D])).
fof(f124_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f126,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f119,f98])).
fof(f119,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f81,f64])).
fof(f122,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f117,f98])).
fof(f117,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f81,f64])).
fof(f103,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f103_D])).
fof(f103_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f105,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f102,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f64])).
fof(f89,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl0),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f95,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f58,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ! [X3,X4] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X6))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))))),
  inference(rectify,[],[f39])).
fof(f39,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <~> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10)))))),
  file('thm.quantHeuristics.LENGTH_LE_NUM','thm.quantHeuristics.LENGTH_LE_NUM')).
fof(f93,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) | $spl4),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f59,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f41])).
fof(f90,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl1),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f91,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4)))) ) | $spl2),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f60,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) )),
  inference(cnf_transformation,[],[f41])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 210
% Passive clauses: 1191
% Generated clauses: 7433
% Final active clauses: 94
% Final passive clauses: 221
% Input formulas: 14
% Initial clauses: 30
% 
% Duplicate literals: 346
% Trivial inequalities: 40
% Fw subsumption resolutions: 194
% Fw demodulations: 1545
% Bw demodulations: 89
% Condensations: 250
% Global subsumptions: 116
% 
% Simple tautologies: 76
% Equational tautologies: 128
% Forward subsumptions: 3315
% Fw demodulations to eq. taut.: 10
% 
% Unit resulting resolution: 908
% Factoring: 1
% Forward superposition: 1421
% Backward superposition: 2051
% Self superposition: 46
% Equality factoring: 42
% Equality resolution: 14
% 
% Split clauses: 103
% Split components: 211
% SAT solver clauses: 1634
% SAT solver unit clauses: 10
% SAT solver binary clauses: 375
% 
% Sat splits: 103
% Sat splitting refutations: 119
% 
% Memory used [KB]: 7291
% Time elapsed: 0.365 s
% ------------------------------
% ------------------------------
% Success in time 1.72 s
