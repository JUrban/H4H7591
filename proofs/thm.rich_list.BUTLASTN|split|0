Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f304,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f298])).
fof(f298,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK1)),
  inference(superposition,[],[f60,f292])).
fof(f292,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(forward_demodulation,[],[f285,f81])).
fof(f81,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7)))))),
  file('thm.rich_list.BUTLASTN|split|0','thm.list.REVERSE_REVERSE')).
fof(f285,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(superposition,[],[f87,f80])).
fof(f80,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7)))),
  file('thm.rich_list.BUTLASTN|split|0','thm.list.DROP_|48|')).
fof(f87,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X10,X11] : s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num',X10),s('type.list.list'(X6),X11))) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X10),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X11)))))))),
  file('thm.rich_list.BUTLASTN|split|0','thm.rich_list.BUTLASTN_def')).
fof(f60,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f43])).
fof(f43,plain,(
  ? [X0,X1] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7)))),
  file('thm.rich_list.BUTLASTN|split|0','thm.rich_list.BUTLASTN|split|0')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 15
% Passive clauses: 33
% Generated clauses: 224
% Final active clauses: 13
% Final passive clauses: 11
% Input formulas: 18
% Initial clauses: 30
% 
% Duplicate literals: 38
% Trivial inequalities: 4
% Fw demodulations: 1
% 
% Simple tautologies: 29
% Equational tautologies: 15
% Forward subsumptions: 91
% 
% Binary resolution: 4
% Forward superposition: 45
% Backward superposition: 45
% Self superposition: 31
% Equality factoring: 26
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 11
% SAT solver unit clauses: 4
% SAT solver binary clauses: 6
% 
% Sat splits: 5
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 11
% TWLsolver calls for satisfiability: 7
% 
% Memory used [KB]: 767
% Time elapsed: 0.016 s
% ------------------------------
% ------------------------------
% Success in time 0.018 s
