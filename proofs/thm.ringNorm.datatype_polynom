Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.ringNorm
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ringNorm
% SZS output start Proof for thm.ringNorm
fof(f1428,plain,(
  $false),
  inference(subsumption_resolution,[],[f1427,f36])).
fof(f36,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.ringNorm.datatype_polynom',aHL_TRUTH)).
fof(f1427,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f35,f40])).
fof(f40,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X6,X8)))),
  file('thm.ringNorm.datatype_polynom','thm.bool.DATATYPE_TAG_THM')).
fof(f35,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool),happ(s(fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool)),happ(s(fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool))),happ(s(fun(fun(sK0,'type.ringNorm.polynom'(sK0)),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool)))),happ(s(fun(fun('type.quote.index','type.ringNorm.polynom'(sK0)),fun(fun(sK0,'type.ringNorm.polynom'(sK0)),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool))))),sK1),s(fun('type.quote.index','type.ringNorm.polynom'(sK0)),'const.ringNorm.Pvar_0'))),s(fun(sK0,'type.ringNorm.polynom'(sK0)),'const.ringNorm.Pconst_0'))),s(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),'const.ringNorm.Pplus_0'))),s(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),'const.ringNorm.Pmult_0'))),s(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),'const.ringNorm.Popp_0'))))))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool),happ(s(fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool)),happ(s(fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool))),happ(s(fun(fun(sK0,'type.ringNorm.polynom'(sK0)),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool)))),happ(s(fun(fun('type.quote.index','type.ringNorm.polynom'(sK0)),fun(fun(sK0,'type.ringNorm.polynom'(sK0)),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),fun(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),bool))))),sK1),s(fun('type.quote.index','type.ringNorm.polynom'(sK0)),'const.ringNorm.Pvar_0'))),s(fun(sK0,'type.ringNorm.polynom'(sK0)),'const.ringNorm.Pconst_0'))),s(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),'const.ringNorm.Pplus_0'))),s(fun('type.ringNorm.polynom'(sK0),fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0))),'const.ringNorm.Pmult_0'))),s(fun('type.ringNorm.polynom'(sK0),'type.ringNorm.polynom'(sK0)),'const.ringNorm.Popp_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f31])).
fof(f31,plain,(
  ? [X0,X1] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool),happ(s(fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool)),happ(s(fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool))),happ(s(fun(fun(X0,'type.ringNorm.polynom'(X0)),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool)))),happ(s(fun(fun('type.quote.index','type.ringNorm.polynom'(X0)),fun(fun(X0,'type.ringNorm.polynom'(X0)),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool))))),X1),s(fun('type.quote.index','type.ringNorm.polynom'(X0)),'const.ringNorm.Pvar_0'))),s(fun(X0,'type.ringNorm.polynom'(X0)),'const.ringNorm.Pconst_0'))),s(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),'const.ringNorm.Pplus_0'))),s(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),'const.ringNorm.Pmult_0'))),s(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),'const.ringNorm.Popp_0'))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool),happ(s(fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool)),happ(s(fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool))),happ(s(fun(fun(X0,'type.ringNorm.polynom'(X0)),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool)))),happ(s(fun(fun('type.quote.index','type.ringNorm.polynom'(X0)),fun(fun(X0,'type.ringNorm.polynom'(X0)),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool))))),X1),s(fun('type.quote.index','type.ringNorm.polynom'(X0)),'const.ringNorm.Pvar_0'))),s(fun(X0,'type.ringNorm.polynom'(X0)),'const.ringNorm.Pconst_0'))),s(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),'const.ringNorm.Pplus_0'))),s(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),'const.ringNorm.Pmult_0'))),s(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),'const.ringNorm.Popp_0'))))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ~! [X0] : ! [X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool),happ(s(fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool)),happ(s(fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool))),happ(s(fun(fun(X0,'type.ringNorm.polynom'(X0)),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool)))),happ(s(fun(fun('type.quote.index','type.ringNorm.polynom'(X0)),fun(fun(X0,'type.ringNorm.polynom'(X0)),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),fun(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),bool))))),X1),s(fun('type.quote.index','type.ringNorm.polynom'(X0)),'const.ringNorm.Pvar_0'))),s(fun(X0,'type.ringNorm.polynom'(X0)),'const.ringNorm.Pconst_0'))),s(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),'const.ringNorm.Pplus_0'))),s(fun('type.ringNorm.polynom'(X0),fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0))),'const.ringNorm.Pmult_0'))),s(fun('type.ringNorm.polynom'(X0),'type.ringNorm.polynom'(X0)),'const.ringNorm.Popp_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool),happ(s(fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool)),happ(s(fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool))),happ(s(fun(fun(X6,'type.ringNorm.polynom'(X6)),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool)))),happ(s(fun(fun('type.quote.index','type.ringNorm.polynom'(X6)),fun(fun(X6,'type.ringNorm.polynom'(X6)),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool))))),X7),s(fun('type.quote.index','type.ringNorm.polynom'(X6)),'const.ringNorm.Pvar_0'))),s(fun(X6,'type.ringNorm.polynom'(X6)),'const.ringNorm.Pconst_0'))),s(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),'const.ringNorm.Pplus_0'))),s(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),'const.ringNorm.Pmult_0'))),s(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),'const.ringNorm.Popp_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool),happ(s(fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool)),happ(s(fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool))),happ(s(fun(fun(X6,'type.ringNorm.polynom'(X6)),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool)))),happ(s(fun(fun('type.quote.index','type.ringNorm.polynom'(X6)),fun(fun(X6,'type.ringNorm.polynom'(X6)),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),fun(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),bool))))),X7),s(fun('type.quote.index','type.ringNorm.polynom'(X6)),'const.ringNorm.Pvar_0'))),s(fun(X6,'type.ringNorm.polynom'(X6)),'const.ringNorm.Pconst_0'))),s(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),'const.ringNorm.Pplus_0'))),s(fun('type.ringNorm.polynom'(X6),fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6))),'const.ringNorm.Pmult_0'))),s(fun('type.ringNorm.polynom'(X6),'type.ringNorm.polynom'(X6)),'const.ringNorm.Popp_0'))))))),
  file('thm.ringNorm.datatype_polynom','thm.ringNorm.datatype_polynom')).
% SZS output end Proof for thm.ringNorm
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 29
% Passive clauses: 113
% Generated clauses: 1350
% Final active clauses: 27
% Final passive clauses: 68
% Input formulas: 12
% Initial clauses: 12
% 
% Duplicate literals: 145
% Trivial inequalities: 20
% Fw subsumption resolutions: 107
% Fw demodulations: 117
% 
% Simple tautologies: 60
% Equational tautologies: 19
% Forward subsumptions: 745
% 
% Binary resolution: 6
% Forward superposition: 538
% Backward superposition: 260
% Self superposition: 75
% Equality factoring: 48
% Equality resolution: 9
% 
% Split clauses: 22
% Split components: 44
% SAT solver clauses: 36
% SAT solver unit clauses: 4
% SAT solver binary clauses: 18
% 
% Sat splits: 22
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 36
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 1151
% Time elapsed: 0.039 s
% ------------------------------
% ------------------------------
% Success in time 0.04 s
