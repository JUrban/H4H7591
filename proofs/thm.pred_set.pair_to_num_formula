Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.pred_set
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.pred_set
% SZS output start Proof for thm.pred_set
fof(f2606,plain,(
  $false),
  inference(subsumption_resolution,[],[f2605,f40])).
fof(f40,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.numpair.npair_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1] : s('type.num.num','const.numpair.npair_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X8,X9] : s('type.num.num','const.numpair.npair_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X8),s('type.num.num',X9)))))),
  file('thm.pred_set.pair_to_num_formula','thm.pred_set.pair_to_num_def')).
fof(f2605,plain,(
  s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))),
  inference(forward_demodulation,[],[f2604,f41])).
fof(f41,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.numpair.npair_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : s('type.num.num','const.numpair.npair_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num',X1)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X8,X9] : s('type.num.num','const.numpair.npair_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))))),s('type.num.num',X9)))),
  file('thm.pred_set.pair_to_num_formula','thm.numpair.npair_def')).
fof(f2604,plain,(
  s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f2603,f35])).
fof(f35,plain,(
  ( ! [X0] : (s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0] : s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9] : s('type.num.num','const.numpair.tri_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.pred_set.pair_to_num_formula','thm.numpair.tri_formula')).
fof(f2603,plain,(
  s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f31,f39])).
fof(f39,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X9] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8)))),
  file('thm.pred_set.pair_to_num_formula','thm.arithmetic.MULT_SYM')).
fof(f31,plain,(
  s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f25])).
fof(f25,plain,(
  ? [X0,X1] : s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1] : s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.num.num','const.pred_set.pair_to_num_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X7)))),
  file('thm.pred_set.pair_to_num_formula','thm.pred_set.pair_to_num_formula')).
% SZS output end Proof for thm.pred_set
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 26
% Passive clauses: 488
% Generated clauses: 2474
% Final active clauses: 24
% Final passive clauses: 451
% Input formulas: 12
% Initial clauses: 14
% 
% Duplicate literals: 291
% Trivial inequalities: 31
% Fw subsumption resolutions: 101
% Fw demodulations: 19
% 
% Simple tautologies: 91
% Equational tautologies: 82
% Forward subsumptions: 1011
% 
% Binary resolution: 12
% Forward superposition: 743
% Backward superposition: 812
% Self superposition: 232
% Equality factoring: 202
% Equality resolution: 3
% 
% Split clauses: 114
% Split components: 228
% SAT solver clauses: 367
% SAT solver unit clauses: 217
% SAT solver binary clauses: 82
% 
% Sat splits: 114
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 367
% TWLsolver calls for satisfiability: 11
% 
% Memory used [KB]: 1663
% Time elapsed: 0.098 s
% ------------------------------
% ------------------------------
% Success in time 0.102 s
