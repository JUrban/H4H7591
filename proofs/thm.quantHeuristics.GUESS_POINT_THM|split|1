Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f1855,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1845,f133,f210,f141,f209,f162,f211,f208])).
fof(f208,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f208_D])).
fof(f208_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f211,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f211_D])).
fof(f211_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f162,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X13] : ((p(s(bool,'F_0')) => p(s(bool,X13))) <=> p(s(bool,'T_0')))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|1','thm.bool.IMP_CLAUSES|split|2')).
fof(f209,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f209_D])).
fof(f209_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f141,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|1',aHL_FALSITY)).
fof(f210,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X5))))) ) | $spl4),
  inference(cnf_transformation,[],[f210_D])).
fof(f210_D,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X5))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f133,plain,(
  ( ! [X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X5))))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK0,sK1),sK2),s(fun(sK1,bool),sK3)))) & (! [X5] : p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X5)))) | p(s(bool,'F_0'))) & (~p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,sK4)))) | ~p(s(bool,'F_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f97])).
fof(f97,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & (! [X5] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X5)))) | p(s(bool,'F_0'))) & (? [X4] : ~p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | ~p(s(bool,'F_0'))))),
  inference(rectify,[],[f96])).
fof(f96,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & (! [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | p(s(bool,'F_0'))) & (? [X4] : ~p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | ~p(s(bool,'F_0'))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & ((! [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | p(s(bool,'F_0'))) & (? [X4] : ~p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | ~p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & (! [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) <~> p(s(bool,'F_0'))))),
  inference(ennf_transformation,[],[f33])).
fof(f33,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) => (! [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) <=> p(s(bool,'F_0'))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) => (! [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) <=> p(s(bool,'F_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) => (! [X10] : p(s(bool,happ(s(fun(X7,bool),X9),s(X7,X10)))) <=> p(s(bool,'F_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) => (! [X10] : p(s(bool,happ(s(fun(X7,bool),X9),s(X7,X10)))) <=> p(s(bool,'F_0'))))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|1','thm.quantHeuristics.GUESS_POINT_THM|split|1')).
fof(f1845,plain,(
  $false | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f1844,f211])).
fof(f1844,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1843,f227])).
fof(f227,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X0)))) ) | $spl4),
  inference(resolution,[],[f210,f149])).
fof(f149,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|1','thm.bool.EQ_CLAUSES|split|1')).
fof(f1843,plain,(
  ( ! [X2] : (~p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,happ(s(fun(sK0,sK1),sK2),s(sK0,X2))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f1828,f211])).
fof(f1828,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,happ(s(fun(sK0,sK1),sK2),s(sK0,X2))))))) )),
  inference(superposition,[],[f188,f228])).
fof(f228,plain,(
  s(bool,'T_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK0,sK1),sK2),s(fun(sK1,bool),sK3)))),
  inference(resolution,[],[f132,f149])).
fof(f132,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK0,sK1),sK2),s(fun(sK1,bool),sK3))))),
  inference(cnf_transformation,[],[f98])).
fof(f188,plain,(
  ( ! [X2,X0,X5,X3,X1] : (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK9(X3,X2,X1,X0))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9])],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (? [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))) & (? [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(nnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X7,X6] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) <=> ! [X19] : ~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,happ(s(fun(X6,X7),X8),s(X6,X19)))))))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|1','thm.quantHeuristics.GUESS_FORALL_POINT_def')).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 41
% Passive clauses: 292
% Generated clauses: 1667
% Final active clauses: 33
% Final passive clauses: 209
% Input formulas: 30
% Initial clauses: 72
% 
% Duplicate literals: 140
% Trivial inequalities: 31
% Fw subsumption resolutions: 248
% Fw demodulations: 72
% Bw demodulations: 4
% 
% Simple tautologies: 100
% Equational tautologies: 30
% Forward subsumptions: 699
% 
% Binary resolution: 80
% Factoring: 1
% Forward superposition: 351
% Backward superposition: 536
% Self superposition: 50
% Equality factoring: 54
% Equality resolution: 10
% 
% Split clauses: 48
% Split components: 98
% SAT solver clauses: 90
% SAT solver unit clauses: 6
% SAT solver binary clauses: 50
% SAT solver learnt clauses: 1
% 
% Sat splits: 48
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 84
% TWLsolver calls for satisfiability: 28
% 
% Memory used [KB]: 1279
% Time elapsed: 0.042 s
% ------------------------------
% ------------------------------
% Success in time 0.044 s
