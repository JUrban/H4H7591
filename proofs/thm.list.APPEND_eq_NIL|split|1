Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f1119,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f295,f285,f143,f224,f144,f226,f222,f1118,f145,f227,f225,f223])).
fof(f223,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2))) | $spl1),
  inference(cnf_transformation,[],[f223_D])).
fof(f223_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f225,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | $spl3),
  inference(cnf_transformation,[],[f225_D])).
fof(f225_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f227,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) | $spl5),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f145,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2))) | (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) & s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK2))) & (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f114])).
fof(f114,plain,(
  ? [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ? [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) | (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2))))),
  inference(nnf_transformation,[],[f95])).
fof(f95,plain,(
  ? [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) <~> (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) <=> (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) <=> (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) <=> (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) & s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) <=> (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) & s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8)))),
  file('thm.list.APPEND_eq_NIL|split|1','thm.list.APPEND_eq_NIL|split|1')).
fof(f1118,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f1117,f225])).
fof(f1117,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | $spl0),
  inference(trivial_inequality_removal,[],[f1116])).
fof(f1116,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | $spl0),
  inference(superposition,[],[f188,f222])).
fof(f188,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))) & ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) <=> (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) <=> (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) & s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) <=> (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) & s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8)))),
  file('thm.list.APPEND_eq_NIL|split|1','thm.list.APPEND_eq_NIL|split|0')).
fof(f222,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2))) | $spl0),
  inference(cnf_transformation,[],[f222_D])).
fof(f222_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f226,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK2) | $spl4),
  inference(cnf_transformation,[],[f226_D])).
fof(f226_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK2) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f144,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK2) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f115])).
fof(f224,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | $spl2),
  inference(cnf_transformation,[],[f224_D])).
fof(f224_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f143,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f115])).
fof(f285,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f284])).
fof(f284,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | ($spl1 | $spl2 | $spl4)),
  inference(superposition,[],[f280,f175])).
fof(f175,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X9] : s('type.list.list'(X6),X9) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.APPEND_eq_NIL|split|1','thm.list.APPEND_NIL')).
fof(f280,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f279,f224])).
fof(f279,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f223,f226])).
fof(f295,plain,(
  $false | ($spl0 | $spl2 | $spl5)),
  inference(subsumption_resolution,[],[f292,f227])).
fof(f292,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK2) | ($spl0 | $spl2)),
  inference(superposition,[],[f176,f286])).
fof(f286,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK2))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f222,f224])).
fof(f176,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9] : s('type.list.list'(X6),X9) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X9)))),
  file('thm.list.APPEND_eq_NIL|split|1','thm.list.APPEND|split|0')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 33
% Passive clauses: 203
% Generated clauses: 927
% Final active clauses: 29
% Final passive clauses: 153
% Input formulas: 37
% Initial clauses: 78
% 
% Duplicate literals: 90
% Trivial inequalities: 23
% Fw subsumption resolutions: 106
% Fw demodulations: 16
% 
% Simple tautologies: 82
% Equational tautologies: 31
% Forward subsumptions: 356
% 
% Binary resolution: 45
% Factoring: 1
% Forward superposition: 167
% Backward superposition: 287
% Self superposition: 46
% Equality factoring: 50
% Equality resolution: 5
% 
% Split clauses: 23
% Split components: 48
% SAT solver clauses: 39
% SAT solver unit clauses: 7
% SAT solver binary clauses: 26
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 23
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 37
% TWLsolver calls for satisfiability: 12
% 
% Memory used [KB]: 1023
% Time elapsed: 0.028 s
% ------------------------------
% ------------------------------
% Success in time 0.011 s
