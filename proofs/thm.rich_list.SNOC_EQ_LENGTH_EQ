Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f278,plain,(
  $false),
  inference(subsumption_resolution,[],[f276,f25])).
fof(f25,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f19])).
fof(f19,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))))),
  inference(flattening,[],[f10])).
fof(f10,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : (s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X9),s('type.list.list'(X6),X10))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : (s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X9),s('type.list.list'(X6),X10))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10))))),
  file('thm.rich_list.SNOC_EQ_LENGTH_EQ','thm.rich_list.SNOC_EQ_LENGTH_EQ')).
fof(f276,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))),
  inference(equality_resolution,[],[f264])).
fof(f264,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))) )),
  inference(superposition,[],[f258,f213])).
fof(f213,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4)))))),
  inference(forward_demodulation,[],[f211,f30])).
fof(f30,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X14,X15] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X14),s('type.list.list'(X6),X15)))))),
  file('thm.rich_list.SNOC_EQ_LENGTH_EQ','thm.list.LENGTH_SNOC')).
fof(f211,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2)))))),
  inference(superposition,[],[f30,f24])).
fof(f24,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4)))),
  inference(cnf_transformation,[],[f21])).
fof(f258,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(superposition,[],[f219,f28])).
fof(f28,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X11] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.rich_list.SNOC_EQ_LENGTH_EQ','thm.arithmetic.ADD|49|')).
fof(f219,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(superposition,[],[f32,f28])).
fof(f32,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(nnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X11,X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))) <=> s('type.num.num',X11) = s('type.num.num',X12))),
  file('thm.rich_list.SNOC_EQ_LENGTH_EQ','thm.arithmetic.EQ_MONO_ADD_EQ')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 20
% Passive clauses: 53
% Generated clauses: 241
% Final active clauses: 18
% Final passive clauses: 29
% Input formulas: 8
% Initial clauses: 10
% 
% Duplicate literals: 37
% Trivial inequalities: 2
% Fw subsumption resolutions: 1
% Fw demodulations: 14
% 
% Simple tautologies: 16
% Equational tautologies: 17
% Forward subsumptions: 99
% 
% Binary resolution: 4
% Forward superposition: 82
% Backward superposition: 33
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 2
% SAT solver unit clauses: 1
% SAT solver binary clauses: 1
% 
% Sat splits: 1
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2
% TWLsolver calls for satisfiability: 2
% 
% Memory used [KB]: 767
% Time elapsed: 0.017 s
% ------------------------------
% ------------------------------
% Success in time 0.018 s
