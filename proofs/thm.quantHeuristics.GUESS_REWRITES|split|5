Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f1517,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1485,f94,f98,f96,f109,f1193,f58,f86,f1393,f81,f1395,f59,f85,f996,f60,f83,f82,f334,f338,f1127,f1200,f1124,f1126,f1194,f1195,f288])).
fof(f288,plain,(
  ( ! [X14] : (s(bool,'T_0') = s(bool,X14)) ) | $spl12),
  inference(cnf_transformation,[],[f288_D])).
fof(f288_D,plain,(
  ( ! [X14] : (s(bool,'T_0') = s(bool,X14)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1195,plain,(
  ( ! [X4] : (s(sK0,X4) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X4)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X4)))) ) | $spl72),
  inference(cnf_transformation,[],[f1195_D])).
fof(f1195_D,plain,(
  ( ! [X4] : (s(sK0,X4) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X4)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X4)))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f1194,plain,(
  ( ! [X4,X5] : (s(sK0,X4) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X4)))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f1184,f89])).
fof(f89,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f62,f63])).
fof(f63,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|5',aHL_BOOL_CASES)).
fof(f62,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|5',aHL_FALSITY)).
fof(f1184,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(sK0,X4) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X4)))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X4)))) ) | $spl6),
  inference(superposition,[],[f86,f87])).
fof(f87,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f63,f63])).
fof(f1126,plain,(
  s(bool,'F_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | $spl62),
  inference(cnf_transformation,[],[f1126_D])).
fof(f1126_D,plain,(
  s(bool,'F_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f1124,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(duplicate_literal_removal,[],[f1016])).
fof(f1016,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1014,f63])).
fof(f1014,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(subsumption_resolution,[],[f1008,f61])).
fof(f61,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|5',aHL_TRUTH)).
fof(f1008,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f82,f87])).
fof(f1200,plain,(
  ( ! [X11] : (s(sK0,X11) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X11)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X11)))) ) | ($spl1 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f1199,f62])).
fof(f1199,plain,(
  ( ! [X11] : (p(s(bool,'F_0')) | s(sK0,X11) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X11)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X11)))) ) | ($spl1 | $spl6 | $spl62)),
  inference(forward_demodulation,[],[f1188,f1126])).
fof(f1188,plain,(
  ( ! [X11] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | s(sK0,X11) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X11)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X11)))) ) | ($spl1 | $spl6)),
  inference(superposition,[],[f86,f1014])).
fof(f1127,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl5 | $spl16)),
  inference(forward_demodulation,[],[f1121,f338])).
fof(f1121,plain,(
  ( ! [X9] : (s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5))) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl5)),
  inference(duplicate_literal_removal,[],[f1021])).
fof(f1021,plain,(
  ( ! [X9] : (s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5))) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl5)),
  inference(superposition,[],[f1014,f260])).
fof(f260,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5))) | s(bool,'T_0') = s(bool,X9)) ) | $spl5),
  inference(subsumption_resolution,[],[f186,f61])).
fof(f186,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5))) | s(bool,'T_0') = s(bool,X9)) ) | $spl5),
  inference(superposition,[],[f85,f87])).
fof(f338,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5))) | $spl16),
  inference(cnf_transformation,[],[f338_D])).
fof(f338_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f334,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5))) | s(bool,'T_0') = s(bool,X9)) ) | $spl5),
  inference(duplicate_literal_removal,[],[f296])).
fof(f296,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl5),
  inference(superposition,[],[f260,f63])).
fof(f82,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | $spl1),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f83,plain,(
  ( ! [X5] : (s(sK0,sK5) != s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X5)))) ) | $spl2),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  ( ! [X5] : (s(sK0,sK5) != s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X5)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f60,plain,(
  ( ! [X5] : (s(sK0,sK5) != s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X5))) | ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | ! [X6] : (p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X6)))) | s(sK0,X6) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X6)))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | (~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5)))) & ! [X5] : s(sK0,sK5) != s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f37])).
fof(f37,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X6] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X6)))) | ? [X7] : s(X0,X6) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X7))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) & ! [X5] : s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))),
  inference(rectify,[],[f36])).
fof(f36,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) & ! [X5] : s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <~> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) => ? [X5] : s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) => ? [X5] : s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X7,X6),X8),s(fun(X6,bool),X9)))) <=> ! [X10] : (~p(s(bool,happ(s(fun(X6,bool),X9),s(X6,X10)))) => ? [X11] : s(X6,X10) = s(X6,happ(s(fun(X7,X6),X8),s(X7,X11)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X7,X6),X8),s(fun(X6,bool),X9)))) <=> ! [X10] : (~p(s(bool,happ(s(fun(X6,bool),X9),s(X6,X10)))) => ? [X11] : s(X6,X10) = s(X6,happ(s(fun(X7,X6),X8),s(X7,X11)))))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|5','thm.quantHeuristics.GUESS_REWRITES|split|5')).
fof(f996,plain,(
  $false | ($spl0 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f995,f83])).
fof(f995,plain,(
  s(sK0,sK5) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK12(sK5,sK3,sK2,sK1,sK0)))) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f987,f62])).
fof(f987,plain,(
  p(s(bool,'F_0')) | s(sK0,sK5) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK12(sK5,sK3,sK2,sK1,sK0)))) | ($spl0 | $spl16)),
  inference(superposition,[],[f978,f338])).
fof(f978,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X0)))) | s(sK0,X0) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK12(X0,sK3,sK2,sK1,sK0))))) ) | $spl0),
  inference(subsumption_resolution,[],[f971,f61])).
fof(f971,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X0)))) | s(sK0,X0) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK12(X0,sK3,sK2,sK1,sK0))))) ) | $spl0),
  inference(superposition,[],[f73,f95])).
fof(f95,plain,(
  s(bool,'T_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | $spl0),
  inference(subsumption_resolution,[],[f91,f62])).
fof(f91,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))) | $spl0),
  inference(superposition,[],[f81,f63])).
fof(f73,plain,(
  ( ! [X6,X2,X0,X3,X1] : (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X6)))) | s(X0,X6) = s(X0,happ(s(fun(X1,X0),X2),s(X1,sK12(X6,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X6] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X6)))) | s(X0,X6) = s(X0,happ(s(fun(X1,X0),X2),s(X1,sK12(X6,X3,X2,X1,X0)))))) & ((~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK13(X3,X2,X1,X0))))) & ! [X5] : s(X0,sK13(X3,X2,X1,X0)) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X6] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X6)))) | ? [X7] : s(X0,X6) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X7))))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) & ! [X5] : s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) & ! [X5] : s(X0,X4) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) => ? [X5] : s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) => ? [X5] : s(X0,X4) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X7] : ! [X12,X13] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X7,X6),X12),s(fun(X6,bool),X13)))) <=> ! [X10] : (~p(s(bool,happ(s(fun(X6,bool),X13),s(X6,X10)))) => ? [X11] : s(X6,X10) = s(X6,happ(s(fun(X7,X6),X12),s(X7,X11)))))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|5','thm.quantHeuristics.GUESS_FORALL_GAP_def')).
fof(f85,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5)))) | $spl5),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f59,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK5)))) | ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))))),
  inference(cnf_transformation,[],[f38])).
fof(f1395,plain,(
  $false | ($spl1 | $spl62 | $spl72)),
  inference(subsumption_resolution,[],[f1394,f62])).
fof(f1394,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl62 | $spl72)),
  inference(forward_demodulation,[],[f1393,f1126])).
fof(f81,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | $spl0),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1393,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | ($spl1 | $spl72)),
  inference(subsumption_resolution,[],[f1375,f61])).
fof(f1375,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | ($spl1 | $spl72)),
  inference(superposition,[],[f74,f1368])).
fof(f1368,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,sK13(sK3,sK2,sK1,sK0)))) | ($spl1 | $spl72)),
  inference(equality_resolution,[],[f1358])).
fof(f1358,plain,(
  ( ! [X0] : (s(sK0,X0) != s(sK0,sK13(sK3,sK2,sK1,sK0)) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X0)))) ) | ($spl1 | $spl72)),
  inference(superposition,[],[f1005,f1195])).
fof(f1005,plain,(
  ( ! [X0] : (s(sK0,sK13(sK3,sK2,sK1,sK0)) != s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X0)))) ) | $spl1),
  inference(resolution,[],[f82,f75])).
fof(f75,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | s(X0,sK13(X3,X2,X1,X0)) != s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))) )),
  inference(cnf_transformation,[],[f51])).
fof(f74,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK13(X3,X2,X1,X0))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f86,plain,(
  ( ! [X6] : (p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X6)))) | s(sK0,X6) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X6))))) ) | $spl6),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  ( ! [X6] : (p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X6)))) | s(sK0,X6) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X6))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f58,plain,(
  ( ! [X6] : (s(sK0,X6) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X6)))) | p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X6)))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f1193,plain,(
  ( ! [X1] : (s(sK0,X1) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X1)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X1)))) ) | $spl6),
  inference(subsumption_resolution,[],[f1182,f62])).
fof(f1182,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(sK0,X1) = s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4(X1)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,X1)))) ) | $spl6),
  inference(superposition,[],[f86,f63])).
fof(f109,plain,(
  $false | ($spl0 | $spl8)),
  inference(subsumption_resolution,[],[f99,f62])).
fof(f99,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f96,f81])).
fof(f96,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f98,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f94,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f63])).
fof(f1485,plain,(
  $false | ($spl11 | $spl12)),
  inference(trivial_inequality_removal,[],[f1476])).
fof(f1476,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl11 | $spl12)),
  inference(superposition,[],[f98,f288])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 73
% Passive clauses: 347
% Generated clauses: 1452
% Final active clauses: 12
% Final passive clauses: 164
% Input formulas: 11
% Initial clauses: 23
% 
% Duplicate literals: 110
% Trivial inequalities: 9
% Fw subsumption resolutions: 193
% Fw demodulations: 73
% Bw demodulations: 37
% 
% Simple tautologies: 24
% Equational tautologies: 16
% Forward subsumptions: 575
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 89
% Forward superposition: 517
% Backward superposition: 270
% Self superposition: 30
% Equality factoring: 30
% Equality resolution: 1
% 
% Split clauses: 71
% Split components: 142
% SAT solver clauses: 155
% SAT solver unit clauses: 19
% SAT solver binary clauses: 58
% SAT solver learnt clauses: 6
% SAT solver learnt literals: 7
% 
% Sat splits: 71
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 141
% TWLsolver calls for satisfiability: 57
% 
% Memory used [KB]: 1663
% Time elapsed: 0.049 s
% ------------------------------
% ------------------------------
% Success in time 0.05 s
