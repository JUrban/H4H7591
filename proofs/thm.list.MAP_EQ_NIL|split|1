Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f3036,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3035,f259,f403,f401,f741,f260,f404,f402])).
fof(f402,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),sK4))) | $spl1),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f404,plain,(
  s('type.list.list'(sK3),'const.list.NIL_0') != s('type.list.list'(sK3),sK4) | $spl3),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  s('type.list.list'(sK3),'const.list.NIL_0') != s('type.list.list'(sK3),sK4) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f260,plain,(
  s('type.list.list'(sK3),'const.list.NIL_0') != s('type.list.list'(sK3),sK4) | s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),sK4)))),
  inference(cnf_transformation,[],[f211])).
fof(f211,plain,(
  (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),sK4))) | s('type.list.list'(sK3),'const.list.NIL_0') = s('type.list.list'(sK3),sK4)) & (s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),sK4))) | s('type.list.list'(sK3),'const.list.NIL_0') != s('type.list.list'(sK3),sK4))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4,sK5])],[f210])).
fof(f210,plain,(
  ? [X0,X1,X2,X3] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) | s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X2)))),
  inference(nnf_transformation,[],[f182])).
fof(f182,plain,(
  ? [X0,X1,X2,X3] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) <~> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),X8))) <=> s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),X8))) <=> s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X8))),
  file('thm.list.MAP_EQ_NIL|split|1','thm.list.MAP_EQ_NIL|split|1')).
fof(f741,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f731])).
fof(f731,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.NIL_0') | ($spl1 | $spl2)),
  inference(superposition,[],[f611,f340])).
fof(f340,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7,X6] : ! [X9] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),'const.list.NIL_0')))),
  file('thm.list.MAP_EQ_NIL|split|1','thm.list.MAP|split|0')).
fof(f611,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),'const.list.NIL_0'))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f402,f403])).
fof(f401,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),sK4))) | $spl0),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),sK4))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f403,plain,(
  s('type.list.list'(sK3),'const.list.NIL_0') = s('type.list.list'(sK3),sK4) | $spl2),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.list.list'(sK3),'const.list.NIL_0') = s('type.list.list'(sK3),sK4) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f259,plain,(
  s('type.list.list'(sK3),'const.list.NIL_0') = s('type.list.list'(sK3),sK4) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),'const.list.MAP_2'(s(fun(sK3,sK2),sK5),s('type.list.list'(sK3),sK4)))),
  inference(cnf_transformation,[],[f211])).
fof(f3035,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f3033,f404])).
fof(f3033,plain,(
  s('type.list.list'(sK3),'const.list.NIL_0') = s('type.list.list'(sK3),sK4) | $spl0),
  inference(trivial_inequality_removal,[],[f3032])).
fof(f3032,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.NIL_0') | s('type.list.list'(sK3),'const.list.NIL_0') = s('type.list.list'(sK3),sK4) | $spl0),
  inference(superposition,[],[f350,f401])).
fof(f350,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) )),
  inference(cnf_transformation,[],[f249])).
fof(f249,plain,(
  ! [X0,X1,X2,X3] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) & (s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2)))))),
  inference(nnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2,X3] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(flattening,[],[f156])).
fof(f156,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7] : ! [X8,X9] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),X8))) <=> s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X8))),
  file('thm.list.MAP_EQ_NIL|split|1','thm.list.MAP_EQ_NIL|split|0')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 73
% Passive clauses: 532
% Generated clauses: 2701
% Final active clauses: 68
% Final passive clauses: 410
% Input formulas: 69
% Initial clauses: 139
% 
% Duplicate literals: 160
% Trivial inequalities: 67
% Fw subsumption resolutions: 204
% Fw demodulations: 200
% Bw demodulations: 3
% 
% Simple tautologies: 149
% Equational tautologies: 33
% Forward subsumptions: 1321
% 
% Binary resolution: 86
% Factoring: 1
% Forward superposition: 779
% Backward superposition: 920
% Self superposition: 66
% Equality factoring: 54
% Equality resolution: 6
% 
% Split clauses: 48
% Split components: 97
% SAT solver clauses: 88
% SAT solver unit clauses: 16
% SAT solver binary clauses: 44
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 48
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 86
% TWLsolver calls for satisfiability: 26
% 
% Memory used [KB]: 2046
% Time elapsed: 0.066 s
% ------------------------------
% ------------------------------
% Success in time 0.069 s
