Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (81587)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 88
% Passive clauses: 2912
% Generated clauses: 19175
% Final active clauses: 77
% Final passive clauses: 2708
% Input formulas: 7
% Initial clauses: 9
% 
% Duplicate literals: 1242
% Trivial inequalities: 218
% Fw subsumption resolutions: 2098
% Fw demodulations: 1938
% Bw demodulations: 7
% 
% Simple tautologies: 327
% Equational tautologies: 94
% Forward subsumptions: 8268
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 36
% Forward superposition: 8006
% Backward superposition: 4946
% Self superposition: 342
% Equality factoring: 252
% Equality resolution: 9
% 
% Split clauses: 892
% Split components: 1795
% SAT solver clauses: 2170
% SAT solver unit clauses: 98
% SAT solver binary clauses: 589
% 
% Sat splits: 892
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2170
% TWLsolver calls for satisfiability: 89
% 
% Memory used [KB]: 8827
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f3814,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3795,f26,f39,f27,f41,f57,f59,f23,f37,f28,f42,f60,f62,f24,f35,f104,f105,f29,f43,f30,f44,f379,f386,f384,f320,f321,f25,f33,f46,f55,f411])).
fof(f411,plain,(
  $false | ($spl6 | $spl9 | $spl58)),
  inference(subsumption_resolution,[],[f396,f39])).
fof(f396,plain,(
  ~p(s(bool,'T_0')) | ($spl9 | $spl58)),
  inference(backward_demodulation,[],[f384,f41])).
fof(f55,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f46,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(superposition,[],[f42,f42])).
fof(f33,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2)))))) | $spl1),
  inference(cnf_transformation,[],[f33_D])).
fof(f33_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f25,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) & (p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))))) & ~p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) & ? [X3] : (p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))))) & ~p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))))) => p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))))) => p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.bool.IN_2'(s(X6,X9),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))))) => p(s(bool,'const.bool.IN_2'(s(X6,X9),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.bool.IN_2'(s(X6,X9),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))))) => p(s(bool,'const.bool.IN_2'(s(X6,X9),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))))))),
  file('thm.rich_list.MEM_DROP','thm.rich_list.MEM_DROP')).
fof(f321,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl50),
  inference(cnf_transformation,[],[f321_D])).
fof(f321_D,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f320,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl6 | $spl18)),
  inference(subsumption_resolution,[],[f187,f39])).
fof(f187,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl18)),
  inference(superposition,[],[f33,f55])).
fof(f384,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl58),
  inference(cnf_transformation,[],[f384_D])).
fof(f384_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f386,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) | $spl60),
  inference(cnf_transformation,[],[f386_D])).
fof(f386_D,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f379,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl10 | $spl50)),
  inference(duplicate_literal_removal,[],[f332])).
fof(f332,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl10 | $spl50)),
  inference(superposition,[],[f321,f42])).
fof(f44,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) ) | $spl14),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f30,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ! [X3] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X10] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X10),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X10),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.MEM_DROP','thm.rich_list.EXISTS_DROP')).
fof(f43,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))) ) | $spl12),
  inference(cnf_transformation,[],[f43_D])).
fof(f43_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f29,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0,X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9,X8] : s(bool,'const.bool.IN_2'(s(X6,X9),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))) = s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),'|dollar|equals_1'(s(X6,X9))),s('type.list.list'(X6),X8)))),
  file('thm.rich_list.MEM_DROP','thm.rich_list.MEM_EXISTS')).
fof(f105,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | $spl36),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f104,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | ($spl12 | $spl14)),
  inference(forward_demodulation,[],[f102,f43])).
fof(f102,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | ($spl12 | $spl14)),
  inference(superposition,[],[f44,f43])).
fof(f35,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))))) | $spl2),
  inference(cnf_transformation,[],[f35_D])).
fof(f35_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f24,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))))),
  inference(cnf_transformation,[],[f21])).
fof(f62,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))) | $spl24),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f60,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))) | ($spl2 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f52,f41])).
fof(f52,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))) | ($spl2 | $spl10)),
  inference(superposition,[],[f35,f42])).
fof(f42,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f42_D])).
fof(f42_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f28,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rich_list.MEM_DROP',aHL_BOOL_CASES)).
fof(f37,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl4),
  inference(cnf_transformation,[],[f37_D])).
fof(f37_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f23,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f21])).
fof(f59,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl22),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f57,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f50,f41])).
fof(f50,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl10)),
  inference(superposition,[],[f37,f42])).
fof(f41,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f27,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f11])).
fof(f11,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.MEM_DROP',aHL_FALSITY)).
fof(f39,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f39_D])).
fof(f39_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f26,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.MEM_DROP',aHL_TRUTH)).
fof(f3795,plain,(
  $false | ($spl6 | $spl9 | $spl22 | $spl24 | $spl36 | $spl60)),
  inference(subsumption_resolution,[],[f3794,f39])).
fof(f3794,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl9 | $spl22 | $spl24 | $spl36 | $spl60)),
  inference(forward_demodulation,[],[f3793,f59])).
fof(f3793,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl9 | $spl24 | $spl36 | $spl60)),
  inference(subsumption_resolution,[],[f3792,f41])).
fof(f3792,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl24 | $spl36 | $spl60)),
  inference(forward_demodulation,[],[f3791,f386])).
fof(f3791,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl24 | $spl36)),
  inference(subsumption_resolution,[],[f3733,f39])).
fof(f3733,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.bool.IN_2'(s(sK0,sK3),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl24 | $spl36)),
  inference(superposition,[],[f105,f62])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 32
% Passive clauses: 144
% Generated clauses: 3690
% Final active clauses: 25
% Final passive clauses: 90
% Input formulas: 7
% Initial clauses: 9
% 
% Duplicate literals: 630
% Trivial inequalities: 25
% Fw subsumption resolutions: 91
% Fw demodulations: 107
% Bw demodulations: 26
% Condensations: 887
% 
% Simple tautologies: 63
% Equational tautologies: 54
% Forward subsumptions: 1332
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 12
% Forward superposition: 738
% Backward superposition: 753
% Self superposition: 157
% Equality factoring: 154
% 
% Split clauses: 36
% Split components: 73
% SAT solver clauses: 403
% SAT solver unit clauses: 15
% SAT solver binary clauses: 63
% SAT solver learnt clauses: 1
% 
% Sat splits: 36
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 402
% TWLsolver calls for satisfiability: 47
% 
% Memory used [KB]: 3198
% Time elapsed: 0.387 s
% ------------------------------
% ------------------------------
% Success in time 1.008 s
