Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.indexedLists
% (110654)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 274
% Passive clauses: 5735
% Generated clauses: 21061
% Final active clauses: 248
% Final passive clauses: 5138
% Input formulas: 53
% Initial clauses: 137
% 
% Duplicate literals: 304
% Trivial inequalities: 320
% Fw subsumption resolutions: 2211
% Fw demodulations: 4232
% Bw demodulations: 22
% 
% Simple tautologies: 254
% Equational tautologies: 36
% Forward subsumptions: 7569
% 
% Binary resolution: 1728
% Factoring: 1
% Forward superposition: 5609
% Backward superposition: 6309
% Self superposition: 74
% Equality factoring: 56
% Equality resolution: 32
% 
% Split clauses: 357
% Split components: 716
% SAT solver clauses: 666
% SAT solver unit clauses: 24
% SAT solver binary clauses: 251
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 357
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 664
% TWLsolver calls for satisfiability: 228
% 
% Memory used [KB]: 14072
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.indexedLists
% (110662)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 260
% Passive clauses: 2203
% Generated clauses: 13643
% Final active clauses: 171
% Final passive clauses: 1808
% Input formulas: 53
% Initial clauses: 137
% 
% Duplicate literals: 23
% Trivial inequalities: 311
% Fw subsumption resolutions: 733
% Fw demodulations: 2582
% Bw demodulations: 145
% Condensations: 85
% Global subsumptions: 10
% 
% Simple tautologies: 128
% Equational tautologies: 11
% Forward subsumptions: 4439
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 976
% Factoring: 2
% Forward superposition: 3610
% Backward superposition: 2581
% Self superposition: 31
% Equality factoring: 5
% Equality resolution: 38
% 
% Split clauses: 105
% Split components: 210
% SAT solver clauses: 3116
% SAT solver unit clauses: 143
% SAT solver binary clauses: 73
% SAT solver learnt clauses: 22
% SAT solver learnt literals: 5
% 
% Sat splits: 105
% Sat splitting refutations: 50
% 
% TWLsolver clauses: 3074
% TWLsolver calls for satisfiability: 944
% 
% Memory used [KB]: 19317
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.indexedLists
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.indexedLists
% SZS output start Proof for thm.indexedLists
fof(f33126,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f237,f395,f393,f236,f394,f392,f1112,f1114,f1122,f1124,f1126,f1130,f1132,f1134,f1136,f1138,f1140,f1144,f1146,f1148,f1150,f1152,f1154,f1159,f1164,f1172,f1174,f1176,f1180,f1312,f1314,f1320,f1321,f1322,f1323,f1324,f1325,f1326,f1327,f1328,f1329,f1330,f1331,f1332,f1333,f2325,f2333,f2334,f2337,f2335,f2366,f2420,f2425,f2426,f2540,f2545,f2580,f2581,f2585,f4508,f4509,f4517,f4518,f4656,f4881,f4882,f4889,f4510,f4890,f4895,f4912,f5252,f5254,f5314,f5315,f5326,f5328,f6342,f6431,f6429,f11382,f11386,f11389,f11392,f11399,f11402,f11436,f11383,f11438,f11387,f11440,f11390,f11442,f11393,f11448,f11400,f11450,f11403,f12138,f12140,f12142,f12143,f12144,f12146,f12148,f12150,f12152,f12154,f12156,f12158,f12160,f12161,f12166,f12167,f12168,f12169,f12171,f12173,f12179,f12181,f12199,f12201,f12203,f12205,f12227,f12231,f12233,f12441,f12457,f12473,f12489,f12505,f12521,f12537,f12539,f12541,f12543,f12545,f12547,f12555,f12557,f12559,f12563,f12567,f12569,f12574,f12577,f12582,f12585,f12587,f12589,f12591,f12593,f12595,f12597,f12599,f12601,f12603,f12605,f12607,f12609,f12611,f12613,f12615,f12617,f12619,f12637,f12643,f12647,f12649,f12657,f12661,f12665,f12667,f12673,f12675,f12679,f12683,f12687,f12691,f12695,f12696,f12697,f12703,f12705,f12709,f12713,f12715,f12717,f12719,f12735,f12737,f12739,f12741,f12743,f12745,f12753,f12755,f14568,f14570,f14569,f15061,f15063,f15062,f15405,f15407,f15406,f15741,f15743,f15742,f17660,f17662,f17661,f18112,f18118,f18116,f18114,f17929,f18125,f18123,f18173,f18177,f18178,f18181,f18182,f18185,f18219,f18400,f18398,f18227,f18405,f18403,f18230,f18409,f18407,f18236,f18413,f18411,f18238,f18417,f18415,f18244,f18421,f14424,f6525,f2327,f14515,f6579,f2421,f14910,f6898,f2541,f14923,f2546,f15020,f2586,f2326,f18589,f18591,f18593,f18595,f18597,f18599,f18602,f18610,f18619,f18629,f18631,f18633,f18635,f18637,f18639,f18647,f18649,f18651,f18653,f18655,f18657,f18661,f18664,f18669,f18671,f18673,f18675,f18677,f18679,f18687,f18689,f18691,f18693,f18695,f18697,f18701,f18704,f18708,f18710,f18712,f18714,f18716,f18718,f18726,f18729,f18731,f18733,f18735,f18737,f18739,f18744,f18749,f18751,f18753,f18755,f18757,f18761,f18763,f18766,f18768,f18770,f18772,f18774,f18776,f18779,f18781,f18783,f18785,f18787,f18789,f19547,f19549,f19551,f19552,f19553,f19555,f19560,f19561,f19562,f19563,f19567,f19569,f19575,f19577,f19591,f19597,f19619,f19623,f19625,f19857,f19873,f19903,f19905,f19921,f19937,f19953,f19969,f19971,f19973,f19975,f19977,f19979,f19981,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20002,f20005,f20010,f20013,f20017,f20019,f20021,f20023,f20025,f20027,f20029,f20031,f20033,f20035,f20037,f20039,f20041,f20043,f20045,f20069,f20073,f20075,f20083,f20087,f20091,f20093,f20099,f20101,f20105,f20109,f20113,f20117,f20121,f20122,f20126,f20127,f20133,f20135,f20139,f20143,f20147,f20149,f20151,f20153,f20155,f20171,f20173,f20175,f20177,f20179,f20181,f20186,f20190,f20192,f20195,f20197,f20201,f20203,f20205,f20207,f20209,f20211,f20213,f20215,f20217,f20219,f20220,f20221,f20222,f20223,f20224,f20225,f20226,f20227,f20229,f20230,f20238,f20241,f20244,f20245,f20246,f20247,f20248,f20249,f20250,f20251,f20253,f20270,f20271,f20272,f20273,f20274,f20275,f20276,f20277,f20279,f20296,f20297,f20298,f20299,f20300,f20301,f20302,f20303,f20305,f20307,f20309,f20311,f20313,f20315,f20316,f20318,f20320,f20322,f20324,f20326,f20328,f20329,f20335,f20337,f20338,f20339,f20340,f20341,f20343,f20344,f20347,f20349,f20351,f20353,f20356,f20358,f20360,f20362,f20364,f20366,f20368,f20369,f20370,f20371,f20372,f20373,f20374,f20377,f22208,f22299,f18419,f23936,f23938,f23937,f23981,f23983,f23982,f26476,f26506,f26981,f27011,f26601,f26599,f28132,f28135,f28146,f28151,f28152,f28154,f28133,f28243,f28246,f28257,f28262,f28263,f28265,f28244,f11384,f28525,f28527,f28526,f29336,f29338,f1113,f29337,f33046,f33051,f33055,f33058,f33060,f33067,f33069,f33077,f33113,f33121,f33122])).
fof(f33122,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f33050,f238])).
fof(f238,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.indexedLists.LIST_RELi_thm|split|0',aHL_TRUTH)).
fof(f33050,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f4838,f32216,f331])).
fof(f331,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10,X11] : ((p(s(bool,X10)) => p(s(bool,X11))) => ((p(s(bool,X11)) => p(s(bool,X10))) => s(bool,X10) = s(bool,X11)))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.IMP_ANTISYM_AX')).
fof(f32216,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(sK2,bool))),X1),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))))) ) | $spl2),
  inference(subsumption_resolution,[],[f32215,f240])).
fof(f240,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.indexedLists.LIST_RELi_thm|split|0',aHL_FALSITY)).
fof(f32215,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(sK2,bool))),X1),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f32214,f408])).
fof(f408,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f284,f250])).
fof(f250,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X12] : (s(bool,'F_0') = s(bool,X12) <=> ~p(s(bool,X12)))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.EQ_CLAUSES|split|2')).
fof(f284,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X24] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.prim_rec.NOT_LESS_|48|')).
fof(f32214,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X1,'const.list.NIL_0',sK3,sK2,X0)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(sK2,bool))),X1),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f32168,f241])).
fof(f241,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.list.LENGTH|split|0')).
fof(f32168,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(sK2,bool))),X1),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X1,'const.list.NIL_0',sK3,sK2,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl2),
  inference(trivial_inequality_removal,[],[f32166])).
fof(f32166,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(sK2,bool))),X1),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X1,'const.list.NIL_0',sK3,sK2,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl2),
  inference(superposition,[],[f8223,f241])).
fof(f8223,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X5,fun(sK2,bool))),X7),s('type.list.list'(X5),X6),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X7,X6,sK3,sK2,X5)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))))))) ) | $spl2),
  inference(forward_demodulation,[],[f8222,f394])).
fof(f8222,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X7,X6,sK3,sK2,X5)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X5,fun(sK2,bool))),X7),s('type.list.list'(X5),X6),s('type.list.list'(sK2),sK3))))) ) | $spl2),
  inference(forward_demodulation,[],[f8180,f241])).
fof(f8180,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X7,X6,sK3,sK2,X5)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X5,fun(sK2,bool))),X7),s('type.list.list'(X5),X6),s('type.list.list'(sK2),sK3))))) ) | $spl2),
  inference(superposition,[],[f345,f394])).
fof(f345,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X4,X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2))))) )),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) & ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X6))),s(X0,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X1),X2))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X4,X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',sK22(X4,X3,X2,X1,X0)))),s(X0,'const.list.EL_2'(s('type.num.num',sK22(X4,X3,X2,X1,X0)),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',sK22(X4,X3,X2,X1,X0)),s('type.list.list'(X1),X2))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22])],[f225])).
fof(f225,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) & ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X6))),s(X0,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X1),X2))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X5))),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X2))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2))))))),
  inference(rectify,[],[f224])).
fof(f224,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X5))),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X2))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X5))),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X2))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2))))))),
  inference(flattening,[],[f223])).
fof(f223,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X5))),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X2))))))))) & ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X5))),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X2)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2))))))),
  inference(nnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X5))),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X2)))))))))),
  inference(ennf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) & ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X5))),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X2)))))))))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) & ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X5))),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X2)))))))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X6,X7] : ! [X27,X28,X9] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X6,fun(X7,bool))),X9),s('type.list.list'(X6),X28),s('type.list.list'(X7),X27)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X28))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X27))) & ! [X29] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X29),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X28)))))) => p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.num.num',fun(X6,fun(X7,bool))),X9),s('type.num.num',X29))),s(X6,'const.list.EL_2'(s('type.num.num',X29),s('type.list.list'(X6),X28))))),s(X7,'const.list.EL_2'(s('type.num.num',X29),s('type.list.list'(X7),X27)))))))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.indexedLists.LIST_RELi_EL_EQN')).
fof(f4838,plain,(
  s(bool,'T_0') != s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f238,f4673,f384])).
fof(f384,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s(bool,X0) != s(bool,X1) | p(s(bool,X1))) )),
  inference(condensation,[],[f383])).
fof(f383,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,X0) != s(bool,X2)) )),
  inference(condensation,[],[f372])).
fof(f372,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f235])).
fof(f235,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f234])).
fof(f234,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X8,X17,X13,X18] : ((s(bool,X8) = s(bool,X17) & (p(s(bool,X17)) => s(bool,X13) = s(bool,X18))) => ((p(s(bool,X8)) => p(s(bool,X13))) <=> (p(s(bool,X17)) => p(s(bool,X18)))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.IMP_CONG')).
fof(f4673,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f393,f394])).
fof(f33121,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f33120,f400])).
fof(f400,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f240,f245])).
fof(f245,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.EQ_CLAUSES|split|1')).
fof(f33120,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl2)),
  inference(backward_demodulation,[],[f33052,f4854])).
fof(f4854,plain,(
  s(bool,'F_0') = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f4841,f408])).
fof(f4841,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) ) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f401,f4673,f460])).
fof(f460,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f457,f240])).
fof(f457,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f328,f243])).
fof(f243,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.indexedLists.LIST_RELi_thm|split|0',aHL_BOOL_CASES)).
fof(f328,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f144])).
fof(f401,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f284,f245])).
fof(f33052,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(sK2,bool))),X1),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f238,f32216,f331])).
fof(f33113,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f33054,f238])).
fof(f33054,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f4838,f32216,f331])).
fof(f33077,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f4822,f32216,f385])).
fof(f385,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(duplicate_literal_removal,[],[f358])).
fof(f358,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f231])).
fof(f231,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | ((~p(s(bool,X2)) | p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & ((p(s(bool,X2)) & ~p(s(bool,X0))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | sP0(X0,X1,X2)))),
  inference(rectify,[],[f230])).
fof(f230,plain,(
  ! [X2,X1,X0] : ((~sP0(X2,X1,X0) | ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2))))) & ((p(s(bool,X0)) & ~p(s(bool,X2))) | (p(s(bool,X1)) & ~p(s(bool,X2))) | sP0(X2,X1,X0)))),
  inference(flattening,[],[f229])).
fof(f229,plain,(
  ! [X2,X1,X0] : ((~sP0(X2,X1,X0) | ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2))))) & (((p(s(bool,X0)) & ~p(s(bool,X2))) | (p(s(bool,X1)) & ~p(s(bool,X2)))) | sP0(X2,X1,X0)))),
  inference(nnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X2,X1,X0] : (sP0(X2,X1,X0) <=> ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f4822,plain,(
  ( ! [X0] : (~sP0('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X0,'T_0')) ) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f238,f4673,f353])).
fof(f353,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X0)) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f231])).
fof(f33069,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f240,f4833,f32216,f354])).
fof(f354,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f231])).
fof(f4833,plain,(
  ( ! [X0] : (sP0(X0,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) ) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f4673,f4673,f355])).
fof(f355,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f231])).
fof(f33067,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f240,f4826,f32216,f354])).
fof(f4826,plain,(
  ( ! [X0] : (sP0(X0,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),'F_0')) ) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f240,f4673,f355])).
fof(f33060,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f240,f4833,f32216,f353])).
fof(f33058,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f240,f4832,f32216,f353])).
fof(f4832,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) ) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f240,f4673,f355])).
fof(f33055,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f238,f4838,f32216,f331])).
fof(f33051,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f238,f4838,f32216,f331])).
fof(f33046,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f4838,f32216,f246])).
fof(f246,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f157])).
fof(f29337,plain,(
  ( ! [X12] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),sK16(X12,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X12)))) ) | $spl116),
  inference(cnf_transformation,[],[f29337_D])).
fof(f29337_D,plain,(
  ( ! [X12] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),sK16(X12,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X12)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f1113,plain,(
  ( ! [X6] : (p(s(bool,X6))) ) | $spl4),
  inference(cnf_transformation,[],[f1113_D])).
fof(f1113_D,plain,(
  ( ! [X6] : (p(s(bool,X6))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f29338,plain,(
  ( ! [X14,X15] : (p(s(bool,X15)) | s('type.list.list'(bool),X14) = s('type.list.list'(bool),sK16(X14,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X14)))) )),
  inference(subsumption_resolution,[],[f29315,f245])).
fof(f29315,plain,(
  ( ! [X14,X15] : (p(s(bool,X15)) | s('type.list.list'(bool),X14) = s('type.list.list'(bool),sK16(X14,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X14)))) )),
  inference(superposition,[],[f807,f424])).
fof(f424,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f243,f243])).
fof(f807,plain,(
  ( ! [X0] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK16(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) )),
  inference(forward_demodulation,[],[f790,f285])).
fof(f285,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1] : s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0] : ! [X1] : s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X6] : ! [X37] : s(X6,'const.list.HD_1'(s('type.list.list'(X6),X37))) = s(X6,happ(s(fun('type.list.list'(X6),X6),'const.list.HD_0'),s('type.list.list'(X6),X37)))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','ARITY_0_1_const.list.HD')).
fof(f790,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK16(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) )),
  inference(superposition,[],[f314,f242])).
fof(f242,plain,(
  ( ! [X0] : (s(fun('type.list.list'(X0),X0),'const.list.HD_0') = s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0] : s(fun('type.list.list'(X0),X0),'const.list.HD_0') = s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6] : s(fun('type.list.list'(X6),X6),'const.list.HD_0') = s(fun('type.list.list'(X6),X6),'const.list.EL_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.list.EL_restricted|split|0')).
fof(f314,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK16(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f205])).
fof(f205,plain,(
  ! [X0,X1,X2] : (((s(X0,X2) = s(X0,sK16(X2,X1,X0)) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK16(X2,X1,X0)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16])],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2] : ((? [X4] : (s(X0,X2) = s(X0,X4) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f203])).
fof(f203,plain,(
  ! [X0,X1,X2] : ((? [X3] : (s(X0,X2) = s(X0,X3) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(ennf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X20,X21] : (! [X8] : (s(X6,X8) = s(X6,X21) => p(s(bool,happ(s(fun(X6,bool),X20),s(X6,X8))))) <=> p(s(bool,happ(s(fun(X6,bool),X20),s(X6,X21)))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.UNWIND_FORALL_THM2')).
fof(f29336,plain,(
  ( ! [X12,X13] : (p(s(bool,X13)) | s('type.list.list'(bool),X12) = s('type.list.list'(bool),sK16(X12,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X12)))) )),
  inference(subsumption_resolution,[],[f29314,f245])).
fof(f29314,plain,(
  ( ! [X12,X13] : (p(s(bool,X13)) | s('type.list.list'(bool),X12) = s('type.list.list'(bool),sK16(X12,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X12))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f807,f424])).
fof(f28526,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | $spl114),
  inference(cnf_transformation,[],[f28526_D])).
fof(f28526_D,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f28527,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X6)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) )),
  inference(subsumption_resolution,[],[f28521,f245])).
fof(f28521,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X6)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) )),
  inference(superposition,[],[f1733,f424])).
fof(f1733,plain,(
  ( ! [X0] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) )),
  inference(forward_demodulation,[],[f1732,f1077])).
fof(f1077,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(forward_demodulation,[],[f1025,f285])).
fof(f1025,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f295,f242])).
fof(f295,plain,(
  ( ! [X2,X0,X1] : (s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2] : s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0] : ! [X1,X2] : s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X6] : ! [X37,X38] : s(X6,'const.list.EL_2'(s('type.num.num',X37),s('type.list.list'(X6),X38))) = s(X6,happ(s(fun('type.list.list'(X6),X6),'const.list.EL_1'(s('type.num.num',X37))),s('type.list.list'(X6),X38)))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','ARITY_1_2_const.list.EL')).
fof(f1732,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X0)))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f1731,f295])).
fof(f1731,plain,(
  ( ! [X0] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X0))))) )),
  inference(forward_demodulation,[],[f1718,f285])).
fof(f1718,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X0))))) )),
  inference(superposition,[],[f323,f242])).
fof(f323,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK19(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19])],[f211])).
fof(f211,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f210])).
fof(f210,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X14,X19] : (? [X8] : (s(X6,X8) = s(X6,X19) & p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8))))) <=> p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X19)))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.UNWIND_THM2')).
fof(f28525,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) )),
  inference(subsumption_resolution,[],[f28520,f245])).
fof(f28520,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1733,f424])).
fof(f11384,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(cnf_transformation,[],[f11384_D])).
fof(f11384_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f28244,plain,(
  ( ! [X2,X3,X1] : (~sP0(X1,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2)))),X3) | p(s(bool,X1))) ) | $spl112),
  inference(cnf_transformation,[],[f28244_D])).
fof(f28244_D,plain,(
  ( ! [X2,X3,X1] : (~sP0(X1,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2)))),X3) | p(s(bool,X1))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f28265,plain,(
  ( ! [X94,X95,X93,X96] : (~sP0(X94,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X95)))),X96) | p(s(bool,X94)) | s(bool,'T_0') = s(bool,X93)) ) | ($spl1 | $spl2 | $spl14)),
  inference(subsumption_resolution,[],[f28206,f25388])).
fof(f25388,plain,(
  ( ! [X2] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X2,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl1 | $spl2 | $spl14)),
  inference(trivial_inequality_removal,[],[f25338])).
fof(f25338,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X2,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl1 | $spl2 | $spl14)),
  inference(superposition,[],[f245,f23985])).
fof(f23985,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X8,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl1 | $spl2 | $spl14)),
  inference(subsumption_resolution,[],[f23984,f240])).
fof(f23984,plain,(
  ( ! [X8] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X8,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl1 | $spl2 | $spl14)),
  inference(forward_demodulation,[],[f23951,f4854])).
fof(f23951,plain,(
  ( ! [X8] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X8,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl1 | $spl2 | $spl14)),
  inference(superposition,[],[f22949,f5629])).
fof(f5629,plain,(
  ( ! [X8] : (s(bool,X8) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f5594,f240])).
fof(f5594,plain,(
  ( ! [X8] : (p(s(bool,'F_0')) | s(bool,X8) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f460,f4854])).
fof(f22949,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(condensation,[],[f22948])).
fof(f22948,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | p(s(bool,X4)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f22939,f245])).
fof(f22939,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | p(s(bool,X4)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl14),
  inference(superposition,[],[f15018,f424])).
fof(f15018,plain,(
  ( ! [X2] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X2,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X2))) ) | $spl14),
  inference(forward_demodulation,[],[f15017,f285])).
fof(f15017,plain,(
  ( ! [X2] : (p(s(bool,X2)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK18(X2,'const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(subsumption_resolution,[],[f14989,f238])).
fof(f14989,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | p(s(bool,X2)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK18(X2,'const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(superposition,[],[f319,f6101])).
fof(f6101,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f401,f285,f5993])).
fof(f5993,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X1,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(subsumption_resolution,[],[f5966,f240])).
fof(f5966,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X0) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X1,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f3359,f243])).
fof(f3359,plain,(
  ( ! [X35,X36] : (p(s(bool,X36)) | s(bool,X36) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X35,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X35)) ) | $spl14),
  inference(subsumption_resolution,[],[f3331,f238])).
fof(f3331,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | s(bool,X36) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X35,'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X36)) | s(bool,'T_0') = s(bool,X35)) ) | $spl14),
  inference(superposition,[],[f384,f2602])).
fof(f2602,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X0,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(subsumption_resolution,[],[f2595,f240])).
fof(f2595,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X0,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f2376,f243])).
fof(f2376,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f2375,f240])).
fof(f2375,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2335,f243])).
fof(f319,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK18(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f209])).
fof(f209,plain,(
  ! [X0,X1,X2] : (((p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) & ~p(s(bool,X2))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | p(s(bool,X2))) & ((p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK18(X2,X1,X0))))) & ~p(s(bool,X2))) | ! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17,sK18])],[f208])).
fof(f208,plain,(
  ! [X0,X1,X2] : ((? [X6] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) & ~p(s(bool,X2))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | p(s(bool,X2))) & ((? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & ~p(s(bool,X2))) | ! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)))))),
  inference(rectify,[],[f207])).
fof(f207,plain,(
  ! [X0,X1,X2] : ((? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & ~p(s(bool,X2))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,X2))) & ((? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & ~p(s(bool,X2))) | ! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)))))),
  inference(flattening,[],[f206])).
fof(f206,plain,(
  ! [X0,X1,X2] : ((? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & ~p(s(bool,X2))) | (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,X2)))) & ((? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & ~p(s(bool,X2))) | ! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1,X2] : (! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2))) <=> (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,X2))))),
  inference(ennf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) => p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) => p(s(bool,X2))))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) => p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) => p(s(bool,X2))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X14,X15] : (! [X8] : (p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8)))) => p(s(bool,X15))) <=> (? [X8] : p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8)))) => p(s(bool,X15))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.LEFT_FORALL_IMP_THM')).
fof(f28206,plain,(
  ( ! [X94,X95,X93,X96] : (~sP0(X94,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X95)))),X96) | p(s(bool,X94)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X93,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X93)) ) | ($spl1 | $spl2 | $spl14)),
  inference(superposition,[],[f548,f23985])).
fof(f548,plain,(
  ( ! [X26,X24,X23,X25] : (~sP0(X25,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X23),s('type.list.list'(bool),X24)))),X26) | p(s(bool,X25)) | ~p(s(bool,X23))) )),
  inference(superposition,[],[f354,f293])).
fof(f293,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6] : ! [X30,X12] : s(X6,X30) = s(X6,'const.list.HD_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X30),s('type.list.list'(X6),X12)))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.list.HD')).
fof(f28263,plain,(
  ( ! [X88,X87,X85,X86] : (~sP0(X86,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X87)))),X88) | p(s(bool,X86)) | s(bool,'T_0') = s(bool,X85)) ) | ($spl1 | $spl2 | $spl14)),
  inference(subsumption_resolution,[],[f28204,f24893])).
fof(f24893,plain,(
  ( ! [X2] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X2,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl1 | $spl2 | $spl14)),
  inference(trivial_inequality_removal,[],[f24843])).
fof(f24843,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X2,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl1 | $spl2 | $spl14)),
  inference(superposition,[],[f245,f23940])).
fof(f23940,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X8,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl1 | $spl2 | $spl14)),
  inference(subsumption_resolution,[],[f23939,f240])).
fof(f23939,plain,(
  ( ! [X8] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X8,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl1 | $spl2 | $spl14)),
  inference(forward_demodulation,[],[f23906,f4854])).
fof(f23906,plain,(
  ( ! [X8] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X8,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl1 | $spl2 | $spl14)),
  inference(superposition,[],[f22934,f5629])).
fof(f22934,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(condensation,[],[f22933])).
fof(f22933,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | p(s(bool,X4)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f22924,f245])).
fof(f22924,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | p(s(bool,X4)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl14),
  inference(superposition,[],[f14921,f424])).
fof(f14921,plain,(
  ( ! [X2] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X2,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X2))) ) | $spl14),
  inference(forward_demodulation,[],[f14920,f285])).
fof(f14920,plain,(
  ( ! [X2] : (p(s(bool,X2)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK17(X2,'const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(subsumption_resolution,[],[f14892,f238])).
fof(f14892,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | p(s(bool,X2)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK17(X2,'const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(superposition,[],[f317,f6101])).
fof(f317,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f209])).
fof(f28204,plain,(
  ( ! [X88,X87,X85,X86] : (~sP0(X86,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X87)))),X88) | p(s(bool,X86)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X85,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X85)) ) | ($spl1 | $spl2 | $spl14)),
  inference(superposition,[],[f548,f23940])).
fof(f28262,plain,(
  ( ! [X83,X81,X84,X82] : (~sP0(X82,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X83)))),X84) | p(s(bool,X82)) | s(bool,'T_0') = s(bool,X81)) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f28203,f16113])).
fof(f16113,plain,(
  ( ! [X2] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X2,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl1 | $spl2 | $spl18)),
  inference(trivial_inequality_removal,[],[f16061])).
fof(f16061,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X2,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f245,f9732])).
fof(f9732,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f9731,f240])).
fof(f9731,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl1 | $spl2 | $spl18)),
  inference(forward_demodulation,[],[f9707,f4854])).
fof(f9707,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f8888,f5629])).
fof(f8888,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f8887,f240])).
fof(f8887,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(forward_demodulation,[],[f8885,f4854])).
fof(f8885,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f2426,f5629])).
fof(f28203,plain,(
  ( ! [X83,X81,X84,X82] : (~sP0(X82,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X83)))),X84) | p(s(bool,X82)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X81,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X81)) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f548,f9732])).
fof(f28257,plain,(
  ( ! [X66,X64,X65,X63] : (~sP0(X64,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X65)))),X66) | p(s(bool,X64)) | s(bool,'T_0') = s(bool,X63)) ) | $spl14),
  inference(subsumption_resolution,[],[f28198,f3350])).
fof(f3350,plain,(
  ( ! [X3] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X3,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl14),
  inference(trivial_inequality_removal,[],[f3318])).
fof(f3318,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X3,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl14),
  inference(superposition,[],[f245,f2602])).
fof(f28198,plain,(
  ( ! [X66,X64,X65,X63] : (~sP0(X64,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X65)))),X66) | p(s(bool,X64)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X63,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X63)) ) | $spl14),
  inference(superposition,[],[f548,f2602])).
fof(f28246,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP0(X1,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2)))),X3) | p(s(bool,X1))) )),
  inference(condensation,[],[f28245])).
fof(f28245,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP0(X6,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X7)))),X8) | p(s(bool,X6)) | s(bool,X5) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f28184,f460])).
fof(f28184,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP0(X6,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X7)))),X8) | p(s(bool,X6)) | ~p(s(bool,X5)) | s(bool,X5) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f548,f424])).
fof(f28243,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP0(X1,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2)))),X3) | p(s(bool,X1))) )),
  inference(condensation,[],[f28242])).
fof(f28242,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP0(X1,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2)))),X3) | p(s(bool,X1)) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f28183,f460])).
fof(f28183,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP0(X1,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2)))),X3) | p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f548,f424])).
fof(f28133,plain,(
  ( ! [X2,X3,X1] : (~sP0(X1,X2,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))))) | p(s(bool,X1))) ) | $spl110),
  inference(cnf_transformation,[],[f28133_D])).
fof(f28133_D,plain,(
  ( ! [X2,X3,X1] : (~sP0(X1,X2,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))))) | p(s(bool,X1))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f28154,plain,(
  ( ! [X94,X95,X93,X96] : (~sP0(X94,X95,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X96))))) | p(s(bool,X94)) | s(bool,'T_0') = s(bool,X93)) ) | ($spl1 | $spl2 | $spl14)),
  inference(subsumption_resolution,[],[f28095,f25388])).
fof(f28095,plain,(
  ( ! [X94,X95,X93,X96] : (~sP0(X94,X95,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X96))))) | p(s(bool,X94)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X93,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X93)) ) | ($spl1 | $spl2 | $spl14)),
  inference(superposition,[],[f547,f23985])).
fof(f547,plain,(
  ( ! [X21,X19,X22,X20] : (~sP0(X21,X22,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X19),s('type.list.list'(bool),X20))))) | p(s(bool,X21)) | ~p(s(bool,X19))) )),
  inference(superposition,[],[f353,f293])).
fof(f28152,plain,(
  ( ! [X88,X87,X85,X86] : (~sP0(X86,X87,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X88))))) | p(s(bool,X86)) | s(bool,'T_0') = s(bool,X85)) ) | ($spl1 | $spl2 | $spl14)),
  inference(subsumption_resolution,[],[f28093,f24893])).
fof(f28093,plain,(
  ( ! [X88,X87,X85,X86] : (~sP0(X86,X87,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X88))))) | p(s(bool,X86)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X85,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X85)) ) | ($spl1 | $spl2 | $spl14)),
  inference(superposition,[],[f547,f23940])).
fof(f28151,plain,(
  ( ! [X83,X81,X84,X82] : (~sP0(X82,X83,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X84))))) | p(s(bool,X82)) | s(bool,'T_0') = s(bool,X81)) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f28092,f16113])).
fof(f28092,plain,(
  ( ! [X83,X81,X84,X82] : (~sP0(X82,X83,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X84))))) | p(s(bool,X82)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X81,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X81)) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f547,f9732])).
fof(f28146,plain,(
  ( ! [X66,X64,X65,X63] : (~sP0(X64,X65,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X66))))) | p(s(bool,X64)) | s(bool,'T_0') = s(bool,X63)) ) | $spl14),
  inference(subsumption_resolution,[],[f28087,f3350])).
fof(f28087,plain,(
  ( ! [X66,X64,X65,X63] : (~sP0(X64,X65,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X66))))) | p(s(bool,X64)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X63,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'T_0') = s(bool,X63)) ) | $spl14),
  inference(superposition,[],[f547,f2602])).
fof(f28135,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP0(X1,X2,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))))) | p(s(bool,X1))) )),
  inference(condensation,[],[f28134])).
fof(f28134,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP0(X6,X7,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X8))))) | p(s(bool,X6)) | s(bool,X5) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f28073,f460])).
fof(f28073,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP0(X6,X7,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X8))))) | p(s(bool,X6)) | ~p(s(bool,X5)) | s(bool,X5) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f547,f424])).
fof(f28132,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP0(X1,X2,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))))) | p(s(bool,X1))) )),
  inference(condensation,[],[f28131])).
fof(f28131,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP0(X1,X2,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))))) | p(s(bool,X1)) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f28072,f460])).
fof(f28072,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP0(X1,X2,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))))) | p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f547,f424])).
fof(f26599,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))) | $spl106),
  inference(cnf_transformation,[],[f26599_D])).
fof(f26599_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f26601,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool)),bool)) | $spl108),
  inference(cnf_transformation,[],[f26601_D])).
fof(f26601_D,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool)),bool)) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f27011,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl14 | $spl92)),
  inference(superposition,[],[f1787,f26815])).
fof(f26815,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))))) | ($spl1 | $spl2 | $spl14 | $spl92)),
  inference(subsumption_resolution,[],[f26703,f238])).
fof(f26703,plain,(
  ~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))))) | ($spl1 | $spl2 | $spl14 | $spl92)),
  inference(superposition,[],[f10151,f26628])).
fof(f26628,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0'))) | ($spl1 | $spl2 | $spl14 | $spl92)),
  inference(subsumption_resolution,[],[f25330,f400])).
fof(f25330,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl2 | $spl14 | $spl92)),
  inference(superposition,[],[f23985,f18415])).
fof(f10151,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f10150,f240])).
fof(f10150,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f10148,f4854])).
fof(f10148,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f1740,f5629])).
fof(f1740,plain,(
  ( ! [X9] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X9))))) )),
  inference(forward_demodulation,[],[f1729,f285])).
fof(f1729,plain,(
  ( ! [X9] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X9))))) )),
  inference(superposition,[],[f323,f285])).
fof(f1787,plain,(
  ( ! [X2,X3] : (s(X2,sK5(X3,X2)) = s(X2,'const.list.HD_1'(s('type.list.list'(X2),X3))) | s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),X3)) )),
  inference(superposition,[],[f293,f286])).
fof(f286,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f85])).
fof(f85,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(flattening,[],[f84])).
fof(f84,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6] : ! [X31] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X31) | ? [X30,X12] : s('type.list.list'(X6),X31) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X30),s('type.list.list'(X6),X12))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.list.list_CASES')).
fof(f26981,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl14 | $spl92)),
  inference(superposition,[],[f26815,f1787])).
fof(f26506,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl24 | $spl96)),
  inference(superposition,[],[f1787,f26377])).
fof(f26377,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))))) | ($spl1 | $spl2 | $spl24 | $spl96)),
  inference(subsumption_resolution,[],[f26337,f238])).
fof(f26337,plain,(
  ~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))))) | ($spl1 | $spl2 | $spl24 | $spl96)),
  inference(superposition,[],[f10151,f22302])).
fof(f22302,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0'))) | ($spl1 | $spl2 | $spl24 | $spl96)),
  inference(backward_demodulation,[],[f18419,f15704])).
fof(f15704,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | ($spl1 | $spl2 | $spl24)),
  inference(unit_resulting_resolution,[],[f240,f10097])).
fof(f10097,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl24)),
  inference(subsumption_resolution,[],[f10096,f240])).
fof(f10096,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl24)),
  inference(forward_demodulation,[],[f10094,f4854])).
fof(f10094,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl24)),
  inference(superposition,[],[f2581,f5629])).
fof(f26476,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19('const.list.NIL_0','const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl24 | $spl96)),
  inference(superposition,[],[f26377,f1787])).
fof(f23982,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl104),
  inference(cnf_transformation,[],[f23982_D])).
fof(f23982_D,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f23983,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X6,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X6)) ) | $spl14),
  inference(subsumption_resolution,[],[f23950,f245])).
fof(f23950,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X6,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | $spl14),
  inference(superposition,[],[f22949,f424])).
fof(f23981,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl14),
  inference(subsumption_resolution,[],[f23949,f245])).
fof(f23949,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl14),
  inference(superposition,[],[f22949,f424])).
fof(f23937,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl102),
  inference(cnf_transformation,[],[f23937_D])).
fof(f23937_D,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f23938,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X6,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X6)) ) | $spl14),
  inference(subsumption_resolution,[],[f23905,f245])).
fof(f23905,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X6,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | $spl14),
  inference(superposition,[],[f22934,f424])).
fof(f23936,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl14),
  inference(subsumption_resolution,[],[f23904,f245])).
fof(f23904,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl14),
  inference(superposition,[],[f22934,f424])).
fof(f18419,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | $spl96),
  inference(cnf_transformation,[],[f18419_D])).
fof(f18419_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f22299,plain,(
  s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK6(sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)))) | $spl100),
  inference(cnf_transformation,[],[f22299_D])).
fof(f22299_D,plain,(
  s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK6(sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f22208,plain,(
  s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK6(sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | $spl98),
  inference(superposition,[],[f286,f18421])).
fof(f20377,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609,f18592,f18588,f18586,f20346,f20355,f18814,f20376])).
fof(f20376,plain,(
  ( ! [X16] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X16)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20375,f238])).
fof(f20375,plain,(
  ( ! [X16] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X16)) ) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18815,f18748])).
fof(f18815,plain,(
  ( ! [X16] : (~p(s(bool,sK5(X16,bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X16)) ) | $spl8),
  inference(superposition,[],[f2326,f1787])).
fof(f18814,plain,(
  ( ! [X14] : (~p(s(bool,X14))) ) | $spl8),
  inference(superposition,[],[f2326,f293])).
fof(f20355,plain,(
  ( ! [X3] : (s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X3)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20354,f238])).
fof(f20354,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X3)) ) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18794,f18748])).
fof(f18794,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK5(X3,'type.list.list'(bool)))))) | s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X3)) ) | $spl8),
  inference(superposition,[],[f2326,f1787])).
fof(f20346,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20345,f238])).
fof(f20345,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18790,f18748])).
fof(f18790,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | $spl8),
  inference(superposition,[],[f2326,f286])).
fof(f18586,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK16(X0,'const.list.HD_0','type.list.list'(bool)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f2326,f806])).
fof(f18588,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f6809])).
fof(f18592,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f2335])).
fof(f18609,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f353])).
fof(f18618,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f354])).
fof(f18626,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.list.HD_1'(s('type.list.list'(bool),X1)),'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f240,f2326,f355])).
fof(f18627,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,'const.list.HD_1'(s('type.list.list'(bool),X1)),'const.list.HD_1'(s('type.list.list'(bool),X2)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f2326,f2326,f355])).
fof(f18628,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2386,f2326,f355])).
fof(f18632,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f4420,f2326,f355])).
fof(f18666,plain,(
  ( ! [X0,X1] : (sP0(X0,'F_0','const.list.HD_1'(s('type.list.list'(bool),X1)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f240,f2326,f355])).
fof(f18667,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,'const.list.HD_1'(s('type.list.list'(bool),X1)),'const.list.HD_1'(s('type.list.list'(bool),X2)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f2326,f2326,f355])).
fof(f18668,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2383,f2326,f355])).
fof(f18672,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f3534,f2326,f355])).
fof(f18717,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f293,f2326,f384])).
fof(f18730,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f2511])).
fof(f18732,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1)) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f2512])).
fof(f18736,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f3152])).
fof(f18738,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X2)) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f3153])).
fof(f18740,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f400,f2326,f3357])).
fof(f18741,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f401,f2326,f3357])).
fof(f18745,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1)) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f400,f2326,f3358])).
fof(f18746,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X2)) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f401,f2326,f3358])).
fof(f20218,plain,(
  ( ! [X134,X132,X133] : (p(s(bool,X133)) | ~sP0(X133,'const.list.HD_1'(s('type.list.list'(bool),X132)),X134) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X132)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19481,f238])).
fof(f19481,plain,(
  ( ! [X134,X132,X133] : (~p(s(bool,'T_0')) | p(s(bool,X133)) | ~sP0(X133,'const.list.HD_1'(s('type.list.list'(bool),X132)),X134) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X132)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18260])).
fof(f20216,plain,(
  ( ! [X130,X131,X129] : (p(s(bool,X130)) | ~sP0(X130,X131,'const.list.HD_1'(s('type.list.list'(bool),X129))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X129)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19480,f238])).
fof(f19480,plain,(
  ( ! [X130,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,X130)) | ~sP0(X130,X131,'const.list.HD_1'(s('type.list.list'(bool),X129))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X129)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18259])).
fof(f20214,plain,(
  ( ! [X71] : (s('type.list.list'(bool),X71) = s('type.list.list'(bool),sK19(X71,'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X71)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19478,f238])).
fof(f19478,plain,(
  ( ! [X71] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X71) = s('type.list.list'(bool),sK19(X71,'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X71)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18209])).
fof(f20212,plain,(
  ( ! [X369] : (s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X369))) = s('type.list.list'(bool),sK19('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X369)),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X369)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19458,f238])).
fof(f19458,plain,(
  ( ! [X369] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X369))) = s('type.list.list'(bool),sK19('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X369)),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X369)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18355])).
fof(f20210,plain,(
  ( ! [X19] : (s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X19))) = s('type.list.list'(bool),sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X19)),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19455,f238])).
fof(f19455,plain,(
  ( ! [X19] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X19))) = s('type.list.list'(bool),sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X19)),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f17721])).
fof(f20208,plain,(
  ( ! [X3] : (s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))) = s('type.list.list'(bool),sK19(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3)),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19454,f238])).
fof(f19454,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))) = s('type.list.list'(bool),sK19(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3)),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f17716])).
fof(f20206,plain,(
  ( ! [X4,X5] : (s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))) = s('type.list.list'(bool),sK19(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5)),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19445,f238])).
fof(f19445,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))) = s('type.list.list'(bool),sK19(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5)),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f17717])).
fof(f20204,plain,(
  ( ! [X17,X18,X16] : (s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))) = s('type.list.list'(bool),sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18)))),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19444,f238])).
fof(f19444,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))) = s('type.list.list'(bool),sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18)))),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f17720])).
fof(f20202,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))) = s('type.list.list'(bool),sK19(happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10)))),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19439,f238])).
fof(f19439,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))) = s('type.list.list'(bool),sK19(happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10)))),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f17718])).
fof(f20200,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))) = s('type.list.list'(bool),sK19(happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15)),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19438,f238])).
fof(f19438,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))) = s('type.list.list'(bool),sK19(happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15)),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f17719])).
fof(f20196,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),X1) = s('type.list.list'(bool),sK19('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2)))),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19429,f238])).
fof(f19429,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X1) = s('type.list.list'(bool),sK19('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2)))),'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f17715])).
fof(f20194,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK6(X0,bool)))) = s('type.list.list'(bool),sK19('const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK6(X0,bool))),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f20193,f18748])).
fof(f20193,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool)))) = s('type.list.list'(bool),sK19('const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool))),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19428,f238])).
fof(f19428,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool)))) = s('type.list.list'(bool),sK19('const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool))),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f17676])).
fof(f20191,plain,(
  ( ! [X99,X100,X98] : (p(s(bool,X99)) | ~sP0(X99,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X98)),X100)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19412,f238])).
fof(f19412,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | ~sP0(X99,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X98)),X100)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f9231])).
fof(f20189,plain,(
  ( ! [X97,X95,X96] : (p(s(bool,X96)) | ~sP0(X96,X97,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X95)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19411,f238])).
fof(f19411,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,'T_0')) | p(s(bool,X96)) | ~sP0(X96,X97,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X95)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f9230])).
fof(f20180,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19400,f238])).
fof(f19400,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f897])).
fof(f20178,plain,(
  ( ! [X9] : (s('type.list.list'(bool),X9) = s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19399,f238])).
fof(f19399,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X9) = s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f896])).
fof(f20176,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X18)) | ~sP0(X18,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X17)),X19)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19396,f238])).
fof(f19396,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X18)) | ~sP0(X18,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X17)),X19)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f745])).
fof(f20174,plain,(
  ( ! [X14,X15,X16] : (p(s(bool,X15)) | ~sP0(X15,X16,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X14)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19395,f238])).
fof(f19395,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,X16,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X14)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f744])).
fof(f20172,plain,(
  ( ! [X123,X121,X124,X122,X120] : (p(s(bool,X123)) | ~sP0(X123,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X120))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X121),s('type.list.list'(bool),X122)))),X124)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19385,f238])).
fof(f19385,plain,(
  ( ! [X123,X121,X124,X122,X120] : (~p(s(bool,'T_0')) | p(s(bool,X123)) | ~sP0(X123,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X120))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X121),s('type.list.list'(bool),X122)))),X124)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2657])).
fof(f20170,plain,(
  ( ! [X118,X116,X119,X117,X115] : (p(s(bool,X118)) | ~sP0(X118,X119,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X116),s('type.list.list'(bool),X117)))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19384,f238])).
fof(f19384,plain,(
  ( ! [X118,X116,X119,X117,X115] : (~p(s(bool,'T_0')) | p(s(bool,X118)) | ~sP0(X118,X119,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X116),s('type.list.list'(bool),X117)))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2656])).
fof(f20154,plain,(
  ( ! [X52,X50,X51,X49] : (p(s(bool,X51)) | ~sP0(X51,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X49))),s('type.list.list'(bool),X50)),X52)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19375,f238])).
fof(f19375,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,'T_0')) | p(s(bool,X51)) | ~sP0(X51,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X49))),s('type.list.list'(bool),X50)),X52)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f1052])).
fof(f20152,plain,(
  ( ! [X47,X45,X48,X46] : (p(s(bool,X47)) | ~sP0(X47,X48,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X45))),s('type.list.list'(bool),X46)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19374,f238])).
fof(f19374,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | p(s(bool,X47)) | ~sP0(X47,X48,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X45))),s('type.list.list'(bool),X46)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f1051])).
fof(f20150,plain,(
  ( ! [X21,X20] : (s('type.list.list'(bool),X21) = s('type.list.list'(bool),sK19(X21,'const.list.EL_1'(s('type.num.num',X20)),'type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19372,f238])).
fof(f19372,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X21) = s('type.list.list'(bool),sK19(X21,'const.list.EL_1'(s('type.num.num',X20)),'type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f1040])).
fof(f20148,plain,(
  ( ! [X323] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X323))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X323)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19371,f238])).
fof(f19371,plain,(
  ( ! [X323] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X323))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X323)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18333])).
fof(f20146,plain,(
  ( ! [X280,X281] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X280))) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X280))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X281,'const.list.HD_1'(s('type.list.list'('type.num.num'),X280)))))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X280)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19370,f238])).
fof(f19370,plain,(
  ( ! [X280,X281] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X280))) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X280))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X281,'const.list.HD_1'(s('type.list.list'('type.num.num'),X280)))))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X280)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18314])).
fof(f20142,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19368,f238])).
fof(f19368,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2878])).
fof(f20138,plain,(
  ( ! [X231,X230] : (s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X231,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19366,f238])).
fof(f19366,plain,(
  ( ! [X231,X230] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X231,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f9502])).
fof(f20134,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19363,f238])).
fof(f19363,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2880])).
fof(f20132,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19362,f238])).
fof(f19362,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2882])).
fof(f20125,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19358,f238])).
fof(f19358,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2872])).
fof(f20120,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X393,happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19355,f238])).
fof(f19355,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (~p(s(bool,'T_0')) | s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X393,happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3304])).
fof(f20116,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X440,happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19353,f238])).
fof(f19353,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (~p(s(bool,'T_0')) | s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X440,happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3525])).
fof(f20112,plain,(
  ( ! [X282,X283] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X283) | s('type.num.num',X283) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),X282)),X283)))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X282)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19351,f238])).
fof(f19351,plain,(
  ( ! [X282,X283] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X283) | s('type.num.num',X283) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),X282)),X283)))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X282)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18315])).
fof(f20108,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X11) | s('type.num.num',X11) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)),X11))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19349,f238])).
fof(f19349,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11) | s('type.num.num',X11) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)),X11))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2865])).
fof(f20104,plain,(
  ( ! [X233,X232] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X233) | s('type.num.num',X233) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X232)),X233))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19347,f238])).
fof(f19347,plain,(
  ( ! [X233,X232] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X233) | s('type.num.num',X233) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X232)),X233))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f9278])).
fof(f20100,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | s('type.num.num',X14) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)),X14))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19345,f238])).
fof(f19345,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | s('type.num.num',X14) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)),X14))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2866])).
fof(f20098,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | s('type.num.num',X18) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))),X18))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19344,f238])).
fof(f19344,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | s('type.num.num',X18) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))),X18))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2867])).
fof(f20092,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19341,f238])).
fof(f19341,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f5331])).
fof(f20090,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | s('type.num.num',X5) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))),X5))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19340,f238])).
fof(f19340,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | s('type.num.num',X5) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))),X5))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2862])).
fof(f20086,plain,(
  ( ! [X397,X399,X395,X396,X398,X394] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X399) | s('type.num.num',X399) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X394,'type.num.num'),X395),s(X394,happ(s(fun(X396,X394),X397),s(X396,X398)))),X399))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19338,f238])).
fof(f19338,plain,(
  ( ! [X397,X399,X395,X396,X398,X394] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X399) | s('type.num.num',X399) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X394,'type.num.num'),X395),s(X394,happ(s(fun(X396,X394),X397),s(X396,X398)))),X399))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3256])).
fof(f20082,plain,(
  ( ! [X445,X441,X443,X444,X446,X442] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X446) | s('type.num.num',X446) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X441,'type.num.num'),'const.combin.o_2'(s(fun(X442,'type.num.num'),X443),s(fun(X441,X442),X444))),s(X441,X445)),X446))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19336,f238])).
fof(f19336,plain,(
  ( ! [X445,X441,X443,X444,X446,X442] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X446) | s('type.num.num',X446) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X441,'type.num.num'),'const.combin.o_2'(s(fun(X442,'type.num.num'),X443),s(fun(X441,X442),X444))),s(X441,X445)),X446))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3470])).
fof(f20074,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19330,f238])).
fof(f19330,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2876])).
fof(f20072,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | s('type.num.num',X9) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))),X9))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19329,f238])).
fof(f19329,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | s('type.num.num',X9) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))),X9))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2864])).
fof(f20068,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X1,X0))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19326,f238])).
fof(f19326,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X1,X0))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f334])).
fof(f20044,plain,(
  ( ! [X271,X273,X275,X270,X276,X272,X274] : (p(s(bool,X275)) | ~sP0(X275,happ(s(fun(X270,bool),'const.combin.o_2'(s(fun(X271,bool),X272),s(fun(X270,X271),X273))),s(X270,X274)),X276)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19306,f238])).
fof(f19306,plain,(
  ( ! [X271,X273,X275,X270,X276,X272,X274] : (~p(s(bool,'T_0')) | p(s(bool,X275)) | ~sP0(X275,happ(s(fun(X270,bool),'const.combin.o_2'(s(fun(X271,bool),X272),s(fun(X270,X271),X273))),s(X270,X274)),X276)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3446])).
fof(f20042,plain,(
  ( ! [X263,X269,X265,X267,X268,X264,X266] : (p(s(bool,X268)) | ~sP0(X268,X269,happ(s(fun(X263,bool),'const.combin.o_2'(s(fun(X264,bool),X265),s(fun(X263,X264),X266))),s(X263,X267)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19305,f238])).
fof(f19305,plain,(
  ( ! [X263,X269,X265,X267,X268,X264,X266] : (~p(s(bool,'T_0')) | p(s(bool,X268)) | ~sP0(X268,X269,happ(s(fun(X263,bool),'const.combin.o_2'(s(fun(X264,bool),X265),s(fun(X263,X264),X266))),s(X263,X267)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3445])).
fof(f20040,plain,(
  ( ! [X177,X175,X173,X176,X174] : (s(X173,X177) = s(X173,sK19(X177,'const.combin.o_2'(s(fun(X174,bool),X175),s(fun(X173,X174),X176)),X173))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19304,f238])).
fof(f19304,plain,(
  ( ! [X177,X175,X173,X176,X174] : (~p(s(bool,'T_0')) | s(X173,X177) = s(X173,sK19(X177,'const.combin.o_2'(s(fun(X174,bool),X175),s(fun(X173,X174),X176)),X173))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3430])).
fof(f20038,plain,(
  ( ! [X243,X249,X246,X244,X248,X247,X245] : (p(s(bool,X248)) | ~sP0(X248,happ(s(fun(X243,bool),X244),s(X243,happ(s(fun(X245,X243),X246),s(X245,X247)))),X249)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19301,f238])).
fof(f19301,plain,(
  ( ! [X243,X249,X246,X244,X248,X247,X245] : (~p(s(bool,'T_0')) | p(s(bool,X248)) | ~sP0(X248,happ(s(fun(X243,bool),X244),s(X243,happ(s(fun(X245,X243),X246),s(X245,X247)))),X249)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3234])).
fof(f20036,plain,(
  ( ! [X241,X239,X237,X242,X240,X238,X236] : (p(s(bool,X241)) | ~sP0(X241,X242,happ(s(fun(X236,bool),X237),s(X236,happ(s(fun(X238,X236),X239),s(X238,X240)))))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19300,f238])).
fof(f19300,plain,(
  ( ! [X241,X239,X237,X242,X240,X238,X236] : (~p(s(bool,'T_0')) | p(s(bool,X241)) | ~sP0(X241,X242,happ(s(fun(X236,bool),X237),s(X236,happ(s(fun(X238,X236),X239),s(X238,X240)))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3233])).
fof(f20034,plain,(
  ( ! [X158,X156,X159,X157,X160] : (s(X156,happ(s(fun(X158,X156),X159),s(X158,X160))) = s(X156,sK19(happ(s(fun(X158,X156),X159),s(X158,X160)),X157,X156))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19299,f238])).
fof(f19299,plain,(
  ( ! [X158,X156,X159,X157,X160] : (~p(s(bool,'T_0')) | s(X156,happ(s(fun(X158,X156),X159),s(X158,X160))) = s(X156,sK19(happ(s(fun(X158,X156),X159),s(X158,X160)),X157,X156))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3220])).
fof(f20016,plain,(
  ( ! [X28,X26,X27] : (s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26)))) = s('type.list.list'(X26),sK19('const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26))),X28,'type.list.list'(X26))) | s('type.list.list'(X26),'const.list.NIL_0') = s('type.list.list'(X26),X27)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19287,f238])).
fof(f19287,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26)))) = s('type.list.list'(X26),sK19('const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26))),X28,'type.list.list'(X26))) | s('type.list.list'(X26),'const.list.NIL_0') = s('type.list.list'(X26),X27)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f1797])).
fof(f19996,plain,(
  ( ! [X24] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X24,'type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19275,f238])).
fof(f19275,plain,(
  ( ! [X24] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X24,'type.list.list'(bool)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f6438])).
fof(f19990,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X50))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X49),s('type.list.list'(X48),X50)))),X51,'type.num.num'))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19269,f238])).
fof(f19269,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X50))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X49),s('type.list.list'(X48),X50)))),X51,'type.num.num'))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f994])).
fof(f19988,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X24),'const.list.NIL_0')),X25,'type.num.num'))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19268,f238])).
fof(f19268,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X24),'const.list.NIL_0')),X25,'type.num.num'))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f905])).
fof(f19986,plain,(
  ( ! [X23,X22] : (s(fun('type.list.list'(X22),X22),'const.list.HD_0') = s(fun('type.list.list'(X22),X22),sK19('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X23,fun('type.list.list'(X22),X22)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19265,f238])).
fof(f19265,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | s(fun('type.list.list'(X22),X22),'const.list.HD_0') = s(fun('type.list.list'(X22),X22),sK19('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X23,fun('type.list.list'(X22),X22)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f904])).
fof(f19980,plain,(
  ( ! [X33,X34,X32] : (s(X32,'const.list.HD_1'(s('type.list.list'(X32),X33))) = s(X32,sK19('const.list.HD_1'(s('type.list.list'(X32),X33)),X34,X32)) | s('type.list.list'(X32),'const.list.NIL_0') = s('type.list.list'(X32),X33)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19191,f238])).
fof(f19191,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(X32,'const.list.HD_1'(s('type.list.list'(X32),X33))) = s(X32,sK19('const.list.HD_1'(s('type.list.list'(X32),X33)),X34,X32)) | s('type.list.list'(X32),'const.list.NIL_0') = s('type.list.list'(X32),X33)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18201])).
fof(f19978,plain,(
  ( ! [X6,X4,X5] : (s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5)),X6,X4))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19189,f238])).
fof(f19189,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5)),X6,X4))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f899])).
fof(f19976,plain,(
  ( ! [X30,X31,X29] : (s(X29,'const.list.HD_1'(s('type.list.list'(X29),X30))) = s(X29,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X29),X30)),X31,X29))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19187,f238])).
fof(f19187,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s(X29,'const.list.HD_1'(s('type.list.list'(X29),X30))) = s(X29,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X29),X30)),X31,X29))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f9472])).
fof(f19974,plain,(
  ( ! [X6,X4,X7,X5] : (s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),X6))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s('type.list.list'(X4),X6)),X7,X4))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19185,f238])).
fof(f19185,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),X6))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s('type.list.list'(X4),X6)),X7,X4))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f1079])).
fof(f19972,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(X45,'const.list.EL_2'(s('type.num.num',X46),s('type.list.list'(X45),X48))) = s(X45,sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,X47),s('type.list.list'(X45),X48)))),X49,X45))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19183,f238])).
fof(f19183,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,'T_0')) | s(X45,'const.list.EL_2'(s('type.num.num',X46),s('type.list.list'(X45),X48))) = s(X45,sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,X47),s('type.list.list'(X45),X48)))),X49,X45))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2693])).
fof(f19970,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s(X70,'const.combin.o_3'(s(fun(X71,X70),X72),s(fun(X73,X71),X74),s(X73,X75))) = s(X70,sK19(happ(s(fun(X71,X70),X72),s(X71,happ(s(fun(X73,X71),X74),s(X73,X75)))),X76,X70))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19181,f238])).
fof(f19181,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (~p(s(bool,'T_0')) | s(X70,'const.combin.o_3'(s(fun(X71,X70),X72),s(fun(X73,X71),X74),s(X73,X75))) = s(X70,sK19(happ(s(fun(X71,X70),X72),s(X71,happ(s(fun(X73,X71),X74),s(X73,X75)))),X76,X70))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3284])).
fof(f19968,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s(X77,'const.combin.o_3'(s(fun(X79,X77),X80),s(fun(X78,X79),X81),s(X78,X82))) = s(X77,sK19(happ(s(fun(X78,X77),'const.combin.o_2'(s(fun(X79,X77),X80),s(fun(X78,X79),X81))),s(X78,X82)),X83,X77))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19179,f238])).
fof(f19179,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (~p(s(bool,'T_0')) | s(X77,'const.combin.o_3'(s(fun(X79,X77),X80),s(fun(X78,X79),X81),s(X78,X82))) = s(X77,sK19(happ(s(fun(X78,X77),'const.combin.o_2'(s(fun(X79,X77),X80),s(fun(X78,X79),X81))),s(X78,X82)),X83,X77))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3498])).
fof(f19952,plain,(
  ( ! [X350,X352,X354,X349,X351,X353,X348] : (s(X348,X354) = s(X348,sK19(X354,happ(s(fun(X349,fun(X348,bool)),'const.combin.o_2'(s(fun(X350,fun(X348,bool)),X351),s(fun(X349,X350),X352))),s(X349,X353)),X348))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19168,f238])).
fof(f19168,plain,(
  ( ! [X350,X352,X354,X349,X351,X353,X348] : (~p(s(bool,'T_0')) | s(X348,X354) = s(X348,sK19(X354,happ(s(fun(X349,fun(X348,bool)),'const.combin.o_2'(s(fun(X350,fun(X348,bool)),X351),s(fun(X349,X350),X352))),s(X349,X353)),X348))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3457])).
fof(f19936,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X322] : (s(X321,X327) = s(X321,sK19(X327,happ(s(fun(X322,fun(X321,bool)),X323),s(X322,happ(s(fun(X324,X322),X325),s(X324,X326)))),X321))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19160,f238])).
fof(f19160,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X322] : (~p(s(bool,'T_0')) | s(X321,X327) = s(X321,sK19(X327,happ(s(fun(X322,fun(X321,bool)),X323),s(X322,happ(s(fun(X324,X322),X325),s(X324,X326)))),X321))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3245])).
fof(f19920,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s(X176,X180) = s(X176,sK19(X180,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X177))),s('type.list.list'(fun(X176,bool)),'const.list.CONS_2'(s(fun(X176,bool),X178),s('type.list.list'(fun(X176,bool)),X179)))),X176))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19148,f238])).
fof(f19148,plain,(
  ( ! [X177,X180,X178,X176,X179] : (~p(s(bool,'T_0')) | s(X176,X180) = s(X176,sK19(X180,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X177))),s('type.list.list'(fun(X176,bool)),'const.list.CONS_2'(s(fun(X176,bool),X178),s('type.list.list'(fun(X176,bool)),X179)))),X176))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2668])).
fof(f19904,plain,(
  ( ! [X66,X64,X67,X65] : (s(X64,X67) = s(X64,sK19(X67,happ(s(fun('type.list.list'(fun(X64,bool)),fun(X64,bool)),'const.list.EL_1'(s('type.num.num',X65))),s('type.list.list'(fun(X64,bool)),X66)),X64))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19139,f238])).
fof(f19139,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,'T_0')) | s(X64,X67) = s(X64,sK19(X67,happ(s(fun('type.list.list'(fun(X64,bool)),fun(X64,bool)),'const.list.EL_1'(s('type.num.num',X65))),s('type.list.list'(fun(X64,bool)),X66)),X64))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f1057])).
fof(f19902,plain,(
  ( ! [X220,X219,X221] : (s(X219,X221) = s(X219,sK19(X221,'const.list.HD_1'(s('type.list.list'(fun(X219,bool)),X220)),X219)) | s('type.list.list'(fun(X219,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X219,bool)),X220)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19138,f238])).
fof(f19138,plain,(
  ( ! [X220,X219,X221] : (~p(s(bool,'T_0')) | s(X219,X221) = s(X219,sK19(X221,'const.list.HD_1'(s('type.list.list'(fun(X219,bool)),X220)),X219)) | s('type.list.list'(fun(X219,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X219,bool)),X220)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18297])).
fof(f19872,plain,(
  ( ! [X180,X181,X179] : (s(X179,X181) = s(X179,sK19(X181,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X179,bool)),X180)),X179))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19119,f238])).
fof(f19119,plain,(
  ( ! [X180,X181,X179] : (~p(s(bool,'T_0')) | s(X179,X181) = s(X179,sK19(X181,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X179,bool)),X180)),X179))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f9263])).
fof(f19856,plain,(
  ( ! [X6,X7,X5] : (s(X5,X7) = s(X5,sK19(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19109,f238])).
fof(f19109,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | s(X5,X7) = s(X5,sK19(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f879])).
fof(f19624,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X1) = s(X0,sK19('const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))),X3,X0))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18975,f238])).
fof(f18975,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,sK19('const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))),X3,X0))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f898])).
fof(f19622,plain,(
  ( ! [X4,X2,X3,X1] : (s(X1,X4) = s(X1,sK19(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18974,f238])).
fof(f18974,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | s(X1,X4) = s(X1,sK19(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f878])).
fof(f19618,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK19(X2,X1,X0))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18970,f238])).
fof(f18970,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK19(X2,X1,X0))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f322])).
fof(f19596,plain,(
  ( ! [X436,X432,X434,X433] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X434),X436))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X432),'const.list.HD_1'(s('type.list.list'('type.list.list'(X432)),X433))))) | s('type.list.list'('type.list.list'(X432)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X432)),X433)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18942,f238])).
fof(f18942,plain,(
  ( ! [X436,X432,X434,X433] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X434),X436))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X432),'const.list.HD_1'(s('type.list.list'('type.list.list'(X432)),X433))))) | s('type.list.list'('type.list.list'(X432)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X432)),X433)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18376])).
fof(f19590,plain,(
  ( ! [X441,X438,X437,X439] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X439),X441))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X437),'const.list.HD_1'(s('type.list.list'('type.list.list'(X437)),X438))))) | s('type.list.list'('type.list.list'(X437)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X437)),X438)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18910,f238])).
fof(f18910,plain,(
  ( ! [X441,X438,X437,X439] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X439),X441))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X437),'const.list.HD_1'(s('type.list.list'('type.list.list'(X437)),X438))))) | s('type.list.list'('type.list.list'(X437)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X437)),X438)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18377])).
fof(f19576,plain,(
  ( ! [X4,X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18893,f238])).
fof(f18893,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3079])).
fof(f19574,plain,(
  ( ! [X4,X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18892,f238])).
fof(f18892,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f3072])).
fof(f19568,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18888,f238])).
fof(f18888,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f343])).
fof(f19566,plain,(
  ( ! [X105] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X105)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19565,f238])).
fof(f19565,plain,(
  ( ! [X105] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X105)) ) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f19564,f18748])).
fof(f19564,plain,(
  ( ! [X105] : (~p(s(bool,sK5(X105,bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X105)) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18880,f18748])).
fof(f18880,plain,(
  ( ! [X105] : (s(bool,'T_0') != s(bool,'const.list.HD_1'(s('type.list.list'(bool),X105))) | ~p(s(bool,sK5(X105,bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X105)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18250])).
fof(f18872,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0)))),'const.list.HD_0','type.list.list'(bool)))),X1)) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f8046])).
fof(f18871,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1)))),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f7996])).
fof(f18868,plain,(
  ( ! [X37,X38,X36] : (~sP0(X37,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X36)))),'const.list.HD_0','type.list.list'(bool)))),X38) | p(s(bool,X37))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f7986])).
fof(f18867,plain,(
  ( ! [X35,X33,X34] : (~sP0(X34,X35,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X33)))),'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X34))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f7985])).
fof(f18862,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X84) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X82)))),'const.list.HD_0','type.list.list'(bool))))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X83))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X85)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f7939])).
fof(f18836,plain,(
  ( ! [X2,X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2)))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f1929])).
fof(f18834,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X49))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X50),s('type.list.list'(bool),X51))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X48),s('type.num.num','const.num.|48|_0')))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f1888])).
fof(f19548,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18817,f18748])).
fof(f18817,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f249])).
fof(f18748,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f3358])).
fof(f18750,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f6268])).
fof(f18752,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1)) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f6269])).
fof(f18754,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f6736])).
fof(f18756,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X2)) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f6737])).
fof(f18769,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f9691])).
fof(f18771,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1)) ) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f9692])).
fof(f18382,plain,(
  ( ! [X466,X463,X465,X467,X464] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X465),X466))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X463),sK5(X464,'type.list.list'(X463))))) | ~p(s(bool,happ(s(fun(X465,bool),happ(s(fun(X463,fun(X465,bool)),happ(s(fun('type.num.num',fun(X463,fun(X465,bool))),X467),s('type.num.num',sK22(X467,'const.list.HD_1'(s('type.list.list'('type.list.list'(X463)),X464)),X466,X465,X463)))),s(X463,'const.list.EL_2'(s('type.num.num',sK22(X467,'const.list.HD_1'(s('type.list.list'('type.list.list'(X463)),X464)),X466,X465,X463)),s('type.list.list'(X463),'const.list.HD_1'(s('type.list.list'('type.list.list'(X463)),X464))))))),s(X465,'const.list.EL_2'(s('type.num.num',sK22(X467,'const.list.HD_1'(s('type.list.list'('type.list.list'(X463)),X464)),X466,X465,X463)),s('type.list.list'(X465),X466)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X463,fun(X465,bool))),X467),s('type.list.list'(X463),'const.list.HD_1'(s('type.list.list'('type.list.list'(X463)),X464))),s('type.list.list'(X465),X466)))) | s('type.list.list'('type.list.list'(X463)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X463)),X464)) )),
  inference(superposition,[],[f346,f1787])).
fof(f18381,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X460),X461))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X458),sK5(X459,'type.list.list'(X458))))) | ~p(s(bool,happ(s(fun(X458,bool),happ(s(fun(X460,fun(X458,bool)),happ(s(fun('type.num.num',fun(X460,fun(X458,bool))),X462),s('type.num.num',sK22(X462,X461,'const.list.HD_1'(s('type.list.list'('type.list.list'(X458)),X459)),X458,X460)))),s(X460,'const.list.EL_2'(s('type.num.num',sK22(X462,X461,'const.list.HD_1'(s('type.list.list'('type.list.list'(X458)),X459)),X458,X460)),s('type.list.list'(X460),X461))))),s(X458,'const.list.EL_2'(s('type.num.num',sK22(X462,X461,'const.list.HD_1'(s('type.list.list'('type.list.list'(X458)),X459)),X458,X460)),s('type.list.list'(X458),'const.list.HD_1'(s('type.list.list'('type.list.list'(X458)),X459)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X460,fun(X458,bool))),X462),s('type.list.list'(X460),X461),s('type.list.list'(X458),'const.list.HD_1'(s('type.list.list'('type.list.list'(X458)),X459)))))) | s('type.list.list'('type.list.list'(X458)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X458)),X459)) )),
  inference(superposition,[],[f346,f1787])).
fof(f18380,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X455),X456))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X453),sK5(X454,'type.list.list'(X453))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X457,'const.list.HD_1'(s('type.list.list'('type.list.list'(X453)),X454)),X456,X455,X453)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X453),'const.list.HD_1'(s('type.list.list'('type.list.list'(X453)),X454)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X453,fun(X455,bool))),X457),s('type.list.list'(X453),'const.list.HD_1'(s('type.list.list'('type.list.list'(X453)),X454))),s('type.list.list'(X455),X456)))) | s('type.list.list'('type.list.list'(X453)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X453)),X454)) )),
  inference(superposition,[],[f345,f1787])).
fof(f18379,plain,(
  ( ! [X449,X451,X452,X448,X450] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X450),X451))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X448),sK5(X449,'type.list.list'(X448))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X452,X451,'const.list.HD_1'(s('type.list.list'('type.list.list'(X448)),X449)),X448,X450)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X450),X451)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X450,fun(X448,bool))),X452),s('type.list.list'(X450),X451),s('type.list.list'(X448),'const.list.HD_1'(s('type.list.list'('type.list.list'(X448)),X449)))))) | s('type.list.list'('type.list.list'(X448)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X448)),X449)) )),
  inference(superposition,[],[f345,f1787])).
fof(f18378,plain,(
  ( ! [X445,X447,X443,X444,X446,X442] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X444),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X442),sK5(X443,'type.list.list'(X442)))))))) | p(s(bool,happ(s(fun(X445,bool),happ(s(fun(X442,fun(X445,bool)),happ(s(fun('type.num.num',fun(X442,fun(X445,bool))),X446),s('type.num.num',X444))),s(X442,'const.list.EL_2'(s('type.num.num',X444),s('type.list.list'(X442),'const.list.HD_1'(s('type.list.list'('type.list.list'(X442)),X443))))))),s(X445,'const.list.EL_2'(s('type.num.num',X444),s('type.list.list'(X445),X447)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X442,fun(X445,bool))),X446),s('type.list.list'(X442),'const.list.HD_1'(s('type.list.list'('type.list.list'(X442)),X443))),s('type.list.list'(X445),X447)))) | s('type.list.list'('type.list.list'(X442)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X442)),X443)) )),
  inference(superposition,[],[f344,f1787])).
fof(f18377,plain,(
  ( ! [X441,X438,X440,X437,X439] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X437,fun(X439,bool))),X440),s('type.list.list'(X437),sK5(X438,'type.list.list'(X437))),s('type.list.list'(X439),X441)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X439),X441))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X437),'const.list.HD_1'(s('type.list.list'('type.list.list'(X437)),X438))))) | s('type.list.list'('type.list.list'(X437)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X437)),X438)) )),
  inference(superposition,[],[f343,f1787])).
fof(f18376,plain,(
  ( ! [X436,X432,X434,X433,X435] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X434,fun(X432,bool))),X435),s('type.list.list'(X434),X436),s('type.list.list'(X432),sK5(X433,'type.list.list'(X432)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X434),X436))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X432),'const.list.HD_1'(s('type.list.list'('type.list.list'(X432)),X433))))) | s('type.list.list'('type.list.list'(X432)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X432)),X433)) )),
  inference(superposition,[],[f343,f1787])).
fof(f18374,plain,(
  ( ! [X422,X424,X426,X423,X425] : (s('type.list.list'(X422),X424) != s('type.list.list'(X422),sK5(X423,'type.list.list'(X422))) | s('type.list.list'(X422),'const.list.CONS_2'(s(X422,X426),s('type.list.list'(X422),X424))) = s('type.list.list'(X422),'const.list.CONS_2'(s(X422,X425),s('type.list.list'(X422),'const.list.HD_1'(s('type.list.list'('type.list.list'(X422)),X423))))) | s(X422,X425) != s(X422,X426) | s('type.list.list'('type.list.list'(X422)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X422)),X423)) )),
  inference(superposition,[],[f327,f1787])).
fof(f18372,plain,(
  ( ! [X412,X414,X416,X413,X415] : (s('type.list.list'(X412),'const.list.CONS_2'(s(X412,X415),s('type.list.list'(X412),X416))) != s('type.list.list'(X412),'const.list.CONS_2'(s(X412,X414),s('type.list.list'(X412),sK5(X413,'type.list.list'(X412))))) | s('type.list.list'(X412),X416) = s('type.list.list'(X412),'const.list.HD_1'(s('type.list.list'('type.list.list'(X412)),X413))) | s('type.list.list'('type.list.list'(X412)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X412)),X413)) )),
  inference(superposition,[],[f326,f1787])).
fof(f18365,plain,(
  ( ! [X387,X388] : (s('type.list.list'(X387),'const.list.NIL_0') != s('type.list.list'(X387),sK5(X388,'type.list.list'(X387))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X387),'const.list.HD_1'(s('type.list.list'('type.list.list'(X387)),X388))))) | s('type.list.list'('type.list.list'(X387)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X387)),X388)) )),
  inference(superposition,[],[f290,f1787])).
fof(f18364,plain,(
  ( ! [X385,X386] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X385),sK5(X386,'type.list.list'(X385))))) | s('type.list.list'(X385),'const.list.NIL_0') = s('type.list.list'(X385),'const.list.HD_1'(s('type.list.list'('type.list.list'(X385)),X386))) | s('type.list.list'('type.list.list'(X385)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X385)),X386)) )),
  inference(superposition,[],[f289,f1787])).
fof(f18357,plain,(
  ( ! [X371] : (s('type.list.list'(bool),sK5(X371,'type.list.list'(bool))) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X371))) | s(bool,'T_0') = s(bool,sK5('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X371)),bool)) | s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X371)) ) | $spl14),
  inference(superposition,[],[f7451,f1787])).
fof(f18356,plain,(
  ( ! [X370] : (s('type.list.list'(bool),sK5(X370,'type.list.list'(bool))) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X370)))))) | s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X370)) ) | $spl14),
  inference(superposition,[],[f6809,f1787])).
fof(f18355,plain,(
  ( ! [X369] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK5(X369,'type.list.list'(bool)))))) | s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X369))) = s('type.list.list'(bool),sK19('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X369)),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X369)) )),
  inference(superposition,[],[f896,f1787])).
fof(f18354,plain,(
  ( ! [X368] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK5(X368,'type.list.list'(bool)))))) | s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X368))) = s('type.list.list'(bool),sK16('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X368)),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(bool)),X368)) )),
  inference(superposition,[],[f806,f1787])).
fof(f18333,plain,(
  ( ! [X323] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5(X323,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X323))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X323)) )),
  inference(superposition,[],[f5331,f1787])).
fof(f18321,plain,(
  ( ! [X300,X296,X298,X301,X297,X299] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5(X296,'type.num.num')),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X297),X298)))))) | p(s(bool,happ(s(fun(X299,bool),happ(s(fun(X297,fun(X299,bool)),happ(s(fun('type.num.num',fun(X297,fun(X299,bool))),X300),s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X296))))),s(X297,'const.list.EL_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X296))),s('type.list.list'(X297),X298))))),s(X299,'const.list.EL_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X296))),s('type.list.list'(X299),X301)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X297,fun(X299,bool))),X300),s('type.list.list'(X297),X298),s('type.list.list'(X299),X301)))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X296)) )),
  inference(superposition,[],[f344,f1787])).
fof(f18320,plain,(
  ( ! [X294,X293,X295] : (s('type.num.num',X294) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK5(X293,'type.num.num')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X293))),s('type.num.num',X295)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.num.SUC_1'(s('type.num.num',X295)))))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X293)) )),
  inference(superposition,[],[f337,f1787])).
fof(f18319,plain,(
  ( ! [X292,X290,X291] : (s('type.num.num',sK5(X290,'type.num.num')) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X291))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X291),s('type.num.num',X292)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X290))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X292)))))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X290)) )),
  inference(superposition,[],[f337,f1787])).
fof(f18318,plain,(
  ( ! [X288,X289] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK5(X288,'type.num.num')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X288))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X289)))))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X288)) )),
  inference(superposition,[],[f336,f1787])).
fof(f18317,plain,(
  ( ! [X287,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK5(X286,'type.num.num'))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X287) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),X286)),X287)),s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X286)))))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X286)) )),
  inference(superposition,[],[f335,f1787])).
fof(f18316,plain,(
  ( ! [X285,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5(X284,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',X285)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X284))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X285,'const.list.HD_1'(s('type.list.list'('type.num.num'),X284)))),s('type.num.num',X285)))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X284)) )),
  inference(superposition,[],[f335,f1787])).
fof(f18315,plain,(
  ( ! [X282,X283] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK5(X282,'type.num.num'))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X283) | s('type.num.num',X283) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),X282)),X283)))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X282)) )),
  inference(superposition,[],[f334,f1787])).
fof(f18314,plain,(
  ( ! [X280,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5(X280,'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',X281)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X280))) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X280))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X281,'const.list.HD_1'(s('type.list.list'('type.num.num'),X280)))))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X280)) )),
  inference(superposition,[],[f334,f1787])).
fof(f18312,plain,(
  ( ! [X277,X276] : (s('type.num.num',X277) != s('type.num.num',sK5(X276,'type.num.num')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X277))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X276))))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X276)) )),
  inference(superposition,[],[f333,f1787])).
fof(f18310,plain,(
  ( ! [X273,X272] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X273))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK5(X272,'type.num.num')))) | s('type.num.num',X273) = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X272))) | s('type.list.list'('type.num.num'),'const.list.NIL_0') = s('type.list.list'('type.num.num'),X272)) )),
  inference(superposition,[],[f332,f1787])).
fof(f18298,plain,(
  ( ! [X222,X223,X224] : (p(s(bool,happ(s(fun(X222,bool),sK5(X223,fun(X222,bool))),s(X222,sK19(X224,'const.list.HD_1'(s('type.list.list'(fun(X222,bool)),X223)),X222))))) | ~p(s(bool,happ(s(fun(X222,bool),'const.list.HD_1'(s('type.list.list'(fun(X222,bool)),X223))),s(X222,X224)))) | s('type.list.list'(fun(X222,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X222,bool)),X223)) )),
  inference(superposition,[],[f323,f1787])).
fof(f18297,plain,(
  ( ! [X220,X219,X221] : (~p(s(bool,happ(s(fun(X219,bool),sK5(X220,fun(X219,bool))),s(X219,X221)))) | s(X219,X221) = s(X219,sK19(X221,'const.list.HD_1'(s('type.list.list'(fun(X219,bool)),X220)),X219)) | s('type.list.list'(fun(X219,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X219,bool)),X220)) )),
  inference(superposition,[],[f322,f1787])).
fof(f18296,plain,(
  ( ! [X218,X216,X215,X217] : (~p(s(bool,happ(s(fun(X215,bool),sK5(X216,fun(X215,bool))),s(X215,X217)))) | p(s(bool,X218)) | p(s(bool,happ(s(fun(X215,bool),'const.list.HD_1'(s('type.list.list'(fun(X215,bool)),X216))),s(X215,sK18(X218,'const.list.HD_1'(s('type.list.list'(fun(X215,bool)),X216)),X215))))) | s('type.list.list'(fun(X215,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X215,bool)),X216)) )),
  inference(superposition,[],[f319,f1787])).
fof(f18295,plain,(
  ( ! [X212,X213,X211,X214] : (~p(s(bool,happ(s(fun(X211,bool),sK5(X212,fun(X211,bool))),s(X211,X213)))) | p(s(bool,X214)) | p(s(bool,happ(s(fun(X211,bool),'const.list.HD_1'(s('type.list.list'(fun(X211,bool)),X212))),s(X211,sK17(X214,'const.list.HD_1'(s('type.list.list'(fun(X211,bool)),X212)),X211))))) | s('type.list.list'(fun(X211,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X211,bool)),X212)) )),
  inference(superposition,[],[f317,f1787])).
fof(f18294,plain,(
  ( ! [X210,X208,X209,X207] : (~p(s(bool,happ(s(fun(X207,bool),sK5(X208,fun(X207,bool))),s(X207,X209)))) | s(X207,X209) != s(X207,X210) | p(s(bool,happ(s(fun(X207,bool),'const.list.HD_1'(s('type.list.list'(fun(X207,bool)),X208))),s(X207,X210)))) | s('type.list.list'(fun(X207,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X207,bool)),X208)) )),
  inference(superposition,[],[f316,f1787])).
fof(f18293,plain,(
  ( ! [X206,X204,X205] : (~p(s(bool,happ(s(fun(X204,bool),sK5(X205,fun(X204,bool))),s(X204,sK16(X206,'const.list.HD_1'(s('type.list.list'(fun(X204,bool)),X205)),X204))))) | p(s(bool,happ(s(fun(X204,bool),'const.list.HD_1'(s('type.list.list'(fun(X204,bool)),X205))),s(X204,X206)))) | s('type.list.list'(fun(X204,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X204,bool)),X205)) )),
  inference(superposition,[],[f315,f1787])).
fof(f18292,plain,(
  ( ! [X202,X203,X201] : (p(s(bool,happ(s(fun(X201,bool),sK5(X202,fun(X201,bool))),s(X201,X203)))) | s(X201,X203) = s(X201,sK16(X203,'const.list.HD_1'(s('type.list.list'(fun(X201,bool)),X202)),X201)) | s('type.list.list'(fun(X201,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X201,bool)),X202)) )),
  inference(superposition,[],[f314,f1787])).
fof(f18291,plain,(
  ( ! [X198,X200,X199,X197] : (~p(s(bool,happ(s(fun(X197,bool),sK5(X198,fun(X197,bool))),s(X197,sK15('const.list.HD_1'(s('type.list.list'(fun(X197,bool)),X198)),X199,X197))))) | p(s(bool,happ(s(fun(X197,bool),'const.list.HD_1'(s('type.list.list'(fun(X197,bool)),X198))),s(X197,X200)))) | ~p(s(bool,happ(s(fun(X197,bool),X199),s(X197,sK14('const.list.HD_1'(s('type.list.list'(fun(X197,bool)),X198)),X199,X197))))) | s('type.list.list'(fun(X197,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X197,bool)),X198)) )),
  inference(superposition,[],[f313,f1787])).
fof(f18290,plain,(
  ( ! [X196,X194,X195,X193] : (~p(s(bool,happ(s(fun(X193,bool),sK5(X194,fun(X193,bool))),s(X193,sK15('const.list.HD_1'(s('type.list.list'(fun(X193,bool)),X194)),X195,X193))))) | p(s(bool,happ(s(fun(X193,bool),X195),s(X193,X196)))) | ~p(s(bool,happ(s(fun(X193,bool),X195),s(X193,sK14('const.list.HD_1'(s('type.list.list'(fun(X193,bool)),X194)),X195,X193))))) | s('type.list.list'(fun(X193,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X193,bool)),X194)) )),
  inference(superposition,[],[f312,f1787])).
fof(f18289,plain,(
  ( ! [X191,X189,X192,X190] : (~p(s(bool,happ(s(fun(X189,bool),sK5(X190,fun(X189,bool))),s(X189,sK13('const.list.HD_1'(s('type.list.list'(fun(X189,bool)),X190)),X191,X189))))) | p(s(bool,happ(s(fun(X189,bool),'const.list.HD_1'(s('type.list.list'(fun(X189,bool)),X190))),s(X189,X192)))) | ~p(s(bool,happ(s(fun(X189,bool),X191),s(X189,sK13('const.list.HD_1'(s('type.list.list'(fun(X189,bool)),X190)),X191,X189))))) | s('type.list.list'(fun(X189,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X189,bool)),X190)) )),
  inference(superposition,[],[f311,f1787])).
fof(f18288,plain,(
  ( ! [X187,X185,X188,X186] : (~p(s(bool,happ(s(fun(X185,bool),sK5(X186,fun(X185,bool))),s(X185,sK13('const.list.HD_1'(s('type.list.list'(fun(X185,bool)),X186)),X187,X185))))) | p(s(bool,happ(s(fun(X185,bool),X187),s(X185,X188)))) | ~p(s(bool,happ(s(fun(X185,bool),X187),s(X185,sK13('const.list.HD_1'(s('type.list.list'(fun(X185,bool)),X186)),X187,X185))))) | s('type.list.list'(fun(X185,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X185,bool)),X186)) )),
  inference(superposition,[],[f310,f1787])).
fof(f18287,plain,(
  ( ! [X182,X184,X183,X181] : (~p(s(bool,happ(s(fun(X181,bool),sK5(X182,fun(X181,bool))),s(X181,X183)))) | p(s(bool,X184)) | p(s(bool,happ(s(fun(X181,bool),'const.list.HD_1'(s('type.list.list'(fun(X181,bool)),X182))),s(X181,sK12(X184,'const.list.HD_1'(s('type.list.list'(fun(X181,bool)),X182)),X181))))) | s('type.list.list'(fun(X181,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X181,bool)),X182)) )),
  inference(superposition,[],[f308,f1787])).
fof(f18286,plain,(
  ( ! [X177,X180,X178,X179] : (~p(s(bool,happ(s(fun(X177,bool),sK5(X178,fun(X177,bool))),s(X177,X179)))) | p(s(bool,X180)) | p(s(bool,happ(s(fun(X177,bool),'const.list.HD_1'(s('type.list.list'(fun(X177,bool)),X178))),s(X177,sK11(X180,'const.list.HD_1'(s('type.list.list'(fun(X177,bool)),X178)),X177))))) | s('type.list.list'(fun(X177,bool)),'const.list.NIL_0') = s('type.list.list'(fun(X177,bool)),X178)) )),
  inference(superposition,[],[f306,f1787])).
fof(f18273,plain,(
  ( ! [X158,X159,X160] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X158,bool)),s('type.list.list'(bool),X159)))),'const.list.HD_0','type.list.list'(bool)))),X160) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X158))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X158)) ) | $spl14),
  inference(superposition,[],[f8077,f1787])).
fof(f18272,plain,(
  ( ! [X156,X157,X155] : (~sP0('F_0',X156,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X155,bool)),s('type.list.list'(bool),X157)))),'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X155))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X155)) ) | $spl14),
  inference(superposition,[],[f8035,f1787])).
fof(f18269,plain,(
  ( ! [X149,X150] : (s(bool,sK5(X149,bool)) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X150,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X150) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X149))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X149)) ) | $spl14),
  inference(superposition,[],[f5993,f1787])).
fof(f18267,plain,(
  ( ! [X147] : (p(s(bool,sK5(X147,bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),X147)),'const.list.HD_0','type.list.list'(bool))))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X147)) ) | $spl14),
  inference(superposition,[],[f2376,f1787])).
fof(f18266,plain,(
  ( ! [X146,X145] : (p(s(bool,sK5(X145,bool))) | s(bool,X146) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X145))) | s(bool,'T_0') = s(bool,X146) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X145)) )),
  inference(superposition,[],[f460,f1787])).
fof(f18261,plain,(
  ( ! [X136,X135] : (~p(s(bool,sK5(X135,bool))) | s(bool,X136) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),X135))) | p(s(bool,X136)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X135)) )),
  inference(superposition,[],[f384,f1787])).
fof(f18260,plain,(
  ( ! [X134,X132,X133] : (~p(s(bool,sK5(X132,bool))) | p(s(bool,X133)) | ~sP0(X133,'const.list.HD_1'(s('type.list.list'(bool),X132)),X134) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X132)) )),
  inference(superposition,[],[f354,f1787])).
fof(f18259,plain,(
  ( ! [X130,X131,X129] : (~p(s(bool,sK5(X129,bool))) | p(s(bool,X130)) | ~sP0(X130,X131,'const.list.HD_1'(s('type.list.list'(bool),X129))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X129)) )),
  inference(superposition,[],[f353,f1787])).
fof(f18258,plain,(
  ( ! [X127,X128] : (~p(s(bool,sK5(X127,bool))) | ~p(s(bool,X128)) | s(bool,X128) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X127))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X127)) )),
  inference(superposition,[],[f331,f1787])).
fof(f18256,plain,(
  ( ! [X123,X124] : (p(s(bool,sK5(X123,bool))) | p(s(bool,X124)) | s(bool,X124) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X123))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X123)) )),
  inference(superposition,[],[f328,f1787])).
fof(f18255,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,sK5(X119,bool))) | p(s(bool,happ(s(fun(X120,bool),X121),s(X120,sK10('const.list.HD_1'(s('type.list.list'(bool),X119)),X121,X120))))) | ~p(s(bool,happ(s(fun(X120,bool),X121),s(X120,X122)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X119)) )),
  inference(superposition,[],[f304,f1787])).
fof(f18254,plain,(
  ( ! [X118,X116,X117,X115] : (~p(s(bool,sK5(X115,bool))) | p(s(bool,happ(s(fun(X116,bool),X117),s(X116,sK9('const.list.HD_1'(s('type.list.list'(bool),X115)),X117,X116))))) | ~p(s(bool,happ(s(fun(X116,bool),X117),s(X116,X118)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X115)) )),
  inference(superposition,[],[f302,f1787])).
fof(f18253,plain,(
  ( ! [X111,X114,X112,X113] : (~p(s(bool,sK5(X111,bool))) | ~p(s(bool,happ(s(fun(X112,bool),X113),s(X112,X114)))) | p(s(bool,happ(s(fun(X112,bool),X113),s(X112,sK8('const.list.HD_1'(s('type.list.list'(bool),X111)),X113,X112))))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X111)) )),
  inference(superposition,[],[f301,f1787])).
fof(f18252,plain,(
  ( ! [X109,X107,X110,X108] : (~p(s(bool,sK5(X107,bool))) | ~p(s(bool,happ(s(fun(X108,bool),X109),s(X108,X110)))) | p(s(bool,happ(s(fun(X108,bool),X109),s(X108,sK7('const.list.HD_1'(s('type.list.list'(bool),X107)),X109,X108))))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X107)) )),
  inference(superposition,[],[f299,f1787])).
fof(f18251,plain,(
  ( ! [X106] : (p(s(bool,sK5(X106,bool))) | s(bool,'F_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X106))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X106)) )),
  inference(superposition,[],[f250,f1787])).
fof(f18250,plain,(
  ( ! [X105] : (~p(s(bool,sK5(X105,bool))) | s(bool,'F_0') != s(bool,'const.list.HD_1'(s('type.list.list'(bool),X105))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X105)) )),
  inference(superposition,[],[f249,f1787])).
fof(f18249,plain,(
  ( ! [X104] : (~p(s(bool,sK5(X104,bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X104))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X104)) )),
  inference(superposition,[],[f246,f1787])).
fof(f18248,plain,(
  ( ! [X103] : (s(bool,'T_0') != s(bool,sK5(X103,bool)) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X103)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X103)) )),
  inference(superposition,[],[f245,f1787])).
fof(f18246,plain,(
  ( ! [X101] : (p(s(bool,sK5(sK19(X101,'const.list.HD_0','type.list.list'(bool)),bool))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X101)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(X101,'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f1740,f1787])).
fof(f18229,plain,(
  ( ! [X88] : (~p(s(bool,sK5(sK16(X88,'const.list.HD_0','type.list.list'(bool)),bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X88)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK16(X88,'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f1702,f1787])).
fof(f18215,plain,(
  ( ! [X78,X77] : (s(bool,X78) != s(bool,sK5(sK11(X77,'const.list.HD_0','type.list.list'(bool)),bool)) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X78) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11(X77,'const.list.HD_0','type.list.list'(bool)))) ) | $spl14),
  inference(superposition,[],[f5993,f1787])).
fof(f18214,plain,(
  ( ! [X76] : (p(s(bool,sK5(sK11(X76,'const.list.HD_0','type.list.list'(bool)),bool))) | p(s(bool,X76)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11(X76,'const.list.HD_0','type.list.list'(bool)))) ) | $spl14),
  inference(superposition,[],[f2335,f1787])).
fof(f18213,plain,(
  ( ! [X75] : (p(s(bool,sK5(sK11(X75,'const.list.HD_0','type.list.list'(bool)),bool))) | s(bool,'T_0') = s(bool,X75) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11(X75,'const.list.HD_0','type.list.list'(bool)))) ) | $spl14),
  inference(superposition,[],[f3350,f1787])).
fof(f18212,plain,(
  ( ! [X74] : (s(bool,'F_0') != s(bool,sK5(sK11(X74,'const.list.HD_0','type.list.list'(bool)),bool)) | s(bool,'T_0') = s(bool,X74) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11(X74,'const.list.HD_0','type.list.list'(bool)))) ) | $spl14),
  inference(superposition,[],[f3351,f1787])).
fof(f18210,plain,(
  ( ! [X72] : (p(s(bool,sK5(X72,bool))) | s('type.list.list'(bool),X72) = s('type.list.list'(bool),sK16(X72,'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X72)) )),
  inference(superposition,[],[f806,f1787])).
fof(f18209,plain,(
  ( ! [X71] : (~p(s(bool,sK5(X71,bool))) | s('type.list.list'(bool),X71) = s('type.list.list'(bool),sK19(X71,'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X71)) )),
  inference(superposition,[],[f896,f1787])).
fof(f18203,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s('type.list.list'(X39),'const.list.CONS_2'(s(X39,X42),s('type.list.list'(X39),X43))) != s('type.list.list'(X39),'const.list.CONS_2'(s(X39,sK5(X40,X39)),s('type.list.list'(X39),X41))) | s(X39,X42) = s(X39,'const.list.HD_1'(s('type.list.list'(X39),X40))) | s('type.list.list'(X39),'const.list.NIL_0') = s('type.list.list'(X39),X40)) )),
  inference(superposition,[],[f325,f1787])).
fof(f18201,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),X34),s(X32,sK5(X33,X32))))) | s(X32,'const.list.HD_1'(s('type.list.list'(X32),X33))) = s(X32,sK19('const.list.HD_1'(s('type.list.list'(X32),X33)),X34,X32)) | s('type.list.list'(X32),'const.list.NIL_0') = s('type.list.list'(X32),X33)) )),
  inference(superposition,[],[f322,f1787])).
fof(f18198,plain,(
  ( ! [X23,X21,X22,X20] : (~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,sK5(X21,X20))))) | s(X20,X23) != s(X20,'const.list.HD_1'(s('type.list.list'(X20),X21))) | p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X23)))) | s('type.list.list'(X20),'const.list.NIL_0') = s('type.list.list'(X20),X21)) )),
  inference(superposition,[],[f316,f1787])).
fof(f18197,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,happ(s(fun(X17,bool),X19),s(X17,sK5(X18,X17))))) | s(X17,'const.list.HD_1'(s('type.list.list'(X17),X18))) = s(X17,sK16('const.list.HD_1'(s('type.list.list'(X17),X18)),X19,X17)) | s('type.list.list'(X17),'const.list.NIL_0') = s('type.list.list'(X17),X18)) )),
  inference(superposition,[],[f314,f1787])).
fof(f18188,plain,(
  ( ! [X17,X18] : (s(bool,X18) = s(bool,sK5(X17,bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X17) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X17))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f1787,f424])).
fof(f18186,plain,(
  ( ! [X14,X13] : (s(bool,'T_0') = s(bool,sK5(X13,bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X13) | s(bool,X14) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X13))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f1787,f424])).
fof(f18172,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,sK5(sK11('const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))) ) | $spl14),
  inference(superposition,[],[f1787,f2605])).
fof(f18170,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,sK5(sK11(X5,'const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11(X5,'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,X5)) ) | $spl14),
  inference(superposition,[],[f1787,f2602])).
fof(f18169,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,sK5('const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)),X0)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))) )),
  inference(superposition,[],[f1787,f293])).
fof(f18396,plain,(
  ( ! [X30,X31] : (s('type.list.list'(X30),'const.list.NIL_0') = s('type.list.list'(X30),'const.list.HD_1'(s('type.list.list'('type.list.list'(X30)),X31))) | s(X30,'const.list.HD_1'(s('type.list.list'(X30),'const.list.HD_1'(s('type.list.list'('type.list.list'(X30)),X31))))) = s(X30,sK5('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X30)),X31)),X30))) )),
  inference(forward_demodulation,[],[f18168,f1077])).
fof(f18168,plain,(
  ( ! [X30,X31] : (s(X30,'const.list.HD_1'(s('type.list.list'(X30),'const.list.HD_1'(s('type.list.list'('type.list.list'(X30)),X31))))) = s(X30,sK5('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X30)),X31)),X30)) | s('type.list.list'(X30),'const.list.NIL_0') = s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X30)),X31)))) )),
  inference(superposition,[],[f1787,f1077])).
fof(f18395,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.list.list'(X26),'const.list.NIL_0') = s('type.list.list'(X26),'const.list.EL_2'(s('type.num.num',X27),s('type.list.list'('type.list.list'(X26)),X29))) | s(X26,'const.list.HD_1'(s('type.list.list'(X26),'const.list.EL_2'(s('type.num.num',X27),s('type.list.list'('type.list.list'(X26)),X29))))) = s(X26,sK5('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.list.list'('type.list.list'(X26)),'const.list.CONS_2'(s('type.list.list'(X26),X28),s('type.list.list'('type.list.list'(X26)),X29)))),X26))) )),
  inference(forward_demodulation,[],[f18167,f324])).
fof(f18167,plain,(
  ( ! [X28,X26,X29,X27] : (s(X26,'const.list.HD_1'(s('type.list.list'(X26),'const.list.EL_2'(s('type.num.num',X27),s('type.list.list'('type.list.list'(X26)),X29))))) = s(X26,sK5('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.list.list'('type.list.list'(X26)),'const.list.CONS_2'(s('type.list.list'(X26),X28),s('type.list.list'('type.list.list'(X26)),X29)))),X26)) | s('type.list.list'(X26),'const.list.NIL_0') = s('type.list.list'(X26),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.list.list'('type.list.list'(X26)),'const.list.CONS_2'(s('type.list.list'(X26),X28),s('type.list.list'('type.list.list'(X26)),X29)))))) )),
  inference(superposition,[],[f1787,f324])).
fof(f18394,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.list.list'(X20),'const.list.NIL_0') = s('type.list.list'(X20),'const.combin.o_3'(s(fun(X22,'type.list.list'(X20)),X23),s(fun(X21,X22),X24),s(X21,X25))) | s(X20,'const.list.HD_1'(s('type.list.list'(X20),'const.combin.o_3'(s(fun(X22,'type.list.list'(X20)),X23),s(fun(X21,X22),X24),s(X21,X25))))) = s(X20,sK5(happ(s(fun(X21,'type.list.list'(X20)),'const.combin.o_2'(s(fun(X22,'type.list.list'(X20)),X23),s(fun(X21,X22),X24))),s(X21,X25)),X20))) )),
  inference(forward_demodulation,[],[f18166,f364])).
fof(f18166,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(X20,'const.list.HD_1'(s('type.list.list'(X20),'const.combin.o_3'(s(fun(X22,'type.list.list'(X20)),X23),s(fun(X21,X22),X24),s(X21,X25))))) = s(X20,sK5(happ(s(fun(X21,'type.list.list'(X20)),'const.combin.o_2'(s(fun(X22,'type.list.list'(X20)),X23),s(fun(X21,X22),X24))),s(X21,X25)),X20)) | s('type.list.list'(X20),'const.list.NIL_0') = s('type.list.list'(X20),happ(s(fun(X21,'type.list.list'(X20)),'const.combin.o_2'(s(fun(X22,'type.list.list'(X20)),X23),s(fun(X21,X22),X24))),s(X21,X25)))) )),
  inference(superposition,[],[f1787,f364])).
fof(f18393,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.list.list'(X14),'const.list.NIL_0') = s('type.list.list'(X14),'const.combin.o_3'(s(fun(X15,'type.list.list'(X14)),X16),s(fun(X17,X15),X18),s(X17,X19))) | s(X14,'const.list.HD_1'(s('type.list.list'(X14),'const.combin.o_3'(s(fun(X15,'type.list.list'(X14)),X16),s(fun(X17,X15),X18),s(X17,X19))))) = s(X14,sK5(happ(s(fun(X15,'type.list.list'(X14)),X16),s(X15,happ(s(fun(X17,X15),X18),s(X17,X19)))),X14))) )),
  inference(forward_demodulation,[],[f18165,f363])).
fof(f18165,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s(X14,'const.list.HD_1'(s('type.list.list'(X14),'const.combin.o_3'(s(fun(X15,'type.list.list'(X14)),X16),s(fun(X17,X15),X18),s(X17,X19))))) = s(X14,sK5(happ(s(fun(X15,'type.list.list'(X14)),X16),s(X15,happ(s(fun(X17,X15),X18),s(X17,X19)))),X14)) | s('type.list.list'(X14),'const.list.NIL_0') = s('type.list.list'(X14),happ(s(fun(X15,'type.list.list'(X14)),X16),s(X15,happ(s(fun(X17,X15),X18),s(X17,X19)))))) )),
  inference(superposition,[],[f1787,f363])).
fof(f18392,plain,(
  ( ! [X12,X13,X11] : (s('type.list.list'(X11),'const.list.NIL_0') = s('type.list.list'(X11),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.list.list'(X11)),X13))) | s(X11,'const.list.HD_1'(s('type.list.list'(X11),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.list.list'(X11)),X13))))) = s(X11,sK5(happ(s(fun('type.list.list'('type.list.list'(X11)),'type.list.list'(X11)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.list.list'(X11)),X13)),X11))) )),
  inference(forward_demodulation,[],[f18164,f295])).
fof(f18164,plain,(
  ( ! [X12,X13,X11] : (s(X11,'const.list.HD_1'(s('type.list.list'(X11),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.list.list'(X11)),X13))))) = s(X11,sK5(happ(s(fun('type.list.list'('type.list.list'(X11)),'type.list.list'(X11)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.list.list'(X11)),X13)),X11)) | s('type.list.list'(X11),'const.list.NIL_0') = s('type.list.list'(X11),happ(s(fun('type.list.list'('type.list.list'(X11)),'type.list.list'(X11)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.list.list'(X11)),X13)))) )),
  inference(superposition,[],[f1787,f295])).
fof(f18391,plain,(
  ( ! [X10,X9] : (s('type.list.list'(X9),'const.list.NIL_0') = s('type.list.list'(X9),'const.list.HD_1'(s('type.list.list'('type.list.list'(X9)),X10))) | s(X9,'const.list.HD_1'(s('type.list.list'(X9),'const.list.HD_1'(s('type.list.list'('type.list.list'(X9)),X10))))) = s(X9,sK5(happ(s(fun('type.list.list'('type.list.list'(X9)),'type.list.list'(X9)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X9)),X10)),X9))) )),
  inference(forward_demodulation,[],[f18163,f285])).
fof(f18163,plain,(
  ( ! [X10,X9] : (s(X9,'const.list.HD_1'(s('type.list.list'(X9),'const.list.HD_1'(s('type.list.list'('type.list.list'(X9)),X10))))) = s(X9,sK5(happ(s(fun('type.list.list'('type.list.list'(X9)),'type.list.list'(X9)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X9)),X10)),X9)) | s('type.list.list'(X9),'const.list.NIL_0') = s('type.list.list'(X9),happ(s(fun('type.list.list'('type.list.list'(X9)),'type.list.list'(X9)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X9)),X10)))) )),
  inference(superposition,[],[f1787,f285])).
fof(f18162,plain,(
  ( ! [X8,X7] : (s(X7,'const.list.HD_1'(s('type.list.list'(X7),sK5(X8,'type.list.list'(X7))))) = s(X7,sK5('const.list.HD_1'(s('type.list.list'('type.list.list'(X7)),X8)),X7)) | s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),'const.list.HD_1'(s('type.list.list'('type.list.list'(X7)),X8))) | s('type.list.list'('type.list.list'(X7)),'const.list.NIL_0') = s('type.list.list'('type.list.list'(X7)),X8)) )),
  inference(superposition,[],[f1787,f1787])).
fof(f18390,plain,(
  ( ! [X6,X4,X5] : (s('type.list.list'(X4),'const.list.NIL_0') = s('type.list.list'(X4),X5) | s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))) = s(X4,sK5('const.list.HD_1'(s('type.list.list'('type.list.list'(X4)),'const.list.CONS_2'(s('type.list.list'(X4),X5),s('type.list.list'('type.list.list'(X4)),X6)))),X4))) )),
  inference(forward_demodulation,[],[f18161,f293])).
fof(f18161,plain,(
  ( ! [X6,X4,X5] : (s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))) = s(X4,sK5('const.list.HD_1'(s('type.list.list'('type.list.list'(X4)),'const.list.CONS_2'(s('type.list.list'(X4),X5),s('type.list.list'('type.list.list'(X4)),X6)))),X4)) | s('type.list.list'(X4),'const.list.NIL_0') = s('type.list.list'(X4),'const.list.HD_1'(s('type.list.list'('type.list.list'(X4)),'const.list.CONS_2'(s('type.list.list'(X4),X5),s('type.list.list'('type.list.list'(X4)),X6)))))) )),
  inference(superposition,[],[f1787,f293])).
fof(f18155,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,sK5('const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X0)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f1787,f286])).
fof(f17710,plain,(
  ( ! [X19,X18] : (~p(s(bool,X18)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X18),s('type.list.list'(bool),X19))) = s('type.list.list'(bool),sK19('const.list.CONS_2'(s(bool,X18),s('type.list.list'(bool),X19)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f896,f293])).
fof(f17790,plain,(
  ( ! [X8,X9] : (s('type.list.list'(bool),X8) = s('type.list.list'(bool),sK19(X8,'const.list.HD_0','type.list.list'(bool))) | s(bool,X9) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f17704,f238])).
fof(f17704,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X8) = s('type.list.list'(bool),sK19(X8,'const.list.HD_0','type.list.list'(bool))) | s(bool,X9) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f896,f424])).
fof(f17722,plain,(
  ( ! [X0] : (s('type.list.list'(bool),sK11(X0,'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK11(X0,'const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(subsumption_resolution,[],[f17685,f238])).
fof(f17685,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),sK11(X0,'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK11(X0,'const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f896,f2602])).
fof(f17721,plain,(
  ( ! [X19] : (s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X19))) = s('type.list.list'(bool),sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X19)),'const.list.HD_0','type.list.list'(bool))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X19))))))) )),
  inference(forward_demodulation,[],[f17684,f1077])).
fof(f17684,plain,(
  ( ! [X19] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X19)))))) | s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X19))) = s('type.list.list'(bool),sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X19)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f896,f1077])).
fof(f17720,plain,(
  ( ! [X17,X18,X16] : (s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))) = s('type.list.list'(bool),sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18)))),'const.list.HD_0','type.list.list'(bool))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))))))) )),
  inference(forward_demodulation,[],[f17683,f324])).
fof(f17683,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18)))))) | s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18))))) = s('type.list.list'(bool),sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18)))),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f896,f324])).
fof(f17719,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))) = s('type.list.list'(bool),sK19(happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15)),'const.list.HD_0','type.list.list'(bool))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))))))) )),
  inference(forward_demodulation,[],[f17682,f364])).
fof(f17682,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15)))))) | s('type.list.list'(bool),happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15))) = s('type.list.list'(bool),sK19(happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f896,f364])).
fof(f17718,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))) = s('type.list.list'(bool),sK19(happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10)))),'const.list.HD_0','type.list.list'(bool))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))))))) )),
  inference(forward_demodulation,[],[f17681,f363])).
fof(f17681,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10)))))) | s('type.list.list'(bool),happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10))))) = s('type.list.list'(bool),sK19(happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10)))),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f896,f363])).
fof(f17717,plain,(
  ( ! [X4,X5] : (s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))) = s('type.list.list'(bool),sK19(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5)),'const.list.HD_0','type.list.list'(bool))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))))))) )),
  inference(forward_demodulation,[],[f17680,f295])).
fof(f17680,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5)))))) | s('type.list.list'(bool),happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5))) = s('type.list.list'(bool),sK19(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f896,f295])).
fof(f17716,plain,(
  ( ! [X3] : (s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))) = s('type.list.list'(bool),sK19(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3)),'const.list.HD_0','type.list.list'(bool))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))))))) )),
  inference(forward_demodulation,[],[f17679,f285])).
fof(f17679,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3)))))) | s('type.list.list'(bool),happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3))) = s('type.list.list'(bool),sK19(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f896,f285])).
fof(f17715,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),X1) = s('type.list.list'(bool),sK19('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2)))),'const.list.HD_0','type.list.list'(bool))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1))))) )),
  inference(forward_demodulation,[],[f17678,f293])).
fof(f17678,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1)))) | s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2))))) = s('type.list.list'(bool),sK19('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2)))),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f896,f293])).
fof(f17713,plain,(
  s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl14),
  inference(forward_demodulation,[],[f17712,f6258])).
fof(f17712,plain,(
  s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl14),
  inference(subsumption_resolution,[],[f17711,f238])).
fof(f17711,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl14),
  inference(forward_demodulation,[],[f17677,f2381])).
fof(f17677,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) | s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl14),
  inference(superposition,[],[f896,f6258])).
fof(f17676,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool)))) = s('type.list.list'(bool),sK19('const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool))),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) )),
  inference(superposition,[],[f896,f286])).
fof(f17651,plain,(
  ( ! [X19,X18] : (p(s(bool,X18)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X18),s('type.list.list'(bool),X19))) = s('type.list.list'(bool),sK16('const.list.CONS_2'(s(bool,X18),s('type.list.list'(bool),X19)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f806,f293])).
fof(f17659,plain,(
  ( ! [X19] : (s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X19))) = s('type.list.list'(bool),sK16('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X19)),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X19))))))) )),
  inference(forward_demodulation,[],[f17625,f1077])).
fof(f17625,plain,(
  ( ! [X19] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X19)))))) | s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X19))) = s('type.list.list'(bool),sK16('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X19)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f806,f1077])).
fof(f17658,plain,(
  ( ! [X17,X18,X16] : (s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))) = s('type.list.list'(bool),sK16('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18)))),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))))))) )),
  inference(forward_demodulation,[],[f17624,f324])).
fof(f17624,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18)))))) | s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18))))) = s('type.list.list'(bool),sK16('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18)))),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f806,f324])).
fof(f17657,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))) = s('type.list.list'(bool),sK16(happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15)),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))))))) )),
  inference(forward_demodulation,[],[f17623,f364])).
fof(f17623,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15)))))) | s('type.list.list'(bool),happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15))) = s('type.list.list'(bool),sK16(happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f806,f364])).
fof(f17656,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))) = s('type.list.list'(bool),sK16(happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10)))),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))))))) )),
  inference(forward_demodulation,[],[f17622,f363])).
fof(f17622,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10)))))) | s('type.list.list'(bool),happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10))))) = s('type.list.list'(bool),sK16(happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10)))),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f806,f363])).
fof(f17655,plain,(
  ( ! [X4,X5] : (s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))) = s('type.list.list'(bool),sK16(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5)),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))))))) )),
  inference(forward_demodulation,[],[f17621,f295])).
fof(f17621,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5)))))) | s('type.list.list'(bool),happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5))) = s('type.list.list'(bool),sK16(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f806,f295])).
fof(f17654,plain,(
  ( ! [X3] : (s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))) = s('type.list.list'(bool),sK16(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3)),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))))))) )),
  inference(forward_demodulation,[],[f17620,f285])).
fof(f17620,plain,(
  ( ! [X3] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3)))))) | s('type.list.list'(bool),happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3))) = s('type.list.list'(bool),sK16(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3)),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f806,f285])).
fof(f17653,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),X1) = s('type.list.list'(bool),sK16('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2)))),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1))))) )),
  inference(forward_demodulation,[],[f17619,f293])).
fof(f17619,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1)))) | s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2))))) = s('type.list.list'(bool),sK16('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2)))),'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f806,f293])).
fof(f17617,plain,(
  ( ! [X0] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool)))) = s('type.list.list'(bool),sK16('const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool))),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) )),
  inference(superposition,[],[f806,f286])).
fof(f13416,plain,(
  ( ! [X0] : (~sP0('F_0','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X0)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f9692])).
fof(f13368,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f9691])).
fof(f249,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f159])).
fof(f538,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X3),s('type.list.list'(bool),X4))))) | s(bool,'F_0') = s(bool,X3)) )),
  inference(superposition,[],[f293,f243])).
fof(f736,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X3))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X3)))) )),
  inference(superposition,[],[f243,f285])).
fof(f797,plain,(
  ( ! [X12,X11] : (p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X11)))) | s(bool,'F_0') = s(bool,sK16('F_0',X12,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f314,f243])).
fof(f813,plain,(
  ( ! [X17,X16] : (s(bool,'F_0') = s(bool,sK16('const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')),X17,bool)) | p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f800,f408])).
fof(f800,plain,(
  ( ! [X17,X16] : (p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0'))) = s(bool,sK16('const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')),X17,bool))) )),
  inference(superposition,[],[f314,f408])).
fof(f884,plain,(
  ( ! [X12,X11] : (~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X11)))) | s(bool,'F_0') = s(bool,sK19('F_0',X12,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f322,f243])).
fof(f903,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') = s(bool,sK19('const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f888,f408])).
fof(f888,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))) = s(bool,sK19('const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,bool))) )),
  inference(superposition,[],[f322,f408])).
fof(f1043,plain,(
  ( ! [X26,X27] : (s(bool,'F_0') = s(bool,'const.list.EL_2'(s('type.num.num',X26),s('type.list.list'(bool),X27))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X26))),s('type.list.list'(bool),X27)))) )),
  inference(superposition,[],[f243,f295])).
fof(f1503,plain,(
  ( ! [X17,X18] : (p(s(bool,happ(s(fun(bool,bool),X18),s(bool,'F_0')))) | s(bool,X17) = s(bool,sK16(X17,X18,bool)) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f314,f243])).
fof(f1559,plain,(
  ( ! [X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X18),s(bool,'F_0')))) | s(bool,X17) = s(bool,sK19(X17,X18,bool)) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f322,f243])).
fof(f1686,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK16(X2,X3,bool))) )),
  inference(superposition,[],[f315,f243])).
fof(f1725,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK19(X5,X6,bool))) )),
  inference(superposition,[],[f323,f243])).
fof(f1785,plain,(
  ( ! [X1] : (s('type.list.list'(bool),X1) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),sK6(X1,bool)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X1) | s(bool,'T_0') = s(bool,sK5(X1,bool))) )),
  inference(superposition,[],[f286,f243])).
fof(f1884,plain,(
  ( ! [X33,X31,X34,X32] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X31),s('type.list.list'(bool),X32))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X33),s('type.list.list'(bool),X34))) | s(bool,'F_0') = s(bool,X33) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f325,f243])).
fof(f1888,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X49))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X50),s('type.list.list'(bool),X51))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X48),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f325,f408])).
fof(f1908,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X30))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X28),s('type.list.list'(bool),X29))) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f325,f243])).
fof(f1929,plain,(
  ( ! [X2,X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X2)))) )),
  inference(forward_demodulation,[],[f1877,f408])).
fof(f1877,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X2)))) )),
  inference(unit_resulting_resolution,[],[f401,f325])).
fof(f2441,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0')))) | s(bool,X14) != s(bool,X16) | p(s(bool,happ(s(fun(bool,bool),X15),s(bool,X16)))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f316,f243])).
fof(f2442,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X18),s(bool,X17)))) | s(bool,'F_0') != s(bool,X19) | p(s(bool,happ(s(fun(bool,bool),X18),s(bool,X19)))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f316,f243])).
fof(f2632,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(bool),X6))) | s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X5),s('type.list.list'(bool),X6)))))) )),
  inference(superposition,[],[f324,f243])).
fof(f3002,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK21(X0,X1,X2,bool))) )),
  inference(superposition,[],[f342,f243])).
fof(f3003,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK21(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK21(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f342,f243])).
fof(f3194,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(X20,happ(s(fun(bool,X20),X21),s(bool,'F_0'))) = s(X20,'const.combin.o_3'(s(fun(bool,X20),X21),s(fun(X17,bool),X18),s(X17,X19))) | s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),X18),s(X17,X19)))) )),
  inference(superposition,[],[f363,f243])).
fof(f3197,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s(bool,'F_0') = s(bool,'const.combin.o_3'(s(fun(X15,bool),X16),s(fun(X17,X15),X18),s(X17,X19))) | s(bool,'T_0') = s(bool,happ(s(fun(X15,bool),X16),s(X15,happ(s(fun(X17,X15),X18),s(X17,X19)))))) )),
  inference(superposition,[],[f363,f243])).
fof(f3351,plain,(
  ( ! [X5] : (s(bool,'F_0') != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X5,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl14),
  inference(subsumption_resolution,[],[f3320,f238])).
fof(f3320,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X5,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl14),
  inference(superposition,[],[f249,f2602])).
fof(f3406,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(bool,'F_0') = s(bool,'const.combin.o_3'(s(fun(X15,bool),X16),s(fun(X14,X15),X17),s(X14,X18))) | s(bool,'T_0') = s(bool,happ(s(fun(X14,bool),'const.combin.o_2'(s(fun(X15,bool),X16),s(fun(X14,X15),X17))),s(X14,X18)))) )),
  inference(superposition,[],[f364,f243])).
fof(f4458,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK13(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK13(X0,X1,bool))) )),
  inference(superposition,[],[f310,f243])).
fof(f4501,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK13(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK13(X0,X1,bool))) )),
  inference(superposition,[],[f311,f243])).
fof(f4547,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK14(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool))) )),
  inference(superposition,[],[f312,f243])).
fof(f4874,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK14(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool))) )),
  inference(superposition,[],[f313,f243])).
fof(f7815,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0)))),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f2599])).
fof(f7939,plain,(
  ( ! [X85,X83,X84,X82] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X83))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X85))) | s(bool,X84) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X82)))),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f325,f7815])).
fof(f7979,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | p(s(bool,happ(s(fun(X12,bool),X13),s(X12,sK7('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X11)))),'const.list.HD_0','type.list.list'(bool)))),X13,X12)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f7911,f238])).
fof(f7911,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | p(s(bool,happ(s(fun(X12,bool),X13),s(X12,sK7('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X11)))),'const.list.HD_0','type.list.list'(bool)))),X13,X12)))))) ) | $spl14),
  inference(superposition,[],[f299,f7815])).
fof(f7980,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK8('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X15)))),'const.list.HD_0','type.list.list'(bool)))),X17,X16)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f7912,f238])).
fof(f7912,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK8('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X15)))),'const.list.HD_0','type.list.list'(bool)))),X17,X16)))))) ) | $spl14),
  inference(superposition,[],[f301,f7815])).
fof(f7981,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,happ(s(fun(X20,bool),X21),s(X20,sK9('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X19)))),'const.list.HD_0','type.list.list'(bool)))),X21,X20))))) | ~p(s(bool,happ(s(fun(X20,bool),X21),s(X20,X22))))) ) | $spl14),
  inference(subsumption_resolution,[],[f7913,f238])).
fof(f7913,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X20,bool),X21),s(X20,sK9('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X19)))),'const.list.HD_0','type.list.list'(bool)))),X21,X20))))) | ~p(s(bool,happ(s(fun(X20,bool),X21),s(X20,X22))))) ) | $spl14),
  inference(superposition,[],[f302,f7815])).
fof(f7982,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,happ(s(fun(X24,bool),X25),s(X24,sK10('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X23)))),'const.list.HD_0','type.list.list'(bool)))),X25,X24))))) | ~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26))))) ) | $spl14),
  inference(subsumption_resolution,[],[f7914,f238])).
fof(f7914,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X24,bool),X25),s(X24,sK10('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X23)))),'const.list.HD_0','type.list.list'(bool)))),X25,X24))))) | ~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26))))) ) | $spl14),
  inference(superposition,[],[f304,f7815])).
fof(f7985,plain,(
  ( ! [X35,X33,X34] : (~sP0(X34,X35,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X33)))),'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X34))) ) | $spl14),
  inference(subsumption_resolution,[],[f7918,f238])).
fof(f7918,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'T_0')) | p(s(bool,X34)) | ~sP0(X34,X35,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X33)))),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f353,f7815])).
fof(f7986,plain,(
  ( ! [X37,X38,X36] : (~sP0(X37,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X36)))),'const.list.HD_0','type.list.list'(bool)))),X38) | p(s(bool,X37))) ) | $spl14),
  inference(subsumption_resolution,[],[f7919,f238])).
fof(f7919,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | p(s(bool,X37)) | ~sP0(X37,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X36)))),'const.list.HD_0','type.list.list'(bool)))),X38)) ) | $spl14),
  inference(superposition,[],[f354,f7815])).
fof(f7993,plain,(
  ( ! [X66,X67] : (s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X66)))),'const.list.HD_0','type.list.list'(bool)))),X67,bool)) | p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f7933,f7815])).
fof(f7933,plain,(
  ( ! [X66,X67] : (p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'T_0')))) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X66)))),'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X66)))),'const.list.HD_0','type.list.list'(bool)))),X67,bool))) ) | $spl14),
  inference(superposition,[],[f314,f7815])).
fof(f7995,plain,(
  ( ! [X78,X77] : (s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X77)))),'const.list.HD_0','type.list.list'(bool)))),X78,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X78),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f7937,f7815])).
fof(f7937,plain,(
  ( ! [X78,X77] : (~p(s(bool,happ(s(fun(bool,bool),X78),s(bool,'T_0')))) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X77)))),'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X77)))),'const.list.HD_0','type.list.list'(bool)))),X78,bool))) ) | $spl14),
  inference(superposition,[],[f322,f7815])).
fof(f7996,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1)))),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f7985])).
fof(f8046,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0)))),'const.list.HD_0','type.list.list'(bool)))),X1)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f7986])).
fof(f10854,plain,(
  ( ! [X325,X327,X324,X326] : (s(bool,'T_0') != s(bool,f(s(X324,sK21(X325,X326,bool,X324)))) | s(fun(X324,bool),X325) = s(fun(X324,bool),X326) | s(bool,X327) = s(bool,g(s(X324,sK21(X325,X326,bool,X324)))) | s(bool,'T_0') = s(bool,X327)) )),
  inference(superposition,[],[f342,f424])).
fof(f10564,plain,(
  ( ! [X344,X346,X343,X345] : (s(bool,X346) != s(bool,f(s(X343,sK21(X344,X345,bool,X343)))) | s(fun(X343,bool),X344) = s(fun(X343,bool),X345) | s(bool,'T_0') = s(bool,X346) | s(bool,'T_0') = s(bool,g(s(X343,sK21(X344,X345,bool,X343))))) )),
  inference(superposition,[],[f342,f424])).
fof(f8616,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),happ(s(fun('type.num.num',fun(X0,fun(X0,bool))),X1),s('type.num.num',sK22(X1,X2,X2,X0,X0)))),s(X0,'const.list.EL_2'(s('type.num.num',sK22(X1,X2,X2,X0,X0)),s('type.list.list'(X0),X2))))),s(X0,'const.list.EL_2'(s('type.num.num',sK22(X1,X2,X2,X0,X0)),s('type.list.list'(X0),X2)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X0,bool))),X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X2))))) )),
  inference(equality_resolution,[],[f346])).
fof(f8194,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X0,X1,X1,X2,X2)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X1)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X2,fun(X2,bool))),X0),s('type.list.list'(X2),X1),s('type.list.list'(X2),X1))))) )),
  inference(equality_resolution,[],[f345])).
fof(f8220,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))))) )),
  inference(subsumption_resolution,[],[f8219,f240])).
fof(f8219,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))))) )),
  inference(forward_demodulation,[],[f8218,f408])).
fof(f8218,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X3,'const.list.NIL_0',X2,X1,X0)),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))))) )),
  inference(forward_demodulation,[],[f8175,f241])).
fof(f8175,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X3,'const.list.NIL_0',X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))))) )),
  inference(superposition,[],[f345,f241])).
fof(f343,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))) )),
  inference(cnf_transformation,[],[f226])).
fof(f344,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',X6))),s(X0,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X1),X2)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2))))) )),
  inference(cnf_transformation,[],[f226])).
fof(f346,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.num.num',sK22(X4,X3,X2,X1,X0)))),s(X0,'const.list.EL_2'(s('type.num.num',sK22(X4,X3,X2,X1,X0)),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',sK22(X4,X3,X2,X1,X0)),s('type.list.list'(X1),X2)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X4),s('type.list.list'(X0),X3),s('type.list.list'(X1),X2))))) )),
  inference(cnf_transformation,[],[f226])).
fof(f3072,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X2,bool))),X3),s('type.list.list'(X0),X1),s('type.list.list'(X2),X4)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f3059,f294])).
fof(f3059,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X2,bool))),X3),s('type.list.list'(X0),X1),s('type.list.list'(X2),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f343,f286])).
fof(f3079,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X2,fun(X0,bool))),X3),s('type.list.list'(X2),X4),s('type.list.list'(X0),X1)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f3065,f294])).
fof(f3065,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X2,fun(X0,bool))),X3),s('type.list.list'(X2),X4),s('type.list.list'(X0),X1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f343,f286])).
fof(f8207,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.list.list'(X19),X20),s('type.list.list'(X22),X23)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23)))) )),
  inference(forward_demodulation,[],[f8206,f293])).
fof(f8206,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21))))),s('type.list.list'(X22),X23))))) )),
  inference(forward_demodulation,[],[f8169,f293])).
fof(f8169,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21))))),s('type.list.list'(X22),X23))))) )),
  inference(superposition,[],[f345,f293])).
fof(f8227,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X22,fun(X19,bool))),X24),s('type.list.list'(X22),X23),s('type.list.list'(X19),X20)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))))))) )),
  inference(forward_demodulation,[],[f8184,f293])).
fof(f8184,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X22,fun(X19,bool))),X24),s('type.list.list'(X22),X23),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21))))))))) )),
  inference(superposition,[],[f345,f293])).
fof(f8625,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.list.list'(X19),X20),s('type.list.list'(X22),X23)))) | ~p(s(bool,happ(s(fun(X22,bool),happ(s(fun(X19,fun(X22,bool)),happ(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)))),s(X19,'const.list.EL_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.list.list'(X19),X20))))),s(X22,'const.list.EL_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.list.list'(X22),X23)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23)))) )),
  inference(forward_demodulation,[],[f8624,f293])).
fof(f8624,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,happ(s(fun(X22,bool),happ(s(fun(X19,fun(X22,bool)),happ(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)))),s(X19,'const.list.EL_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.list.list'(X19),X20))))),s(X22,'const.list.EL_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.list.list'(X22),X23)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21))))),s('type.list.list'(X22),X23))))) )),
  inference(forward_demodulation,[],[f8591,f293])).
fof(f8591,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) | ~p(s(bool,happ(s(fun(X22,bool),happ(s(fun(X19,fun(X22,bool)),happ(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)))),s(X19,'const.list.EL_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21))))))))),s(X22,'const.list.EL_2'(s('type.num.num',sK22(X24,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X23,X22,X19)),s('type.list.list'(X22),X23)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X19,fun(X22,bool))),X24),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21))))),s('type.list.list'(X22),X23))))) )),
  inference(superposition,[],[f346,f293])).
fof(f8644,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X22,fun(X19,bool))),X24),s('type.list.list'(X22),X23),s('type.list.list'(X19),X20)))) | ~p(s(bool,happ(s(fun(X19,bool),happ(s(fun(X22,fun(X19,bool)),happ(s(fun('type.num.num',fun(X22,fun(X19,bool))),X24),s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)))),s(X22,'const.list.EL_2'(s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)),s('type.list.list'(X22),X23))))),s(X19,'const.list.EL_2'(s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)),s('type.list.list'(X19),X20)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23)))) )),
  inference(forward_demodulation,[],[f8643,f293])).
fof(f8643,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,happ(s(fun(X19,bool),happ(s(fun(X22,fun(X19,bool)),happ(s(fun('type.num.num',fun(X22,fun(X19,bool))),X24),s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)))),s(X22,'const.list.EL_2'(s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)),s('type.list.list'(X22),X23))))),s(X19,'const.list.EL_2'(s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)),s('type.list.list'(X19),X20)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X22,fun(X19,bool))),X24),s('type.list.list'(X22),X23),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21))))))))) )),
  inference(forward_demodulation,[],[f8606,f293])).
fof(f8606,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X23))) | ~p(s(bool,happ(s(fun(X19,bool),happ(s(fun(X22,fun(X19,bool)),happ(s(fun('type.num.num',fun(X22,fun(X19,bool))),X24),s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)))),s(X22,'const.list.EL_2'(s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)),s('type.list.list'(X22),X23))))),s(X19,'const.list.EL_2'(s('type.num.num',sK22(X24,X23,'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))),X19,X22)),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21)))))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X22,fun(X19,bool))),X24),s('type.list.list'(X22),X23),s('type.list.list'(X19),'const.list.HD_1'(s('type.list.list'('type.list.list'(X19)),'const.list.CONS_2'(s('type.list.list'(X19),X20),s('type.list.list'('type.list.list'(X19)),X21))))))))) )),
  inference(superposition,[],[f346,f293])).
fof(f11433,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X214] : (p(s(bool,happ(s(fun(X217,bool),happ(s(fun(X215,fun(X217,bool)),happ(s(fun('type.num.num',fun(X215,fun(X217,bool))),X218),s('type.num.num',X214))),s(X215,'const.list.EL_2'(s('type.num.num',X214),s('type.list.list'(X215),X216))))),s(X217,'const.list.EL_2'(s('type.num.num',X214),s('type.list.list'(X217),X219)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X215,fun(X217,bool))),X218),s('type.list.list'(X215),X216),s('type.list.list'(X217),X219)))) | s(bool,X220) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X214),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X215),X216))))) | s(bool,'T_0') = s(bool,X220)) )),
  inference(subsumption_resolution,[],[f10823,f238])).
fof(f10823,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X214] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X217,bool),happ(s(fun(X215,fun(X217,bool)),happ(s(fun('type.num.num',fun(X215,fun(X217,bool))),X218),s('type.num.num',X214))),s(X215,'const.list.EL_2'(s('type.num.num',X214),s('type.list.list'(X215),X216))))),s(X217,'const.list.EL_2'(s('type.num.num',X214),s('type.list.list'(X217),X219)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X215,fun(X217,bool))),X218),s('type.list.list'(X215),X216),s('type.list.list'(X217),X219)))) | s(bool,X220) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X214),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X215),X216))))) | s(bool,'T_0') = s(bool,X220)) )),
  inference(superposition,[],[f344,f424])).
fof(f8586,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | ~p(s(bool,happ(s(fun(X2,bool),happ(s(fun(X0,fun(X2,bool)),happ(s(fun('type.num.num',fun(X0,fun(X2,bool))),X4),s('type.num.num',sK22(X4,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X3,X2,X0)))),s(X0,'const.list.EL_2'(s('type.num.num',sK22(X4,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X3,X2,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))))))),s(X2,'const.list.EL_2'(s('type.num.num',sK22(X4,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X3,X2,X0)),s('type.list.list'(X2),X3)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X2,bool))),X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))),s('type.list.list'(X2),X3)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f346,f286])).
fof(f8525,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | p(s(bool,happ(s(fun(X3,bool),happ(s(fun(X0,fun(X3,bool)),happ(s(fun('type.num.num',fun(X0,fun(X3,bool))),X4),s('type.num.num',X2))),s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))))))),s(X3,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X3),X5)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X3,bool))),X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))),s('type.list.list'(X3),X5)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f344,f286])).
fof(f8195,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X4,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X3,X2,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X2,bool))),X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))),s('type.list.list'(X2),X3)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f8164,f294])).
fof(f8164,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X4,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X3,X2,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X2,bool))),X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))),s('type.list.list'(X2),X3)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f345,f286])).
fof(f9527,plain,(
  ( ! [X391,X393,X395,X392,X394] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X391,fun(X393,bool))),X395),s('type.list.list'(X391),'const.list.HD_1'(s('type.list.list'('type.list.list'(X391)),X392))),s('type.list.list'(X393),X394)))) | ~p(s(bool,happ(s(fun(X393,bool),happ(s(fun(X391,fun(X393,bool)),happ(s(fun('type.num.num',fun(X391,fun(X393,bool))),X395),s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)))),s(X391,'const.list.EL_2'(s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)),s('type.list.list'(X391),'const.list.HD_1'(s('type.list.list'('type.list.list'(X391)),X392))))))),s(X393,'const.list.EL_2'(s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)),s('type.list.list'(X393),X394)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X393),X394))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X391),'const.list.HD_1'(s('type.list.list'('type.list.list'(X391)),X392)))))) )),
  inference(forward_demodulation,[],[f9526,f1077])).
fof(f9526,plain,(
  ( ! [X391,X393,X395,X392,X394] : (~p(s(bool,happ(s(fun(X393,bool),happ(s(fun(X391,fun(X393,bool)),happ(s(fun('type.num.num',fun(X391,fun(X393,bool))),X395),s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)))),s(X391,'const.list.EL_2'(s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)),s('type.list.list'(X391),'const.list.HD_1'(s('type.list.list'('type.list.list'(X391)),X392))))))),s(X393,'const.list.EL_2'(s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)),s('type.list.list'(X393),X394)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X393),X394))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X391),'const.list.HD_1'(s('type.list.list'('type.list.list'(X391)),X392))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X391,fun(X393,bool))),X395),s('type.list.list'(X391),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392))),s('type.list.list'(X393),X394))))) )),
  inference(forward_demodulation,[],[f9333,f1077])).
fof(f9333,plain,(
  ( ! [X391,X393,X395,X392,X394] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X393),X394))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X391),'const.list.HD_1'(s('type.list.list'('type.list.list'(X391)),X392))))) | ~p(s(bool,happ(s(fun(X393,bool),happ(s(fun(X391,fun(X393,bool)),happ(s(fun('type.num.num',fun(X391,fun(X393,bool))),X395),s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)))),s(X391,'const.list.EL_2'(s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)),s('type.list.list'(X391),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392))))))),s(X393,'const.list.EL_2'(s('type.num.num',sK22(X395,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392)),X394,X393,X391)),s('type.list.list'(X393),X394)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X391,fun(X393,bool))),X395),s('type.list.list'(X391),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X391)),X392))),s('type.list.list'(X393),X394))))) )),
  inference(superposition,[],[f346,f1077])).
fof(f9523,plain,(
  ( ! [X383,X385,X382,X384,X381] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X381,fun(X383,bool))),X385),s('type.list.list'(X381),'const.list.HD_1'(s('type.list.list'('type.list.list'(X381)),X382))),s('type.list.list'(X383),X384)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X385,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X381)),X382)),X384,X383,X381)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X381),'const.list.HD_1'(s('type.list.list'('type.list.list'(X381)),X382)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X383),X384))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X381),'const.list.HD_1'(s('type.list.list'('type.list.list'(X381)),X382)))))) )),
  inference(forward_demodulation,[],[f9522,f1077])).
fof(f9522,plain,(
  ( ! [X383,X385,X382,X384,X381] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X385,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X381)),X382)),X384,X383,X381)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X381),'const.list.HD_1'(s('type.list.list'('type.list.list'(X381)),X382)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X383),X384))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X381),'const.list.HD_1'(s('type.list.list'('type.list.list'(X381)),X382))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X381,fun(X383,bool))),X385),s('type.list.list'(X381),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X381)),X382))),s('type.list.list'(X383),X384))))) )),
  inference(forward_demodulation,[],[f9331,f1077])).
fof(f9331,plain,(
  ( ! [X383,X385,X382,X384,X381] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X383),X384))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X381),'const.list.HD_1'(s('type.list.list'('type.list.list'(X381)),X382))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X385,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X381)),X382)),X384,X383,X381)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X381),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X381)),X382)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X381,fun(X383,bool))),X385),s('type.list.list'(X381),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X381)),X382))),s('type.list.list'(X383),X384))))) )),
  inference(superposition,[],[f345,f1077])).
fof(f8627,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))),s('type.list.list'(X27),X28)))) | ~p(s(bool,happ(s(fun(X27,bool),happ(s(fun(X25,fun(X27,bool)),happ(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)))),s(X25,'const.list.EL_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))))),s(X27,'const.list.EL_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.list.list'(X27),X28)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))) )),
  inference(forward_demodulation,[],[f8626,f285])).
fof(f8626,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~p(s(bool,happ(s(fun(X27,bool),happ(s(fun(X25,fun(X27,bool)),happ(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)))),s(X25,'const.list.EL_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))))),s(X27,'const.list.EL_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.list.list'(X27),X28)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26))),s('type.list.list'(X27),X28))))) )),
  inference(forward_demodulation,[],[f8592,f285])).
fof(f8592,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))) | ~p(s(bool,happ(s(fun(X27,bool),happ(s(fun(X25,fun(X27,bool)),happ(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)))),s(X25,'const.list.EL_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26))))))),s(X27,'const.list.EL_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.list.list'(X27),X28)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26))),s('type.list.list'(X27),X28))))) )),
  inference(superposition,[],[f346,f285])).
fof(f8209,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))),s('type.list.list'(X27),X28)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))) )),
  inference(forward_demodulation,[],[f8208,f285])).
fof(f8208,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26))),s('type.list.list'(X27),X28))))) )),
  inference(forward_demodulation,[],[f8170,f285])).
fof(f8170,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X29,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X28,X27,X25)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X25,fun(X27,bool))),X29),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26))),s('type.list.list'(X27),X28))))) )),
  inference(superposition,[],[f345,f285])).
fof(f8635,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))),s('type.list.list'(X58),X59)))) | ~p(s(bool,happ(s(fun(X58,bool),happ(s(fun(X54,fun(X58,bool)),happ(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)))),s(X54,'const.list.EL_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))))),s(X58,'const.list.EL_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.list.list'(X58),X59)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))) )),
  inference(forward_demodulation,[],[f8634,f324])).
fof(f8634,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (~p(s(bool,happ(s(fun(X58,bool),happ(s(fun(X54,fun(X58,bool)),happ(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)))),s(X54,'const.list.EL_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))))),s(X58,'const.list.EL_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.list.list'(X58),X59)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57))))),s('type.list.list'(X58),X59))))) )),
  inference(forward_demodulation,[],[f8596,f324])).
fof(f8596,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))) | ~p(s(bool,happ(s(fun(X58,bool),happ(s(fun(X54,fun(X58,bool)),happ(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)))),s(X54,'const.list.EL_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57))))))))),s(X58,'const.list.EL_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.list.list'(X58),X59)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57))))),s('type.list.list'(X58),X59))))) )),
  inference(superposition,[],[f346,f324])).
fof(f8629,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))),s('type.list.list'(X33),X34)))) | ~p(s(bool,happ(s(fun(X33,bool),happ(s(fun(X30,fun(X33,bool)),happ(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)))),s(X30,'const.list.EL_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))))),s(X33,'const.list.EL_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.list.list'(X33),X34)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))) )),
  inference(forward_demodulation,[],[f8628,f295])).
fof(f8628,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (~p(s(bool,happ(s(fun(X33,bool),happ(s(fun(X30,fun(X33,bool)),happ(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)))),s(X30,'const.list.EL_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))))),s(X33,'const.list.EL_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.list.list'(X33),X34)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32))),s('type.list.list'(X33),X34))))) )),
  inference(forward_demodulation,[],[f8593,f295])).
fof(f8593,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))) | ~p(s(bool,happ(s(fun(X33,bool),happ(s(fun(X30,fun(X33,bool)),happ(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)))),s(X30,'const.list.EL_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32))))))),s(X33,'const.list.EL_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.list.list'(X33),X34)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32))),s('type.list.list'(X33),X34))))) )),
  inference(superposition,[],[f346,f295])).
fof(f8217,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))),s('type.list.list'(X58),X59)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))) )),
  inference(forward_demodulation,[],[f8216,f324])).
fof(f8216,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57))))),s('type.list.list'(X58),X59))))) )),
  inference(forward_demodulation,[],[f8174,f324])).
fof(f8174,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X60,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X59,X58,X54)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X54,fun(X58,bool))),X60),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57))))),s('type.list.list'(X58),X59))))) )),
  inference(superposition,[],[f345,f324])).
fof(f8211,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))),s('type.list.list'(X33),X34)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))) )),
  inference(forward_demodulation,[],[f8210,f295])).
fof(f8210,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32))),s('type.list.list'(X33),X34))))) )),
  inference(forward_demodulation,[],[f8171,f295])).
fof(f8171,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X35,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X34,X33,X30)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X30,fun(X33,bool))),X35),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32))),s('type.list.list'(X33),X34))))) )),
  inference(superposition,[],[f345,f295])).
fof(f8598,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X6))))) | ~p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X4,fun(X7,bool)),happ(s(fun('type.num.num',fun(X4,fun(X7,bool))),X9),s('type.num.num',sK22(X9,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X8,X7,X4)))),s(X4,'const.list.EL_2'(s('type.num.num',sK22(X9,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X8,X7,X4)),s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6))))))),s(X7,'const.list.EL_2'(s('type.num.num',sK22(X9,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X8,X7,X4)),s('type.list.list'(X7),X8)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X4,fun(X7,bool))),X9),s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6))),s('type.list.list'(X7),X8))))) )),
  inference(superposition,[],[f346,f294])).
fof(f8537,plain,(
  ( ! [X6,X10,X8,X7,X5,X11,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X7)))))))) | p(s(bool,happ(s(fun(X9,bool),happ(s(fun(X5,fun(X9,bool)),happ(s(fun('type.num.num',fun(X5,fun(X9,bool))),X10),s('type.num.num',X8))),s(X5,'const.list.EL_2'(s('type.num.num',X8),s('type.list.list'(X5),'const.list.CONS_2'(s(X5,X6),s('type.list.list'(X5),X7))))))),s(X9,'const.list.EL_2'(s('type.num.num',X8),s('type.list.list'(X9),X11)))))) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X5,fun(X9,bool))),X10),s('type.list.list'(X5),'const.list.CONS_2'(s(X5,X6),s('type.list.list'(X5),X7))),s('type.list.list'(X9),X11))))) )),
  inference(superposition,[],[f344,f294])).
fof(f8221,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X9,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X8,X7,X4)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X6)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X6))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X4,fun(X7,bool))),X9),s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6))),s('type.list.list'(X7),X8))))) )),
  inference(forward_demodulation,[],[f8176,f294])).
fof(f8176,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X6))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X9,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X8,X7,X4)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X4,fun(X7,bool))),X9),s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6))),s('type.list.list'(X7),X8))))) )),
  inference(superposition,[],[f345,f294])).
fof(f8633,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))),s('type.list.list'(X51),X52)))) | ~p(s(bool,happ(s(fun(X51,bool),happ(s(fun(X45,fun(X51,bool)),happ(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)))),s(X45,'const.list.EL_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))))),s(X51,'const.list.EL_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.list.list'(X51),X52)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))) )),
  inference(forward_demodulation,[],[f8632,f364])).
fof(f8632,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (~p(s(bool,happ(s(fun(X51,bool),happ(s(fun(X45,fun(X51,bool)),happ(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)))),s(X45,'const.list.EL_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))))),s(X51,'const.list.EL_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.list.list'(X51),X52)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50))),s('type.list.list'(X51),X52))))) )),
  inference(forward_demodulation,[],[f8595,f364])).
fof(f8595,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))) | ~p(s(bool,happ(s(fun(X51,bool),happ(s(fun(X45,fun(X51,bool)),happ(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)))),s(X45,'const.list.EL_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50))))))),s(X51,'const.list.EL_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.list.list'(X51),X52)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50))),s('type.list.list'(X51),X52))))) )),
  inference(superposition,[],[f346,f364])).
fof(f8631,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))),s('type.list.list'(X42),X43)))) | ~p(s(bool,happ(s(fun(X42,bool),happ(s(fun(X36,fun(X42,bool)),happ(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)))),s(X36,'const.list.EL_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))))),s(X42,'const.list.EL_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.list.list'(X42),X43)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))) )),
  inference(forward_demodulation,[],[f8630,f363])).
fof(f8630,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (~p(s(bool,happ(s(fun(X42,bool),happ(s(fun(X36,fun(X42,bool)),happ(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)))),s(X36,'const.list.EL_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))))),s(X42,'const.list.EL_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.list.list'(X42),X43)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41))))),s('type.list.list'(X42),X43))))) )),
  inference(forward_demodulation,[],[f8594,f363])).
fof(f8594,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))) | ~p(s(bool,happ(s(fun(X42,bool),happ(s(fun(X36,fun(X42,bool)),happ(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)))),s(X36,'const.list.EL_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41))))))))),s(X42,'const.list.EL_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.list.list'(X42),X43)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41))))),s('type.list.list'(X42),X43))))) )),
  inference(superposition,[],[f346,f363])).
fof(f8215,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))),s('type.list.list'(X51),X52)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))) )),
  inference(forward_demodulation,[],[f8214,f364])).
fof(f8214,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50))),s('type.list.list'(X51),X52))))) )),
  inference(forward_demodulation,[],[f8173,f364])).
fof(f8173,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X53,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X52,X51,X45)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X45,fun(X51,bool))),X53),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50))),s('type.list.list'(X51),X52))))) )),
  inference(superposition,[],[f345,f364])).
fof(f8213,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))),s('type.list.list'(X42),X43)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))) )),
  inference(forward_demodulation,[],[f8212,f363])).
fof(f8212,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41))))),s('type.list.list'(X42),X43))))) )),
  inference(forward_demodulation,[],[f8172,f363])).
fof(f8172,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X44,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X43,X42,X36)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X36,fun(X42,bool))),X44),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41))))),s('type.list.list'(X42),X43))))) )),
  inference(superposition,[],[f345,f363])).
fof(f8612,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.num.num',fun(X1,fun(X0,bool))),X3),s('type.num.num',sK22(X3,X2,'const.list.NIL_0',X0,X1)))),s(X1,'const.list.EL_2'(s('type.num.num',sK22(X3,X2,'const.list.NIL_0',X0,X1)),s('type.list.list'(X1),X2))))),s(X0,'const.list.EL_2'(s('type.num.num',sK22(X3,X2,'const.list.NIL_0',X0,X1)),s('type.list.list'(X0),'const.list.NIL_0')))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X1,fun(X0,bool))),X3),s('type.list.list'(X1),X2),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f346,f241])).
fof(f8190,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X3,X2,'const.list.NIL_0',X0,X1)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X1,fun(X0,bool))),X3),s('type.list.list'(X1),X2),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f345,f241])).
fof(f8652,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X51,fun(X45,bool))),X53),s('type.list.list'(X51),X52),s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))) | ~p(s(bool,happ(s(fun(X45,bool),happ(s(fun(X51,fun(X45,bool)),happ(s(fun('type.num.num',fun(X51,fun(X45,bool))),X53),s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)))),s(X51,'const.list.EL_2'(s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)),s('type.list.list'(X51),X52))))),s(X45,'const.list.EL_2'(s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)),s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))) )),
  inference(forward_demodulation,[],[f8651,f364])).
fof(f8651,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (~p(s(bool,happ(s(fun(X45,bool),happ(s(fun(X51,fun(X45,bool)),happ(s(fun('type.num.num',fun(X51,fun(X45,bool))),X53),s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)))),s(X51,'const.list.EL_2'(s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)),s('type.list.list'(X51),X52))))),s(X45,'const.list.EL_2'(s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)),s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X51,fun(X45,bool))),X53),s('type.list.list'(X51),X52),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50))))))) )),
  inference(forward_demodulation,[],[f8610,f364])).
fof(f8610,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))) | ~p(s(bool,happ(s(fun(X45,bool),happ(s(fun(X51,fun(X45,bool)),happ(s(fun('type.num.num',fun(X51,fun(X45,bool))),X53),s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)))),s(X51,'const.list.EL_2'(s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)),s('type.list.list'(X51),X52))))),s(X45,'const.list.EL_2'(s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X51,fun(X45,bool))),X53),s('type.list.list'(X51),X52),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50))))))) )),
  inference(superposition,[],[f346,f364])).
fof(f8650,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X42,fun(X36,bool))),X44),s('type.list.list'(X42),X43),s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))) | ~p(s(bool,happ(s(fun(X36,bool),happ(s(fun(X42,fun(X36,bool)),happ(s(fun('type.num.num',fun(X42,fun(X36,bool))),X44),s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)))),s(X42,'const.list.EL_2'(s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)),s('type.list.list'(X42),X43))))),s(X36,'const.list.EL_2'(s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)),s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))) )),
  inference(forward_demodulation,[],[f8649,f363])).
fof(f8649,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (~p(s(bool,happ(s(fun(X36,bool),happ(s(fun(X42,fun(X36,bool)),happ(s(fun('type.num.num',fun(X42,fun(X36,bool))),X44),s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)))),s(X42,'const.list.EL_2'(s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)),s('type.list.list'(X42),X43))))),s(X36,'const.list.EL_2'(s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)),s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X42,fun(X36,bool))),X44),s('type.list.list'(X42),X43),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41))))))))) )),
  inference(forward_demodulation,[],[f8609,f363])).
fof(f8609,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))) | ~p(s(bool,happ(s(fun(X36,bool),happ(s(fun(X42,fun(X36,bool)),happ(s(fun('type.num.num',fun(X42,fun(X36,bool))),X44),s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)))),s(X42,'const.list.EL_2'(s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)),s('type.list.list'(X42),X43))))),s(X36,'const.list.EL_2'(s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X42,fun(X36,bool))),X44),s('type.list.list'(X42),X43),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41))))))))) )),
  inference(superposition,[],[f346,f363])).
fof(f8231,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X51,fun(X45,bool))),X53),s('type.list.list'(X51),X52),s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))))))) )),
  inference(forward_demodulation,[],[f8188,f364])).
fof(f8188,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X53,X51,X49] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X45),'const.combin.o_3'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49),s(X46,X50))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X53,X52,happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50)),X45,X51)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X51,fun(X45,bool))),X53),s('type.list.list'(X51),X52),s('type.list.list'(X45),happ(s(fun(X46,'type.list.list'(X45)),'const.combin.o_2'(s(fun(X47,'type.list.list'(X45)),X48),s(fun(X46,X47),X49))),s(X46,X50))))))) )),
  inference(superposition,[],[f345,f364])).
fof(f8230,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X42,fun(X36,bool))),X44),s('type.list.list'(X42),X43),s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))))))) )),
  inference(forward_demodulation,[],[f8187,f363])).
fof(f8187,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.combin.o_3'(s(fun(X37,'type.list.list'(X36)),X38),s(fun(X39,X37),X40),s(X39,X41))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X44,X43,happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41)))),X36,X42)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X42,fun(X36,bool))),X44),s('type.list.list'(X42),X43),s('type.list.list'(X36),happ(s(fun(X37,'type.list.list'(X36)),X38),s(X37,happ(s(fun(X39,X37),X40),s(X39,X41))))))))) )),
  inference(superposition,[],[f345,f363])).
fof(f8654,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X58,fun(X54,bool))),X60),s('type.list.list'(X58),X59),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))) | ~p(s(bool,happ(s(fun(X54,bool),happ(s(fun(X58,fun(X54,bool)),happ(s(fun('type.num.num',fun(X58,fun(X54,bool))),X60),s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)))),s(X58,'const.list.EL_2'(s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)),s('type.list.list'(X58),X59))))),s(X54,'const.list.EL_2'(s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))) )),
  inference(forward_demodulation,[],[f8653,f324])).
fof(f8653,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (~p(s(bool,happ(s(fun(X54,bool),happ(s(fun(X58,fun(X54,bool)),happ(s(fun('type.num.num',fun(X58,fun(X54,bool))),X60),s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)))),s(X58,'const.list.EL_2'(s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)),s('type.list.list'(X58),X59))))),s(X54,'const.list.EL_2'(s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X58,fun(X54,bool))),X60),s('type.list.list'(X58),X59),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57))))))))) )),
  inference(forward_demodulation,[],[f8611,f324])).
fof(f8611,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))) | ~p(s(bool,happ(s(fun(X54,bool),happ(s(fun(X58,fun(X54,bool)),happ(s(fun('type.num.num',fun(X58,fun(X54,bool))),X60),s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)))),s(X58,'const.list.EL_2'(s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)),s('type.list.list'(X58),X59))))),s(X54,'const.list.EL_2'(s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X58,fun(X54,bool))),X60),s('type.list.list'(X58),X59),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57))))))))) )),
  inference(superposition,[],[f346,f324])).
fof(f8648,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X33,fun(X30,bool))),X35),s('type.list.list'(X33),X34),s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))) | ~p(s(bool,happ(s(fun(X30,bool),happ(s(fun(X33,fun(X30,bool)),happ(s(fun('type.num.num',fun(X33,fun(X30,bool))),X35),s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)))),s(X33,'const.list.EL_2'(s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)),s('type.list.list'(X33),X34))))),s(X30,'const.list.EL_2'(s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)),s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))) )),
  inference(forward_demodulation,[],[f8647,f295])).
fof(f8647,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (~p(s(bool,happ(s(fun(X30,bool),happ(s(fun(X33,fun(X30,bool)),happ(s(fun('type.num.num',fun(X33,fun(X30,bool))),X35),s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)))),s(X33,'const.list.EL_2'(s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)),s('type.list.list'(X33),X34))))),s(X30,'const.list.EL_2'(s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)),s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X33,fun(X30,bool))),X35),s('type.list.list'(X33),X34),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32))))))) )),
  inference(forward_demodulation,[],[f8608,f295])).
fof(f8608,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))) | ~p(s(bool,happ(s(fun(X30,bool),happ(s(fun(X33,fun(X30,bool)),happ(s(fun('type.num.num',fun(X33,fun(X30,bool))),X35),s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)))),s(X33,'const.list.EL_2'(s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)),s('type.list.list'(X33),X34))))),s(X30,'const.list.EL_2'(s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X33,fun(X30,bool))),X35),s('type.list.list'(X33),X34),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32))))))) )),
  inference(superposition,[],[f346,f295])).
fof(f8232,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X58,fun(X54,bool))),X60),s('type.list.list'(X58),X59),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))))))) )),
  inference(forward_demodulation,[],[f8189,f324])).
fof(f8189,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.list.list'(X54)),X57))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X60,X59,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57)))),X54,X58)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X58,fun(X54,bool))),X60),s('type.list.list'(X58),X59),s('type.list.list'(X54),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))),s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),X56),s('type.list.list'('type.list.list'(X54)),X57))))))))) )),
  inference(superposition,[],[f345,f324])).
fof(f8229,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X33,fun(X30,bool))),X35),s('type.list.list'(X33),X34),s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))))))) )),
  inference(forward_demodulation,[],[f8186,f295])).
fof(f8186,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'('type.list.list'(X30)),X32))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X35,X34,happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32)),X30,X33)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X33),X34)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X33,fun(X30,bool))),X35),s('type.list.list'(X33),X34),s('type.list.list'(X30),happ(s(fun('type.list.list'('type.list.list'(X30)),'type.list.list'(X30)),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'('type.list.list'(X30)),X32))))))) )),
  inference(superposition,[],[f345,f295])).
fof(f8601,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X2,fun(X0,bool)),happ(s(fun('type.num.num',fun(X2,fun(X0,bool))),X4),s('type.num.num',sK22(X4,X3,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X0,X2)))),s(X2,'const.list.EL_2'(s('type.num.num',sK22(X4,X3,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X0,X2)),s('type.list.list'(X2),X3))))),s(X0,'const.list.EL_2'(s('type.num.num',sK22(X4,X3,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X0,X2)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X2,fun(X0,bool))),X4),s('type.list.list'(X2),X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f346,f286])).
fof(f8179,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X4,X3,'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))),X0,X2)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X2,fun(X0,bool))),X4),s('type.list.list'(X2),X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f345,f286])).
fof(f8613,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X6))))) | ~p(s(bool,happ(s(fun(X4,bool),happ(s(fun(X7,fun(X4,bool)),happ(s(fun('type.num.num',fun(X7,fun(X4,bool))),X9),s('type.num.num',sK22(X9,X8,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X4,X7)))),s(X7,'const.list.EL_2'(s('type.num.num',sK22(X9,X8,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X4,X7)),s('type.list.list'(X7),X8))))),s(X4,'const.list.EL_2'(s('type.num.num',sK22(X9,X8,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X4,X7)),s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X7,fun(X4,bool))),X9),s('type.list.list'(X7),X8),s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6))))))) )),
  inference(superposition,[],[f346,f294])).
fof(f8191,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X6))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X9,X8,'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6)),X4,X7)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X7,fun(X4,bool))),X9),s('type.list.list'(X7),X8),s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X5),s('type.list.list'(X4),X6))))))) )),
  inference(superposition,[],[f345,f294])).
fof(f9525,plain,(
  ( ! [X389,X387,X388,X390,X386] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X388,fun(X386,bool))),X390),s('type.list.list'(X388),X389),s('type.list.list'(X386),'const.list.HD_1'(s('type.list.list'('type.list.list'(X386)),X387)))))) | ~p(s(bool,happ(s(fun(X386,bool),happ(s(fun(X388,fun(X386,bool)),happ(s(fun('type.num.num',fun(X388,fun(X386,bool))),X390),s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)))),s(X388,'const.list.EL_2'(s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)),s('type.list.list'(X388),X389))))),s(X386,'const.list.EL_2'(s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)),s('type.list.list'(X386),'const.list.HD_1'(s('type.list.list'('type.list.list'(X386)),X387)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X388),X389))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X386),'const.list.HD_1'(s('type.list.list'('type.list.list'(X386)),X387)))))) )),
  inference(forward_demodulation,[],[f9524,f1077])).
fof(f9524,plain,(
  ( ! [X389,X387,X388,X390,X386] : (~p(s(bool,happ(s(fun(X386,bool),happ(s(fun(X388,fun(X386,bool)),happ(s(fun('type.num.num',fun(X388,fun(X386,bool))),X390),s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)))),s(X388,'const.list.EL_2'(s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)),s('type.list.list'(X388),X389))))),s(X386,'const.list.EL_2'(s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)),s('type.list.list'(X386),'const.list.HD_1'(s('type.list.list'('type.list.list'(X386)),X387)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X388),X389))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X386),'const.list.HD_1'(s('type.list.list'('type.list.list'(X386)),X387))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X388,fun(X386,bool))),X390),s('type.list.list'(X388),X389),s('type.list.list'(X386),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387))))))) )),
  inference(forward_demodulation,[],[f9332,f1077])).
fof(f9332,plain,(
  ( ! [X389,X387,X388,X390,X386] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X388),X389))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X386),'const.list.HD_1'(s('type.list.list'('type.list.list'(X386)),X387))))) | ~p(s(bool,happ(s(fun(X386,bool),happ(s(fun(X388,fun(X386,bool)),happ(s(fun('type.num.num',fun(X388,fun(X386,bool))),X390),s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)))),s(X388,'const.list.EL_2'(s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)),s('type.list.list'(X388),X389))))),s(X386,'const.list.EL_2'(s('type.num.num',sK22(X390,X389,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)),X386,X388)),s('type.list.list'(X386),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X388,fun(X386,bool))),X390),s('type.list.list'(X388),X389),s('type.list.list'(X386),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X386)),X387))))))) )),
  inference(superposition,[],[f346,f1077])).
fof(f9521,plain,(
  ( ! [X377,X379,X380,X376,X378] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X378,fun(X376,bool))),X380),s('type.list.list'(X378),X379),s('type.list.list'(X376),'const.list.HD_1'(s('type.list.list'('type.list.list'(X376)),X377)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X378),X379))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X376),'const.list.HD_1'(s('type.list.list'('type.list.list'(X376)),X377))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X380,X379,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X376)),X377)),X376,X378)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X378),X379))))))) )),
  inference(forward_demodulation,[],[f9330,f1077])).
fof(f9330,plain,(
  ( ! [X377,X379,X380,X376,X378] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X378),X379))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X376),'const.list.HD_1'(s('type.list.list'('type.list.list'(X376)),X377))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X380,X379,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X376)),X377)),X376,X378)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X378),X379)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X378,fun(X376,bool))),X380),s('type.list.list'(X378),X379),s('type.list.list'(X376),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X376)),X377))))))) )),
  inference(superposition,[],[f345,f1077])).
fof(f8646,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X27,fun(X25,bool))),X29),s('type.list.list'(X27),X28),s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))) | ~p(s(bool,happ(s(fun(X25,bool),happ(s(fun(X27,fun(X25,bool)),happ(s(fun('type.num.num',fun(X27,fun(X25,bool))),X29),s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)))),s(X27,'const.list.EL_2'(s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)),s('type.list.list'(X27),X28))))),s(X25,'const.list.EL_2'(s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)),s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))) )),
  inference(forward_demodulation,[],[f8645,f285])).
fof(f8645,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~p(s(bool,happ(s(fun(X25,bool),happ(s(fun(X27,fun(X25,bool)),happ(s(fun('type.num.num',fun(X27,fun(X25,bool))),X29),s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)))),s(X27,'const.list.EL_2'(s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)),s('type.list.list'(X27),X28))))),s(X25,'const.list.EL_2'(s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)),s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X27,fun(X25,bool))),X29),s('type.list.list'(X27),X28),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26))))))) )),
  inference(forward_demodulation,[],[f8607,f285])).
fof(f8607,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))) | ~p(s(bool,happ(s(fun(X25,bool),happ(s(fun(X27,fun(X25,bool)),happ(s(fun('type.num.num',fun(X27,fun(X25,bool))),X29),s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)))),s(X27,'const.list.EL_2'(s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)),s('type.list.list'(X27),X28))))),s(X25,'const.list.EL_2'(s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X27,fun(X25,bool))),X29),s('type.list.list'(X27),X28),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26))))))) )),
  inference(superposition,[],[f346,f285])).
fof(f8228,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X27,fun(X25,bool))),X29),s('type.list.list'(X27),X28),s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))))))) )),
  inference(forward_demodulation,[],[f8185,f285])).
fof(f8185,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.list.HD_1'(s('type.list.list'('type.list.list'(X25)),X26))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X29,X28,happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26)),X25,X27)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X27),X28)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X27,fun(X25,bool))),X29),s('type.list.list'(X27),X28),s('type.list.list'(X25),happ(s(fun('type.list.list'('type.list.list'(X25)),'type.list.list'(X25)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X25)),X26))))))) )),
  inference(superposition,[],[f345,f285])).
fof(f8640,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X8,fun(bool,bool))),X10),s('type.list.list'(X8),X9),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X8,fun(bool,bool)),happ(s(fun('type.num.num',fun(X8,fun(bool,bool))),X10),s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)))),s(X8,'const.list.EL_2'(s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)),s('type.list.list'(X8),X9))))),s(bool,'const.list.EL_2'(s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(forward_demodulation,[],[f8639,f6258])).
fof(f8639,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X8,fun(bool,bool)),happ(s(fun('type.num.num',fun(X8,fun(bool,bool))),X10),s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)))),s(X8,'const.list.EL_2'(s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)),s('type.list.list'(X8),X9))))),s(bool,'const.list.EL_2'(s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X8,fun(bool,bool))),X10),s('type.list.list'(X8),X9),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(forward_demodulation,[],[f8603,f6258])).
fof(f8603,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X8,fun(bool,bool)),happ(s(fun('type.num.num',fun(X8,fun(bool,bool))),X10),s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)))),s(X8,'const.list.EL_2'(s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)),s('type.list.list'(X8),X9))))),s(bool,'const.list.EL_2'(s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X8,fun(bool,bool))),X10),s('type.list.list'(X8),X9),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(superposition,[],[f346,f6258])).
fof(f8224,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X8,fun(bool,bool))),X10),s('type.list.list'(X8),X9),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))))))) ) | $spl14),
  inference(forward_demodulation,[],[f8181,f6258])).
fof(f8181,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X10,X9,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool,X8)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X8,fun(bool,bool))),X10),s('type.list.list'(X8),X9),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(superposition,[],[f345,f6258])).
fof(f8621,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))),s('type.list.list'(X8),X9)))) | ~p(s(bool,happ(s(fun(X8,bool),happ(s(fun(bool,fun(X8,bool)),happ(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)))),s(bool,'const.list.EL_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))))),s(X8,'const.list.EL_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.list.list'(X8),X9)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(forward_demodulation,[],[f8620,f6258])).
fof(f8620,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(X8,bool),happ(s(fun(bool,fun(X8,bool)),happ(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)))),s(bool,'const.list.EL_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))))),s(X8,'const.list.EL_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.list.list'(X8),X9)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))),s('type.list.list'(X8),X9))))) ) | $spl14),
  inference(forward_demodulation,[],[f8588,f6258])).
fof(f8588,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | ~p(s(bool,happ(s(fun(X8,bool),happ(s(fun(bool,fun(X8,bool)),happ(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)))),s(bool,'const.list.EL_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))))))),s(X8,'const.list.EL_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.list.list'(X8),X9)))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))),s('type.list.list'(X8),X9))))) ) | $spl14),
  inference(superposition,[],[f346,f6258])).
fof(f8203,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))),s('type.list.list'(X8),X9)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(forward_demodulation,[],[f8202,f6258])).
fof(f8202,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))),s('type.list.list'(X8),X9))))) ) | $spl14),
  inference(forward_demodulation,[],[f8166,f6258])).
fof(f8166,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK22(X10,sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X9,X8,bool)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)))))))) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(bool,fun(X8,bool))),X10),s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))),s('type.list.list'(X8),X9))))) ) | $spl14),
  inference(superposition,[],[f345,f6258])).
fof(f299,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X2)) | ! [X6] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | (p(s(bool,X2)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))))) & (! [X4] : (~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | (p(s(bool,X2)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8])],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X2)) | ! [X6] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ? [X5] : (p(s(bool,X2)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))))) & (! [X4] : (~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | (p(s(bool,X2)) & ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X2)) | ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ? [X4] : (p(s(bool,X2)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))))) & (! [X4] : (~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | (p(s(bool,X2)) & ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(flattening,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X2)) | ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | ? [X4] : (p(s(bool,X2)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))))) & (! [X4] : (~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | (p(s(bool,X2)) & ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) & ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> ? [X4] : (p(s(bool,X2)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0] : ! [X1,X2] : ((p(s(bool,X2)) & ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> ? [X4] : (p(s(bool,X2)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X6] : ! [X14,X15] : ((p(s(bool,X15)) & ? [X8] : p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8))))) <=> ? [X8] : (p(s(bool,X15)) & p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8))))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.PULL_EXISTS|split|2')).
fof(f301,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f190])).
fof(f302,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f194])).
fof(f194,plain,(
  ! [X0,X1,X2] : ((! [X6] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK10(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : ((! [X6] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2)) | ? [X5] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2] : ((! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2)) | ? [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2] : (((! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | ? [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2] : ((? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> ? [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0] : ! [X1,X2] : ((? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> ? [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6] : ! [X14,X15] : ((? [X8] : p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8)))) & p(s(bool,X15))) <=> ? [X8] : (p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8)))) & p(s(bool,X15))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.PULL_EXISTS|split|1')).
fof(f304,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK10(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f194])).
fof(f306,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : (((p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))) & ~p(s(bool,X2))) | ! [X5] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | p(s(bool,X2)))) & ((p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK12(X2,X1,X0))))) & ~p(s(bool,X2))) | ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12])],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2] : (((? [X6] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) & ~p(s(bool,X2))) | ! [X5] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | p(s(bool,X2)))) & (? [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & ~p(s(bool,X2))) | ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2))))),
  inference(rectify,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : (((? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & ~p(s(bool,X2))) | ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,X2)))) & (? [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & ~p(s(bool,X2))) | ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2))))),
  inference(flattening,[],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2] : (((? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & ~p(s(bool,X2))) | ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,X2)))) & (? [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & ~p(s(bool,X2))) | (! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2] : ((! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,X2))))),
  inference(ennf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2] : ((? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) => p(s(bool,X2))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) => p(s(bool,X2))))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0] : ! [X1,X2] : ((? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) => p(s(bool,X2))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) => p(s(bool,X2))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X14,X15] : ((? [X8] : p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8)))) => p(s(bool,X15))) <=> ! [X8] : (p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8)))) => p(s(bool,X15))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.PULL_EXISTS|split|0')).
fof(f308,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK12(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f198])).
fof(f310,plain,(
  ( ! [X2,X0,X7,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK13(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK13(X2,X1,X0)))))) | (! [X7] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) & ! [X6] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK14(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK15(X2,X1,X0))))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15])],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2] : ((? [X8] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8))))) | (! [X7] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) & ! [X6] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))))) & (? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & ((? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f105])).
fof(f105,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X14,X15] : (! [X8] : (p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8)))) & p(s(bool,happ(s(fun(X6,bool),X15),s(X6,X8))))) <=> (! [X8] : p(s(bool,happ(s(fun(X6,bool),X14),s(X6,X8)))) & ! [X8] : p(s(bool,happ(s(fun(X6,bool),X15),s(X6,X8))))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.bool.FORALL_AND_THM')).
fof(f311,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK13(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f312,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK15(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK14(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f313,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK15(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK14(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f315,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK16(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f205])).
fof(f316,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f205])).
fof(f322,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK19(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f212])).
fof(f791,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X4)))) | s(X1,X4) = s(X1,sK16(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1))) )),
  inference(superposition,[],[f314,f293])).
fof(f808,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X1) = s(X0,sK16('const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))),X3,X0)) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f793,f293])).
fof(f793,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X1)))) | s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s(X0,sK16('const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))),X3,X0))) )),
  inference(superposition,[],[f314,f293])).
fof(f878,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X4)))) | s(X1,X4) = s(X1,sK19(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1))) )),
  inference(superposition,[],[f322,f293])).
fof(f898,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X1) = s(X0,sK19('const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))),X3,X0)) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f880,f293])).
fof(f880,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X1)))) | s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s(X0,sK19('const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))),X3,X0))) )),
  inference(superposition,[],[f322,f293])).
fof(f1696,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X4)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK16(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1)))))) )),
  inference(forward_demodulation,[],[f1681,f293])).
fof(f1681,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK16(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1))))) | p(s(bool,happ(s(fun(X1,bool),'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3))))),s(X1,X4))))) )),
  inference(superposition,[],[f315,f293])).
fof(f1734,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X4)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK19(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1)))))) )),
  inference(forward_demodulation,[],[f1719,f293])).
fof(f1719,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK19(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1))))) | ~p(s(bool,happ(s(fun(X1,bool),'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3))))),s(X1,X4))))) )),
  inference(superposition,[],[f323,f293])).
fof(f1966,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X29)) | ~p(s(bool,happ(s(fun(X31,bool),X32),s(X31,X33)))) | p(s(bool,happ(s(fun(X31,bool),X32),s(X31,sK7('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X29),s('type.list.list'(bool),X30)))),X32,X31)))))) )),
  inference(superposition,[],[f299,f293])).
fof(f1967,plain,(
  ( ! [X37,X35,X36,X34] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X34)))) | ~p(s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) | p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK7(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X34)),X36,X35)))))) )),
  inference(superposition,[],[f299,f285])).
fof(f1968,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X38),s('type.list.list'(bool),X39)))) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42)))) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK7(happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X38))),s('type.list.list'(bool),X39)),X41,X40)))))) )),
  inference(superposition,[],[f299,f295])).
fof(f2048,plain,(
  ( ! [X37,X35,X38,X36,X34] : (~p(s(bool,X34)) | ~p(s(bool,happ(s(fun(X36,bool),X37),s(X36,X38)))) | p(s(bool,happ(s(fun(X36,bool),X37),s(X36,sK8('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X34),s('type.list.list'(bool),X35)))),X37,X36)))))) )),
  inference(superposition,[],[f301,f293])).
fof(f2049,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X39)))) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42)))) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK8(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X39)),X41,X40)))))) )),
  inference(superposition,[],[f301,f285])).
fof(f2050,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X43),s('type.list.list'(bool),X44)))) | ~p(s(bool,happ(s(fun(X45,bool),X46),s(X45,X47)))) | p(s(bool,happ(s(fun(X45,bool),X46),s(X45,sK8(happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X43))),s('type.list.list'(bool),X44)),X46,X45)))))) )),
  inference(superposition,[],[f301,f295])).
fof(f2087,plain,(
  ( ! [X37,X35,X38,X36,X34] : (~p(s(bool,X34)) | p(s(bool,happ(s(fun(X36,bool),X37),s(X36,sK9('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X34),s('type.list.list'(bool),X35)))),X37,X36))))) | ~p(s(bool,happ(s(fun(X36,bool),X37),s(X36,X38))))) )),
  inference(superposition,[],[f302,f293])).
fof(f2088,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X39)))) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK9(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X39)),X41,X40))))) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42))))) )),
  inference(superposition,[],[f302,f285])).
fof(f2089,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X43),s('type.list.list'(bool),X44)))) | p(s(bool,happ(s(fun(X45,bool),X46),s(X45,sK9(happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X43))),s('type.list.list'(bool),X44)),X46,X45))))) | ~p(s(bool,happ(s(fun(X45,bool),X46),s(X45,X47))))) )),
  inference(superposition,[],[f302,f295])).
fof(f2193,plain,(
  ( ! [X39,X43,X41,X42,X40] : (~p(s(bool,X39)) | p(s(bool,happ(s(fun(X41,bool),X42),s(X41,sK10('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X39),s('type.list.list'(bool),X40)))),X42,X41))))) | ~p(s(bool,happ(s(fun(X41,bool),X42),s(X41,X43))))) )),
  inference(superposition,[],[f304,f293])).
fof(f2194,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X44)))) | p(s(bool,happ(s(fun(X45,bool),X46),s(X45,sK10(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X44)),X46,X45))))) | ~p(s(bool,happ(s(fun(X45,bool),X46),s(X45,X47))))) )),
  inference(superposition,[],[f304,f285])).
fof(f2195,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X48),s('type.list.list'(bool),X49)))) | p(s(bool,happ(s(fun(X50,bool),X51),s(X50,sK10(happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X48))),s('type.list.list'(bool),X49)),X51,X50))))) | ~p(s(bool,happ(s(fun(X50,bool),X51),s(X50,X52))))) )),
  inference(superposition,[],[f304,f295])).
fof(f2328,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK11(X6,'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X2))))) | ~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X5)))) | p(s(bool,X6))) )),
  inference(forward_demodulation,[],[f2291,f293])).
fof(f2291,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X5)))) | p(s(bool,X6)) | p(s(bool,happ(s(fun(X2,bool),'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4))))),s(X2,sK11(X6,'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X2)))))) )),
  inference(superposition,[],[f306,f293])).
fof(f2339,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X8)))) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK19(X8,X7,X6))))) )),
  inference(subsumption_resolution,[],[f1728,f240])).
fof(f1728,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X8)))) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK19(X8,X7,X6))))) )),
  inference(superposition,[],[f323,f243])).
fof(f2422,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK12(X6,'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X2))))) | ~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X5)))) | p(s(bool,X6))) )),
  inference(forward_demodulation,[],[f2402,f293])).
fof(f2402,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X5)))) | p(s(bool,X6)) | p(s(bool,happ(s(fun(X2,bool),'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4))))),s(X2,sK12(X6,'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X2)))))) )),
  inference(superposition,[],[f308,f293])).
fof(f2505,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1,X0)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f2479,f238])).
fof(f2479,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1,X0)))))) ) | $spl14),
  inference(superposition,[],[f299,f2381])).
fof(f2506,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK8('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X4,X3)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f2480,f238])).
fof(f2480,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK8('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X4,X3)))))) ) | $spl14),
  inference(superposition,[],[f301,f2381])).
fof(f2507,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK9('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X7,X6))))) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))))) ) | $spl14),
  inference(subsumption_resolution,[],[f2481,f238])).
fof(f2481,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK9('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X7,X6))))) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))))) ) | $spl14),
  inference(superposition,[],[f302,f2381])).
fof(f2508,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,happ(s(fun(X9,bool),X10),s(X9,sK10('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X10,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X10),s(X9,X11))))) ) | $spl14),
  inference(subsumption_resolution,[],[f2482,f238])).
fof(f2482,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X9,bool),X10),s(X9,sK10('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X10,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X10),s(X9,X11))))) ) | $spl14),
  inference(superposition,[],[f304,f2381])).
fof(f2542,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK17(X6,'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X2))))) | ~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X5)))) | p(s(bool,X6))) )),
  inference(forward_demodulation,[],[f2521,f293])).
fof(f2521,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X5)))) | p(s(bool,X6)) | p(s(bool,happ(s(fun(X2,bool),'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4))))),s(X2,sK17(X6,'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X2)))))) )),
  inference(superposition,[],[f317,f293])).
fof(f2582,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK18(X6,'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X2))))) | ~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X5)))) | p(s(bool,X6))) )),
  inference(forward_demodulation,[],[f2561,f293])).
fof(f2561,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X5)))) | p(s(bool,X6)) | p(s(bool,happ(s(fun(X2,bool),'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4))))),s(X2,sK18(X6,'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X2)))))) )),
  inference(superposition,[],[f319,f293])).
fof(f2649,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X79),s('type.list.list'(bool),X81)))) | ~p(s(bool,happ(s(fun(X82,bool),X83),s(X82,X84)))) | p(s(bool,happ(s(fun(X82,bool),X83),s(X82,sK7('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X79))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X80),s('type.list.list'(bool),X81)))),X83,X82)))))) )),
  inference(superposition,[],[f299,f324])).
fof(f2650,plain,(
  ( ! [X90,X88,X87,X85,X89,X86] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X85),s('type.list.list'(bool),X87)))) | ~p(s(bool,happ(s(fun(X88,bool),X89),s(X88,X90)))) | p(s(bool,happ(s(fun(X88,bool),X89),s(X88,sK8('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X86),s('type.list.list'(bool),X87)))),X89,X88)))))) )),
  inference(superposition,[],[f301,f324])).
fof(f2651,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X91),s('type.list.list'(bool),X93)))) | p(s(bool,happ(s(fun(X94,bool),X95),s(X94,sK9('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X91))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X92),s('type.list.list'(bool),X93)))),X95,X94))))) | ~p(s(bool,happ(s(fun(X94,bool),X95),s(X94,X96))))) )),
  inference(superposition,[],[f302,f324])).
fof(f2652,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X97),s('type.list.list'(bool),X99)))) | p(s(bool,happ(s(fun(X100,bool),X101),s(X100,sK10('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X97))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X98),s('type.list.list'(bool),X99)))),X101,X100))))) | ~p(s(bool,happ(s(fun(X100,bool),X101),s(X100,X102))))) )),
  inference(superposition,[],[f304,f324])).
fof(f3146,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),X8),s(X7,X9)))) | p(s(bool,happ(s(fun(X7,bool),X8),s(X7,sK7('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X8,X7)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f3114,f238])).
fof(f3114,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X7,bool),X8),s(X7,X9)))) | p(s(bool,happ(s(fun(X7,bool),X8),s(X7,sK7('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X8,X7)))))) ) | $spl14),
  inference(superposition,[],[f299,f2605])).
fof(f3147,plain,(
  ( ! [X12,X10,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK8('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X12,X11)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f3115,f238])).
fof(f3115,plain,(
  ( ! [X12,X10,X13,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK8('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X12,X11)))))) ) | $spl14),
  inference(superposition,[],[f301,f2605])).
fof(f3148,plain,(
  ( ! [X14,X17,X15,X16] : (p(s(bool,happ(s(fun(X15,bool),X16),s(X15,sK9('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X16,X15))))) | ~p(s(bool,happ(s(fun(X15,bool),X16),s(X15,X17))))) ) | $spl14),
  inference(subsumption_resolution,[],[f3116,f238])).
fof(f3116,plain,(
  ( ! [X14,X17,X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X15,bool),X16),s(X15,sK9('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X16,X15))))) | ~p(s(bool,happ(s(fun(X15,bool),X16),s(X15,X17))))) ) | $spl14),
  inference(superposition,[],[f302,f2605])).
fof(f3149,plain,(
  ( ! [X21,X19,X20,X18] : (p(s(bool,happ(s(fun(X19,bool),X20),s(X19,sK10('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X20,X19))))) | ~p(s(bool,happ(s(fun(X19,bool),X20),s(X19,X21))))) ) | $spl14),
  inference(subsumption_resolution,[],[f3117,f238])).
fof(f3117,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X19,bool),X20),s(X19,sK10('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X20,X19))))) | ~p(s(bool,happ(s(fun(X19,bool),X20),s(X19,X21))))) ) | $spl14),
  inference(superposition,[],[f304,f2605])).
fof(f3217,plain,(
  ( ! [X142,X140,X138,X143,X141,X139] : (~p(s(bool,'const.combin.o_3'(s(fun(X138,bool),X139),s(fun(X140,X138),X141),s(X140,X142)))) | s(X138,X143) != s(X138,happ(s(fun(X140,X138),X141),s(X140,X142))) | p(s(bool,happ(s(fun(X138,bool),X139),s(X138,X143))))) )),
  inference(superposition,[],[f316,f363])).
fof(f3226,plain,(
  ( ! [X191,X189,X187,X192,X190,X188,X186,X193] : (~p(s(bool,'const.combin.o_3'(s(fun(X186,bool),X187),s(fun(X188,X186),X189),s(X188,X190)))) | ~p(s(bool,happ(s(fun(X191,bool),X192),s(X191,X193)))) | p(s(bool,happ(s(fun(X191,bool),X192),s(X191,sK7(happ(s(fun(X186,bool),X187),s(X186,happ(s(fun(X188,X186),X189),s(X188,X190)))),X192,X191)))))) )),
  inference(superposition,[],[f299,f363])).
fof(f3227,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195,X201] : (~p(s(bool,'const.combin.o_3'(s(fun(X194,bool),X195),s(fun(X196,X194),X197),s(X196,X198)))) | ~p(s(bool,happ(s(fun(X199,bool),X200),s(X199,X201)))) | p(s(bool,happ(s(fun(X199,bool),X200),s(X199,sK8(happ(s(fun(X194,bool),X195),s(X194,happ(s(fun(X196,X194),X197),s(X196,X198)))),X200,X199)))))) )),
  inference(superposition,[],[f301,f363])).
fof(f3228,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203] : (~p(s(bool,'const.combin.o_3'(s(fun(X202,bool),X203),s(fun(X204,X202),X205),s(X204,X206)))) | p(s(bool,happ(s(fun(X207,bool),X208),s(X207,sK9(happ(s(fun(X202,bool),X203),s(X202,happ(s(fun(X204,X202),X205),s(X204,X206)))),X208,X207))))) | ~p(s(bool,happ(s(fun(X207,bool),X208),s(X207,X209))))) )),
  inference(superposition,[],[f302,f363])).
fof(f3229,plain,(
  ( ! [X212,X210,X216,X215,X213,X211,X217,X214] : (~p(s(bool,'const.combin.o_3'(s(fun(X210,bool),X211),s(fun(X212,X210),X213),s(X212,X214)))) | p(s(bool,happ(s(fun(X215,bool),X216),s(X215,sK10(happ(s(fun(X210,bool),X211),s(X210,happ(s(fun(X212,X210),X213),s(X212,X214)))),X216,X215))))) | ~p(s(bool,happ(s(fun(X215,bool),X216),s(X215,X217))))) )),
  inference(superposition,[],[f304,f363])).
fof(f3352,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK7('const.list.HD_1'(s('type.list.list'(bool),sK11(X7,'const.list.HD_0','type.list.list'(bool)))),X9,X8))))) | s(bool,'T_0') = s(bool,X7)) ) | $spl14),
  inference(subsumption_resolution,[],[f3322,f238])).
fof(f3322,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK7('const.list.HD_1'(s('type.list.list'(bool),sK11(X7,'const.list.HD_0','type.list.list'(bool)))),X9,X8))))) | s(bool,'T_0') = s(bool,X7)) ) | $spl14),
  inference(superposition,[],[f299,f2602])).
fof(f3353,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | p(s(bool,happ(s(fun(X12,bool),X13),s(X12,sK8('const.list.HD_1'(s('type.list.list'(bool),sK11(X11,'const.list.HD_0','type.list.list'(bool)))),X13,X12))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl14),
  inference(subsumption_resolution,[],[f3323,f238])).
fof(f3323,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | p(s(bool,happ(s(fun(X12,bool),X13),s(X12,sK8('const.list.HD_1'(s('type.list.list'(bool),sK11(X11,'const.list.HD_0','type.list.list'(bool)))),X13,X12))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl14),
  inference(superposition,[],[f301,f2602])).
fof(f3354,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK9('const.list.HD_1'(s('type.list.list'(bool),sK11(X15,'const.list.HD_0','type.list.list'(bool)))),X17,X16))))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | s(bool,'T_0') = s(bool,X15)) ) | $spl14),
  inference(subsumption_resolution,[],[f3324,f238])).
fof(f3324,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK9('const.list.HD_1'(s('type.list.list'(bool),sK11(X15,'const.list.HD_0','type.list.list'(bool)))),X17,X16))))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | s(bool,'T_0') = s(bool,X15)) ) | $spl14),
  inference(superposition,[],[f302,f2602])).
fof(f3355,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,happ(s(fun(X20,bool),X21),s(X20,sK10('const.list.HD_1'(s('type.list.list'(bool),sK11(X19,'const.list.HD_0','type.list.list'(bool)))),X21,X20))))) | ~p(s(bool,happ(s(fun(X20,bool),X21),s(X20,X22)))) | s(bool,'T_0') = s(bool,X19)) ) | $spl14),
  inference(subsumption_resolution,[],[f3325,f238])).
fof(f3325,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X20,bool),X21),s(X20,sK10('const.list.HD_1'(s('type.list.list'(bool),sK11(X19,'const.list.HD_0','type.list.list'(bool)))),X21,X20))))) | ~p(s(bool,happ(s(fun(X20,bool),X21),s(X20,X22)))) | s(bool,'T_0') = s(bool,X19)) ) | $spl14),
  inference(superposition,[],[f304,f2602])).
fof(f3438,plain,(
  ( ! [X218,X216,X220,X215,X213,X219,X217,X214] : (~p(s(bool,'const.combin.o_3'(s(fun(X214,bool),X215),s(fun(X213,X214),X216),s(X213,X217)))) | ~p(s(bool,happ(s(fun(X218,bool),X219),s(X218,X220)))) | p(s(bool,happ(s(fun(X218,bool),X219),s(X218,sK7(happ(s(fun(X213,bool),'const.combin.o_2'(s(fun(X214,bool),X215),s(fun(X213,X214),X216))),s(X213,X217)),X219,X218)))))) )),
  inference(superposition,[],[f299,f364])).
fof(f3439,plain,(
  ( ! [X222,X227,X225,X223,X221,X228,X226,X224] : (~p(s(bool,'const.combin.o_3'(s(fun(X222,bool),X223),s(fun(X221,X222),X224),s(X221,X225)))) | ~p(s(bool,happ(s(fun(X226,bool),X227),s(X226,X228)))) | p(s(bool,happ(s(fun(X226,bool),X227),s(X226,sK8(happ(s(fun(X221,bool),'const.combin.o_2'(s(fun(X222,bool),X223),s(fun(X221,X222),X224))),s(X221,X225)),X227,X226)))))) )),
  inference(superposition,[],[f301,f364])).
fof(f3440,plain,(
  ( ! [X231,X229,X235,X233,X230,X236,X234,X232] : (~p(s(bool,'const.combin.o_3'(s(fun(X230,bool),X231),s(fun(X229,X230),X232),s(X229,X233)))) | p(s(bool,happ(s(fun(X234,bool),X235),s(X234,sK9(happ(s(fun(X229,bool),'const.combin.o_2'(s(fun(X230,bool),X231),s(fun(X229,X230),X232))),s(X229,X233)),X235,X234))))) | ~p(s(bool,happ(s(fun(X234,bool),X235),s(X234,X236))))) )),
  inference(superposition,[],[f302,f364])).
fof(f3441,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238] : (~p(s(bool,'const.combin.o_3'(s(fun(X238,bool),X239),s(fun(X237,X238),X240),s(X237,X241)))) | p(s(bool,happ(s(fun(X242,bool),X243),s(X242,sK10(happ(s(fun(X237,bool),'const.combin.o_2'(s(fun(X238,bool),X239),s(fun(X237,X238),X240))),s(X237,X241)),X243,X242))))) | ~p(s(bool,happ(s(fun(X242,bool),X243),s(X242,X244))))) )),
  inference(superposition,[],[f304,f364])).
fof(f4452,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK13('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2))))) | p(s(bool,happ(s(fun(X2,bool),X5),s(X2,X6)))) | ~p(s(bool,happ(s(fun(X2,bool),X5),s(X2,sK13('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2)))))) )),
  inference(superposition,[],[f310,f293])).
fof(f4453,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK13(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7))))) | p(s(bool,happ(s(fun(X7,bool),X9),s(X7,X10)))) | ~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,sK13(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7)))))) )),
  inference(superposition,[],[f310,f285])).
fof(f4454,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK13(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11))))) | p(s(bool,happ(s(fun(X11,bool),X14),s(X11,X15)))) | ~p(s(bool,happ(s(fun(X11,bool),X14),s(X11,sK13(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11)))))) )),
  inference(superposition,[],[f310,f295])).
fof(f4455,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X16,bool),'const.combin.o_3'(s(fun(X17,fun(X16,bool)),X18),s(fun(X19,X17),X20),s(X19,X21))),s(X16,sK13(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16))))) | p(s(bool,happ(s(fun(X16,bool),X22),s(X16,X23)))) | ~p(s(bool,happ(s(fun(X16,bool),X22),s(X16,sK13(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16)))))) )),
  inference(superposition,[],[f310,f363])).
fof(f4456,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (~p(s(bool,happ(s(fun(X24,bool),'const.combin.o_3'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28),s(X25,X29))),s(X24,sK13(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24))))) | p(s(bool,happ(s(fun(X24,bool),X30),s(X24,X31)))) | ~p(s(bool,happ(s(fun(X24,bool),X30),s(X24,sK13(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24)))))) )),
  inference(superposition,[],[f310,f364])).
fof(f4457,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'(fun(X32,bool)),X35))),s(X32,sK13('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32))))) | p(s(bool,happ(s(fun(X32,bool),X36),s(X32,X37)))) | ~p(s(bool,happ(s(fun(X32,bool),X36),s(X32,sK13('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32)))))) )),
  inference(superposition,[],[f310,f324])).
fof(f4462,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (~p(s(bool,'const.combin.o_3'(s(fun(X10,bool),X11),s(fun(X9,X10),X12),s(X9,sK13('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9))))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,X14)))) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK13('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9)))))) )),
  inference(superposition,[],[f310,f364])).
fof(f4511,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X6)))) | ~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK13('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2))))) | ~p(s(bool,happ(s(fun(X2,bool),X5),s(X2,sK13('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2)))))) )),
  inference(forward_demodulation,[],[f4495,f293])).
fof(f4495,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK13('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2))))) | p(s(bool,happ(s(fun(X2,bool),'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4))))),s(X2,X6)))) | ~p(s(bool,happ(s(fun(X2,bool),X5),s(X2,sK13('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2)))))) )),
  inference(superposition,[],[f311,f293])).
fof(f4541,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK15('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2))))) | p(s(bool,happ(s(fun(X2,bool),X5),s(X2,X6)))) | ~p(s(bool,happ(s(fun(X2,bool),X5),s(X2,sK14('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2)))))) )),
  inference(superposition,[],[f312,f293])).
fof(f4542,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK15(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7))))) | p(s(bool,happ(s(fun(X7,bool),X9),s(X7,X10)))) | ~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,sK14(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7)))))) )),
  inference(superposition,[],[f312,f285])).
fof(f4543,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK15(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11))))) | p(s(bool,happ(s(fun(X11,bool),X14),s(X11,X15)))) | ~p(s(bool,happ(s(fun(X11,bool),X14),s(X11,sK14(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11)))))) )),
  inference(superposition,[],[f312,f295])).
fof(f4544,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X16,bool),'const.combin.o_3'(s(fun(X17,fun(X16,bool)),X18),s(fun(X19,X17),X20),s(X19,X21))),s(X16,sK15(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16))))) | p(s(bool,happ(s(fun(X16,bool),X22),s(X16,X23)))) | ~p(s(bool,happ(s(fun(X16,bool),X22),s(X16,sK14(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16)))))) )),
  inference(superposition,[],[f312,f363])).
fof(f4545,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (~p(s(bool,happ(s(fun(X24,bool),'const.combin.o_3'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28),s(X25,X29))),s(X24,sK15(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24))))) | p(s(bool,happ(s(fun(X24,bool),X30),s(X24,X31)))) | ~p(s(bool,happ(s(fun(X24,bool),X30),s(X24,sK14(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24)))))) )),
  inference(superposition,[],[f312,f364])).
fof(f4546,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'(fun(X32,bool)),X35))),s(X32,sK15('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32))))) | p(s(bool,happ(s(fun(X32,bool),X36),s(X32,X37)))) | ~p(s(bool,happ(s(fun(X32,bool),X36),s(X32,sK14('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32)))))) )),
  inference(superposition,[],[f312,f324])).
fof(f4551,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (~p(s(bool,'const.combin.o_3'(s(fun(X10,bool),X11),s(fun(X9,X10),X12),s(X9,sK15('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9))))) | p(s(bool,happ(s(fun(X9,bool),X13),s(X9,X14)))) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK14('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9)))))) )),
  inference(superposition,[],[f312,f364])).
fof(f4883,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X2,bool),X3),s(X2,X6)))) | ~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK15('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2))))) | ~p(s(bool,happ(s(fun(X2,bool),X5),s(X2,sK14('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2)))))) )),
  inference(forward_demodulation,[],[f4868,f293])).
fof(f4868,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK15('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2))))) | p(s(bool,happ(s(fun(X2,bool),'const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4))))),s(X2,X6)))) | ~p(s(bool,happ(s(fun(X2,bool),X5),s(X2,sK14('const.list.HD_1'(s('type.list.list'(fun(X2,bool)),'const.list.CONS_2'(s(fun(X2,bool),X3),s('type.list.list'(fun(X2,bool)),X4)))),X5,X2)))))) )),
  inference(superposition,[],[f313,f293])).
fof(f6263,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1,X0)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6188,f238])).
fof(f6188,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1,X0)))))) ) | $spl14),
  inference(superposition,[],[f299,f6100])).
fof(f6264,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK8(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X4,X3)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6189,f238])).
fof(f6189,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK8(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X4,X3)))))) ) | $spl14),
  inference(superposition,[],[f301,f6100])).
fof(f6454,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK9(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X12,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6444,f238])).
fof(f6444,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK9(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X12,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13))))) ) | $spl14),
  inference(superposition,[],[f302,f6100])).
fof(f6479,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK10(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X12,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6469,f238])).
fof(f6469,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK10(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X12,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13))))) ) | $spl14),
  inference(superposition,[],[f304,f6100])).
fof(f6729,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | p(s(bool,happ(s(fun(X12,bool),X13),s(X12,sK7(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X13,X12)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6638,f238])).
fof(f6638,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | p(s(bool,happ(s(fun(X12,bool),X13),s(X12,sK7(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X13,X12)))))) ) | $spl14),
  inference(superposition,[],[f299,f6101])).
fof(f6730,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK8(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X17,X16)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6639,f238])).
fof(f6639,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK8(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X17,X16)))))) ) | $spl14),
  inference(superposition,[],[f301,f6101])).
fof(f6731,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,happ(s(fun(X20,bool),X21),s(X20,sK9(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X21,X20))))) | ~p(s(bool,happ(s(fun(X20,bool),X21),s(X20,X22))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6640,f238])).
fof(f6640,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X20,bool),X21),s(X20,sK9(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X21,X20))))) | ~p(s(bool,happ(s(fun(X20,bool),X21),s(X20,X22))))) ) | $spl14),
  inference(superposition,[],[f302,f6101])).
fof(f6732,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,happ(s(fun(X24,bool),X25),s(X24,sK10(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X25,X24))))) | ~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6641,f238])).
fof(f6641,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X24,bool),X25),s(X24,sK10(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X25,X24))))) | ~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26))))) ) | $spl14),
  inference(superposition,[],[f304,f6101])).
fof(f9223,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X73)))) | ~p(s(bool,happ(s(fun(X74,bool),X75),s(X74,X76)))) | p(s(bool,happ(s(fun(X74,bool),X75),s(X74,sK7('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X73)),X75,X74)))))) )),
  inference(superposition,[],[f299,f1077])).
fof(f9224,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X77)))) | ~p(s(bool,happ(s(fun(X78,bool),X79),s(X78,X80)))) | p(s(bool,happ(s(fun(X78,bool),X79),s(X78,sK8('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X77)),X79,X78)))))) )),
  inference(superposition,[],[f301,f1077])).
fof(f9225,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X81)))) | p(s(bool,happ(s(fun(X82,bool),X83),s(X82,sK9('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X81)),X83,X82))))) | ~p(s(bool,happ(s(fun(X82,bool),X83),s(X82,X84))))) )),
  inference(superposition,[],[f302,f1077])).
fof(f9226,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X85)))) | p(s(bool,happ(s(fun(X86,bool),X87),s(X86,sK10('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X85)),X87,X86))))) | ~p(s(bool,happ(s(fun(X86,bool),X87),s(X86,X88))))) )),
  inference(superposition,[],[f304,f1077])).
fof(f9254,plain,(
  ( ! [X146,X147,X145,X148] : (~p(s(bool,happ(s(fun(X145,bool),'const.list.HD_1'(s('type.list.list'(fun(X145,bool)),X146))),s(X145,sK13('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X145,bool)),X146)),X147,X145))))) | p(s(bool,happ(s(fun(X145,bool),X147),s(X145,X148)))) | ~p(s(bool,happ(s(fun(X145,bool),X147),s(X145,sK13('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X145,bool)),X146)),X147,X145)))))) )),
  inference(superposition,[],[f310,f1077])).
fof(f9256,plain,(
  ( ! [X156,X154,X155,X153] : (~p(s(bool,happ(s(fun(X153,bool),'const.list.HD_1'(s('type.list.list'(fun(X153,bool)),X154))),s(X153,sK15('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X153,bool)),X154)),X155,X153))))) | p(s(bool,happ(s(fun(X153,bool),X155),s(X153,X156)))) | ~p(s(bool,happ(s(fun(X153,bool),X155),s(X153,sK14('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X153,bool)),X154)),X155,X153)))))) )),
  inference(superposition,[],[f312,f1077])).
fof(f9684,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1,X0)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f9574,f238])).
fof(f9574,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X1,X0)))))) ) | $spl14),
  inference(superposition,[],[f299,f9137])).
fof(f9685,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK8('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X4,X3)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f9575,f238])).
fof(f9575,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK8('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X4,X3)))))) ) | $spl14),
  inference(superposition,[],[f301,f9137])).
fof(f9686,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK9('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X7,X6))))) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))))) ) | $spl14),
  inference(subsumption_resolution,[],[f9576,f238])).
fof(f9576,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK9('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X7,X6))))) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))))) ) | $spl14),
  inference(superposition,[],[f302,f9137])).
fof(f9687,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,happ(s(fun(X9,bool),X10),s(X9,sK10('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X10,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X10),s(X9,X11))))) ) | $spl14),
  inference(subsumption_resolution,[],[f9577,f238])).
fof(f9577,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X9,bool),X10),s(X9,sK10('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X10,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X10),s(X9,X11))))) ) | $spl14),
  inference(superposition,[],[f304,f9137])).
fof(f10567,plain,(
  ( ! [X356,X352,X354,X357,X353,X355] : (s(X356,happ(s(fun(bool,X356),X357),s(bool,X355))) = s(X356,'const.combin.o_3'(s(fun(bool,X356),X357),s(fun(X352,bool),X353),s(X352,X354))) | s(bool,'T_0') = s(bool,X355) | s(bool,'T_0') = s(bool,happ(s(fun(X352,bool),X353),s(X352,X354)))) )),
  inference(superposition,[],[f363,f424])).
fof(f10857,plain,(
  ( ! [X333,X335,X337,X334,X336,X338] : (s(X336,happ(s(fun(bool,X336),X337),s(bool,'T_0'))) = s(X336,'const.combin.o_3'(s(fun(bool,X336),X337),s(fun(X333,bool),X334),s(X333,X335))) | s(bool,X338) = s(bool,happ(s(fun(X333,bool),X334),s(X333,X335))) | s(bool,'T_0') = s(bool,X338)) )),
  inference(superposition,[],[f363,f424])).
fof(f11408,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK7(X10,X12,X11))))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f10760,f238])).
fof(f10760,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK7(X10,X12,X11))))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f299,f424])).
fof(f11409,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK8(X15,X17,X16))))) | s(bool,X15) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f10761,f238])).
fof(f10761,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK8(X15,X17,X16))))) | s(bool,X15) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f301,f424])).
fof(f11410,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,happ(s(fun(X21,bool),X22),s(X21,sK9(X20,X22,X21))))) | ~p(s(bool,happ(s(fun(X21,bool),X22),s(X21,X23)))) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f10762,f238])).
fof(f10762,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X21,bool),X22),s(X21,sK9(X20,X22,X21))))) | ~p(s(bool,happ(s(fun(X21,bool),X22),s(X21,X23)))) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f302,f424])).
fof(f11411,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,happ(s(fun(X26,bool),X27),s(X26,sK10(X25,X27,X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f10763,f238])).
fof(f10763,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X26,bool),X27),s(X26,sK10(X25,X27,X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f304,f424])).
fof(f11417,plain,(
  ( ! [X132,X130,X133,X131,X129] : (p(s(bool,X132)) | p(s(bool,happ(s(fun(X129,bool),X130),s(X129,sK11(X132,X130,X129))))) | s(bool,X133) = s(bool,happ(s(fun(X129,bool),X130),s(X129,X131))) | s(bool,'T_0') = s(bool,X133)) )),
  inference(subsumption_resolution,[],[f10800,f238])).
fof(f10800,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,X132)) | p(s(bool,happ(s(fun(X129,bool),X130),s(X129,sK11(X132,X130,X129))))) | s(bool,X133) = s(bool,happ(s(fun(X129,bool),X130),s(X129,X131))) | s(bool,'T_0') = s(bool,X133)) )),
  inference(superposition,[],[f306,f424])).
fof(f11418,plain,(
  ( ! [X134,X138,X136,X135,X137] : (p(s(bool,X137)) | p(s(bool,happ(s(fun(X134,bool),X135),s(X134,sK12(X137,X135,X134))))) | s(bool,X138) = s(bool,happ(s(fun(X134,bool),X135),s(X134,X136))) | s(bool,'T_0') = s(bool,X138)) )),
  inference(subsumption_resolution,[],[f10801,f238])).
fof(f10801,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'T_0')) | p(s(bool,X137)) | p(s(bool,happ(s(fun(X134,bool),X135),s(X134,sK12(X137,X135,X134))))) | s(bool,X138) = s(bool,happ(s(fun(X134,bool),X135),s(X134,X136))) | s(bool,'T_0') = s(bool,X138)) )),
  inference(superposition,[],[f308,f424])).
fof(f11419,plain,(
  ( ! [X146,X144,X147,X145,X143] : (s(X143,X145) != s(X143,X146) | p(s(bool,happ(s(fun(X143,bool),X144),s(X143,X146)))) | s(bool,X147) = s(bool,happ(s(fun(X143,bool),X144),s(X143,X145))) | s(bool,'T_0') = s(bool,X147)) )),
  inference(subsumption_resolution,[],[f10803,f238])).
fof(f10803,plain,(
  ( ! [X146,X144,X147,X145,X143] : (~p(s(bool,'T_0')) | s(X143,X145) != s(X143,X146) | p(s(bool,happ(s(fun(X143,bool),X144),s(X143,X146)))) | s(bool,X147) = s(bool,happ(s(fun(X143,bool),X144),s(X143,X145))) | s(bool,'T_0') = s(bool,X147)) )),
  inference(superposition,[],[f316,f424])).
fof(f11420,plain,(
  ( ! [X152,X151,X149,X150,X148] : (p(s(bool,X151)) | p(s(bool,happ(s(fun(X148,bool),X149),s(X148,sK17(X151,X149,X148))))) | s(bool,X152) = s(bool,happ(s(fun(X148,bool),X149),s(X148,X150))) | s(bool,'T_0') = s(bool,X152)) )),
  inference(subsumption_resolution,[],[f10804,f238])).
fof(f10804,plain,(
  ( ! [X152,X151,X149,X150,X148] : (~p(s(bool,'T_0')) | p(s(bool,X151)) | p(s(bool,happ(s(fun(X148,bool),X149),s(X148,sK17(X151,X149,X148))))) | s(bool,X152) = s(bool,happ(s(fun(X148,bool),X149),s(X148,X150))) | s(bool,'T_0') = s(bool,X152)) )),
  inference(superposition,[],[f317,f424])).
fof(f11421,plain,(
  ( ! [X156,X154,X157,X155,X153] : (p(s(bool,X156)) | p(s(bool,happ(s(fun(X153,bool),X154),s(X153,sK18(X156,X154,X153))))) | s(bool,X157) = s(bool,happ(s(fun(X153,bool),X154),s(X153,X155))) | s(bool,'T_0') = s(bool,X157)) )),
  inference(subsumption_resolution,[],[f10805,f238])).
fof(f10805,plain,(
  ( ! [X156,X154,X157,X155,X153] : (~p(s(bool,'T_0')) | p(s(bool,X156)) | p(s(bool,happ(s(fun(X153,bool),X154),s(X153,sK18(X156,X154,X153))))) | s(bool,X157) = s(bool,happ(s(fun(X153,bool),X154),s(X153,X155))) | s(bool,'T_0') = s(bool,X157)) )),
  inference(superposition,[],[f319,f424])).
fof(f11423,plain,(
  ( ! [X165,X163,X166,X164,X162] : (p(s(bool,happ(s(fun(X162,bool),X163),s(X162,X165)))) | ~p(s(bool,happ(s(fun(X162,bool),X164),s(X162,sK13(X163,X164,X162))))) | s(bool,X166) = s(bool,happ(s(fun(X162,bool),X163),s(X162,sK13(X163,X164,X162)))) | s(bool,'T_0') = s(bool,X166)) )),
  inference(subsumption_resolution,[],[f10807,f238])).
fof(f10807,plain,(
  ( ! [X165,X163,X166,X164,X162] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X162,bool),X163),s(X162,X165)))) | ~p(s(bool,happ(s(fun(X162,bool),X164),s(X162,sK13(X163,X164,X162))))) | s(bool,X166) = s(bool,happ(s(fun(X162,bool),X163),s(X162,sK13(X163,X164,X162)))) | s(bool,'T_0') = s(bool,X166)) )),
  inference(superposition,[],[f311,f424])).
fof(f11424,plain,(
  ( ! [X167,X171,X169,X170,X168] : (p(s(bool,happ(s(fun(X167,bool),X169),s(X167,X170)))) | ~p(s(bool,happ(s(fun(X167,bool),X169),s(X167,sK13(X168,X169,X167))))) | s(bool,X171) = s(bool,happ(s(fun(X167,bool),X168),s(X167,sK13(X168,X169,X167)))) | s(bool,'T_0') = s(bool,X171)) )),
  inference(subsumption_resolution,[],[f10808,f238])).
fof(f10808,plain,(
  ( ! [X167,X171,X169,X170,X168] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X167,bool),X169),s(X167,X170)))) | ~p(s(bool,happ(s(fun(X167,bool),X169),s(X167,sK13(X168,X169,X167))))) | s(bool,X171) = s(bool,happ(s(fun(X167,bool),X168),s(X167,sK13(X168,X169,X167)))) | s(bool,'T_0') = s(bool,X171)) )),
  inference(superposition,[],[f310,f424])).
fof(f11425,plain,(
  ( ! [X175,X173,X176,X174,X172] : (p(s(bool,happ(s(fun(X172,bool),X173),s(X172,X175)))) | ~p(s(bool,happ(s(fun(X172,bool),X174),s(X172,sK14(X173,X174,X172))))) | s(bool,X176) = s(bool,happ(s(fun(X172,bool),X173),s(X172,sK15(X173,X174,X172)))) | s(bool,'T_0') = s(bool,X176)) )),
  inference(subsumption_resolution,[],[f10809,f238])).
fof(f10809,plain,(
  ( ! [X175,X173,X176,X174,X172] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X172,bool),X173),s(X172,X175)))) | ~p(s(bool,happ(s(fun(X172,bool),X174),s(X172,sK14(X173,X174,X172))))) | s(bool,X176) = s(bool,happ(s(fun(X172,bool),X173),s(X172,sK15(X173,X174,X172)))) | s(bool,'T_0') = s(bool,X176)) )),
  inference(superposition,[],[f313,f424])).
fof(f11426,plain,(
  ( ! [X177,X180,X178,X181,X179] : (p(s(bool,happ(s(fun(X177,bool),X179),s(X177,X180)))) | ~p(s(bool,happ(s(fun(X177,bool),X179),s(X177,sK14(X178,X179,X177))))) | s(bool,X181) = s(bool,happ(s(fun(X177,bool),X178),s(X177,sK15(X178,X179,X177)))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(subsumption_resolution,[],[f10810,f238])).
fof(f10810,plain,(
  ( ! [X177,X180,X178,X181,X179] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X177,bool),X179),s(X177,X180)))) | ~p(s(bool,happ(s(fun(X177,bool),X179),s(X177,sK14(X178,X179,X177))))) | s(bool,X181) = s(bool,happ(s(fun(X177,bool),X178),s(X177,sK15(X178,X179,X177)))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(superposition,[],[f312,f424])).
fof(f11427,plain,(
  ( ! [X185,X182,X184,X183] : (p(s(bool,happ(s(fun(X182,bool),X183),s(X182,X184)))) | s(bool,X185) = s(bool,happ(s(fun(X182,bool),X183),s(X182,sK16(X184,X183,X182)))) | s(bool,'T_0') = s(bool,X185)) )),
  inference(subsumption_resolution,[],[f10811,f238])).
fof(f10811,plain,(
  ( ! [X185,X182,X184,X183] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X182,bool),X183),s(X182,X184)))) | s(bool,X185) = s(bool,happ(s(fun(X182,bool),X183),s(X182,sK16(X184,X183,X182)))) | s(bool,'T_0') = s(bool,X185)) )),
  inference(superposition,[],[f315,f424])).
fof(f792,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun(X5,bool),'const.list.HD_1'(s('type.list.list'(fun(X5,bool)),X6))),s(X5,X7)))) | s(X5,X7) = s(X5,sK16(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5))) )),
  inference(superposition,[],[f314,f285])).
fof(f879,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(X5,bool),'const.list.HD_1'(s('type.list.list'(fun(X5,bool)),X6))),s(X5,X7)))) | s(X5,X7) = s(X5,sK19(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5))) )),
  inference(superposition,[],[f322,f285])).
fof(f1697,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun(X5,bool),'const.list.HD_1'(s('type.list.list'(fun(X5,bool)),X6))),s(X5,X7)))) | ~p(s(bool,happ(s(fun(X5,bool),'const.list.HD_1'(s('type.list.list'(fun(X5,bool)),X6))),s(X5,sK16(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5)))))) )),
  inference(forward_demodulation,[],[f1682,f285])).
fof(f1682,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(X5,bool),'const.list.HD_1'(s('type.list.list'(fun(X5,bool)),X6))),s(X5,sK16(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5))))) | p(s(bool,happ(s(fun(X5,bool),happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6))),s(X5,X7))))) )),
  inference(superposition,[],[f315,f285])).
fof(f1735,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(X5,bool),'const.list.HD_1'(s('type.list.list'(fun(X5,bool)),X6))),s(X5,X7)))) | p(s(bool,happ(s(fun(X5,bool),'const.list.HD_1'(s('type.list.list'(fun(X5,bool)),X6))),s(X5,sK19(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5)))))) )),
  inference(forward_demodulation,[],[f1720,f285])).
fof(f1720,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun(X5,bool),'const.list.HD_1'(s('type.list.list'(fun(X5,bool)),X6))),s(X5,sK19(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5))))) | ~p(s(bool,happ(s(fun(X5,bool),happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6))),s(X5,X7))))) )),
  inference(superposition,[],[f323,f285])).
fof(f2329,plain,(
  ( ! [X10,X8,X7,X9] : (p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK11(X10,happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X7))))) | ~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X9)))) | p(s(bool,X10))) )),
  inference(forward_demodulation,[],[f2292,f285])).
fof(f2292,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X9)))) | p(s(bool,X10)) | p(s(bool,happ(s(fun(X7,bool),happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK11(X10,happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X7)))))) )),
  inference(superposition,[],[f306,f285])).
fof(f2423,plain,(
  ( ! [X10,X8,X7,X9] : (p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK12(X10,happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X7))))) | ~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X9)))) | p(s(bool,X10))) )),
  inference(forward_demodulation,[],[f2403,f285])).
fof(f2403,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X9)))) | p(s(bool,X10)) | p(s(bool,happ(s(fun(X7,bool),happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK12(X10,happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X7)))))) )),
  inference(superposition,[],[f308,f285])).
fof(f2543,plain,(
  ( ! [X10,X8,X7,X9] : (p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK17(X10,happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X7))))) | ~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X9)))) | p(s(bool,X10))) )),
  inference(forward_demodulation,[],[f2522,f285])).
fof(f2522,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X9)))) | p(s(bool,X10)) | p(s(bool,happ(s(fun(X7,bool),happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK17(X10,happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X7)))))) )),
  inference(superposition,[],[f317,f285])).
fof(f2583,plain,(
  ( ! [X10,X8,X7,X9] : (p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK18(X10,happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X7))))) | ~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X9)))) | p(s(bool,X10))) )),
  inference(forward_demodulation,[],[f2562,f285])).
fof(f2562,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X9)))) | p(s(bool,X10)) | p(s(bool,happ(s(fun(X7,bool),happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK18(X10,happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X7)))))) )),
  inference(superposition,[],[f319,f285])).
fof(f4512,plain,(
  ( ! [X10,X8,X7,X9] : (p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X10)))) | ~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK13(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7))))) | ~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,sK13(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7)))))) )),
  inference(forward_demodulation,[],[f4496,f285])).
fof(f4496,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK13(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7))))) | p(s(bool,happ(s(fun(X7,bool),happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8))),s(X7,X10)))) | ~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,sK13(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7)))))) )),
  inference(superposition,[],[f311,f285])).
fof(f4884,plain,(
  ( ! [X10,X8,X7,X9] : (p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,X10)))) | ~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK15(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7))))) | ~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,sK14(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7)))))) )),
  inference(forward_demodulation,[],[f4869,f285])).
fof(f4869,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),'const.list.HD_1'(s('type.list.list'(fun(X7,bool)),X8))),s(X7,sK15(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7))))) | p(s(bool,happ(s(fun(X7,bool),happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8))),s(X7,X10)))) | ~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,sK14(happ(s(fun('type.list.list'(fun(X7,bool)),fun(X7,bool)),'const.list.HD_0'),s('type.list.list'(fun(X7,bool)),X8)),X9,X7)))))) )),
  inference(superposition,[],[f313,f285])).
fof(f9258,plain,(
  ( ! [X163,X161,X162] : (p(s(bool,happ(s(fun(X161,bool),'const.list.HD_1'(s('type.list.list'(fun(X161,bool)),X162))),s(X161,X163)))) | s(X161,X163) = s(X161,sK16(X163,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X161,bool)),X162)),X161))) )),
  inference(superposition,[],[f314,f1077])).
fof(f9263,plain,(
  ( ! [X180,X181,X179] : (~p(s(bool,happ(s(fun(X179,bool),'const.list.HD_1'(s('type.list.list'(fun(X179,bool)),X180))),s(X179,X181)))) | s(X179,X181) = s(X179,sK19(X181,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X179,bool)),X180)),X179))) )),
  inference(superposition,[],[f322,f1077])).
fof(f9490,plain,(
  ( ! [X140,X138,X139,X137] : (p(s(bool,happ(s(fun(X137,bool),'const.list.HD_1'(s('type.list.list'(fun(X137,bool)),X138))),s(X137,sK11(X140,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X137,bool)),X138)),X137))))) | ~p(s(bool,happ(s(fun(X137,bool),'const.list.HD_1'(s('type.list.list'(fun(X137,bool)),X138))),s(X137,X139)))) | p(s(bool,X140))) )),
  inference(forward_demodulation,[],[f9252,f1077])).
fof(f9252,plain,(
  ( ! [X140,X138,X139,X137] : (~p(s(bool,happ(s(fun(X137,bool),'const.list.HD_1'(s('type.list.list'(fun(X137,bool)),X138))),s(X137,X139)))) | p(s(bool,X140)) | p(s(bool,happ(s(fun(X137,bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X137,bool)),X138))),s(X137,sK11(X140,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X137,bool)),X138)),X137)))))) )),
  inference(superposition,[],[f306,f1077])).
fof(f9491,plain,(
  ( ! [X144,X142,X143,X141] : (p(s(bool,happ(s(fun(X141,bool),'const.list.HD_1'(s('type.list.list'(fun(X141,bool)),X142))),s(X141,sK12(X144,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X141,bool)),X142)),X141))))) | ~p(s(bool,happ(s(fun(X141,bool),'const.list.HD_1'(s('type.list.list'(fun(X141,bool)),X142))),s(X141,X143)))) | p(s(bool,X144))) )),
  inference(forward_demodulation,[],[f9253,f1077])).
fof(f9253,plain,(
  ( ! [X144,X142,X143,X141] : (~p(s(bool,happ(s(fun(X141,bool),'const.list.HD_1'(s('type.list.list'(fun(X141,bool)),X142))),s(X141,X143)))) | p(s(bool,X144)) | p(s(bool,happ(s(fun(X141,bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X141,bool)),X142))),s(X141,sK12(X144,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X141,bool)),X142)),X141)))))) )),
  inference(superposition,[],[f308,f1077])).
fof(f9492,plain,(
  ( ! [X152,X151,X149,X150] : (p(s(bool,happ(s(fun(X149,bool),'const.list.HD_1'(s('type.list.list'(fun(X149,bool)),X150))),s(X149,X152)))) | ~p(s(bool,happ(s(fun(X149,bool),'const.list.HD_1'(s('type.list.list'(fun(X149,bool)),X150))),s(X149,sK13('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X149,bool)),X150)),X151,X149))))) | ~p(s(bool,happ(s(fun(X149,bool),X151),s(X149,sK13('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X149,bool)),X150)),X151,X149)))))) )),
  inference(forward_demodulation,[],[f9255,f1077])).
fof(f9255,plain,(
  ( ! [X152,X151,X149,X150] : (~p(s(bool,happ(s(fun(X149,bool),'const.list.HD_1'(s('type.list.list'(fun(X149,bool)),X150))),s(X149,sK13('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X149,bool)),X150)),X151,X149))))) | p(s(bool,happ(s(fun(X149,bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X149,bool)),X150))),s(X149,X152)))) | ~p(s(bool,happ(s(fun(X149,bool),X151),s(X149,sK13('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X149,bool)),X150)),X151,X149)))))) )),
  inference(superposition,[],[f311,f1077])).
fof(f9493,plain,(
  ( ! [X158,X159,X157,X160] : (p(s(bool,happ(s(fun(X157,bool),'const.list.HD_1'(s('type.list.list'(fun(X157,bool)),X158))),s(X157,X160)))) | ~p(s(bool,happ(s(fun(X157,bool),'const.list.HD_1'(s('type.list.list'(fun(X157,bool)),X158))),s(X157,sK15('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X157,bool)),X158)),X159,X157))))) | ~p(s(bool,happ(s(fun(X157,bool),X159),s(X157,sK14('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X157,bool)),X158)),X159,X157)))))) )),
  inference(forward_demodulation,[],[f9257,f1077])).
fof(f9257,plain,(
  ( ! [X158,X159,X157,X160] : (~p(s(bool,happ(s(fun(X157,bool),'const.list.HD_1'(s('type.list.list'(fun(X157,bool)),X158))),s(X157,sK15('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X157,bool)),X158)),X159,X157))))) | p(s(bool,happ(s(fun(X157,bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X157,bool)),X158))),s(X157,X160)))) | ~p(s(bool,happ(s(fun(X157,bool),X159),s(X157,sK14('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X157,bool)),X158)),X159,X157)))))) )),
  inference(superposition,[],[f313,f1077])).
fof(f9494,plain,(
  ( ! [X165,X166,X164] : (p(s(bool,happ(s(fun(X164,bool),'const.list.HD_1'(s('type.list.list'(fun(X164,bool)),X165))),s(X164,X166)))) | ~p(s(bool,happ(s(fun(X164,bool),'const.list.HD_1'(s('type.list.list'(fun(X164,bool)),X165))),s(X164,sK16(X166,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X164,bool)),X165)),X164)))))) )),
  inference(forward_demodulation,[],[f9259,f1077])).
fof(f9259,plain,(
  ( ! [X165,X166,X164] : (~p(s(bool,happ(s(fun(X164,bool),'const.list.HD_1'(s('type.list.list'(fun(X164,bool)),X165))),s(X164,sK16(X166,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X164,bool)),X165)),X164))))) | p(s(bool,happ(s(fun(X164,bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X164,bool)),X165))),s(X164,X166))))) )),
  inference(superposition,[],[f315,f1077])).
fof(f9496,plain,(
  ( ! [X173,X171,X174,X172] : (p(s(bool,happ(s(fun(X171,bool),'const.list.HD_1'(s('type.list.list'(fun(X171,bool)),X172))),s(X171,sK17(X174,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X171,bool)),X172)),X171))))) | ~p(s(bool,happ(s(fun(X171,bool),'const.list.HD_1'(s('type.list.list'(fun(X171,bool)),X172))),s(X171,X173)))) | p(s(bool,X174))) )),
  inference(forward_demodulation,[],[f9261,f1077])).
fof(f9261,plain,(
  ( ! [X173,X171,X174,X172] : (~p(s(bool,happ(s(fun(X171,bool),'const.list.HD_1'(s('type.list.list'(fun(X171,bool)),X172))),s(X171,X173)))) | p(s(bool,X174)) | p(s(bool,happ(s(fun(X171,bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X171,bool)),X172))),s(X171,sK17(X174,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X171,bool)),X172)),X171)))))) )),
  inference(superposition,[],[f317,f1077])).
fof(f9497,plain,(
  ( ! [X177,X175,X178,X176] : (p(s(bool,happ(s(fun(X175,bool),'const.list.HD_1'(s('type.list.list'(fun(X175,bool)),X176))),s(X175,sK18(X178,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X175,bool)),X176)),X175))))) | ~p(s(bool,happ(s(fun(X175,bool),'const.list.HD_1'(s('type.list.list'(fun(X175,bool)),X176))),s(X175,X177)))) | p(s(bool,X178))) )),
  inference(forward_demodulation,[],[f9262,f1077])).
fof(f9262,plain,(
  ( ! [X177,X175,X178,X176] : (~p(s(bool,happ(s(fun(X175,bool),'const.list.HD_1'(s('type.list.list'(fun(X175,bool)),X176))),s(X175,X177)))) | p(s(bool,X178)) | p(s(bool,happ(s(fun(X175,bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X175,bool)),X176))),s(X175,sK18(X178,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X175,bool)),X176)),X175)))))) )),
  inference(superposition,[],[f319,f1077])).
fof(f9498,plain,(
  ( ! [X182,X184,X183] : (~p(s(bool,happ(s(fun(X182,bool),'const.list.HD_1'(s('type.list.list'(fun(X182,bool)),X183))),s(X182,X184)))) | p(s(bool,happ(s(fun(X182,bool),'const.list.HD_1'(s('type.list.list'(fun(X182,bool)),X183))),s(X182,sK19(X184,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X182,bool)),X183)),X182)))))) )),
  inference(forward_demodulation,[],[f9264,f1077])).
fof(f9264,plain,(
  ( ! [X182,X184,X183] : (p(s(bool,happ(s(fun(X182,bool),'const.list.HD_1'(s('type.list.list'(fun(X182,bool)),X183))),s(X182,sK19(X184,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X182,bool)),X183)),X182))))) | ~p(s(bool,happ(s(fun(X182,bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X182,bool)),X183))),s(X182,X184))))) )),
  inference(superposition,[],[f323,f1077])).
fof(f1057,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,happ(s(fun(X64,bool),'const.list.EL_2'(s('type.num.num',X65),s('type.list.list'(fun(X64,bool)),X66))),s(X64,X67)))) | s(X64,X67) = s(X64,sK19(X67,happ(s(fun('type.list.list'(fun(X64,bool)),fun(X64,bool)),'const.list.EL_1'(s('type.num.num',X65))),s('type.list.list'(fun(X64,bool)),X66)),X64))) )),
  inference(superposition,[],[f322,f295])).
fof(f1059,plain,(
  ( ! [X74,X72,X75,X73] : (p(s(bool,happ(s(fun(X72,bool),'const.list.EL_2'(s('type.num.num',X73),s('type.list.list'(fun(X72,bool)),X74))),s(X72,X75)))) | s(X72,X75) = s(X72,sK16(X75,happ(s(fun('type.list.list'(fun(X72,bool)),fun(X72,bool)),'const.list.EL_1'(s('type.num.num',X73))),s('type.list.list'(fun(X72,bool)),X74)),X72))) )),
  inference(superposition,[],[f314,f295])).
fof(f1698,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,happ(s(fun(X8,bool),'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(fun(X8,bool)),X10))),s(X8,X11)))) | ~p(s(bool,happ(s(fun(X8,bool),'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(fun(X8,bool)),X10))),s(X8,sK16(X11,happ(s(fun('type.list.list'(fun(X8,bool)),fun(X8,bool)),'const.list.EL_1'(s('type.num.num',X9))),s('type.list.list'(fun(X8,bool)),X10)),X8)))))) )),
  inference(forward_demodulation,[],[f1683,f295])).
fof(f1683,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(X8,bool),'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(fun(X8,bool)),X10))),s(X8,sK16(X11,happ(s(fun('type.list.list'(fun(X8,bool)),fun(X8,bool)),'const.list.EL_1'(s('type.num.num',X9))),s('type.list.list'(fun(X8,bool)),X10)),X8))))) | p(s(bool,happ(s(fun(X8,bool),happ(s(fun('type.list.list'(fun(X8,bool)),fun(X8,bool)),'const.list.EL_1'(s('type.num.num',X9))),s('type.list.list'(fun(X8,bool)),X10))),s(X8,X11))))) )),
  inference(superposition,[],[f315,f295])).
fof(f1736,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(X8,bool),'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(fun(X8,bool)),X10))),s(X8,X11)))) | p(s(bool,happ(s(fun(X8,bool),'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(fun(X8,bool)),X10))),s(X8,sK19(X11,happ(s(fun('type.list.list'(fun(X8,bool)),fun(X8,bool)),'const.list.EL_1'(s('type.num.num',X9))),s('type.list.list'(fun(X8,bool)),X10)),X8)))))) )),
  inference(forward_demodulation,[],[f1721,f295])).
fof(f1721,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,happ(s(fun(X8,bool),'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(fun(X8,bool)),X10))),s(X8,sK19(X11,happ(s(fun('type.list.list'(fun(X8,bool)),fun(X8,bool)),'const.list.EL_1'(s('type.num.num',X9))),s('type.list.list'(fun(X8,bool)),X10)),X8))))) | ~p(s(bool,happ(s(fun(X8,bool),happ(s(fun('type.list.list'(fun(X8,bool)),fun(X8,bool)),'const.list.EL_1'(s('type.num.num',X9))),s('type.list.list'(fun(X8,bool)),X10))),s(X8,X11))))) )),
  inference(superposition,[],[f323,f295])).
fof(f2330,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK11(X15,happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X11))))) | ~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X14)))) | p(s(bool,X15))) )),
  inference(forward_demodulation,[],[f2293,f295])).
fof(f2293,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X14)))) | p(s(bool,X15)) | p(s(bool,happ(s(fun(X11,bool),happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK11(X15,happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X11)))))) )),
  inference(superposition,[],[f306,f295])).
fof(f2424,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK12(X15,happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X11))))) | ~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X14)))) | p(s(bool,X15))) )),
  inference(forward_demodulation,[],[f2404,f295])).
fof(f2404,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X14)))) | p(s(bool,X15)) | p(s(bool,happ(s(fun(X11,bool),happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK12(X15,happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X11)))))) )),
  inference(superposition,[],[f308,f295])).
fof(f2544,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK17(X15,happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X11))))) | ~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X14)))) | p(s(bool,X15))) )),
  inference(forward_demodulation,[],[f2523,f295])).
fof(f2523,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X14)))) | p(s(bool,X15)) | p(s(bool,happ(s(fun(X11,bool),happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK17(X15,happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X11)))))) )),
  inference(superposition,[],[f317,f295])).
fof(f2584,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK18(X15,happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X11))))) | ~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X14)))) | p(s(bool,X15))) )),
  inference(forward_demodulation,[],[f2563,f295])).
fof(f2563,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X14)))) | p(s(bool,X15)) | p(s(bool,happ(s(fun(X11,bool),happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK18(X15,happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X11)))))) )),
  inference(superposition,[],[f319,f295])).
fof(f2663,plain,(
  ( ! [X152,X151,X149,X150,X148] : (p(s(bool,happ(s(fun(X148,bool),'const.list.EL_2'(s('type.num.num',X149),s('type.list.list'(fun(X148,bool)),X151))),s(X148,X152)))) | s(X148,X152) = s(X148,sK16(X152,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X149))),s('type.list.list'(fun(X148,bool)),'const.list.CONS_2'(s(fun(X148,bool),X150),s('type.list.list'(fun(X148,bool)),X151)))),X148))) )),
  inference(superposition,[],[f314,f324])).
fof(f2668,plain,(
  ( ! [X177,X180,X178,X176,X179] : (~p(s(bool,happ(s(fun(X176,bool),'const.list.EL_2'(s('type.num.num',X177),s('type.list.list'(fun(X176,bool)),X179))),s(X176,X180)))) | s(X176,X180) = s(X176,sK19(X180,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X177))),s('type.list.list'(fun(X176,bool)),'const.list.CONS_2'(s(fun(X176,bool),X178),s('type.list.list'(fun(X176,bool)),X179)))),X176))) )),
  inference(superposition,[],[f322,f324])).
fof(f2703,plain,(
  ( ! [X140,X138,X136,X141,X139,X137] : (p(s(bool,happ(s(fun(X136,bool),'const.list.EL_2'(s('type.num.num',X137),s('type.list.list'(fun(X136,bool)),X139))),s(X136,sK11(X141,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X137))),s('type.list.list'(fun(X136,bool)),'const.list.CONS_2'(s(fun(X136,bool),X138),s('type.list.list'(fun(X136,bool)),X139)))),X136))))) | ~p(s(bool,happ(s(fun(X136,bool),'const.list.EL_2'(s('type.num.num',X137),s('type.list.list'(fun(X136,bool)),X139))),s(X136,X140)))) | p(s(bool,X141))) )),
  inference(forward_demodulation,[],[f2661,f324])).
fof(f2661,plain,(
  ( ! [X140,X138,X136,X141,X139,X137] : (~p(s(bool,happ(s(fun(X136,bool),'const.list.EL_2'(s('type.num.num',X137),s('type.list.list'(fun(X136,bool)),X139))),s(X136,X140)))) | p(s(bool,X141)) | p(s(bool,happ(s(fun(X136,bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X137))),s('type.list.list'(fun(X136,bool)),'const.list.CONS_2'(s(fun(X136,bool),X138),s('type.list.list'(fun(X136,bool)),X139))))),s(X136,sK11(X141,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X137))),s('type.list.list'(fun(X136,bool)),'const.list.CONS_2'(s(fun(X136,bool),X138),s('type.list.list'(fun(X136,bool)),X139)))),X136)))))) )),
  inference(superposition,[],[f306,f324])).
fof(f2704,plain,(
  ( ! [X146,X144,X142,X147,X145,X143] : (p(s(bool,happ(s(fun(X142,bool),'const.list.EL_2'(s('type.num.num',X143),s('type.list.list'(fun(X142,bool)),X145))),s(X142,sK12(X147,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X143))),s('type.list.list'(fun(X142,bool)),'const.list.CONS_2'(s(fun(X142,bool),X144),s('type.list.list'(fun(X142,bool)),X145)))),X142))))) | ~p(s(bool,happ(s(fun(X142,bool),'const.list.EL_2'(s('type.num.num',X143),s('type.list.list'(fun(X142,bool)),X145))),s(X142,X146)))) | p(s(bool,X147))) )),
  inference(forward_demodulation,[],[f2662,f324])).
fof(f2662,plain,(
  ( ! [X146,X144,X142,X147,X145,X143] : (~p(s(bool,happ(s(fun(X142,bool),'const.list.EL_2'(s('type.num.num',X143),s('type.list.list'(fun(X142,bool)),X145))),s(X142,X146)))) | p(s(bool,X147)) | p(s(bool,happ(s(fun(X142,bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X143))),s('type.list.list'(fun(X142,bool)),'const.list.CONS_2'(s(fun(X142,bool),X144),s('type.list.list'(fun(X142,bool)),X145))))),s(X142,sK12(X147,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X143))),s('type.list.list'(fun(X142,bool)),'const.list.CONS_2'(s(fun(X142,bool),X144),s('type.list.list'(fun(X142,bool)),X145)))),X142)))))) )),
  inference(superposition,[],[f308,f324])).
fof(f2705,plain,(
  ( ! [X156,X154,X157,X155,X153] : (p(s(bool,happ(s(fun(X153,bool),'const.list.EL_2'(s('type.num.num',X154),s('type.list.list'(fun(X153,bool)),X156))),s(X153,X157)))) | ~p(s(bool,happ(s(fun(X153,bool),'const.list.EL_2'(s('type.num.num',X154),s('type.list.list'(fun(X153,bool)),X156))),s(X153,sK16(X157,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X154))),s('type.list.list'(fun(X153,bool)),'const.list.CONS_2'(s(fun(X153,bool),X155),s('type.list.list'(fun(X153,bool)),X156)))),X153)))))) )),
  inference(forward_demodulation,[],[f2664,f324])).
fof(f2664,plain,(
  ( ! [X156,X154,X157,X155,X153] : (~p(s(bool,happ(s(fun(X153,bool),'const.list.EL_2'(s('type.num.num',X154),s('type.list.list'(fun(X153,bool)),X156))),s(X153,sK16(X157,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X154))),s('type.list.list'(fun(X153,bool)),'const.list.CONS_2'(s(fun(X153,bool),X155),s('type.list.list'(fun(X153,bool)),X156)))),X153))))) | p(s(bool,happ(s(fun(X153,bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X154))),s('type.list.list'(fun(X153,bool)),'const.list.CONS_2'(s(fun(X153,bool),X155),s('type.list.list'(fun(X153,bool)),X156))))),s(X153,X157))))) )),
  inference(superposition,[],[f315,f324])).
fof(f2707,plain,(
  ( ! [X167,X165,X169,X166,X164,X168] : (p(s(bool,happ(s(fun(X164,bool),'const.list.EL_2'(s('type.num.num',X165),s('type.list.list'(fun(X164,bool)),X167))),s(X164,sK17(X169,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165))),s('type.list.list'(fun(X164,bool)),'const.list.CONS_2'(s(fun(X164,bool),X166),s('type.list.list'(fun(X164,bool)),X167)))),X164))))) | ~p(s(bool,happ(s(fun(X164,bool),'const.list.EL_2'(s('type.num.num',X165),s('type.list.list'(fun(X164,bool)),X167))),s(X164,X168)))) | p(s(bool,X169))) )),
  inference(forward_demodulation,[],[f2666,f324])).
fof(f2666,plain,(
  ( ! [X167,X165,X169,X166,X164,X168] : (~p(s(bool,happ(s(fun(X164,bool),'const.list.EL_2'(s('type.num.num',X165),s('type.list.list'(fun(X164,bool)),X167))),s(X164,X168)))) | p(s(bool,X169)) | p(s(bool,happ(s(fun(X164,bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165))),s('type.list.list'(fun(X164,bool)),'const.list.CONS_2'(s(fun(X164,bool),X166),s('type.list.list'(fun(X164,bool)),X167))))),s(X164,sK17(X169,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165))),s('type.list.list'(fun(X164,bool)),'const.list.CONS_2'(s(fun(X164,bool),X166),s('type.list.list'(fun(X164,bool)),X167)))),X164)))))) )),
  inference(superposition,[],[f317,f324])).
fof(f2708,plain,(
  ( ! [X175,X173,X171,X174,X172,X170] : (p(s(bool,happ(s(fun(X170,bool),'const.list.EL_2'(s('type.num.num',X171),s('type.list.list'(fun(X170,bool)),X173))),s(X170,sK18(X175,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X171))),s('type.list.list'(fun(X170,bool)),'const.list.CONS_2'(s(fun(X170,bool),X172),s('type.list.list'(fun(X170,bool)),X173)))),X170))))) | ~p(s(bool,happ(s(fun(X170,bool),'const.list.EL_2'(s('type.num.num',X171),s('type.list.list'(fun(X170,bool)),X173))),s(X170,X174)))) | p(s(bool,X175))) )),
  inference(forward_demodulation,[],[f2667,f324])).
fof(f2667,plain,(
  ( ! [X175,X173,X171,X174,X172,X170] : (~p(s(bool,happ(s(fun(X170,bool),'const.list.EL_2'(s('type.num.num',X171),s('type.list.list'(fun(X170,bool)),X173))),s(X170,X174)))) | p(s(bool,X175)) | p(s(bool,happ(s(fun(X170,bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X171))),s('type.list.list'(fun(X170,bool)),'const.list.CONS_2'(s(fun(X170,bool),X172),s('type.list.list'(fun(X170,bool)),X173))))),s(X170,sK18(X175,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X171))),s('type.list.list'(fun(X170,bool)),'const.list.CONS_2'(s(fun(X170,bool),X172),s('type.list.list'(fun(X170,bool)),X173)))),X170)))))) )),
  inference(superposition,[],[f319,f324])).
fof(f2709,plain,(
  ( ! [X185,X182,X184,X183,X181] : (~p(s(bool,happ(s(fun(X181,bool),'const.list.EL_2'(s('type.num.num',X182),s('type.list.list'(fun(X181,bool)),X184))),s(X181,X185)))) | p(s(bool,happ(s(fun(X181,bool),'const.list.EL_2'(s('type.num.num',X182),s('type.list.list'(fun(X181,bool)),X184))),s(X181,sK19(X185,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X182))),s('type.list.list'(fun(X181,bool)),'const.list.CONS_2'(s(fun(X181,bool),X183),s('type.list.list'(fun(X181,bool)),X184)))),X181)))))) )),
  inference(forward_demodulation,[],[f2669,f324])).
fof(f2669,plain,(
  ( ! [X185,X182,X184,X183,X181] : (p(s(bool,happ(s(fun(X181,bool),'const.list.EL_2'(s('type.num.num',X182),s('type.list.list'(fun(X181,bool)),X184))),s(X181,sK19(X185,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X182))),s('type.list.list'(fun(X181,bool)),'const.list.CONS_2'(s(fun(X181,bool),X183),s('type.list.list'(fun(X181,bool)),X184)))),X181))))) | ~p(s(bool,happ(s(fun(X181,bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X182))),s('type.list.list'(fun(X181,bool)),'const.list.CONS_2'(s(fun(X181,bool),X183),s('type.list.list'(fun(X181,bool)),X184))))),s(X181,X185))))) )),
  inference(superposition,[],[f323,f324])).
fof(f4513,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X15)))) | ~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK13(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X14),s(X11,sK13(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11)))))) )),
  inference(forward_demodulation,[],[f4497,f295])).
fof(f4497,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK13(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11))))) | p(s(bool,happ(s(fun(X11,bool),happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X15)))) | ~p(s(bool,happ(s(fun(X11,bool),X14),s(X11,sK13(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11)))))) )),
  inference(superposition,[],[f311,f295])).
fof(f4516,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'(fun(X32,bool)),X35))),s(X32,X37)))) | ~p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'(fun(X32,bool)),X35))),s(X32,sK13('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32))))) | ~p(s(bool,happ(s(fun(X32,bool),X36),s(X32,sK13('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32)))))) )),
  inference(forward_demodulation,[],[f4500,f324])).
fof(f4500,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'(fun(X32,bool)),X35))),s(X32,sK13('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32))))) | p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35))))),s(X32,X37)))) | ~p(s(bool,happ(s(fun(X32,bool),X36),s(X32,sK13('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32)))))) )),
  inference(superposition,[],[f311,f324])).
fof(f4885,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X15)))) | ~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK15(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X14),s(X11,sK14(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11)))))) )),
  inference(forward_demodulation,[],[f4870,f295])).
fof(f4870,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'(fun(X11,bool)),X13))),s(X11,sK15(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11))))) | p(s(bool,happ(s(fun(X11,bool),happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13))),s(X11,X15)))) | ~p(s(bool,happ(s(fun(X11,bool),X14),s(X11,sK14(happ(s(fun('type.list.list'(fun(X11,bool)),fun(X11,bool)),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'(fun(X11,bool)),X13)),X14,X11)))))) )),
  inference(superposition,[],[f313,f295])).
fof(f4888,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'(fun(X32,bool)),X35))),s(X32,X37)))) | ~p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'(fun(X32,bool)),X35))),s(X32,sK15('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32))))) | ~p(s(bool,happ(s(fun(X32,bool),X36),s(X32,sK14('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32)))))) )),
  inference(forward_demodulation,[],[f4873,f324])).
fof(f4873,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'(fun(X32,bool)),X35))),s(X32,sK15('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32))))) | p(s(bool,happ(s(fun(X32,bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35))))),s(X32,X37)))) | ~p(s(bool,happ(s(fun(X32,bool),X36),s(X32,sK14('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))),s('type.list.list'(fun(X32,bool)),'const.list.CONS_2'(s(fun(X32,bool),X34),s('type.list.list'(fun(X32,bool)),X35)))),X36,X32)))))) )),
  inference(superposition,[],[f313,f324])).
fof(f3240,plain,(
  ( ! [X288,X285,X287,X283,X289,X284,X286] : (p(s(bool,happ(s(fun(X283,bool),'const.combin.o_3'(s(fun(X284,fun(X283,bool)),X285),s(fun(X286,X284),X287),s(X286,X288))),s(X283,X289)))) | s(X283,X289) = s(X283,sK16(X289,happ(s(fun(X284,fun(X283,bool)),X285),s(X284,happ(s(fun(X286,X284),X287),s(X286,X288)))),X283))) )),
  inference(superposition,[],[f314,f363])).
fof(f3245,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X322] : (~p(s(bool,happ(s(fun(X321,bool),'const.combin.o_3'(s(fun(X322,fun(X321,bool)),X323),s(fun(X324,X322),X325),s(X324,X326))),s(X321,X327)))) | s(X321,X327) = s(X321,sK19(X327,happ(s(fun(X322,fun(X321,bool)),X323),s(X322,happ(s(fun(X324,X322),X325),s(X324,X326)))),X321))) )),
  inference(superposition,[],[f322,f363])).
fof(f3294,plain,(
  ( ! [X269,X271,X267,X273,X268,X270,X272,X274] : (p(s(bool,happ(s(fun(X267,bool),'const.combin.o_3'(s(fun(X268,fun(X267,bool)),X269),s(fun(X270,X268),X271),s(X270,X272))),s(X267,sK11(X274,happ(s(fun(X268,fun(X267,bool)),X269),s(X268,happ(s(fun(X270,X268),X271),s(X270,X272)))),X267))))) | ~p(s(bool,happ(s(fun(X267,bool),'const.combin.o_3'(s(fun(X268,fun(X267,bool)),X269),s(fun(X270,X268),X271),s(X270,X272))),s(X267,X273)))) | p(s(bool,X274))) )),
  inference(forward_demodulation,[],[f3238,f363])).
fof(f3238,plain,(
  ( ! [X269,X271,X267,X273,X268,X270,X272,X274] : (~p(s(bool,happ(s(fun(X267,bool),'const.combin.o_3'(s(fun(X268,fun(X267,bool)),X269),s(fun(X270,X268),X271),s(X270,X272))),s(X267,X273)))) | p(s(bool,X274)) | p(s(bool,happ(s(fun(X267,bool),happ(s(fun(X268,fun(X267,bool)),X269),s(X268,happ(s(fun(X270,X268),X271),s(X270,X272))))),s(X267,sK11(X274,happ(s(fun(X268,fun(X267,bool)),X269),s(X268,happ(s(fun(X270,X268),X271),s(X270,X272)))),X267)))))) )),
  inference(superposition,[],[f306,f363])).
fof(f3295,plain,(
  ( ! [X280,X282,X277,X279,X275,X281,X276,X278] : (p(s(bool,happ(s(fun(X275,bool),'const.combin.o_3'(s(fun(X276,fun(X275,bool)),X277),s(fun(X278,X276),X279),s(X278,X280))),s(X275,sK12(X282,happ(s(fun(X276,fun(X275,bool)),X277),s(X276,happ(s(fun(X278,X276),X279),s(X278,X280)))),X275))))) | ~p(s(bool,happ(s(fun(X275,bool),'const.combin.o_3'(s(fun(X276,fun(X275,bool)),X277),s(fun(X278,X276),X279),s(X278,X280))),s(X275,X281)))) | p(s(bool,X282))) )),
  inference(forward_demodulation,[],[f3239,f363])).
fof(f3239,plain,(
  ( ! [X280,X282,X277,X279,X275,X281,X276,X278] : (~p(s(bool,happ(s(fun(X275,bool),'const.combin.o_3'(s(fun(X276,fun(X275,bool)),X277),s(fun(X278,X276),X279),s(X278,X280))),s(X275,X281)))) | p(s(bool,X282)) | p(s(bool,happ(s(fun(X275,bool),happ(s(fun(X276,fun(X275,bool)),X277),s(X276,happ(s(fun(X278,X276),X279),s(X278,X280))))),s(X275,sK12(X282,happ(s(fun(X276,fun(X275,bool)),X277),s(X276,happ(s(fun(X278,X276),X279),s(X278,X280)))),X275)))))) )),
  inference(superposition,[],[f308,f363])).
fof(f3296,plain,(
  ( ! [X292,X294,X290,X296,X293,X295,X291] : (p(s(bool,happ(s(fun(X290,bool),'const.combin.o_3'(s(fun(X291,fun(X290,bool)),X292),s(fun(X293,X291),X294),s(X293,X295))),s(X290,X296)))) | ~p(s(bool,happ(s(fun(X290,bool),'const.combin.o_3'(s(fun(X291,fun(X290,bool)),X292),s(fun(X293,X291),X294),s(X293,X295))),s(X290,sK16(X296,happ(s(fun(X291,fun(X290,bool)),X292),s(X291,happ(s(fun(X293,X291),X294),s(X293,X295)))),X290)))))) )),
  inference(forward_demodulation,[],[f3241,f363])).
fof(f3241,plain,(
  ( ! [X292,X294,X290,X296,X293,X295,X291] : (~p(s(bool,happ(s(fun(X290,bool),'const.combin.o_3'(s(fun(X291,fun(X290,bool)),X292),s(fun(X293,X291),X294),s(X293,X295))),s(X290,sK16(X296,happ(s(fun(X291,fun(X290,bool)),X292),s(X291,happ(s(fun(X293,X291),X294),s(X293,X295)))),X290))))) | p(s(bool,happ(s(fun(X290,bool),happ(s(fun(X291,fun(X290,bool)),X292),s(X291,happ(s(fun(X293,X291),X294),s(X293,X295))))),s(X290,X296))))) )),
  inference(superposition,[],[f315,f363])).
fof(f3298,plain,(
  ( ! [X308,X310,X306,X312,X309,X311,X305,X307] : (p(s(bool,happ(s(fun(X305,bool),'const.combin.o_3'(s(fun(X306,fun(X305,bool)),X307),s(fun(X308,X306),X309),s(X308,X310))),s(X305,sK17(X312,happ(s(fun(X306,fun(X305,bool)),X307),s(X306,happ(s(fun(X308,X306),X309),s(X308,X310)))),X305))))) | ~p(s(bool,happ(s(fun(X305,bool),'const.combin.o_3'(s(fun(X306,fun(X305,bool)),X307),s(fun(X308,X306),X309),s(X308,X310))),s(X305,X311)))) | p(s(bool,X312))) )),
  inference(forward_demodulation,[],[f3243,f363])).
fof(f3243,plain,(
  ( ! [X308,X310,X306,X312,X309,X311,X305,X307] : (~p(s(bool,happ(s(fun(X305,bool),'const.combin.o_3'(s(fun(X306,fun(X305,bool)),X307),s(fun(X308,X306),X309),s(X308,X310))),s(X305,X311)))) | p(s(bool,X312)) | p(s(bool,happ(s(fun(X305,bool),happ(s(fun(X306,fun(X305,bool)),X307),s(X306,happ(s(fun(X308,X306),X309),s(X308,X310))))),s(X305,sK17(X312,happ(s(fun(X306,fun(X305,bool)),X307),s(X306,happ(s(fun(X308,X306),X309),s(X308,X310)))),X305)))))) )),
  inference(superposition,[],[f317,f363])).
fof(f3299,plain,(
  ( ! [X313,X315,X316,X318,X314,X320,X317,X319] : (p(s(bool,happ(s(fun(X313,bool),'const.combin.o_3'(s(fun(X314,fun(X313,bool)),X315),s(fun(X316,X314),X317),s(X316,X318))),s(X313,sK18(X320,happ(s(fun(X314,fun(X313,bool)),X315),s(X314,happ(s(fun(X316,X314),X317),s(X316,X318)))),X313))))) | ~p(s(bool,happ(s(fun(X313,bool),'const.combin.o_3'(s(fun(X314,fun(X313,bool)),X315),s(fun(X316,X314),X317),s(X316,X318))),s(X313,X319)))) | p(s(bool,X320))) )),
  inference(forward_demodulation,[],[f3244,f363])).
fof(f3244,plain,(
  ( ! [X313,X315,X316,X318,X314,X320,X317,X319] : (~p(s(bool,happ(s(fun(X313,bool),'const.combin.o_3'(s(fun(X314,fun(X313,bool)),X315),s(fun(X316,X314),X317),s(X316,X318))),s(X313,X319)))) | p(s(bool,X320)) | p(s(bool,happ(s(fun(X313,bool),happ(s(fun(X314,fun(X313,bool)),X315),s(X314,happ(s(fun(X316,X314),X317),s(X316,X318))))),s(X313,sK18(X320,happ(s(fun(X314,fun(X313,bool)),X315),s(X314,happ(s(fun(X316,X314),X317),s(X316,X318)))),X313)))))) )),
  inference(superposition,[],[f319,f363])).
fof(f3300,plain,(
  ( ! [X333,X329,X331,X332,X334,X328,X330] : (~p(s(bool,happ(s(fun(X328,bool),'const.combin.o_3'(s(fun(X329,fun(X328,bool)),X330),s(fun(X331,X329),X332),s(X331,X333))),s(X328,X334)))) | p(s(bool,happ(s(fun(X328,bool),'const.combin.o_3'(s(fun(X329,fun(X328,bool)),X330),s(fun(X331,X329),X332),s(X331,X333))),s(X328,sK19(X334,happ(s(fun(X329,fun(X328,bool)),X330),s(X329,happ(s(fun(X331,X329),X332),s(X331,X333)))),X328)))))) )),
  inference(forward_demodulation,[],[f3246,f363])).
fof(f3246,plain,(
  ( ! [X333,X329,X331,X332,X334,X328,X330] : (p(s(bool,happ(s(fun(X328,bool),'const.combin.o_3'(s(fun(X329,fun(X328,bool)),X330),s(fun(X331,X329),X332),s(X331,X333))),s(X328,sK19(X334,happ(s(fun(X329,fun(X328,bool)),X330),s(X329,happ(s(fun(X331,X329),X332),s(X331,X333)))),X328))))) | ~p(s(bool,happ(s(fun(X328,bool),happ(s(fun(X329,fun(X328,bool)),X330),s(X329,happ(s(fun(X331,X329),X332),s(X331,X333))))),s(X328,X334))))) )),
  inference(superposition,[],[f323,f363])).
fof(f3452,plain,(
  ( ! [X313,X315,X310,X316,X312,X314,X311] : (p(s(bool,happ(s(fun(X310,bool),'const.combin.o_3'(s(fun(X312,fun(X310,bool)),X313),s(fun(X311,X312),X314),s(X311,X315))),s(X310,X316)))) | s(X310,X316) = s(X310,sK16(X316,happ(s(fun(X311,fun(X310,bool)),'const.combin.o_2'(s(fun(X312,fun(X310,bool)),X313),s(fun(X311,X312),X314))),s(X311,X315)),X310))) )),
  inference(superposition,[],[f314,f364])).
fof(f3457,plain,(
  ( ! [X350,X352,X354,X349,X351,X353,X348] : (~p(s(bool,happ(s(fun(X348,bool),'const.combin.o_3'(s(fun(X350,fun(X348,bool)),X351),s(fun(X349,X350),X352),s(X349,X353))),s(X348,X354)))) | s(X348,X354) = s(X348,sK19(X354,happ(s(fun(X349,fun(X348,bool)),'const.combin.o_2'(s(fun(X350,fun(X348,bool)),X351),s(fun(X349,X350),X352))),s(X349,X353)),X348))) )),
  inference(superposition,[],[f322,f364])).
fof(f3515,plain,(
  ( ! [X294,X300,X296,X298,X295,X301,X297,X299] : (p(s(bool,happ(s(fun(X294,bool),'const.combin.o_3'(s(fun(X296,fun(X294,bool)),X297),s(fun(X295,X296),X298),s(X295,X299))),s(X294,sK11(X301,happ(s(fun(X295,fun(X294,bool)),'const.combin.o_2'(s(fun(X296,fun(X294,bool)),X297),s(fun(X295,X296),X298))),s(X295,X299)),X294))))) | ~p(s(bool,happ(s(fun(X294,bool),'const.combin.o_3'(s(fun(X296,fun(X294,bool)),X297),s(fun(X295,X296),X298),s(X295,X299))),s(X294,X300)))) | p(s(bool,X301))) )),
  inference(forward_demodulation,[],[f3450,f364])).
fof(f3450,plain,(
  ( ! [X294,X300,X296,X298,X295,X301,X297,X299] : (~p(s(bool,happ(s(fun(X294,bool),'const.combin.o_3'(s(fun(X296,fun(X294,bool)),X297),s(fun(X295,X296),X298),s(X295,X299))),s(X294,X300)))) | p(s(bool,X301)) | p(s(bool,happ(s(fun(X294,bool),happ(s(fun(X295,fun(X294,bool)),'const.combin.o_2'(s(fun(X296,fun(X294,bool)),X297),s(fun(X295,X296),X298))),s(X295,X299))),s(X294,sK11(X301,happ(s(fun(X295,fun(X294,bool)),'const.combin.o_2'(s(fun(X296,fun(X294,bool)),X297),s(fun(X295,X296),X298))),s(X295,X299)),X294)))))) )),
  inference(superposition,[],[f306,f364])).
fof(f3516,plain,(
  ( ! [X302,X308,X304,X306,X303,X309,X305,X307] : (p(s(bool,happ(s(fun(X302,bool),'const.combin.o_3'(s(fun(X304,fun(X302,bool)),X305),s(fun(X303,X304),X306),s(X303,X307))),s(X302,sK12(X309,happ(s(fun(X303,fun(X302,bool)),'const.combin.o_2'(s(fun(X304,fun(X302,bool)),X305),s(fun(X303,X304),X306))),s(X303,X307)),X302))))) | ~p(s(bool,happ(s(fun(X302,bool),'const.combin.o_3'(s(fun(X304,fun(X302,bool)),X305),s(fun(X303,X304),X306),s(X303,X307))),s(X302,X308)))) | p(s(bool,X309))) )),
  inference(forward_demodulation,[],[f3451,f364])).
fof(f3451,plain,(
  ( ! [X302,X308,X304,X306,X303,X309,X305,X307] : (~p(s(bool,happ(s(fun(X302,bool),'const.combin.o_3'(s(fun(X304,fun(X302,bool)),X305),s(fun(X303,X304),X306),s(X303,X307))),s(X302,X308)))) | p(s(bool,X309)) | p(s(bool,happ(s(fun(X302,bool),happ(s(fun(X303,fun(X302,bool)),'const.combin.o_2'(s(fun(X304,fun(X302,bool)),X305),s(fun(X303,X304),X306))),s(X303,X307))),s(X302,sK12(X309,happ(s(fun(X303,fun(X302,bool)),'const.combin.o_2'(s(fun(X304,fun(X302,bool)),X305),s(fun(X303,X304),X306))),s(X303,X307)),X302)))))) )),
  inference(superposition,[],[f308,f364])).
fof(f3517,plain,(
  ( ! [X321,X323,X318,X320,X322,X317,X319] : (p(s(bool,happ(s(fun(X317,bool),'const.combin.o_3'(s(fun(X319,fun(X317,bool)),X320),s(fun(X318,X319),X321),s(X318,X322))),s(X317,X323)))) | ~p(s(bool,happ(s(fun(X317,bool),'const.combin.o_3'(s(fun(X319,fun(X317,bool)),X320),s(fun(X318,X319),X321),s(X318,X322))),s(X317,sK16(X323,happ(s(fun(X318,fun(X317,bool)),'const.combin.o_2'(s(fun(X319,fun(X317,bool)),X320),s(fun(X318,X319),X321))),s(X318,X322)),X317)))))) )),
  inference(forward_demodulation,[],[f3453,f364])).
fof(f3453,plain,(
  ( ! [X321,X323,X318,X320,X322,X317,X319] : (~p(s(bool,happ(s(fun(X317,bool),'const.combin.o_3'(s(fun(X319,fun(X317,bool)),X320),s(fun(X318,X319),X321),s(X318,X322))),s(X317,sK16(X323,happ(s(fun(X318,fun(X317,bool)),'const.combin.o_2'(s(fun(X319,fun(X317,bool)),X320),s(fun(X318,X319),X321))),s(X318,X322)),X317))))) | p(s(bool,happ(s(fun(X317,bool),happ(s(fun(X318,fun(X317,bool)),'const.combin.o_2'(s(fun(X319,fun(X317,bool)),X320),s(fun(X318,X319),X321))),s(X318,X322))),s(X317,X323))))) )),
  inference(superposition,[],[f315,f364])).
fof(f3519,plain,(
  ( ! [X333,X335,X337,X339,X332,X334,X336,X338] : (p(s(bool,happ(s(fun(X332,bool),'const.combin.o_3'(s(fun(X334,fun(X332,bool)),X335),s(fun(X333,X334),X336),s(X333,X337))),s(X332,sK17(X339,happ(s(fun(X333,fun(X332,bool)),'const.combin.o_2'(s(fun(X334,fun(X332,bool)),X335),s(fun(X333,X334),X336))),s(X333,X337)),X332))))) | ~p(s(bool,happ(s(fun(X332,bool),'const.combin.o_3'(s(fun(X334,fun(X332,bool)),X335),s(fun(X333,X334),X336),s(X333,X337))),s(X332,X338)))) | p(s(bool,X339))) )),
  inference(forward_demodulation,[],[f3455,f364])).
fof(f3455,plain,(
  ( ! [X333,X335,X337,X339,X332,X334,X336,X338] : (~p(s(bool,happ(s(fun(X332,bool),'const.combin.o_3'(s(fun(X334,fun(X332,bool)),X335),s(fun(X333,X334),X336),s(X333,X337))),s(X332,X338)))) | p(s(bool,X339)) | p(s(bool,happ(s(fun(X332,bool),happ(s(fun(X333,fun(X332,bool)),'const.combin.o_2'(s(fun(X334,fun(X332,bool)),X335),s(fun(X333,X334),X336))),s(X333,X337))),s(X332,sK17(X339,happ(s(fun(X333,fun(X332,bool)),'const.combin.o_2'(s(fun(X334,fun(X332,bool)),X335),s(fun(X333,X334),X336))),s(X333,X337)),X332)))))) )),
  inference(superposition,[],[f317,f364])).
fof(f3520,plain,(
  ( ! [X344,X346,X341,X343,X345,X347,X340,X342] : (p(s(bool,happ(s(fun(X340,bool),'const.combin.o_3'(s(fun(X342,fun(X340,bool)),X343),s(fun(X341,X342),X344),s(X341,X345))),s(X340,sK18(X347,happ(s(fun(X341,fun(X340,bool)),'const.combin.o_2'(s(fun(X342,fun(X340,bool)),X343),s(fun(X341,X342),X344))),s(X341,X345)),X340))))) | ~p(s(bool,happ(s(fun(X340,bool),'const.combin.o_3'(s(fun(X342,fun(X340,bool)),X343),s(fun(X341,X342),X344),s(X341,X345))),s(X340,X346)))) | p(s(bool,X347))) )),
  inference(forward_demodulation,[],[f3456,f364])).
fof(f3456,plain,(
  ( ! [X344,X346,X341,X343,X345,X347,X340,X342] : (~p(s(bool,happ(s(fun(X340,bool),'const.combin.o_3'(s(fun(X342,fun(X340,bool)),X343),s(fun(X341,X342),X344),s(X341,X345))),s(X340,X346)))) | p(s(bool,X347)) | p(s(bool,happ(s(fun(X340,bool),happ(s(fun(X341,fun(X340,bool)),'const.combin.o_2'(s(fun(X342,fun(X340,bool)),X343),s(fun(X341,X342),X344))),s(X341,X345))),s(X340,sK18(X347,happ(s(fun(X341,fun(X340,bool)),'const.combin.o_2'(s(fun(X342,fun(X340,bool)),X343),s(fun(X341,X342),X344))),s(X341,X345)),X340)))))) )),
  inference(superposition,[],[f319,f364])).
fof(f3521,plain,(
  ( ! [X356,X358,X360,X357,X359,X355,X361] : (~p(s(bool,happ(s(fun(X355,bool),'const.combin.o_3'(s(fun(X357,fun(X355,bool)),X358),s(fun(X356,X357),X359),s(X356,X360))),s(X355,X361)))) | p(s(bool,happ(s(fun(X355,bool),'const.combin.o_3'(s(fun(X357,fun(X355,bool)),X358),s(fun(X356,X357),X359),s(X356,X360))),s(X355,sK19(X361,happ(s(fun(X356,fun(X355,bool)),'const.combin.o_2'(s(fun(X357,fun(X355,bool)),X358),s(fun(X356,X357),X359))),s(X356,X360)),X355)))))) )),
  inference(forward_demodulation,[],[f3458,f364])).
fof(f3458,plain,(
  ( ! [X356,X358,X360,X357,X359,X355,X361] : (p(s(bool,happ(s(fun(X355,bool),'const.combin.o_3'(s(fun(X357,fun(X355,bool)),X358),s(fun(X356,X357),X359),s(X356,X360))),s(X355,sK19(X361,happ(s(fun(X356,fun(X355,bool)),'const.combin.o_2'(s(fun(X357,fun(X355,bool)),X358),s(fun(X356,X357),X359))),s(X356,X360)),X355))))) | ~p(s(bool,happ(s(fun(X355,bool),happ(s(fun(X356,fun(X355,bool)),'const.combin.o_2'(s(fun(X357,fun(X355,bool)),X358),s(fun(X356,X357),X359))),s(X356,X360))),s(X355,X361))))) )),
  inference(superposition,[],[f323,f364])).
fof(f4514,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (p(s(bool,happ(s(fun(X16,bool),'const.combin.o_3'(s(fun(X17,fun(X16,bool)),X18),s(fun(X19,X17),X20),s(X19,X21))),s(X16,X23)))) | ~p(s(bool,happ(s(fun(X16,bool),'const.combin.o_3'(s(fun(X17,fun(X16,bool)),X18),s(fun(X19,X17),X20),s(X19,X21))),s(X16,sK13(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16))))) | ~p(s(bool,happ(s(fun(X16,bool),X22),s(X16,sK13(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16)))))) )),
  inference(forward_demodulation,[],[f4498,f363])).
fof(f4498,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X16,bool),'const.combin.o_3'(s(fun(X17,fun(X16,bool)),X18),s(fun(X19,X17),X20),s(X19,X21))),s(X16,sK13(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16))))) | p(s(bool,happ(s(fun(X16,bool),happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21))))),s(X16,X23)))) | ~p(s(bool,happ(s(fun(X16,bool),X22),s(X16,sK13(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16)))))) )),
  inference(superposition,[],[f311,f363])).
fof(f4515,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (p(s(bool,happ(s(fun(X24,bool),'const.combin.o_3'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28),s(X25,X29))),s(X24,X31)))) | ~p(s(bool,happ(s(fun(X24,bool),'const.combin.o_3'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28),s(X25,X29))),s(X24,sK13(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24))))) | ~p(s(bool,happ(s(fun(X24,bool),X30),s(X24,sK13(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24)))))) )),
  inference(forward_demodulation,[],[f4499,f364])).
fof(f4499,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (~p(s(bool,happ(s(fun(X24,bool),'const.combin.o_3'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28),s(X25,X29))),s(X24,sK13(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24))))) | p(s(bool,happ(s(fun(X24,bool),happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29))),s(X24,X31)))) | ~p(s(bool,happ(s(fun(X24,bool),X30),s(X24,sK13(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24)))))) )),
  inference(superposition,[],[f311,f364])).
fof(f4886,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (p(s(bool,happ(s(fun(X16,bool),'const.combin.o_3'(s(fun(X17,fun(X16,bool)),X18),s(fun(X19,X17),X20),s(X19,X21))),s(X16,X23)))) | ~p(s(bool,happ(s(fun(X16,bool),'const.combin.o_3'(s(fun(X17,fun(X16,bool)),X18),s(fun(X19,X17),X20),s(X19,X21))),s(X16,sK15(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16))))) | ~p(s(bool,happ(s(fun(X16,bool),X22),s(X16,sK14(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16)))))) )),
  inference(forward_demodulation,[],[f4871,f363])).
fof(f4871,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X16,bool),'const.combin.o_3'(s(fun(X17,fun(X16,bool)),X18),s(fun(X19,X17),X20),s(X19,X21))),s(X16,sK15(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16))))) | p(s(bool,happ(s(fun(X16,bool),happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21))))),s(X16,X23)))) | ~p(s(bool,happ(s(fun(X16,bool),X22),s(X16,sK14(happ(s(fun(X17,fun(X16,bool)),X18),s(X17,happ(s(fun(X19,X17),X20),s(X19,X21)))),X22,X16)))))) )),
  inference(superposition,[],[f313,f363])).
fof(f4887,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (p(s(bool,happ(s(fun(X24,bool),'const.combin.o_3'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28),s(X25,X29))),s(X24,X31)))) | ~p(s(bool,happ(s(fun(X24,bool),'const.combin.o_3'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28),s(X25,X29))),s(X24,sK15(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24))))) | ~p(s(bool,happ(s(fun(X24,bool),X30),s(X24,sK14(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24)))))) )),
  inference(forward_demodulation,[],[f4872,f364])).
fof(f4872,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (~p(s(bool,happ(s(fun(X24,bool),'const.combin.o_3'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28),s(X25,X29))),s(X24,sK15(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24))))) | p(s(bool,happ(s(fun(X24,bool),happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29))),s(X24,X31)))) | ~p(s(bool,happ(s(fun(X24,bool),X30),s(X24,sK14(happ(s(fun(X25,fun(X24,bool)),'const.combin.o_2'(s(fun(X26,fun(X24,bool)),X27),s(fun(X25,X26),X28))),s(X25,X29)),X30,X24)))))) )),
  inference(superposition,[],[f313,f364])).
fof(f3498,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s(X77,'const.combin.o_3'(s(fun(X79,X77),X80),s(fun(X78,X79),X81),s(X78,X82))) = s(X77,sK19(happ(s(fun(X78,X77),'const.combin.o_2'(s(fun(X79,X77),X80),s(fun(X78,X79),X81))),s(X78,X82)),X83,X77)) | ~p(s(bool,happ(s(fun(X77,bool),X83),s(X77,'const.combin.o_3'(s(fun(X79,X77),X80),s(fun(X78,X79),X81),s(X78,X82))))))) )),
  inference(forward_demodulation,[],[f3417,f364])).
fof(f3417,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (~p(s(bool,happ(s(fun(X77,bool),X83),s(X77,'const.combin.o_3'(s(fun(X79,X77),X80),s(fun(X78,X79),X81),s(X78,X82)))))) | s(X77,happ(s(fun(X78,X77),'const.combin.o_2'(s(fun(X79,X77),X80),s(fun(X78,X79),X81))),s(X78,X82))) = s(X77,sK19(happ(s(fun(X78,X77),'const.combin.o_2'(s(fun(X79,X77),X80),s(fun(X78,X79),X81))),s(X78,X82)),X83,X77))) )),
  inference(superposition,[],[f322,f364])).
fof(f3496,plain,(
  ( ! [X47,X52,X50,X48,X46,X51,X49] : (s(X46,'const.combin.o_3'(s(fun(X48,X46),X49),s(fun(X47,X48),X50),s(X47,X51))) = s(X46,sK16(happ(s(fun(X47,X46),'const.combin.o_2'(s(fun(X48,X46),X49),s(fun(X47,X48),X50))),s(X47,X51)),X52,X46)) | p(s(bool,happ(s(fun(X46,bool),X52),s(X46,'const.combin.o_3'(s(fun(X48,X46),X49),s(fun(X47,X48),X50),s(X47,X51))))))) )),
  inference(forward_demodulation,[],[f3413,f364])).
fof(f3413,plain,(
  ( ! [X47,X52,X50,X48,X46,X51,X49] : (p(s(bool,happ(s(fun(X46,bool),X52),s(X46,'const.combin.o_3'(s(fun(X48,X46),X49),s(fun(X47,X48),X50),s(X47,X51)))))) | s(X46,happ(s(fun(X47,X46),'const.combin.o_2'(s(fun(X48,X46),X49),s(fun(X47,X48),X50))),s(X47,X51))) = s(X46,sK16(happ(s(fun(X47,X46),'const.combin.o_2'(s(fun(X48,X46),X49),s(fun(X47,X48),X50))),s(X47,X51)),X52,X46))) )),
  inference(superposition,[],[f314,f364])).
fof(f3284,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s(X70,'const.combin.o_3'(s(fun(X71,X70),X72),s(fun(X73,X71),X74),s(X73,X75))) = s(X70,sK19(happ(s(fun(X71,X70),X72),s(X71,happ(s(fun(X73,X71),X74),s(X73,X75)))),X76,X70)) | ~p(s(bool,happ(s(fun(X70,bool),X76),s(X70,'const.combin.o_3'(s(fun(X71,X70),X72),s(fun(X73,X71),X74),s(X73,X75))))))) )),
  inference(forward_demodulation,[],[f3208,f363])).
fof(f3208,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (~p(s(bool,happ(s(fun(X70,bool),X76),s(X70,'const.combin.o_3'(s(fun(X71,X70),X72),s(fun(X73,X71),X74),s(X73,X75)))))) | s(X70,happ(s(fun(X71,X70),X72),s(X71,happ(s(fun(X73,X71),X74),s(X73,X75))))) = s(X70,sK19(happ(s(fun(X71,X70),X72),s(X71,happ(s(fun(X73,X71),X74),s(X73,X75)))),X76,X70))) )),
  inference(superposition,[],[f322,f363])).
fof(f3282,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (s(X39,'const.combin.o_3'(s(fun(X40,X39),X41),s(fun(X42,X40),X43),s(X42,X44))) = s(X39,sK16(happ(s(fun(X40,X39),X41),s(X40,happ(s(fun(X42,X40),X43),s(X42,X44)))),X45,X39)) | p(s(bool,happ(s(fun(X39,bool),X45),s(X39,'const.combin.o_3'(s(fun(X40,X39),X41),s(fun(X42,X40),X43),s(X42,X44))))))) )),
  inference(forward_demodulation,[],[f3204,f363])).
fof(f3204,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (p(s(bool,happ(s(fun(X39,bool),X45),s(X39,'const.combin.o_3'(s(fun(X40,X39),X41),s(fun(X42,X40),X43),s(X42,X44)))))) | s(X39,happ(s(fun(X40,X39),X41),s(X40,happ(s(fun(X42,X40),X43),s(X42,X44))))) = s(X39,sK16(happ(s(fun(X40,X39),X41),s(X40,happ(s(fun(X42,X40),X43),s(X42,X44)))),X45,X39))) )),
  inference(superposition,[],[f314,f363])).
fof(f2693,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(X45,'const.list.EL_2'(s('type.num.num',X46),s('type.list.list'(X45),X48))) = s(X45,sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,X47),s('type.list.list'(X45),X48)))),X49,X45)) | ~p(s(bool,happ(s(fun(X45,bool),X49),s(X45,'const.list.EL_2'(s('type.num.num',X46),s('type.list.list'(X45),X48))))))) )),
  inference(forward_demodulation,[],[f2641,f324])).
fof(f2641,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,happ(s(fun(X45,bool),X49),s(X45,'const.list.EL_2'(s('type.num.num',X46),s('type.list.list'(X45),X48)))))) | s(X45,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,X47),s('type.list.list'(X45),X48))))) = s(X45,sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,X47),s('type.list.list'(X45),X48)))),X49,X45))) )),
  inference(superposition,[],[f322,f324])).
fof(f2691,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s(X22,'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'(X22),X25))) = s(X22,sK16('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))),s('type.list.list'(X22),'const.list.CONS_2'(s(X22,X24),s('type.list.list'(X22),X25)))),X26,X22)) | p(s(bool,happ(s(fun(X22,bool),X26),s(X22,'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'(X22),X25))))))) )),
  inference(forward_demodulation,[],[f2637,f324])).
fof(f2637,plain,(
  ( ! [X26,X24,X23,X25,X22] : (p(s(bool,happ(s(fun(X22,bool),X26),s(X22,'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'(X22),X25)))))) | s(X22,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))),s('type.list.list'(X22),'const.list.CONS_2'(s(X22,X24),s('type.list.list'(X22),X25))))) = s(X22,sK16('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))),s('type.list.list'(X22),'const.list.CONS_2'(s(X22,X24),s('type.list.list'(X22),X25)))),X26,X22))) )),
  inference(superposition,[],[f314,f324])).
fof(f1079,plain,(
  ( ! [X6,X4,X7,X5] : (s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),X6))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s('type.list.list'(X4),X6)),X7,X4)) | ~p(s(bool,happ(s(fun(X4,bool),X7),s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),X6))))))) )),
  inference(forward_demodulation,[],[f1036,f295])).
fof(f1036,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(X4,bool),X7),s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),X6)))))) | s(X4,happ(s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s('type.list.list'(X4),X6))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s('type.list.list'(X4),X6)),X7,X4))) )),
  inference(superposition,[],[f322,f295])).
fof(f1081,plain,(
  ( ! [X14,X12,X15,X13] : (s(X12,'const.list.EL_2'(s('type.num.num',X13),s('type.list.list'(X12),X14))) = s(X12,sK16(happ(s(fun('type.list.list'(X12),X12),'const.list.EL_1'(s('type.num.num',X13))),s('type.list.list'(X12),X14)),X15,X12)) | p(s(bool,happ(s(fun(X12,bool),X15),s(X12,'const.list.EL_2'(s('type.num.num',X13),s('type.list.list'(X12),X14))))))) )),
  inference(forward_demodulation,[],[f1038,f295])).
fof(f1038,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,happ(s(fun(X12,bool),X15),s(X12,'const.list.EL_2'(s('type.num.num',X13),s('type.list.list'(X12),X14)))))) | s(X12,happ(s(fun('type.list.list'(X12),X12),'const.list.EL_1'(s('type.num.num',X13))),s('type.list.list'(X12),X14))) = s(X12,sK16(happ(s(fun('type.list.list'(X12),X12),'const.list.EL_1'(s('type.num.num',X13))),s('type.list.list'(X12),X14)),X15,X12))) )),
  inference(superposition,[],[f314,f295])).
fof(f9472,plain,(
  ( ! [X30,X31,X29] : (s(X29,'const.list.HD_1'(s('type.list.list'(X29),X30))) = s(X29,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X29),X30)),X31,X29)) | ~p(s(bool,happ(s(fun(X29,bool),X31),s(X29,'const.list.HD_1'(s('type.list.list'(X29),X30))))))) )),
  inference(forward_demodulation,[],[f9210,f1077])).
fof(f9210,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,happ(s(fun(X29,bool),X31),s(X29,'const.list.HD_1'(s('type.list.list'(X29),X30)))))) | s(X29,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X29),X30))) = s(X29,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X29),X30)),X31,X29))) )),
  inference(superposition,[],[f322,f1077])).
fof(f9470,plain,(
  ( ! [X14,X15,X16] : (s(X14,'const.list.HD_1'(s('type.list.list'(X14),X15))) = s(X14,sK16('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)),X16,X14)) | p(s(bool,happ(s(fun(X14,bool),X16),s(X14,'const.list.HD_1'(s('type.list.list'(X14),X15))))))) )),
  inference(forward_demodulation,[],[f9206,f1077])).
fof(f9206,plain,(
  ( ! [X14,X15,X16] : (p(s(bool,happ(s(fun(X14,bool),X16),s(X14,'const.list.HD_1'(s('type.list.list'(X14),X15)))))) | s(X14,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15))) = s(X14,sK16('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)),X16,X14))) )),
  inference(superposition,[],[f314,f1077])).
fof(f899,plain,(
  ( ! [X6,X4,X5] : (s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5)),X6,X4)) | ~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))))))) )),
  inference(forward_demodulation,[],[f881,f285])).
fof(f881,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5)))))) | s(X4,happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5)),X6,X4))) )),
  inference(superposition,[],[f322,f285])).
fof(f809,plain,(
  ( ! [X6,X4,X5] : (s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))) = s(X4,sK16(happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5)),X6,X4)) | p(s(bool,happ(s(fun(X4,bool),X6),s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))))))) )),
  inference(forward_demodulation,[],[f794,f285])).
fof(f794,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun(X4,bool),X6),s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5)))))) | s(X4,happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5))) = s(X4,sK16(happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5)),X6,X4))) )),
  inference(superposition,[],[f314,f285])).
fof(f3214,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,'const.combin.o_3'(s(fun(X121,bool),X122),s(fun(X123,X121),X124),s(X123,X125)))) | p(s(bool,X126)) | p(s(bool,happ(s(fun(X121,bool),X122),s(X121,sK11(X126,X122,X121)))))) )),
  inference(superposition,[],[f306,f363])).
fof(f3215,plain,(
  ( ! [X127,X132,X130,X128,X131,X129] : (~p(s(bool,'const.combin.o_3'(s(fun(X127,bool),X128),s(fun(X129,X127),X130),s(X129,X131)))) | p(s(bool,X132)) | p(s(bool,happ(s(fun(X127,bool),X128),s(X127,sK12(X132,X128,X127)))))) )),
  inference(superposition,[],[f308,f363])).
fof(f4520,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (p(s(bool,'const.combin.o_3'(s(fun(X10,bool),X11),s(fun(X9,X10),X12),s(X9,X14)))) | ~p(s(bool,'const.combin.o_3'(s(fun(X10,bool),X11),s(fun(X9,X10),X12),s(X9,sK13('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK13('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9)))))) )),
  inference(forward_demodulation,[],[f4505,f364])).
fof(f4505,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (~p(s(bool,'const.combin.o_3'(s(fun(X10,bool),X11),s(fun(X9,X10),X12),s(X9,sK13('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9))))) | p(s(bool,happ(s(fun(X9,bool),'const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12))),s(X9,X14)))) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK13('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9)))))) )),
  inference(superposition,[],[f311,f364])).
fof(f4892,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (p(s(bool,'const.combin.o_3'(s(fun(X10,bool),X11),s(fun(X9,X10),X12),s(X9,X14)))) | ~p(s(bool,'const.combin.o_3'(s(fun(X10,bool),X11),s(fun(X9,X10),X12),s(X9,sK15('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK14('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9)))))) )),
  inference(forward_demodulation,[],[f4878,f364])).
fof(f4878,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (~p(s(bool,'const.combin.o_3'(s(fun(X10,bool),X11),s(fun(X9,X10),X12),s(X9,sK15('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9))))) | p(s(bool,happ(s(fun(X9,bool),'const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12))),s(X9,X14)))) | ~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,sK14('const.combin.o_2'(s(fun(X10,bool),X11),s(fun(X9,X10),X12)),X13,X9)))))) )),
  inference(superposition,[],[f313,f364])).
fof(f3218,plain,(
  ( ! [X146,X144,X149,X147,X145,X148] : (~p(s(bool,'const.combin.o_3'(s(fun(X144,bool),X145),s(fun(X146,X144),X147),s(X146,X148)))) | p(s(bool,X149)) | p(s(bool,happ(s(fun(X144,bool),X145),s(X144,sK17(X149,X145,X144)))))) )),
  inference(superposition,[],[f317,f363])).
fof(f3219,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (~p(s(bool,'const.combin.o_3'(s(fun(X150,bool),X151),s(fun(X152,X150),X153),s(X152,X154)))) | p(s(bool,X155)) | p(s(bool,happ(s(fun(X150,bool),X151),s(X150,sK18(X155,X151,X150)))))) )),
  inference(superposition,[],[f319,f363])).
fof(f3339,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'T_0')))) | s(bool,X54) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X52,'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,happ(s(fun(bool,bool),X53),s(bool,X54)))) | s(bool,'T_0') = s(bool,X52)) ) | $spl14),
  inference(superposition,[],[f316,f2602])).
fof(f10552,plain,(
  ( ! [X285,X287,X286] : (p(s(bool,happ(s(fun(bool,bool),X287),s(bool,X286)))) | s(bool,X285) = s(bool,sK16(X285,X287,bool)) | s(bool,'T_0') = s(bool,X286) | s(bool,'T_0') = s(bool,X285)) )),
  inference(superposition,[],[f314,f424])).
fof(f10553,plain,(
  ( ! [X288,X290,X289,X291] : (~p(s(bool,happ(s(fun(bool,bool),X290),s(bool,X289)))) | s(bool,X288) != s(bool,X291) | p(s(bool,happ(s(fun(bool,bool),X290),s(bool,X291)))) | s(bool,'T_0') = s(bool,X289) | s(bool,'T_0') = s(bool,X288)) )),
  inference(superposition,[],[f316,f424])).
fof(f10556,plain,(
  ( ! [X300,X302,X301] : (~p(s(bool,happ(s(fun(bool,bool),X302),s(bool,X301)))) | s(bool,X300) = s(bool,sK19(X300,X302,bool)) | s(bool,'T_0') = s(bool,X301) | s(bool,'T_0') = s(bool,X300)) )),
  inference(superposition,[],[f322,f424])).
fof(f10574,plain,(
  ( ! [X383,X382,X384,X381] : (~p(s(bool,happ(s(fun(bool,bool),X381),s(bool,X383)))) | p(s(bool,happ(s(fun(bool,bool),X381),s(bool,X384)))) | ~p(s(bool,happ(s(fun(bool,bool),X382),s(bool,sK13(X381,X382,bool))))) | s(bool,'T_0') = s(bool,X383) | s(bool,'T_0') = s(bool,sK13(X381,X382,bool))) )),
  inference(superposition,[],[f311,f424])).
fof(f10575,plain,(
  ( ! [X385,X387,X388,X386] : (~p(s(bool,happ(s(fun(bool,bool),X385),s(bool,X387)))) | p(s(bool,happ(s(fun(bool,bool),X386),s(bool,X388)))) | ~p(s(bool,happ(s(fun(bool,bool),X386),s(bool,sK13(X385,X386,bool))))) | s(bool,'T_0') = s(bool,X387) | s(bool,'T_0') = s(bool,sK13(X385,X386,bool))) )),
  inference(superposition,[],[f310,f424])).
fof(f10576,plain,(
  ( ! [X389,X391,X390,X392] : (~p(s(bool,happ(s(fun(bool,bool),X389),s(bool,X391)))) | p(s(bool,happ(s(fun(bool,bool),X389),s(bool,X392)))) | ~p(s(bool,happ(s(fun(bool,bool),X390),s(bool,sK14(X389,X390,bool))))) | s(bool,'T_0') = s(bool,X391) | s(bool,'T_0') = s(bool,sK15(X389,X390,bool))) )),
  inference(superposition,[],[f313,f424])).
fof(f10577,plain,(
  ( ! [X393,X395,X396,X394] : (~p(s(bool,happ(s(fun(bool,bool),X393),s(bool,X395)))) | p(s(bool,happ(s(fun(bool,bool),X394),s(bool,X396)))) | ~p(s(bool,happ(s(fun(bool,bool),X394),s(bool,sK14(X393,X394,bool))))) | s(bool,'T_0') = s(bool,X395) | s(bool,'T_0') = s(bool,sK15(X393,X394,bool))) )),
  inference(superposition,[],[f312,f424])).
fof(f10578,plain,(
  ( ! [X397,X399,X398] : (~p(s(bool,happ(s(fun(bool,bool),X398),s(bool,X399)))) | p(s(bool,happ(s(fun(bool,bool),X398),s(bool,X397)))) | s(bool,'T_0') = s(bool,X399) | s(bool,'T_0') = s(bool,sK16(X397,X398,bool))) )),
  inference(superposition,[],[f315,f424])).
fof(f10579,plain,(
  ( ! [X401,X400,X402] : (p(s(bool,happ(s(fun(bool,bool),X401),s(bool,X402)))) | ~p(s(bool,happ(s(fun(bool,bool),X401),s(bool,X400)))) | s(bool,'T_0') = s(bool,X402) | s(bool,'T_0') = s(bool,sK19(X400,X401,bool))) )),
  inference(superposition,[],[f323,f424])).
fof(f10712,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,happ(s(fun(bool,bool),X9),s(bool,X8)))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X9,bool)) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl14),
  inference(superposition,[],[f2515,f424])).
fof(f10713,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X11)))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X12,bool)) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl14),
  inference(superposition,[],[f2517,f424])).
fof(f10743,plain,(
  ( ! [X111,X112,X113] : (p(s(bool,happ(s(fun(bool,bool),X112),s(bool,X111)))) | s(bool,'T_0') = s(bool,sK16('T_0',X112,bool)) | s(bool,X111) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f314,f424])).
fof(f10744,plain,(
  ( ! [X116,X114,X117,X115] : (~p(s(bool,happ(s(fun(bool,bool),X115),s(bool,X114)))) | s(bool,'T_0') != s(bool,X116) | p(s(bool,happ(s(fun(bool,bool),X115),s(bool,X116)))) | s(bool,X114) = s(bool,X117) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f316,f424])).
fof(f10747,plain,(
  ( ! [X127,X128,X126] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,'T_0') = s(bool,sK19('T_0',X127,bool)) | s(bool,X126) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f322,f424])).
fof(f10843,plain,(
  ( ! [X271,X273,X270,X272] : (~p(s(bool,happ(s(fun(bool,bool),X271),s(bool,'T_0')))) | s(bool,X270) != s(bool,X272) | p(s(bool,happ(s(fun(bool,bool),X271),s(bool,X272)))) | s(bool,X270) = s(bool,X273) | s(bool,'T_0') = s(bool,X273)) )),
  inference(superposition,[],[f316,f424])).
fof(f10864,plain,(
  ( ! [X364,X362,X365,X363] : (~p(s(bool,happ(s(fun(bool,bool),X362),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X362),s(bool,X364)))) | ~p(s(bool,happ(s(fun(bool,bool),X363),s(bool,sK13(X362,X363,bool))))) | s(bool,X365) = s(bool,sK13(X362,X363,bool)) | s(bool,'T_0') = s(bool,X365)) )),
  inference(superposition,[],[f311,f424])).
fof(f10865,plain,(
  ( ! [X366,X368,X367,X369] : (~p(s(bool,happ(s(fun(bool,bool),X366),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X367),s(bool,X368)))) | ~p(s(bool,happ(s(fun(bool,bool),X367),s(bool,sK13(X366,X367,bool))))) | s(bool,X369) = s(bool,sK13(X366,X367,bool)) | s(bool,'T_0') = s(bool,X369)) )),
  inference(superposition,[],[f310,f424])).
fof(f10866,plain,(
  ( ! [X372,X370,X373,X371] : (~p(s(bool,happ(s(fun(bool,bool),X370),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X370),s(bool,X372)))) | ~p(s(bool,happ(s(fun(bool,bool),X371),s(bool,sK14(X370,X371,bool))))) | s(bool,X373) = s(bool,sK15(X370,X371,bool)) | s(bool,'T_0') = s(bool,X373)) )),
  inference(superposition,[],[f313,f424])).
fof(f10867,plain,(
  ( ! [X377,X374,X376,X375] : (~p(s(bool,happ(s(fun(bool,bool),X374),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X375),s(bool,X376)))) | ~p(s(bool,happ(s(fun(bool,bool),X375),s(bool,sK14(X374,X375,bool))))) | s(bool,X377) = s(bool,sK15(X374,X375,bool)) | s(bool,'T_0') = s(bool,X377)) )),
  inference(superposition,[],[f312,f424])).
fof(f10868,plain,(
  ( ! [X379,X380,X378] : (~p(s(bool,happ(s(fun(bool,bool),X379),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X379),s(bool,X378)))) | s(bool,X380) = s(bool,sK16(X378,X379,bool)) | s(bool,'T_0') = s(bool,X380)) )),
  inference(superposition,[],[f315,f424])).
fof(f10869,plain,(
  ( ! [X383,X382,X381] : (p(s(bool,happ(s(fun(bool,bool),X382),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X382),s(bool,X381)))) | s(bool,X383) = s(bool,sK19(X381,X382,bool)) | s(bool,'T_0') = s(bool,X383)) )),
  inference(superposition,[],[f323,f424])).
fof(f2515,plain,(
  ( ! [X27] : (p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X27,bool))) ) | $spl14),
  inference(forward_demodulation,[],[f2494,f2381])).
fof(f2494,plain,(
  ( ! [X27] : (p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'T_0')))) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X27,bool))) ) | $spl14),
  inference(superposition,[],[f314,f2381])).
fof(f2517,plain,(
  ( ! [X30] : (~p(s(bool,happ(s(fun(bool,bool),X30),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X30,bool))) ) | $spl14),
  inference(forward_demodulation,[],[f2496,f2381])).
fof(f2496,plain,(
  ( ! [X30] : (~p(s(bool,happ(s(fun(bool,bool),X30),s(bool,'T_0')))) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X30,bool))) ) | $spl14),
  inference(superposition,[],[f322,f2381])).
fof(f3156,plain,(
  ( ! [X50,X49] : (s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X49),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X50,bool)) | p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f3130,f2605])).
fof(f3130,plain,(
  ( ! [X50,X49] : (p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'T_0')))) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X49),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X49),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X50,bool))) ) | $spl14),
  inference(superposition,[],[f314,f2605])).
fof(f3158,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X61,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f3134,f2605])).
fof(f3134,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'T_0')))) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X61,bool))) ) | $spl14),
  inference(superposition,[],[f322,f2605])).
fof(f3338,plain,(
  ( ! [X50,X51] : (p(s(bool,happ(s(fun(bool,bool),X51),s(bool,'T_0')))) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X50,'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11(X50,'const.list.HD_0','type.list.list'(bool)))),X51,bool)) | s(bool,'T_0') = s(bool,X50)) ) | $spl14),
  inference(superposition,[],[f314,f2602])).
fof(f3342,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0')))) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X61,'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11(X61,'const.list.HD_0','type.list.list'(bool)))),X62,bool)) | s(bool,'T_0') = s(bool,X61)) ) | $spl14),
  inference(superposition,[],[f322,f2602])).
fof(f6278,plain,(
  ( ! [X22] : (s(bool,'T_0') = s(bool,sK16(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X22,bool)) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f6277,f2381])).
fof(f6277,plain,(
  ( ! [X22] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X22,bool)) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f6205,f285])).
fof(f6205,plain,(
  ( ! [X22] : (p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'T_0')))) | s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X22,bool))) ) | $spl14),
  inference(superposition,[],[f314,f6100])).
fof(f6280,plain,(
  ( ! [X23] : (s(bool,'T_0') = s(bool,sK19(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f6279,f2381])).
fof(f6279,plain,(
  ( ! [X23] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f6206,f285])).
fof(f6206,plain,(
  ( ! [X23] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X23,bool))) ) | $spl14),
  inference(superposition,[],[f322,f6100])).
fof(f6746,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') = s(bool,sK16(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X64),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X65,bool)) | p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f6745,f2605])).
fof(f6745,plain,(
  ( ! [X64,X65] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X64),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X64),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X65,bool)) | p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f6659,f285])).
fof(f6659,plain,(
  ( ! [X64,X65] : (p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0')))) | s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X64),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X64),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X65,bool))) ) | $spl14),
  inference(superposition,[],[f314,f6101])).
fof(f6748,plain,(
  ( ! [X66,X67] : (s(bool,'T_0') = s(bool,sK19(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X67,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f6747,f2605])).
fof(f6747,plain,(
  ( ! [X66,X67] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X67,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f6660,f285])).
fof(f6660,plain,(
  ( ! [X66,X67] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'T_0')))) | s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X67,bool))) ) | $spl14),
  inference(superposition,[],[f322,f6101])).
fof(f8088,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),'const.list.HD_1'(s('type.list.list'(fun(bool,bool)),'const.list.CONS_2'(s(fun(bool,bool),X0),s('type.list.list'(fun(bool,bool)),X1)))),bool))) ) | $spl14),
  inference(superposition,[],[f2515,f293])).
fof(f8096,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X0,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) ) | $spl14),
  inference(subsumption_resolution,[],[f8094,f240])).
fof(f8094,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X0,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) ) | $spl14),
  inference(superposition,[],[f2515,f243])).
fof(f8118,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),'const.list.HD_1'(s('type.list.list'(fun(bool,bool)),'const.list.CONS_2'(s(fun(bool,bool),X0),s('type.list.list'(fun(bool,bool)),X1)))),bool))) ) | $spl14),
  inference(superposition,[],[f2517,f293])).
fof(f9701,plain,(
  ( ! [X37] : (s(bool,'T_0') = s(bool,sK16('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X37,bool)) | p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f9700,f2381])).
fof(f9700,plain,(
  ( ! [X37] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X37,bool)) | p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f9599,f1077])).
fof(f9599,plain,(
  ( ! [X37] : (p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'T_0')))) | s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK16('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X37,bool))) ) | $spl14),
  inference(superposition,[],[f314,f9137])).
fof(f9705,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X44,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f9704,f2381])).
fof(f9704,plain,(
  ( ! [X44] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X44,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f9603,f1077])).
fof(f9603,plain,(
  ( ! [X44] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0')))) | s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) = s(bool,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X44,bool))) ) | $spl14),
  inference(superposition,[],[f322,f9137])).
fof(f10842,plain,(
  ( ! [X269,X267,X268] : (p(s(bool,happ(s(fun(bool,bool),X268),s(bool,'T_0')))) | s(bool,X267) = s(bool,sK16(X267,X268,bool)) | s(bool,X267) = s(bool,X269) | s(bool,'T_0') = s(bool,X269)) )),
  inference(superposition,[],[f314,f424])).
fof(f10846,plain,(
  ( ! [X282,X283,X284] : (~p(s(bool,happ(s(fun(bool,bool),X283),s(bool,'T_0')))) | s(bool,X282) = s(bool,sK19(X282,X283,bool)) | s(bool,X282) = s(bool,X284) | s(bool,'T_0') = s(bool,X284)) )),
  inference(superposition,[],[f322,f424])).
fof(f11429,plain,(
  ( ! [X198,X199] : (s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X198,bool)) | s(bool,X199) = s(bool,happ(s(fun(bool,bool),X198),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X199)) ) | $spl14),
  inference(subsumption_resolution,[],[f10816,f238])).
fof(f10816,plain,(
  ( ! [X198,X199] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X198,bool)) | s(bool,X199) = s(bool,happ(s(fun(bool,bool),X198),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X199)) ) | $spl14),
  inference(superposition,[],[f2517,f424])).
fof(f8122,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,happ(s(fun(bool,bool),'const.combin.o_3'(s(fun(X11,fun(bool,bool)),X12),s(fun(X10,X11),X13),s(X10,X14))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),happ(s(fun(X10,fun(bool,bool)),'const.combin.o_2'(s(fun(X11,fun(bool,bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),bool))) ) | $spl14),
  inference(superposition,[],[f2517,f364])).
fof(f8121,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.combin.o_3'(s(fun(X5,fun(bool,bool)),X6),s(fun(X7,X5),X8),s(X7,X9))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),happ(s(fun(X5,fun(bool,bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),bool))) ) | $spl14),
  inference(superposition,[],[f2517,f363])).
fof(f8092,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun(bool,bool),'const.combin.o_3'(s(fun(X11,fun(bool,bool)),X12),s(fun(X10,X11),X13),s(X10,X14))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),happ(s(fun(X10,fun(bool,bool)),'const.combin.o_2'(s(fun(X11,fun(bool,bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),bool))) ) | $spl14),
  inference(superposition,[],[f2515,f364])).
fof(f8091,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(bool,bool),'const.combin.o_3'(s(fun(X5,fun(bool,bool)),X6),s(fun(X7,X5),X8),s(X7,X9))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),happ(s(fun(X5,fun(bool,bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),bool))) ) | $spl14),
  inference(superposition,[],[f2515,f363])).
fof(f8123,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,happ(s(fun(bool,bool),'const.list.EL_2'(s('type.num.num',X15),s('type.list.list'(fun(bool,bool)),X17))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'(fun(bool,bool)),'const.list.CONS_2'(s(fun(bool,bool),X16),s('type.list.list'(fun(bool,bool)),X17)))),bool))) ) | $spl14),
  inference(superposition,[],[f2517,f324])).
fof(f8120,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(fun(bool,bool)),X4))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),happ(s(fun('type.list.list'(fun(bool,bool)),fun(bool,bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun(bool,bool)),X4)),bool))) ) | $spl14),
  inference(superposition,[],[f2517,f295])).
fof(f8093,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,happ(s(fun(bool,bool),'const.list.EL_2'(s('type.num.num',X15),s('type.list.list'(fun(bool,bool)),X17))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'(fun(bool,bool)),'const.list.CONS_2'(s(fun(bool,bool),X16),s('type.list.list'(fun(bool,bool)),X17)))),bool))) ) | $spl14),
  inference(superposition,[],[f2515,f324])).
fof(f8090,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun(bool,bool),'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(fun(bool,bool)),X4))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),happ(s(fun('type.list.list'(fun(bool,bool)),fun(bool,bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun(bool,bool)),X4)),bool))) ) | $spl14),
  inference(superposition,[],[f2515,f295])).
fof(f9251,plain,(
  ( ! [X136] : (p(s(bool,happ(s(fun(bool,bool),'const.list.HD_1'(s('type.list.list'(fun(bool,bool)),X136))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(bool,bool)),X136)),bool))) ) | $spl14),
  inference(superposition,[],[f2515,f1077])).
fof(f9250,plain,(
  ( ! [X135] : (~p(s(bool,happ(s(fun(bool,bool),'const.list.HD_1'(s('type.list.list'(fun(bool,bool)),X135))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(bool,bool)),X135)),bool))) ) | $spl14),
  inference(superposition,[],[f2517,f1077])).
fof(f8119,plain,(
  ( ! [X2] : (~p(s(bool,happ(s(fun(bool,bool),'const.list.HD_1'(s('type.list.list'(fun(bool,bool)),X2))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),happ(s(fun('type.list.list'(fun(bool,bool)),fun(bool,bool)),'const.list.HD_0'),s('type.list.list'(fun(bool,bool)),X2)),bool))) ) | $spl14),
  inference(superposition,[],[f2517,f285])).
fof(f8089,plain,(
  ( ! [X2] : (p(s(bool,happ(s(fun(bool,bool),'const.list.HD_1'(s('type.list.list'(fun(bool,bool)),X2))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),happ(s(fun('type.list.list'(fun(bool,bool)),fun(bool,bool)),'const.list.HD_0'),s('type.list.list'(fun(bool,bool)),X2)),bool))) ) | $spl14),
  inference(superposition,[],[f2515,f285])).
fof(f904,plain,(
  ( ! [X23,X22] : (s(fun('type.list.list'(X22),X22),'const.list.HD_0') = s(fun('type.list.list'(X22),X22),sK19('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X23,fun('type.list.list'(X22),X22))) | ~p(s(bool,happ(s(fun(fun('type.list.list'(X22),X22),bool),X23),s(fun('type.list.list'(X22),X22),'const.list.HD_0'))))) )),
  inference(forward_demodulation,[],[f889,f242])).
fof(f889,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun(fun('type.list.list'(X22),X22),bool),X23),s(fun('type.list.list'(X22),X22),'const.list.HD_0')))) | s(fun('type.list.list'(X22),X22),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))) = s(fun('type.list.list'(X22),X22),sK19('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X23,fun('type.list.list'(X22),X22)))) )),
  inference(superposition,[],[f322,f242])).
fof(f814,plain,(
  ( ! [X19,X18] : (s(fun('type.list.list'(X18),X18),'const.list.HD_0') = s(fun('type.list.list'(X18),X18),sK16('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X19,fun('type.list.list'(X18),X18))) | p(s(bool,happ(s(fun(fun('type.list.list'(X18),X18),bool),X19),s(fun('type.list.list'(X18),X18),'const.list.HD_0'))))) )),
  inference(forward_demodulation,[],[f801,f242])).
fof(f801,plain,(
  ( ! [X19,X18] : (p(s(bool,happ(s(fun(fun('type.list.list'(X18),X18),bool),X19),s(fun('type.list.list'(X18),X18),'const.list.HD_0')))) | s(fun('type.list.list'(X18),X18),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))) = s(fun('type.list.list'(X18),X18),sK16('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X19,fun('type.list.list'(X18),X18)))) )),
  inference(superposition,[],[f314,f242])).
fof(f994,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X50))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X49),s('type.list.list'(X48),X50)))),X51,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X51),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X50))))))))) )),
  inference(forward_demodulation,[],[f988,f294])).
fof(f988,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,happ(s(fun('type.num.num',bool),X51),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X50)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X49),s('type.list.list'(X48),X50))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X49),s('type.list.list'(X48),X50)))),X51,'type.num.num'))) )),
  inference(superposition,[],[f322,f294])).
fof(f996,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X58))))) = s('type.num.num',sK16('const.list.LENGTH_1'(s('type.list.list'(X56),'const.list.CONS_2'(s(X56,X57),s('type.list.list'(X56),X58)))),X59,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X59),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X58))))))))) )),
  inference(forward_demodulation,[],[f990,f294])).
fof(f990,plain,(
  ( ! [X59,X57,X58,X56] : (p(s(bool,happ(s(fun('type.num.num',bool),X59),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X58)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),'const.list.CONS_2'(s(X56,X57),s('type.list.list'(X56),X58))))) = s('type.num.num',sK16('const.list.LENGTH_1'(s('type.list.list'(X56),'const.list.CONS_2'(s(X56,X57),s('type.list.list'(X56),X58)))),X59,'type.num.num'))) )),
  inference(superposition,[],[f314,f294])).
fof(f815,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK16('const.list.LENGTH_1'(s('type.list.list'(X20),'const.list.NIL_0')),X21,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f802,f241])).
fof(f802,plain,(
  ( ! [X21,X20] : (p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),'const.list.NIL_0'))) = s('type.num.num',sK16('const.list.LENGTH_1'(s('type.list.list'(X20),'const.list.NIL_0')),X21,'type.num.num'))) )),
  inference(superposition,[],[f314,f241])).
fof(f905,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X24),'const.list.NIL_0')),X25,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f890,f241])).
fof(f890,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),'const.list.NIL_0'))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X24),'const.list.NIL_0')),X25,'type.num.num'))) )),
  inference(superposition,[],[f322,f241])).
fof(f4550,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X7),s('type.list.list'(bool),X8)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X7),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f312,f295])).
fof(f4461,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X7),s('type.list.list'(bool),X8)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X7),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f310,f295])).
fof(f6438,plain,(
  ( ! [X24] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X24,'type.list.list'(bool))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X24),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(forward_demodulation,[],[f6357,f6258])).
fof(f6357,plain,(
  ( ! [X24] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X24),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) | s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X24,'type.list.list'(bool)))) ) | $spl14),
  inference(superposition,[],[f322,f6258])).
fof(f6437,plain,(
  ( ! [X23] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK16(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X23,'type.list.list'(bool))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X23),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))))) ) | $spl14),
  inference(forward_demodulation,[],[f6356,f6258])).
fof(f6356,plain,(
  ( ! [X23] : (p(s(bool,happ(s(fun('type.list.list'(bool),bool),X23),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) | s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK16(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X23,'type.list.list'(bool)))) ) | $spl14),
  inference(superposition,[],[f314,f6258])).
fof(f4519,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X8)))) | ~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X7),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4504,f295])).
fof(f4504,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X6))),s('type.list.list'(bool),X8)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X7),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f311,f295])).
fof(f4891,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X8)))) | ~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X7),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4877,f295])).
fof(f4877,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X6))),s('type.list.list'(bool),X8)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X7),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num',X6)),X7,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f313,f295])).
fof(f2447,plain,(
  ( ! [X37,X35,X36,X34] : (~p(s(bool,happ(s(fun('type.list.list'(X34),bool),X36),s('type.list.list'(X34),X35)))) | s('type.list.list'(X34),X37) != s('type.list.list'(X34),'const.list.CONS_2'(s(X34,sK5(X35,X34)),s('type.list.list'(X34),sK6(X35,X34)))) | p(s(bool,happ(s(fun('type.list.list'(X34),bool),X36),s('type.list.list'(X34),X37)))) | s('type.list.list'(X34),'const.list.NIL_0') = s('type.list.list'(X34),X35)) )),
  inference(superposition,[],[f316,f286])).
fof(f1798,plain,(
  ( ! [X30,X31,X29] : (p(s(bool,happ(s(fun('type.list.list'(X29),bool),X31),s('type.list.list'(X29),X30)))) | s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK5(X30,X29)),s('type.list.list'(X29),sK6(X30,X29)))) = s('type.list.list'(X29),sK16('const.list.CONS_2'(s(X29,sK5(X30,X29)),s('type.list.list'(X29),sK6(X30,X29))),X31,'type.list.list'(X29))) | s('type.list.list'(X29),'const.list.NIL_0') = s('type.list.list'(X29),X30)) )),
  inference(superposition,[],[f314,f286])).
fof(f1797,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,happ(s(fun('type.list.list'(X26),bool),X28),s('type.list.list'(X26),X27)))) | s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26)))) = s('type.list.list'(X26),sK19('const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26))),X28,'type.list.list'(X26))) | s('type.list.list'(X26),'const.list.NIL_0') = s('type.list.list'(X26),X27)) )),
  inference(superposition,[],[f322,f286])).
fof(f3216,plain,(
  ( ! [X134,X136,X135,X133,X137] : (p(s(bool,'const.combin.o_3'(s(fun(X133,bool),X134),s(fun(X135,X133),X136),s(X135,X137)))) | s(X133,happ(s(fun(X135,X133),X136),s(X135,X137))) = s(X133,sK16(happ(s(fun(X135,X133),X136),s(X135,X137)),X134,X133))) )),
  inference(superposition,[],[f314,f363])).
fof(f3220,plain,(
  ( ! [X158,X156,X159,X157,X160] : (~p(s(bool,'const.combin.o_3'(s(fun(X156,bool),X157),s(fun(X158,X156),X159),s(X158,X160)))) | s(X156,happ(s(fun(X158,X156),X159),s(X158,X160))) = s(X156,sK19(happ(s(fun(X158,X156),X159),s(X158,X160)),X157,X156))) )),
  inference(superposition,[],[f322,f363])).
fof(f3233,plain,(
  ( ! [X241,X239,X237,X242,X240,X238,X236] : (~p(s(bool,'const.combin.o_3'(s(fun(X236,bool),X237),s(fun(X238,X236),X239),s(X238,X240)))) | p(s(bool,X241)) | ~sP0(X241,X242,happ(s(fun(X236,bool),X237),s(X236,happ(s(fun(X238,X236),X239),s(X238,X240)))))) )),
  inference(superposition,[],[f353,f363])).
fof(f3234,plain,(
  ( ! [X243,X249,X246,X244,X248,X247,X245] : (~p(s(bool,'const.combin.o_3'(s(fun(X243,bool),X244),s(fun(X245,X243),X246),s(X245,X247)))) | p(s(bool,X248)) | ~sP0(X248,happ(s(fun(X243,bool),X244),s(X243,happ(s(fun(X245,X243),X246),s(X245,X247)))),X249)) )),
  inference(superposition,[],[f354,f363])).
fof(f3237,plain,(
  ( ! [X263,X265,X262,X264,X266] : (p(s(bool,'const.combin.o_3'(s(fun(X262,bool),X263),s(fun(X264,X262),X265),s(X264,X266)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(happ(s(fun(X262,bool),X263),s(X262,happ(s(fun(X264,X262),X265),s(X264,X266)))),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2376,f363])).
fof(f3426,plain,(
  ( ! [X154,X152,X151,X153,X150] : (p(s(bool,'const.combin.o_3'(s(fun(X151,bool),X152),s(fun(X150,X151),X153),s(X150,X154)))) | s(X150,X154) = s(X150,sK16(X154,'const.combin.o_2'(s(fun(X151,bool),X152),s(fun(X150,X151),X153)),X150))) )),
  inference(superposition,[],[f314,f364])).
fof(f3430,plain,(
  ( ! [X177,X175,X173,X176,X174] : (~p(s(bool,'const.combin.o_3'(s(fun(X174,bool),X175),s(fun(X173,X174),X176),s(X173,X177)))) | s(X173,X177) = s(X173,sK19(X177,'const.combin.o_2'(s(fun(X174,bool),X175),s(fun(X173,X174),X176)),X173))) )),
  inference(superposition,[],[f322,f364])).
fof(f3445,plain,(
  ( ! [X263,X269,X265,X267,X268,X264,X266] : (~p(s(bool,'const.combin.o_3'(s(fun(X264,bool),X265),s(fun(X263,X264),X266),s(X263,X267)))) | p(s(bool,X268)) | ~sP0(X268,X269,happ(s(fun(X263,bool),'const.combin.o_2'(s(fun(X264,bool),X265),s(fun(X263,X264),X266))),s(X263,X267)))) )),
  inference(superposition,[],[f353,f364])).
fof(f3446,plain,(
  ( ! [X271,X273,X275,X270,X276,X272,X274] : (~p(s(bool,'const.combin.o_3'(s(fun(X271,bool),X272),s(fun(X270,X271),X273),s(X270,X274)))) | p(s(bool,X275)) | ~sP0(X275,happ(s(fun(X270,bool),'const.combin.o_2'(s(fun(X271,bool),X272),s(fun(X270,X271),X273))),s(X270,X274)),X276)) )),
  inference(superposition,[],[f354,f364])).
fof(f3449,plain,(
  ( ! [X292,X290,X293,X289,X291] : (p(s(bool,'const.combin.o_3'(s(fun(X290,bool),X291),s(fun(X289,X290),X292),s(X289,X293)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(happ(s(fun(X289,bool),'const.combin.o_2'(s(fun(X290,bool),X291),s(fun(X289,X290),X292))),s(X289,X293)),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2376,f364])).
fof(f3499,plain,(
  ( ! [X142,X140,X138,X143,X141,X139] : (p(s(bool,'const.combin.o_3'(s(fun(X139,bool),X140),s(fun(X138,X139),X141),s(X138,sK11(X143,'const.combin.o_2'(s(fun(X139,bool),X140),s(fun(X138,X139),X141)),X138))))) | ~p(s(bool,'const.combin.o_3'(s(fun(X139,bool),X140),s(fun(X138,X139),X141),s(X138,X142)))) | p(s(bool,X143))) )),
  inference(forward_demodulation,[],[f3424,f364])).
fof(f3424,plain,(
  ( ! [X142,X140,X138,X143,X141,X139] : (~p(s(bool,'const.combin.o_3'(s(fun(X139,bool),X140),s(fun(X138,X139),X141),s(X138,X142)))) | p(s(bool,X143)) | p(s(bool,happ(s(fun(X138,bool),'const.combin.o_2'(s(fun(X139,bool),X140),s(fun(X138,X139),X141))),s(X138,sK11(X143,'const.combin.o_2'(s(fun(X139,bool),X140),s(fun(X138,X139),X141)),X138)))))) )),
  inference(superposition,[],[f306,f364])).
fof(f3500,plain,(
  ( ! [X146,X144,X149,X147,X145,X148] : (p(s(bool,'const.combin.o_3'(s(fun(X145,bool),X146),s(fun(X144,X145),X147),s(X144,sK12(X149,'const.combin.o_2'(s(fun(X145,bool),X146),s(fun(X144,X145),X147)),X144))))) | ~p(s(bool,'const.combin.o_3'(s(fun(X145,bool),X146),s(fun(X144,X145),X147),s(X144,X148)))) | p(s(bool,X149))) )),
  inference(forward_demodulation,[],[f3425,f364])).
fof(f3425,plain,(
  ( ! [X146,X144,X149,X147,X145,X148] : (~p(s(bool,'const.combin.o_3'(s(fun(X145,bool),X146),s(fun(X144,X145),X147),s(X144,X148)))) | p(s(bool,X149)) | p(s(bool,happ(s(fun(X144,bool),'const.combin.o_2'(s(fun(X145,bool),X146),s(fun(X144,X145),X147))),s(X144,sK12(X149,'const.combin.o_2'(s(fun(X145,bool),X146),s(fun(X144,X145),X147)),X144)))))) )),
  inference(superposition,[],[f308,f364])).
fof(f3501,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (p(s(bool,'const.combin.o_3'(s(fun(X156,bool),X157),s(fun(X155,X156),X158),s(X155,X160)))) | ~p(s(bool,'const.combin.o_3'(s(fun(X156,bool),X157),s(fun(X155,X156),X158),s(X155,X159)))) | s(X155,X159) != s(X155,X160)) )),
  inference(forward_demodulation,[],[f3427,f364])).
fof(f3427,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (~p(s(bool,'const.combin.o_3'(s(fun(X156,bool),X157),s(fun(X155,X156),X158),s(X155,X159)))) | s(X155,X159) != s(X155,X160) | p(s(bool,happ(s(fun(X155,bool),'const.combin.o_2'(s(fun(X156,bool),X157),s(fun(X155,X156),X158))),s(X155,X160))))) )),
  inference(superposition,[],[f316,f364])).
fof(f3502,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (p(s(bool,'const.combin.o_3'(s(fun(X162,bool),X163),s(fun(X161,X162),X164),s(X161,sK17(X166,'const.combin.o_2'(s(fun(X162,bool),X163),s(fun(X161,X162),X164)),X161))))) | ~p(s(bool,'const.combin.o_3'(s(fun(X162,bool),X163),s(fun(X161,X162),X164),s(X161,X165)))) | p(s(bool,X166))) )),
  inference(forward_demodulation,[],[f3428,f364])).
fof(f3428,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (~p(s(bool,'const.combin.o_3'(s(fun(X162,bool),X163),s(fun(X161,X162),X164),s(X161,X165)))) | p(s(bool,X166)) | p(s(bool,happ(s(fun(X161,bool),'const.combin.o_2'(s(fun(X162,bool),X163),s(fun(X161,X162),X164))),s(X161,sK17(X166,'const.combin.o_2'(s(fun(X162,bool),X163),s(fun(X161,X162),X164)),X161)))))) )),
  inference(superposition,[],[f317,f364])).
fof(f3503,plain,(
  ( ! [X167,X171,X169,X172,X170,X168] : (p(s(bool,'const.combin.o_3'(s(fun(X168,bool),X169),s(fun(X167,X168),X170),s(X167,sK18(X172,'const.combin.o_2'(s(fun(X168,bool),X169),s(fun(X167,X168),X170)),X167))))) | ~p(s(bool,'const.combin.o_3'(s(fun(X168,bool),X169),s(fun(X167,X168),X170),s(X167,X171)))) | p(s(bool,X172))) )),
  inference(forward_demodulation,[],[f3429,f364])).
fof(f3429,plain,(
  ( ! [X167,X171,X169,X172,X170,X168] : (~p(s(bool,'const.combin.o_3'(s(fun(X168,bool),X169),s(fun(X167,X168),X170),s(X167,X171)))) | p(s(bool,X172)) | p(s(bool,happ(s(fun(X167,bool),'const.combin.o_2'(s(fun(X168,bool),X169),s(fun(X167,X168),X170))),s(X167,sK18(X172,'const.combin.o_2'(s(fun(X168,bool),X169),s(fun(X167,X168),X170)),X167)))))) )),
  inference(superposition,[],[f319,f364])).
fof(f3504,plain,(
  ( ! [X182,X180,X178,X181,X179] : (p(s(bool,'const.combin.o_3'(s(fun(X179,bool),X180),s(fun(X178,X179),X181),s(X178,X182)))) | ~p(s(bool,'const.combin.o_3'(s(fun(X179,bool),X180),s(fun(X178,X179),X181),s(X178,sK16(X182,'const.combin.o_2'(s(fun(X179,bool),X180),s(fun(X178,X179),X181)),X178)))))) )),
  inference(forward_demodulation,[],[f3431,f364])).
fof(f3431,plain,(
  ( ! [X182,X180,X178,X181,X179] : (~p(s(bool,'const.combin.o_3'(s(fun(X179,bool),X180),s(fun(X178,X179),X181),s(X178,sK16(X182,'const.combin.o_2'(s(fun(X179,bool),X180),s(fun(X178,X179),X181)),X178))))) | p(s(bool,happ(s(fun(X178,bool),'const.combin.o_2'(s(fun(X179,bool),X180),s(fun(X178,X179),X181))),s(X178,X182))))) )),
  inference(superposition,[],[f315,f364])).
fof(f3505,plain,(
  ( ! [X187,X185,X186,X184,X183] : (~p(s(bool,'const.combin.o_3'(s(fun(X184,bool),X185),s(fun(X183,X184),X186),s(X183,X187)))) | p(s(bool,'const.combin.o_3'(s(fun(X184,bool),X185),s(fun(X183,X184),X186),s(X183,sK19(X187,'const.combin.o_2'(s(fun(X184,bool),X185),s(fun(X183,X184),X186)),X183)))))) )),
  inference(forward_demodulation,[],[f3432,f364])).
fof(f3432,plain,(
  ( ! [X187,X185,X186,X184,X183] : (p(s(bool,'const.combin.o_3'(s(fun(X184,bool),X185),s(fun(X183,X184),X186),s(X183,sK19(X187,'const.combin.o_2'(s(fun(X184,bool),X185),s(fun(X183,X184),X186)),X183))))) | ~p(s(bool,happ(s(fun(X183,bool),'const.combin.o_2'(s(fun(X184,bool),X185),s(fun(X183,X184),X186))),s(X183,X187))))) )),
  inference(superposition,[],[f323,f364])).
fof(f6115,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X25,'const.list.HD_0','type.list.list'(bool))))) != s(bool,'const.combin.o_3'(s(fun(X20,bool),X21),s(fun(X22,X20),X23),s(X22,X24))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,happ(s(fun(X22,X20),X23),s(X22,X24)))))) ) | $spl14),
  inference(superposition,[],[f5993,f363])).
fof(f6116,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X31,'const.list.HD_0','type.list.list'(bool))))) != s(bool,'const.combin.o_3'(s(fun(X27,bool),X28),s(fun(X26,X27),X29),s(X26,X30))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),'const.combin.o_2'(s(fun(X27,bool),X28),s(fun(X26,X27),X29))),s(X26,X30)))) ) | $spl14),
  inference(superposition,[],[f5993,f364])).
fof(f10374,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s(bool,X58) = s(bool,'const.combin.o_3'(s(fun(X53,bool),X54),s(fun(X55,X53),X56),s(X55,X57))) | s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),X54),s(X53,happ(s(fun(X55,X53),X56),s(X55,X57)))))) )),
  inference(superposition,[],[f424,f363])).
fof(f10375,plain,(
  ( ! [X61,X59,X64,X62,X60,X63] : (s(bool,X64) = s(bool,'const.combin.o_3'(s(fun(X60,bool),X61),s(fun(X59,X60),X62),s(X59,X63))) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,happ(s(fun(X59,bool),'const.combin.o_2'(s(fun(X60,bool),X61),s(fun(X59,X60),X62))),s(X59,X63)))) )),
  inference(superposition,[],[f424,f364])).
fof(f10427,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,'T_0') = s(bool,'const.combin.o_3'(s(fun(X34,bool),X35),s(fun(X36,X34),X37),s(X36,X38))) | s(bool,X39) = s(bool,happ(s(fun(X34,bool),X35),s(X34,happ(s(fun(X36,X34),X37),s(X36,X38))))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f424,f363])).
fof(f10428,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,'T_0') = s(bool,'const.combin.o_3'(s(fun(X41,bool),X42),s(fun(X40,X41),X43),s(X40,X44))) | s(bool,X45) = s(bool,happ(s(fun(X40,bool),'const.combin.o_2'(s(fun(X41,bool),X42),s(fun(X40,X41),X43))),s(X40,X44))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f424,f364])).
fof(f8125,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.combin.o_3'(s(fun(X1,bool),X2),s(fun(bool,X1),X3),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),'const.combin.o_2'(s(fun(X1,bool),X2),s(fun(bool,X1),X3)),bool))) ) | $spl14),
  inference(superposition,[],[f2517,f364])).
fof(f8095,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,'const.combin.o_3'(s(fun(X1,bool),X2),s(fun(bool,X1),X3),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),'const.combin.o_2'(s(fun(X1,bool),X2),s(fun(bool,X1),X3)),bool))) ) | $spl14),
  inference(superposition,[],[f2515,f364])).
fof(f3035,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(equality_resolution,[],[f337])).
fof(f337,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f219])).
fof(f219,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X1,X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X1,X0)),s('type.num.num',X1)))))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & ! [X2] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20])],[f218])).
fof(f218,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ? [X3] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X1)))))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & ! [X2] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))),
  inference(rectify,[],[f217])).
fof(f217,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ? [X2] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & ! [X2] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))),
  inference(flattening,[],[f216])).
fof(f216,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ? [X2] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1))))))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & ! [X2] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ? [X2] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X24,X25] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25)))))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X24) | ? [X26] : (s('type.num.num',X24) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X26),s('type.num.num',X25)))))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.indexedLists.LT_SUC')).
fof(f334,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X1,X0))))) )),
  inference(cnf_transformation,[],[f219])).
fof(f335,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X1,X0)),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f219])).
fof(f336,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f219])).
fof(f2864,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | s('type.num.num',X9) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))),X9))))) )),
  inference(superposition,[],[f334,f293])).
fof(f2876,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))))) )),
  inference(forward_demodulation,[],[f2875,f293])).
fof(f2875,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8))))))))) )),
  inference(forward_demodulation,[],[f2857,f293])).
fof(f2857,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8))))) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8))))))))) )),
  inference(superposition,[],[f334,f293])).
fof(f2908,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f2892,f293])).
fof(f2892,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))))),s('type.num.num',X9))))) )),
  inference(superposition,[],[f335,f293])).
fof(f2917,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))),X9)),s('type.num.num',X7)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(forward_demodulation,[],[f2899,f293])).
fof(f2899,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))),X9)),s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8))))))))) )),
  inference(superposition,[],[f335,f293])).
fof(f11430,plain,(
  ( ! [X208,X206,X207] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X206) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X207,X206)),s('type.num.num',X207)))) | s(bool,X208) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num',X207))))) | s(bool,'T_0') = s(bool,X208)) )),
  inference(subsumption_resolution,[],[f10820,f238])).
fof(f10820,plain,(
  ( ! [X208,X206,X207] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X206) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X207,X206)),s('type.num.num',X207)))) | s(bool,X208) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num',X207))))) | s(bool,'T_0') = s(bool,X208)) )),
  inference(superposition,[],[f335,f424])).
fof(f3527,plain,(
  ( ! [X453,X455,X457,X454,X456,X458] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(happ(s(fun(X453,'type.num.num'),'const.combin.o_2'(s(fun(X454,'type.num.num'),X455),s(fun(X453,X454),X456))),s(X453,X457)),X458)),s('type.num.num','const.combin.o_3'(s(fun(X454,'type.num.num'),X455),s(fun(X453,X454),X456),s(X453,X457)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X458),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.combin.o_3'(s(fun(X454,'type.num.num'),X455),s(fun(X453,X454),X456),s(X453,X457)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X458)) )),
  inference(forward_demodulation,[],[f3472,f364])).
fof(f3472,plain,(
  ( ! [X453,X455,X457,X454,X456,X458] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X458),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.combin.o_3'(s(fun(X454,'type.num.num'),X455),s(fun(X453,X454),X456),s(X453,X457)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X458) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(happ(s(fun(X453,'type.num.num'),'const.combin.o_2'(s(fun(X454,'type.num.num'),X455),s(fun(X453,X454),X456))),s(X453,X457)),X458)),s('type.num.num',happ(s(fun(X453,'type.num.num'),'const.combin.o_2'(s(fun(X454,'type.num.num'),X455),s(fun(X453,X454),X456))),s(X453,X457))))))) )),
  inference(superposition,[],[f335,f364])).
fof(f3470,plain,(
  ( ! [X445,X441,X443,X444,X446,X442] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X446),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.combin.o_3'(s(fun(X442,'type.num.num'),X443),s(fun(X441,X442),X444),s(X441,X445)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X446) | s('type.num.num',X446) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X441,'type.num.num'),'const.combin.o_2'(s(fun(X442,'type.num.num'),X443),s(fun(X441,X442),X444))),s(X441,X445)),X446))))) )),
  inference(superposition,[],[f334,f364])).
fof(f3306,plain,(
  ( ! [X408,X410,X407,X409,X411,X406] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(happ(s(fun(X406,'type.num.num'),X407),s(X406,happ(s(fun(X408,X406),X409),s(X408,X410)))),X411)),s('type.num.num','const.combin.o_3'(s(fun(X406,'type.num.num'),X407),s(fun(X408,X406),X409),s(X408,X410)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X411),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.combin.o_3'(s(fun(X406,'type.num.num'),X407),s(fun(X408,X406),X409),s(X408,X410)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X411)) )),
  inference(forward_demodulation,[],[f3258,f363])).
fof(f3258,plain,(
  ( ! [X408,X410,X407,X409,X411,X406] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X411),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.combin.o_3'(s(fun(X406,'type.num.num'),X407),s(fun(X408,X406),X409),s(X408,X410)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X411) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(happ(s(fun(X406,'type.num.num'),X407),s(X406,happ(s(fun(X408,X406),X409),s(X408,X410)))),X411)),s('type.num.num',happ(s(fun(X406,'type.num.num'),X407),s(X406,happ(s(fun(X408,X406),X409),s(X408,X410))))))))) )),
  inference(superposition,[],[f335,f363])).
fof(f3256,plain,(
  ( ! [X397,X399,X395,X396,X398,X394] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X399),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.combin.o_3'(s(fun(X394,'type.num.num'),X395),s(fun(X396,X394),X397),s(X396,X398)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X399) | s('type.num.num',X399) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X394,'type.num.num'),X395),s(X394,happ(s(fun(X396,X394),X397),s(X396,X398)))),X399))))) )),
  inference(superposition,[],[f334,f363])).
fof(f2915,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))),X5)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5)) )),
  inference(forward_demodulation,[],[f2897,f294])).
fof(f2897,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))),X5)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))))))) )),
  inference(superposition,[],[f335,f294])).
fof(f2862,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | s('type.num.num',X5) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))),X5))))) )),
  inference(superposition,[],[f334,f294])).
fof(f5331,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f807,f806,f745,f744,f336,f335,f334,f337,f996,f815,f814,f792,f1059,f809,f1081,f808,f791,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f813,f797,f538,f408,f250,f249,f240,f896,f897,f994,f905,f904,f903,f884,f898,f1079,f899,f878,f1057,f879,f323,f322,f1695,f1696,f1697,f1698,f1702,f1733,f1734,f1735,f1736,f1740,f1787,f1797,f1798,f1929,f1878,f1884,f1888,f1890,f1894,f1902,f1966,f1967,f1968,f2048,f2049,f2050,f2087,f2088,f2089,f2193,f2194,f2195,f2325,f2328,f2329,f2330,f2337,f1908,f1785,f2339,f1725,f1686,f1559,f2340,f1503,f1043,f736,f2420,f2422,f2423,f2424,f2425,f2453,f2441,f2442,f2447,f2540,f2542,f2543,f2544,f2545,f2580,f2582,f2583,f2584,f2585,f2632,f2691,f2693,f2649,f2650,f2651,f2652,f2703,f2704,f2663,f2705,f2707,f2708,f2668,f2709,f2776,f2778,f2779,f2780,f2782,f2876,f2862,f2864,f2908,f2914,f2915,f2917,f3002,f3003,f3035,f3072,f3079,f3191,f3192,f3193,f3194,f3195,f3196,f3197,f3282,f3284,f3210,f3214,f3215,f3216,f3217,f3218,f3219,f3220,f3226,f3227,f3228,f3229,f3233,f3234,f3294,f3295,f3240,f3296,f3298,f3299,f3245,f3300,f3256,f3306,f3278,f3405,f3406,f3407,f3496,f3498,f3419,f3499,f3500,f3426,f3501,f3502,f3503,f3430,f3504,f3505,f3438,f3439,f3440,f3441,f3445,f3446,f3515,f3516,f3452,f3517,f3519,f3520,f3457,f3521,f3470,f3527,f3492,f3977,f3993,f4463,f4452,f4453,f4454,f4455,f4456,f4457,f4458,f4460,f4461,f4462,f4508,f4511,f4512,f4513,f4514,f4515,f4516,f4501,f4517,f4519,f4520,f4552,f4541,f4542,f4543,f4544,f4545,f4546,f4547,f4549,f4550,f4551,f4881,f4883,f4884,f4885,f4886,f4887,f4888,f4874,f4889,f4891,f4892,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861])).
fof(f2920,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))),X18)),s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18)) )),
  inference(forward_demodulation,[],[f2902,f324])).
fof(f2902,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))),X18)),s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17))))))))) )),
  inference(superposition,[],[f335,f324])).
fof(f2919,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)),X14)),s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14)) )),
  inference(forward_demodulation,[],[f2901,f295])).
fof(f2901,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)),X14)),s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13))))))) )),
  inference(superposition,[],[f335,f295])).
fof(f2867,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | s('type.num.num',X18) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))),X18))))) )),
  inference(superposition,[],[f334,f324])).
fof(f2866,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | s('type.num.num',X14) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)),X14))))) )),
  inference(superposition,[],[f334,f295])).
fof(f9504,plain,(
  ( ! [X237,X236] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X236)),X237)),s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X236)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X237),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X236)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X237)) )),
  inference(forward_demodulation,[],[f9280,f1077])).
fof(f9280,plain,(
  ( ! [X237,X236] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X237),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X236)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X237) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X236)),X237)),s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X236))))))) )),
  inference(superposition,[],[f335,f1077])).
fof(f9278,plain,(
  ( ! [X233,X232] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X233),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X232)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X233) | s('type.num.num',X233) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X232)),X233))))) )),
  inference(superposition,[],[f334,f1077])).
fof(f2918,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)),X11)),s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) )),
  inference(forward_demodulation,[],[f2900,f285])).
fof(f2900,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)),X11)),s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10))))))) )),
  inference(superposition,[],[f335,f285])).
fof(f2865,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11) | s('type.num.num',X11) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)),X11))))) )),
  inference(superposition,[],[f334,f285])).
fof(f3526,plain,(
  ( ! [X447,X449,X451,X452,X448,X450] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X448,'type.num.num'),X449),s(fun(X447,X448),X450),s(X447,X451))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X448,'type.num.num'),X449),s(fun(X447,X448),X450),s(X447,X451))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X452)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X452,happ(s(fun(X447,'type.num.num'),'const.combin.o_2'(s(fun(X448,'type.num.num'),X449),s(fun(X447,X448),X450))),s(X447,X451)))),s('type.num.num',X452))))) )),
  inference(forward_demodulation,[],[f3471,f364])).
fof(f3471,plain,(
  ( ! [X447,X449,X451,X452,X448,X450] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X448,'type.num.num'),X449),s(fun(X447,X448),X450),s(X447,X451))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X452)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun(X447,'type.num.num'),'const.combin.o_2'(s(fun(X448,'type.num.num'),X449),s(fun(X447,X448),X450))),s(X447,X451))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X452,happ(s(fun(X447,'type.num.num'),'const.combin.o_2'(s(fun(X448,'type.num.num'),X449),s(fun(X447,X448),X450))),s(X447,X451)))),s('type.num.num',X452))))) )),
  inference(superposition,[],[f335,f364])).
fof(f3525,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X440,happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X440))))))) )),
  inference(forward_demodulation,[],[f3524,f364])).
fof(f3524,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X440)))))) | s('type.num.num',happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X440,happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439))))))) )),
  inference(forward_demodulation,[],[f3469,f364])).
fof(f3469,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X440)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439))) | s('type.num.num',happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X440,happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439))))))) )),
  inference(superposition,[],[f334,f364])).
fof(f3305,plain,(
  ( ! [X405,X401,X403,X404,X400,X402] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X400,'type.num.num'),X401),s(fun(X402,X400),X403),s(X402,X404))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X400,'type.num.num'),X401),s(fun(X402,X400),X403),s(X402,X404))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X405)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X405,happ(s(fun(X400,'type.num.num'),X401),s(X400,happ(s(fun(X402,X400),X403),s(X402,X404)))))),s('type.num.num',X405))))) )),
  inference(forward_demodulation,[],[f3257,f363])).
fof(f3257,plain,(
  ( ! [X405,X401,X403,X404,X400,X402] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X400,'type.num.num'),X401),s(fun(X402,X400),X403),s(X402,X404))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X405)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun(X400,'type.num.num'),X401),s(X400,happ(s(fun(X402,X400),X403),s(X402,X404))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X405,happ(s(fun(X400,'type.num.num'),X401),s(X400,happ(s(fun(X402,X400),X403),s(X402,X404)))))),s('type.num.num',X405))))) )),
  inference(superposition,[],[f335,f363])).
fof(f3304,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X393,happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X393))))))) )),
  inference(forward_demodulation,[],[f3303,f363])).
fof(f3303,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X393)))))) | s('type.num.num',happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X393,happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392))))))))) )),
  inference(forward_demodulation,[],[f3255,f363])).
fof(f3255,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X393)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392))))) | s('type.num.num',happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X393,happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392))))))))) )),
  inference(superposition,[],[f334,f363])).
fof(f2906,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))))),s('type.num.num',X5))))) )),
  inference(subsumption_resolution,[],[f2905,f283])).
fof(f2905,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))))),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f2890,f294])).
fof(f2890,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))))),s('type.num.num',X5))))) )),
  inference(superposition,[],[f335,f294])).
fof(f2872,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))) )),
  inference(forward_demodulation,[],[f2871,f294])).
fof(f2871,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))))))) )),
  inference(subsumption_resolution,[],[f2870,f283])).
fof(f2870,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))))))) )),
  inference(forward_demodulation,[],[f2855,f294])).
fof(f2855,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))))))) )),
  inference(superposition,[],[f334,f294])).
fof(f10299,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(unit_resulting_resolution,[],[f283,f5331])).
fof(f2911,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))))),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f2895,f324])).
fof(f2895,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))))),s('type.num.num',X18))))) )),
  inference(superposition,[],[f335,f324])).
fof(f2910,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)))),s('type.num.num',X14))))) )),
  inference(forward_demodulation,[],[f2894,f295])).
fof(f2894,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)))),s('type.num.num',X14))))) )),
  inference(superposition,[],[f335,f295])).
fof(f2882,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f2881,f324])).
fof(f2881,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) | s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17))))))))) )),
  inference(forward_demodulation,[],[f2860,f324])).
fof(f2860,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17))))) | s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17))))))))) )),
  inference(superposition,[],[f334,f324])).
fof(f2880,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))))) )),
  inference(forward_demodulation,[],[f2879,f295])).
fof(f2879,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13))))))) )),
  inference(forward_demodulation,[],[f2859,f295])).
fof(f2859,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13))) | s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13))))))) )),
  inference(superposition,[],[f334,f295])).
fof(f9503,plain,(
  ( ! [X235,X234] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X234))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X234))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X235)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X235,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X234)))),s('type.num.num',X235))))) )),
  inference(forward_demodulation,[],[f9279,f1077])).
fof(f9279,plain,(
  ( ! [X235,X234] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X234))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X235)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X234))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X235,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X234)))),s('type.num.num',X235))))) )),
  inference(superposition,[],[f335,f1077])).
fof(f9502,plain,(
  ( ! [X231,X230] : (s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X231,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X231))))))) )),
  inference(forward_demodulation,[],[f9501,f1077])).
fof(f9501,plain,(
  ( ! [X231,X230] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X231)))))) | s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X231,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230))))))) )),
  inference(forward_demodulation,[],[f9277,f1077])).
fof(f9277,plain,(
  ( ! [X231,X230] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X231)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230))) | s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X231,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230))))))) )),
  inference(superposition,[],[f334,f1077])).
fof(f2909,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f2893,f285])).
fof(f2893,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)))),s('type.num.num',X11))))) )),
  inference(superposition,[],[f335,f285])).
fof(f2878,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))))))) )),
  inference(forward_demodulation,[],[f2877,f285])).
fof(f2877,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) | s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10))))))) )),
  inference(forward_demodulation,[],[f2858,f285])).
fof(f2858,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10))) | s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10))))))) )),
  inference(superposition,[],[f334,f285])).
fof(f1040,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X20),s('type.list.list'(bool),X21)))) | s('type.list.list'(bool),X21) = s('type.list.list'(bool),sK19(X21,'const.list.EL_1'(s('type.num.num',X20)),'type.list.list'(bool)))) )),
  inference(superposition,[],[f322,f295])).
fof(f1042,plain,(
  ( ! [X24,X25] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X24),s('type.list.list'(bool),X25)))) | s('type.list.list'(bool),X25) = s('type.list.list'(bool),sK16(X25,'const.list.EL_1'(s('type.num.num',X24)),'type.list.list'(bool)))) )),
  inference(superposition,[],[f314,f295])).
fof(f1051,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X45),s('type.list.list'(bool),X46)))) | p(s(bool,X47)) | ~sP0(X47,X48,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X45))),s('type.list.list'(bool),X46)))) )),
  inference(superposition,[],[f353,f295])).
fof(f1052,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X49),s('type.list.list'(bool),X50)))) | p(s(bool,X51)) | ~sP0(X51,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X49))),s('type.list.list'(bool),X50)),X52)) )),
  inference(superposition,[],[f354,f295])).
fof(f1703,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X10),s('type.list.list'(bool),X11)))) | ~p(s(bool,'const.list.EL_2'(s('type.num.num',X10),s('type.list.list'(bool),sK16(X11,'const.list.EL_1'(s('type.num.num',X10)),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f1692,f295])).
fof(f1692,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X10),s('type.list.list'(bool),sK16(X11,'const.list.EL_1'(s('type.num.num',X10)),'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X10))),s('type.list.list'(bool),X11))))) )),
  inference(superposition,[],[f315,f295])).
fof(f1741,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X10),s('type.list.list'(bool),X11)))) | p(s(bool,'const.list.EL_2'(s('type.num.num',X10),s('type.list.list'(bool),sK19(X11,'const.list.EL_1'(s('type.num.num',X10)),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f1730,f295])).
fof(f1730,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X10),s('type.list.list'(bool),sK19(X11,'const.list.EL_1'(s('type.num.num',X10)),'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X10))),s('type.list.list'(bool),X11))))) )),
  inference(superposition,[],[f323,f295])).
fof(f2338,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'(bool),sK11(X18,'const.list.EL_1'(s('type.num.num',X16)),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'(bool),X17)))) | p(s(bool,X18))) )),
  inference(forward_demodulation,[],[f2322,f295])).
fof(f2322,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'(bool),X17)))) | p(s(bool,X18)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X16))),s('type.list.list'(bool),sK11(X18,'const.list.EL_1'(s('type.num.num',X16)),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f306,f295])).
fof(f2427,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK12(X8,'const.list.EL_1'(s('type.num.num',X6)),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | p(s(bool,X8))) )),
  inference(forward_demodulation,[],[f2417,f295])).
fof(f2417,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | p(s(bool,X8)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X6))),s('type.list.list'(bool),sK12(X8,'const.list.EL_1'(s('type.num.num',X6)),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f308,f295])).
fof(f2465,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X8)))) | ~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | s('type.list.list'(bool),X7) != s('type.list.list'(bool),X8)) )),
  inference(forward_demodulation,[],[f2450,f295])).
fof(f2450,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | s('type.list.list'(bool),X7) != s('type.list.list'(bool),X8) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X6))),s('type.list.list'(bool),X8))))) )),
  inference(superposition,[],[f316,f295])).
fof(f2547,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK17(X8,'const.list.EL_1'(s('type.num.num',X6)),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | p(s(bool,X8))) )),
  inference(forward_demodulation,[],[f2537,f295])).
fof(f2537,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | p(s(bool,X8)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X6))),s('type.list.list'(bool),sK17(X8,'const.list.EL_1'(s('type.num.num',X6)),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f317,f295])).
fof(f2587,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),sK18(X8,'const.list.EL_1'(s('type.num.num',X6)),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | p(s(bool,X8))) )),
  inference(forward_demodulation,[],[f2577,f295])).
fof(f2577,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | p(s(bool,X8)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X6))),s('type.list.list'(bool),sK18(X8,'const.list.EL_1'(s('type.num.num',X6)),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f319,f295])).
fof(f2601,plain,(
  ( ! [X6,X7] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(bool),X7)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X6))),s('type.list.list'(bool),X7)),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2376,f295])).
fof(f2656,plain,(
  ( ! [X118,X116,X119,X117,X115] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X115),s('type.list.list'(bool),X117)))) | p(s(bool,X118)) | ~sP0(X118,X119,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X116),s('type.list.list'(bool),X117)))))) )),
  inference(superposition,[],[f353,f324])).
fof(f2657,plain,(
  ( ! [X123,X121,X124,X122,X120] : (~p(s(bool,'const.list.EL_2'(s('type.num.num',X120),s('type.list.list'(bool),X122)))) | p(s(bool,X123)) | ~sP0(X123,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X120))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X121),s('type.list.list'(bool),X122)))),X124)) )),
  inference(superposition,[],[f354,f324])).
fof(f2660,plain,(
  ( ! [X134,X135,X133] : (p(s(bool,'const.list.EL_2'(s('type.num.num',X133),s('type.list.list'(bool),X135)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X133))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X134),s('type.list.list'(bool),X135)))),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2376,f324])).
fof(f6114,plain,(
  ( ! [X19,X17,X18] : (s(bool,'const.list.EL_2'(s('type.num.num',X17),s('type.list.list'(bool),X18))) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X19,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X17))),s('type.list.list'(bool),X18)))) ) | $spl14),
  inference(superposition,[],[f5993,f295])).
fof(f7202,plain,(
  ( ! [X177,X175,X176,X174] : (s(bool,'const.list.EL_2'(s('type.num.num',X174),s('type.list.list'(bool),X176))) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X177,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X177) | s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X174))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X175),s('type.list.list'(bool),X176)))))) ) | $spl14),
  inference(superposition,[],[f5993,f324])).
fof(f10373,plain,(
  ( ! [X52,X50,X51] : (s(bool,X52) = s(bool,'const.list.EL_2'(s('type.num.num',X50),s('type.list.list'(bool),X51))) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X50))),s('type.list.list'(bool),X51)))) )),
  inference(superposition,[],[f424,f295])).
fof(f10376,plain,(
  ( ! [X68,X66,X67,X65] : (s(bool,X68) = s(bool,'const.list.EL_2'(s('type.num.num',X65),s('type.list.list'(bool),X67))) | s(bool,'T_0') = s(bool,X68) | s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X65))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X66),s('type.list.list'(bool),X67)))))) )),
  inference(superposition,[],[f424,f324])).
fof(f10426,plain,(
  ( ! [X33,X31,X32] : (s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num',X31),s('type.list.list'(bool),X32))) | s(bool,X33) = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X31))),s('type.list.list'(bool),X32))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f424,f295])).
fof(f10429,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num',X46),s('type.list.list'(bool),X48))) | s(bool,X49) = s(bool,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X47),s('type.list.list'(bool),X48))))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f424,f324])).
fof(f744,plain,(
  ( ! [X14,X15,X16] : (~sP0(X15,X16,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X14))) | p(s(bool,X15)) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X14))))) )),
  inference(superposition,[],[f353,f285])).
fof(f745,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X17)))) | p(s(bool,X18)) | ~sP0(X18,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X17)),X19)) )),
  inference(superposition,[],[f354,f285])).
fof(f806,plain,(
  ( ! [X6] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X6)))) | s('type.list.list'(bool),X6) = s('type.list.list'(bool),sK16(X6,'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f314,f285])).
fof(f896,plain,(
  ( ! [X9] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X9)))) | s('type.list.list'(bool),X9) = s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))) )),
  inference(superposition,[],[f322,f285])).
fof(f897,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) )),
  inference(forward_demodulation,[],[f877,f285])).
fof(f877,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) )),
  inference(superposition,[],[f322,f242])).
fof(f1695,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK16(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) )),
  inference(forward_demodulation,[],[f1694,f1077])).
fof(f1694,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X0)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK16(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f1693,f295])).
fof(f1693,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK16(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X0))))) )),
  inference(forward_demodulation,[],[f1680,f285])).
fof(f1680,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK16(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X0))))) )),
  inference(superposition,[],[f315,f242])).
fof(f1702,plain,(
  ( ! [X9] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK16(X9,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X9))))) )),
  inference(forward_demodulation,[],[f1691,f285])).
fof(f1691,plain,(
  ( ! [X9] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK16(X9,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X9))))) )),
  inference(superposition,[],[f315,f285])).
fof(f2453,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1)))) | s('type.list.list'(bool),X0) != s('type.list.list'(bool),X1)) )),
  inference(forward_demodulation,[],[f2452,f1077])).
fof(f2452,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X1)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),X0) != s('type.list.list'(bool),X1)) )),
  inference(forward_demodulation,[],[f2451,f295])).
fof(f2451,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),X0) != s('type.list.list'(bool),X1) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X1))))) )),
  inference(forward_demodulation,[],[f2434,f285])).
fof(f2434,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | s('type.list.list'(bool),X0) != s('type.list.list'(bool),X1) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X1))))) )),
  inference(superposition,[],[f316,f242])).
fof(f2600,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X5)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X5)),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2376,f285])).
fof(f6113,plain,(
  ( ! [X15,X16] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),X15))) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X16,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X15)))) ) | $spl14),
  inference(superposition,[],[f5993,f285])).
fof(f6809,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) | $spl14),
  inference(forward_demodulation,[],[f6808,f285])).
fof(f6808,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6775,f238])).
fof(f6775,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0))))) ) | $spl14),
  inference(superposition,[],[f316,f6100])).
fof(f6811,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),X2) != s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X2))))) ) | $spl14),
  inference(forward_demodulation,[],[f6810,f285])).
fof(f6810,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),X2) != s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X2))))) ) | $spl14),
  inference(subsumption_resolution,[],[f6776,f238])).
fof(f6776,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X2) != s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X2))))) ) | $spl14),
  inference(superposition,[],[f316,f6101])).
fof(f9230,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X95)))) | p(s(bool,X96)) | ~sP0(X96,X97,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X95)))) )),
  inference(superposition,[],[f353,f1077])).
fof(f9231,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X98)))) | p(s(bool,X99)) | ~sP0(X99,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X98)),X100)) )),
  inference(superposition,[],[f354,f1077])).
fof(f9234,plain,(
  ( ! [X105] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X105)))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X105)),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2376,f1077])).
fof(f9239,plain,(
  ( ! [X114,X113] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),X113))) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X114,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X114) | s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X113)))) ) | $spl14),
  inference(superposition,[],[f5993,f1077])).
fof(f10372,plain,(
  ( ! [X48,X49] : (s(bool,X49) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X48))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X48)))) )),
  inference(superposition,[],[f424,f285])).
fof(f10377,plain,(
  ( ! [X70,X69] : (s(bool,X70) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X69))) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X69)))) )),
  inference(superposition,[],[f424,f1077])).
fof(f10425,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X29))) | s(bool,X30) = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X29))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f424,f285])).
fof(f10430,plain,(
  ( ! [X50,X51] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X50))) | s(bool,X51) = s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X50))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f424,f1077])).
fof(f11434,plain,(
  ( ! [X239,X240] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X239)))) | s(bool,X240) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK16(X239,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X240)) )),
  inference(subsumption_resolution,[],[f10831,f238])).
fof(f10831,plain,(
  ( ! [X239,X240] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X239)))) | s(bool,X240) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK16(X239,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X240)) )),
  inference(superposition,[],[f1702,f424])).
fof(f3356,plain,(
  ( ! [X28,X27] : (~p(s(bool,X28)) | s(bool,X28) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X27,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X27)) ) | $spl14),
  inference(subsumption_resolution,[],[f3328,f238])).
fof(f3328,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | ~p(s(bool,X28)) | s(bool,X28) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X27,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X27)) ) | $spl14),
  inference(superposition,[],[f331,f2602])).
fof(f5851,plain,(
  ( ! [X10,X11] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X10,'const.list.HD_0','type.list.list'(bool))))) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X11,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X10)) ) | $spl14),
  inference(subsumption_resolution,[],[f5841,f238])).
fof(f5841,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X10,'const.list.HD_0','type.list.list'(bool))))) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X11,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X10)) ) | $spl14),
  inference(superposition,[],[f3356,f2602])).
fof(f2599,plain,(
  ( ! [X4,X3] : (p(s(bool,X3)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X3),s('type.list.list'(bool),X4)))),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2376,f293])).
fof(f6830,plain,(
  ( ! [X0] : (p(s(bool,sK5(X0,bool))) | s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | $spl14),
  inference(forward_demodulation,[],[f6817,f293])).
fof(f6817,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool))))))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | $spl14),
  inference(superposition,[],[f6809,f286])).
fof(f6856,plain,(
  ( ! [X0,X1] : (p(s(bool,sK5(X0,bool))) | s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | $spl14),
  inference(forward_demodulation,[],[f6840,f293])).
fof(f6840,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))) | p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool))))))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | $spl14),
  inference(superposition,[],[f6811,f286])).
fof(f8154,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X1,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),X0)),'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,sK5(X0,bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | $spl14),
  inference(superposition,[],[f8035,f286])).
fof(f8261,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),X0)),'const.list.HD_0','type.list.list'(bool)))),X1) | s(bool,'T_0') = s(bool,sK5(X0,bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | $spl14),
  inference(superposition,[],[f8077,f286])).
fof(f8675,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool)))) | s(bool,'T_0') = s(bool,sK5('const.list.CONS_2'(s(bool,sK5(X0,bool)),s('type.list.list'(bool),sK6(X0,bool))),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0)) ) | $spl14),
  inference(superposition,[],[f7451,f286])).
fof(f10573,plain,(
  ( ! [X379,X380] : (s('type.list.list'(bool),X379) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X380),s('type.list.list'(bool),sK6(X379,bool)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X379) | s(bool,'T_0') = s(bool,X380) | s(bool,'T_0') = s(bool,sK5(X379,bool))) )),
  inference(superposition,[],[f286,f424])).
fof(f10863,plain,(
  ( ! [X360,X361] : (s('type.list.list'(bool),X360) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK6(X360,bool)))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X360) | s(bool,X361) = s(bool,sK5(X360,bool)) | s(bool,'T_0') = s(bool,X361)) )),
  inference(superposition,[],[f286,f424])).
fof(f10870,plain,(
  ( ! [X385,X387,X384,X386] : (s(X386,f(s(bool,'T_0'))) != s(X386,g(s(bool,'T_0'))) | s(fun(bool,X386),X384) = s(fun(bool,X386),X385) | s(bool,X387) = s(bool,sK21(X384,X385,X386,bool)) | s(bool,'T_0') = s(bool,X387)) )),
  inference(superposition,[],[f342,f424])).
fof(f10848,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X290))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X291),s('type.list.list'(bool),X292))) | s(bool,X289) = s(bool,X291) | s(bool,X289) = s(bool,X293) | s(bool,'T_0') = s(bool,X293)) )),
  inference(superposition,[],[f325,f424])).
fof(f11432,plain,(
  ( ! [X212,X213] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X212) | s(bool,X213) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X212),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X213)) )),
  inference(subsumption_resolution,[],[f10822,f238])).
fof(f10822,plain,(
  ( ! [X212,X213] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X212) | s(bool,X213) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X212),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X213)) )),
  inference(superposition,[],[f5331,f424])).
fof(f11431,plain,(
  ( ! [X210,X211,X209] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X209) | s('type.num.num',X209) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X210,X209)))) | s(bool,X211) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X209),s('type.num.num','const.num.SUC_1'(s('type.num.num',X210))))) | s(bool,'T_0') = s(bool,X211)) )),
  inference(subsumption_resolution,[],[f10821,f238])).
fof(f10821,plain,(
  ( ! [X210,X211,X209] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X209) | s('type.num.num',X209) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X210,X209)))) | s(bool,X211) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X209),s('type.num.num','const.num.SUC_1'(s('type.num.num',X210))))) | s(bool,'T_0') = s(bool,X211)) )),
  inference(superposition,[],[f334,f424])).
fof(f11422,plain,(
  ( ! [X158,X161,X159,X160] : (s(X158,X160) = s(X158,sK19(X160,X159,X158)) | s(bool,X161) = s(bool,happ(s(fun(X158,bool),X159),s(X158,X160))) | s(bool,'T_0') = s(bool,X161)) )),
  inference(subsumption_resolution,[],[f10806,f238])).
fof(f10806,plain,(
  ( ! [X158,X161,X159,X160] : (~p(s(bool,'T_0')) | s(X158,X160) = s(X158,sK19(X160,X159,X158)) | s(bool,X161) = s(bool,happ(s(fun(X158,bool),X159),s(X158,X160))) | s(bool,'T_0') = s(bool,X161)) )),
  inference(superposition,[],[f322,f424])).
fof(f11416,plain,(
  ( ! [X127,X125,X123,X128,X126,X124] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X123),X126))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X124),X127))) | s(bool,X128) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X123,fun(X124,bool))),X125),s('type.list.list'(X123),X126),s('type.list.list'(X124),X127))) | s(bool,'T_0') = s(bool,X128)) )),
  inference(subsumption_resolution,[],[f10799,f238])).
fof(f10799,plain,(
  ( ! [X127,X125,X123,X128,X126,X124] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X123),X126))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X124),X127))) | s(bool,X128) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X123,fun(X124,bool))),X125),s('type.list.list'(X123),X126),s('type.list.list'(X124),X127))) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f343,f424])).
fof(f11415,plain,(
  ( ! [X59,X60,X58] : (s(bool,X58) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X59,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) ) | $spl14),
  inference(subsumption_resolution,[],[f10773,f238])).
fof(f10773,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X58) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X59,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) ) | $spl14),
  inference(superposition,[],[f3356,f424])).
fof(f11414,plain,(
  ( ! [X45,X43,X46,X44] : (p(s(bool,X44)) | ~sP0(X44,X43,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f10768,f238])).
fof(f10768,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | p(s(bool,X44)) | ~sP0(X44,X43,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f354,f424])).
fof(f11413,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X40)) | ~sP0(X40,X41,X39) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f10767,f238])).
fof(f10767,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,X40)) | ~sP0(X40,X41,X39) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f353,f424])).
fof(f11412,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,X37)) | s(bool,X36) = s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f10766,f238])).
fof(f10766,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | s(bool,X36) = s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f331,f424])).
fof(f11407,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f10758,f238])).
fof(f10758,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f249,f424])).
fof(f10711,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f245,f424])).
fof(f10580,plain,(
  ( ! [X405,X403,X404,X406] : (s(X405,f(s(bool,X406))) != s(X405,g(s(bool,X406))) | s(fun(bool,X405),X403) = s(fun(bool,X405),X404) | s(bool,'T_0') = s(bool,X406) | s(bool,'T_0') = s(bool,sK21(X403,X404,X405,bool))) )),
  inference(superposition,[],[f342,f424])).
fof(f10558,plain,(
  ( ! [X308,X310,X309,X311,X307] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X308),s('type.list.list'(bool),X309))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X310),s('type.list.list'(bool),X311))) | s(bool,X307) = s(bool,X310) | s(bool,'T_0') = s(bool,X308) | s(bool,'T_0') = s(bool,X307)) )),
  inference(superposition,[],[f325,f424])).
fof(f10424,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,X26) | s(bool,X28) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X26),s('type.list.list'(bool),X27))))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f424,f293])).
fof(f10410,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f424,f424])).
fof(f10371,plain,(
  ( ! [X47,X45,X46] : (s(bool,X45) = s(bool,X47) | s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X45),s('type.list.list'(bool),X46)))))) )),
  inference(superposition,[],[f424,f293])).
fof(f9605,plain,(
  ( ! [X47,X48,X49] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X47))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X48),s('type.list.list'(bool),X49))) | s(bool,X48) = s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f325,f9137])).
fof(f9692,plain,(
  ( ! [X17,X18] : (~sP0(X17,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X18) | p(s(bool,X17))) ) | $spl14),
  inference(subsumption_resolution,[],[f9582,f238])).
fof(f9582,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | ~sP0(X17,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X18)) ) | $spl14),
  inference(superposition,[],[f354,f9137])).
fof(f9691,plain,(
  ( ! [X15,X16] : (~sP0(X15,X16,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X15))) ) | $spl14),
  inference(subsumption_resolution,[],[f9581,f238])).
fof(f9581,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,X16,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f353,f9137])).
fof(f9315,plain,(
  ( ! [X313,X314] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X313),'const.list.HD_1'(s('type.list.list'('type.list.list'(X313)),X314))))) | s('type.list.list'(X313),'const.list.NIL_0') = s('type.list.list'(X313),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(X313)),X314)))) )),
  inference(superposition,[],[f289,f1077])).
fof(f9511,plain,(
  ( ! [X289] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X289))) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X289))) | s(bool,'T_0') = s(bool,sK5('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X289)),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f9304,f1077])).
fof(f9304,plain,(
  ( ! [X289] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X289))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X289))) | s(bool,'T_0') = s(bool,sK5('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'(bool)),X289)),bool))) ) | $spl14),
  inference(superposition,[],[f7451,f1077])).
fof(f9273,plain,(
  ( ! [X222,X223] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X223))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X222))))) | s('type.num.num',X223) = s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X222)))) )),
  inference(superposition,[],[f332,f1077])).
fof(f9137,plain,(
  s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | $spl14),
  inference(unit_resulting_resolution,[],[f400,f1077,f5993])).
fof(f9138,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f401,f1077,f5993])).
fof(f8692,plain,(
  ( ! [X17,X18,X16] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))) | s(bool,'T_0') = s(bool,sK5('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18)))),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f8682,f324])).
fof(f8682,plain,(
  ( ! [X17,X18,X16] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X16),s('type.list.list'('type.list.list'(bool)),X18))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18))))) | s(bool,'T_0') = s(bool,sK5('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X17),s('type.list.list'('type.list.list'(bool)),X18)))),bool))) ) | $spl14),
  inference(superposition,[],[f7451,f324])).
fof(f8691,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15)),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f8681,f364])).
fof(f8681,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.combin.o_3'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14),s(X11,X15))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun(X11,'type.list.list'(bool)),'const.combin.o_2'(s(fun(X12,'type.list.list'(bool)),X13),s(fun(X11,X12),X14))),s(X11,X15)),bool))) ) | $spl14),
  inference(superposition,[],[f7451,f364])).
fof(f8690,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10)))),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f8680,f363])).
fof(f8680,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.combin.o_3'(s(fun(X6,'type.list.list'(bool)),X7),s(fun(X8,X6),X9),s(X8,X10))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10))))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun(X6,'type.list.list'(bool)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10)))),bool))) ) | $spl14),
  inference(superposition,[],[f7451,f363])).
fof(f8689,plain,(
  ( ! [X4,X5] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5)),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f8679,f295])).
fof(f8679,plain,(
  ( ! [X4,X5] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'('type.list.list'(bool)),X5))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.EL_1'(s('type.num.num',X4))),s('type.list.list'('type.list.list'(bool)),X5)),bool))) ) | $spl14),
  inference(superposition,[],[f7451,f295])).
fof(f8688,plain,(
  ( ! [X3] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3)),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f8678,f285])).
fof(f8678,plain,(
  ( ! [X3] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X3))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun('type.list.list'('type.list.list'(bool)),'type.list.list'(bool)),'const.list.HD_0'),s('type.list.list'('type.list.list'(bool)),X3)),bool))) ) | $spl14),
  inference(superposition,[],[f7451,f285])).
fof(f8687,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X1) | s('type.list.list'(bool),X1) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK5('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2)))),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f8677,f293])).
fof(f8677,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),X1) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2))))) | s(bool,'T_0') = s(bool,sK5('const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),X1),s('type.list.list'('type.list.list'(bool)),X2)))),bool))) ) | $spl14),
  inference(superposition,[],[f7451,f293])).
fof(f8077,plain,(
  ( ! [X2,X0,X1] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1)))),'const.list.HD_0','type.list.list'(bool)))),X2) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f8046,f243])).
fof(f8050,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X1,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2)))),'const.list.HD_0','type.list.list'(bool)))),X3) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f7986,f243])).
fof(f8035,plain,(
  ( ! [X2,X0,X1] : (~sP0('F_0',X1,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2)))),'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f7996,f243])).
fof(f8000,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X1,X2,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X3)))),'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f7985,f243])).
fof(f7832,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1)))),'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(subsumption_resolution,[],[f7816,f240])).
fof(f7816,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1)))),'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f2599,f243])).
fof(f7451,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0) | s(bool,'T_0') = s(bool,sK5(X0,bool))) ) | $spl14),
  inference(subsumption_resolution,[],[f7450,f240])).
fof(f7450,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.list.list'(bool),X0) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0) | s(bool,'T_0') = s(bool,sK5(X0,bool))) ) | $spl14),
  inference(superposition,[],[f6830,f243])).
fof(f7392,plain,(
  ( ! [X0,X1] : (~sP0('F_0',happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X1)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f6737])).
fof(f6998,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f6736])).
fof(f6661,plain,(
  ( ! [X70,X68,X71,X69] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X69))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X70),s('type.list.list'(bool),X71))) | s(bool,X70) = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X68),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f325,f6101])).
fof(f6654,plain,(
  ( ! [X52,X53,X51] : (s(X52,happ(s(fun(bool,X52),X53),s(bool,'T_0'))) = s(X52,'const.combin.o_3'(s(fun(bool,X52),X53),s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X51),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f363,f6101])).
fof(f6737,plain,(
  ( ! [X37,X38,X36] : (~sP0(X37,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X38) | p(s(bool,X37))) ) | $spl14),
  inference(subsumption_resolution,[],[f6646,f238])).
fof(f6646,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | p(s(bool,X37)) | ~sP0(X37,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X38)) ) | $spl14),
  inference(superposition,[],[f354,f6101])).
fof(f6736,plain,(
  ( ! [X35,X33,X34] : (~sP0(X34,X35,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X34))) ) | $spl14),
  inference(subsumption_resolution,[],[f6645,f238])).
fof(f6645,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'T_0')) | p(s(bool,X34)) | ~sP0(X34,X35,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f353,f6101])).
fof(f6724,plain,(
  ( ! [X4] : (s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK11('const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)))) ) | $spl14),
  inference(subsumption_resolution,[],[f6631,f238])).
fof(f6631,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK11('const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)))) ) | $spl14),
  inference(superposition,[],[f322,f6101])).
fof(f6540,plain,(
  ( ! [X0] : (~sP0('F_0',happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X0)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f6269])).
fof(f6486,plain,(
  ( ! [X0] : (~sP0('F_0',X0,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f6268])).
fof(f6207,plain,(
  ( ! [X26,X24,X25] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X24))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X25),s('type.list.list'(bool),X26))) | s(bool,X25) = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f325,f6100])).
fof(f6202,plain,(
  ( ! [X19,X18] : (s(X18,happ(s(fun(bool,X18),X19),s(bool,'T_0'))) = s(X18,'const.combin.o_3'(s(fun(bool,X18),X19),s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f363,f6100])).
fof(f6269,plain,(
  ( ! [X12,X11] : (~sP0(X11,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X12) | p(s(bool,X11))) ) | $spl14),
  inference(subsumption_resolution,[],[f6194,f238])).
fof(f6194,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | ~sP0(X11,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X12)) ) | $spl14),
  inference(superposition,[],[f354,f6100])).
fof(f6268,plain,(
  ( ! [X10,X9] : (~sP0(X9,X10,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X9))) ) | $spl14),
  inference(subsumption_resolution,[],[f6193,f238])).
fof(f6193,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | ~sP0(X9,X10,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f353,f6100])).
fof(f6258,plain,(
  s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl14),
  inference(subsumption_resolution,[],[f6181,f238])).
fof(f6181,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl14),
  inference(superposition,[],[f322,f6100])).
fof(f6112,plain,(
  ( ! [X14,X12,X13] : (s(bool,X12) != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X14,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X12),s('type.list.list'(bool),X13)))))) ) | $spl14),
  inference(superposition,[],[f5993,f293])).
fof(f6100,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | $spl14),
  inference(unit_resulting_resolution,[],[f400,f285,f5993])).
fof(f4463,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4451,f285])).
fof(f4451,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f310,f242])).
fof(f4460,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f310,f285])).
fof(f4552,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4540,f285])).
fof(f4540,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f312,f242])).
fof(f4549,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK14('const.list.HD_0',X4,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f312,f285])).
fof(f2861,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),X1))))) )),
  inference(superposition,[],[f334,f241])).
fof(f3251,plain,(
  ( ! [X364,X366,X368,X365,X367,X369] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X369))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.combin.o_3'(s(fun(X364,'type.num.num'),X365),s(fun(X366,X364),X367),s(X366,X368))))) | s('type.num.num',X369) = s('type.num.num',happ(s(fun(X364,'type.num.num'),X365),s(X364,happ(s(fun(X366,X364),X367),s(X366,X368)))))) )),
  inference(superposition,[],[f332,f363])).
fof(f3465,plain,(
  ( ! [X412,X414,X416,X413,X415,X411] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X416))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.combin.o_3'(s(fun(X412,'type.num.num'),X413),s(fun(X411,X412),X414),s(X411,X415))))) | s('type.num.num',X416) = s('type.num.num',happ(s(fun(X411,'type.num.num'),'const.combin.o_2'(s(fun(X412,'type.num.num'),X413),s(fun(X411,X412),X414))),s(X411,X415)))) )),
  inference(superposition,[],[f332,f364])).
fof(f324,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X7] : ! [X24,X36,X31] : s(X7,'const.list.EL_2'(s('type.num.num',X24),s('type.list.list'(X7),X36))) = s(X7,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X31),s('type.list.list'(X7),X36)))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.list.EL_restricted|split|1')).
fof(f332,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X25,X24] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))) <=> s('type.num.num',X24) = s('type.num.num',X25))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.prim_rec.INV_SUC_EQ')).
fof(f333,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f215])).
fof(f663,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f283,f332])).
fof(f664,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(superposition,[],[f332,f241])).
fof(f665,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X2),s('type.list.list'('type.num.num'),X3)))))) )),
  inference(superposition,[],[f332,f293])).
fof(f670,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f663,f332])).
fof(f702,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f238,f694,f331])).
fof(f704,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f240,f694,f353])).
fof(f706,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1)) )),
  inference(unit_resulting_resolution,[],[f240,f694,f354])).
fof(f710,plain,(
  ( ! [X2,X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f694,f385])).
fof(f750,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X26))))) | s('type.num.num',X27) = s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X26)))) )),
  inference(superposition,[],[f332,f285])).
fof(f977,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))))))) | s('type.num.num',X9) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),X8)))))) )),
  inference(superposition,[],[f332,f294])).
fof(f1061,plain,(
  ( ! [X80,X78,X79] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X80))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.EL_2'(s('type.num.num',X78),s('type.list.list'('type.num.num'),X79))))) | s('type.num.num',X80) = s('type.num.num',happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X78))),s('type.list.list'('type.num.num'),X79)))) )),
  inference(superposition,[],[f332,f295])).
fof(f1873,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X0))) != s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'('type.num.num'),X2)))) )),
  inference(unit_resulting_resolution,[],[f283,f325])).
fof(f1874,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.num.num'),X0))) != s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.list.list'('type.num.num'),X2)))) )),
  inference(unit_resulting_resolution,[],[f663,f325])).
fof(f2631,plain,(
  ( ! [X2,X0,X1] : (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),sK6(X1,X0)))) = s(X0,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f324,f286])).
fof(f2642,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (s('type.list.list'(X50),'const.list.CONS_2'(s(X50,X55),s('type.list.list'(X50),X56))) != s('type.list.list'(X50),'const.list.CONS_2'(s(X50,'const.list.EL_2'(s('type.num.num',X51),s('type.list.list'(X50),X53))),s('type.list.list'(X50),X54))) | s(X50,X55) = s(X50,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,X52),s('type.list.list'(X50),X53)))))) )),
  inference(superposition,[],[f325,f324])).
fof(f2672,plain,(
  ( ! [X196,X194,X197,X195] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X197))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.EL_2'(s('type.num.num',X194),s('type.list.list'('type.num.num'),X196))))) | s('type.num.num',X197) = s('type.num.num','const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X194))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X195),s('type.list.list'('type.num.num'),X196)))))) )),
  inference(superposition,[],[f332,f324])).
fof(f2684,plain,(
  ( ! [X243,X241,X242,X240] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X240),'const.list.EL_2'(s('type.num.num',X241),s('type.list.list'('type.list.list'(X240)),X243))))) | s('type.list.list'(X240),'const.list.NIL_0') = s('type.list.list'(X240),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))),s('type.list.list'('type.list.list'(X240)),'const.list.CONS_2'(s('type.list.list'(X240),X242),s('type.list.list'('type.list.list'(X240)),X243)))))) )),
  inference(superposition,[],[f289,f324])).
fof(f2781,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (s('type.list.list'(X25),'const.list.CONS_2'(s(X25,X30),s('type.list.list'(X25),X31))) != s('type.list.list'(X25),'const.list.CONS_2'(s(X25,X29),s('type.list.list'(X25),'const.list.EL_2'(s('type.num.num',X26),s('type.list.list'('type.list.list'(X25)),X28))))) | s('type.list.list'(X25),X31) = s('type.list.list'(X25),'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.list.list'('type.list.list'(X25)),'const.list.CONS_2'(s('type.list.list'(X25),X27),s('type.list.list'('type.list.list'(X25)),X28)))))) )),
  inference(superposition,[],[f326,f324])).
fof(f294,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f93])).
fof(f93,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X6] : ! [X30,X12] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X12))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X30),s('type.list.list'(X6),X12)))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.list.LENGTH|split|1')).
fof(f1891,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X64),s('type.list.list'('type.num.num'),X65))) != s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X62))))),s('type.list.list'('type.num.num'),X63))) | s('type.num.num',X64) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),'const.list.CONS_2'(s(X60,X61),s('type.list.list'(X60),X62)))))) )),
  inference(superposition,[],[f325,f294])).
fof(f1786,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f294,f286])).
fof(f583,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.HD_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X1),s('type.list.list'('type.list.list'(X0)),X2)))))) )),
  inference(superposition,[],[f289,f293])).
fof(f3484,plain,(
  ( ! [X528,X524,X526,X529,X525,X527] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X524),'const.combin.o_3'(s(fun(X526,'type.list.list'(X524)),X527),s(fun(X525,X526),X528),s(X525,X529))))) | s('type.list.list'(X524),'const.list.NIL_0') = s('type.list.list'(X524),happ(s(fun(X525,'type.list.list'(X524)),'const.combin.o_2'(s(fun(X526,'type.list.list'(X524)),X527),s(fun(X525,X526),X528))),s(X525,X529)))) )),
  inference(superposition,[],[f289,f364])).
fof(f3270,plain,(
  ( ! [X478,X480,X482,X477,X479,X481] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X477),'const.combin.o_3'(s(fun(X478,'type.list.list'(X477)),X479),s(fun(X480,X478),X481),s(X480,X482))))) | s('type.list.list'(X477),'const.list.NIL_0') = s('type.list.list'(X477),happ(s(fun(X478,'type.list.list'(X477)),X479),s(X478,happ(s(fun(X480,X478),X481),s(X480,X482)))))) )),
  inference(superposition,[],[f289,f363])).
fof(f1075,plain,(
  ( ! [X121,X120,X119] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X119),'const.list.EL_2'(s('type.num.num',X120),s('type.list.list'('type.list.list'(X119)),X121))))) | s('type.list.list'(X119),'const.list.NIL_0') = s('type.list.list'(X119),happ(s(fun('type.list.list'('type.list.list'(X119)),'type.list.list'(X119)),'const.list.EL_1'(s('type.num.num',X120))),s('type.list.list'('type.list.list'(X119)),X121)))) )),
  inference(superposition,[],[f289,f295])).
fof(f760,plain,(
  ( ! [X43,X44] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),'const.list.HD_1'(s('type.list.list'('type.list.list'(X43)),X44))))) | s('type.list.list'(X43),'const.list.NIL_0') = s('type.list.list'(X43),happ(s(fun('type.list.list'('type.list.list'(X43)),'type.list.list'(X43)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X43)),X44)))) )),
  inference(superposition,[],[f289,f285])).
fof(f4420,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X1)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f3153])).
fof(f3993,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | s(X0,X1) != s(X0,X3)) )),
  inference(equality_resolution,[],[f327])).
fof(f3977,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))))) | s(X0,X3) != s(X0,X4) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f327,f286])).
fof(f3534,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f3152])).
fof(f3492,plain,(
  ( ! [X588,X590,X584,X586,X589,X591,X585,X587,X583] : (s('type.list.list'(X583),'const.list.CONS_2'(s(X583,X590),s('type.list.list'(X583),X591))) != s('type.list.list'(X583),'const.list.CONS_2'(s(X583,X589),s('type.list.list'(X583),'const.combin.o_3'(s(fun(X585,'type.list.list'(X583)),X586),s(fun(X584,X585),X587),s(X584,X588))))) | s('type.list.list'(X583),X591) = s('type.list.list'(X583),happ(s(fun(X584,'type.list.list'(X583)),'const.combin.o_2'(s(fun(X585,'type.list.list'(X583)),X586),s(fun(X584,X585),X587))),s(X584,X588)))) )),
  inference(superposition,[],[f326,f364])).
fof(f3419,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X100,X98,X96] : (s('type.list.list'(X92),'const.list.CONS_2'(s(X92,X99),s('type.list.list'(X92),X100))) != s('type.list.list'(X92),'const.list.CONS_2'(s(X92,'const.combin.o_3'(s(fun(X94,X92),X95),s(fun(X93,X94),X96),s(X93,X97))),s('type.list.list'(X92),X98))) | s(X92,X99) = s(X92,happ(s(fun(X93,X92),'const.combin.o_2'(s(fun(X94,X92),X95),s(fun(X93,X94),X96))),s(X93,X97)))) )),
  inference(superposition,[],[f325,f364])).
fof(f3407,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X6,happ(s(fun(X0,X6),X7),s(X0,'const.combin.o_3'(s(fun(X2,X0),X3),s(fun(X1,X2),X4),s(X1,X5))))) = s(X6,'const.combin.o_3'(s(fun(X0,X6),X7),s(fun(X1,X0),'const.combin.o_2'(s(fun(X2,X0),X3),s(fun(X1,X2),X4))),s(X1,X5)))) )),
  inference(superposition,[],[f363,f364])).
fof(f3405,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s(X6,'const.combin.o_3'(s(fun(X8,X6),X9),s(fun(X7,X8),X10),s(X7,happ(s(fun(X11,X7),X12),s(X11,X13))))) = s(X6,'const.combin.o_3'(s(fun(X7,X6),'const.combin.o_2'(s(fun(X8,X6),X9),s(fun(X7,X8),X10))),s(fun(X11,X7),X12),s(X11,X13)))) )),
  inference(superposition,[],[f364,f363])).
fof(f3344,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X67))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X68),s('type.list.list'(bool),X69))) | s(bool,X68) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X66,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X66)) ) | $spl14),
  inference(superposition,[],[f325,f2602])).
fof(f3358,plain,(
  ( ! [X33,X34,X32] : (~sP0(X33,'const.list.HD_1'(s('type.list.list'(bool),sK11(X32,'const.list.HD_0','type.list.list'(bool)))),X34) | p(s(bool,X33)) | s(bool,'T_0') = s(bool,X32)) ) | $spl14),
  inference(subsumption_resolution,[],[f3330,f238])).
fof(f3330,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | p(s(bool,X33)) | ~sP0(X33,'const.list.HD_1'(s('type.list.list'(bool),sK11(X32,'const.list.HD_0','type.list.list'(bool)))),X34) | s(bool,'T_0') = s(bool,X32)) ) | $spl14),
  inference(superposition,[],[f354,f2602])).
fof(f3357,plain,(
  ( ! [X30,X31,X29] : (~sP0(X30,X31,'const.list.HD_1'(s('type.list.list'(bool),sK11(X29,'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X30)) | s(bool,'T_0') = s(bool,X29)) ) | $spl14),
  inference(subsumption_resolution,[],[f3329,f238])).
fof(f3329,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | p(s(bool,X30)) | ~sP0(X30,X31,'const.list.HD_1'(s('type.list.list'(bool),sK11(X29,'const.list.HD_0','type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X29)) ) | $spl14),
  inference(superposition,[],[f353,f2602])).
fof(f3278,plain,(
  ( ! [X540,X542,X536,X538,X541,X543,X537,X539,X544] : (s('type.list.list'(X536),'const.list.CONS_2'(s(X536,X543),s('type.list.list'(X536),X544))) != s('type.list.list'(X536),'const.list.CONS_2'(s(X536,X542),s('type.list.list'(X536),'const.combin.o_3'(s(fun(X537,'type.list.list'(X536)),X538),s(fun(X539,X537),X540),s(X539,X541))))) | s('type.list.list'(X536),X544) = s('type.list.list'(X536),happ(s(fun(X537,'type.list.list'(X536)),X538),s(X537,happ(s(fun(X539,X537),X540),s(X539,X541)))))) )),
  inference(superposition,[],[f326,f363])).
fof(f3210,plain,(
  ( ! [X92,X90,X88,X87,X85,X93,X91,X89,X86] : (s('type.list.list'(X85),'const.list.CONS_2'(s(X85,X92),s('type.list.list'(X85),X93))) != s('type.list.list'(X85),'const.list.CONS_2'(s(X85,'const.combin.o_3'(s(fun(X86,X85),X87),s(fun(X88,X86),X89),s(X88,X90))),s('type.list.list'(X85),X91))) | s(X85,X92) = s(X85,happ(s(fun(X86,X85),X87),s(X86,happ(s(fun(X88,X86),X89),s(X88,X90)))))) )),
  inference(superposition,[],[f325,f363])).
fof(f3196,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),happ(s(fun(X6,'type.list.list'(X4)),X7),s(X6,X8))))) = s(X4,'const.combin.o_3'(s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s(fun(X6,'type.list.list'(X4)),X7),s(X6,X8)))) )),
  inference(superposition,[],[f363,f295])).
fof(f3195,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.list.HD_1'(s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X2),s(X1,X3))))) = s(X0,'const.combin.o_3'(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(fun(X1,'type.list.list'(X0)),X2),s(X1,X3)))) )),
  inference(superposition,[],[f363,f285])).
fof(f3193,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9,X16] : (s(X15,happ(s(fun(X9,X15),X16),s(X9,'const.combin.o_3'(s(fun(X10,X9),X11),s(fun(X12,X10),X13),s(X12,X14))))) = s(X15,'const.combin.o_3'(s(fun(X9,X15),X16),s(fun(X10,X9),X11),s(X10,happ(s(fun(X12,X10),X13),s(X12,X14)))))) )),
  inference(superposition,[],[f363,f363])).
fof(f3192,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(X7,happ(s(fun(X4,X7),X8),s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),X6))))) = s(X7,'const.combin.o_3'(s(fun(X4,X7),X8),s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s('type.list.list'(X4),X6)))) )),
  inference(superposition,[],[f363,f295])).
fof(f3191,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,happ(s(fun(X0,X2),X3),s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))))) = s(X2,'const.combin.o_3'(s(fun(X0,X2),X3),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f363,f285])).
fof(f3136,plain,(
  ( ! [X68,X66,X67,X65] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X66))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X67),s('type.list.list'(bool),X68))) | s(bool,X67) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f325,f2605])).
fof(f3153,plain,(
  ( ! [X33,X31,X32] : (~sP0(X32,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X33) | p(s(bool,X32))) ) | $spl14),
  inference(subsumption_resolution,[],[f3122,f238])).
fof(f3122,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | ~sP0(X32,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X33)) ) | $spl14),
  inference(superposition,[],[f354,f2605])).
fof(f3152,plain,(
  ( ! [X30,X28,X29] : (~sP0(X29,X30,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X29))) ) | $spl14),
  inference(subsumption_resolution,[],[f3121,f238])).
fof(f3121,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | ~sP0(X29,X30,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f353,f2605])).
fof(f2914,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(subsumption_resolution,[],[f2913,f240])).
fof(f2913,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(forward_demodulation,[],[f2912,f408])).
fof(f2912,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),X1)),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(forward_demodulation,[],[f2896,f241])).
fof(f2896,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),X1)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) )),
  inference(superposition,[],[f335,f241])).
fof(f2782,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),sK6(X1,X0)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f326,f286])).
fof(f2780,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X23),s('type.list.list'(X19),X24))) != s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X22),s('type.list.list'(X19),'const.list.EL_2'(s('type.num.num',X20),s('type.list.list'('type.list.list'(X19)),X21))))) | s('type.list.list'(X19),X24) = s('type.list.list'(X19),happ(s(fun('type.list.list'('type.list.list'(X19)),'type.list.list'(X19)),'const.list.EL_1'(s('type.num.num',X20))),s('type.list.list'('type.list.list'(X19)),X21)))) )),
  inference(superposition,[],[f326,f295])).
fof(f2779,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s('type.list.list'(X14),'const.list.CONS_2'(s(X14,X17),s('type.list.list'(X14),X18))) != s('type.list.list'(X14),'const.list.CONS_2'(s(X14,X16),s('type.list.list'(X14),'const.list.HD_1'(s('type.list.list'('type.list.list'(X14)),X15))))) | s('type.list.list'(X14),X18) = s('type.list.list'(X14),happ(s(fun('type.list.list'('type.list.list'(X14)),'type.list.list'(X14)),'const.list.HD_0'),s('type.list.list'('type.list.list'(X14)),X15)))) )),
  inference(superposition,[],[f326,f285])).
fof(f2778,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X11),s('type.list.list'(X8),X9))) != s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X12),s('type.list.list'(X8),X13))) | s('type.list.list'(X8),X13) = s('type.list.list'(X8),'const.list.HD_1'(s('type.list.list'('type.list.list'(X8)),'const.list.CONS_2'(s('type.list.list'(X8),X9),s('type.list.list'('type.list.list'(X8)),X10)))))) )),
  inference(superposition,[],[f326,f293])).
fof(f2776,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X4) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),sK6(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f326,f286])).
fof(f2605,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f2597,f240])).
fof(f2597,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f2376,f408])).
fof(f2512,plain,(
  ( ! [X17,X18] : (~sP0(X17,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X18) | p(s(bool,X17))) ) | $spl14),
  inference(subsumption_resolution,[],[f2487,f238])).
fof(f2487,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | ~sP0(X17,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X18)) ) | $spl14),
  inference(superposition,[],[f354,f2381])).
fof(f2511,plain,(
  ( ! [X15,X16] : (~sP0(X15,X16,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X15))) ) | $spl14),
  inference(subsumption_resolution,[],[f2486,f238])).
fof(f2486,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,X16,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(superposition,[],[f353,f2381])).
fof(f2381,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | $spl14),
  inference(unit_resulting_resolution,[],[f238,f2374,f331])).
fof(f2383,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f2374,f353])).
fof(f2386,plain,(
  ( ! [X0] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X0)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f2374,f354])).
fof(f2389,plain,(
  s(bool,'F_0') != s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f2374,f384])).
fof(f2392,plain,(
  ( ! [X0,X1] : (sP0('const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X0,X1)) ) | $spl14),
  inference(unit_resulting_resolution,[],[f2374,f385])).
fof(f2374,plain,(
  p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) | $spl14),
  inference(unit_resulting_resolution,[],[f240,f2335])).
fof(f2340,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X4),s(X3,X5))) | s(X3,X5) = s(X3,sK16(X5,X4,X3))) )),
  inference(subsumption_resolution,[],[f1513,f240])).
fof(f1513,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'F_0')) | s(X3,X5) = s(X3,sK16(X5,X4,X3)) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) )),
  inference(superposition,[],[f314,f243])).
fof(f1902,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))) | s(X0,X2) = s(X0,sK5(X1,X0)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(superposition,[],[f325,f286])).
fof(f1894,plain,(
  ( ! [X76,X74,X77,X75,X73] : (s('type.list.list'('type.list.list'(X73)),'const.list.CONS_2'(s('type.list.list'(X73),X74),s('type.list.list'('type.list.list'(X73)),X75))) != s('type.list.list'('type.list.list'(X73)),'const.list.CONS_2'(s('type.list.list'(X73),X76),s('type.list.list'('type.list.list'(X73)),X77))) | s('type.list.list'(X73),X76) = s('type.list.list'(X73),'const.list.CONS_2'(s(X73,sK5(X74,X73)),s('type.list.list'(X73),sK6(X74,X73)))) | s('type.list.list'(X73),'const.list.NIL_0') = s('type.list.list'(X73),X74)) )),
  inference(superposition,[],[f325,f286])).
fof(f1890,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X57))) != s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X58),s('type.list.list'('type.num.num'),X59))) | s('type.num.num',X58) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),'const.list.NIL_0')))) )),
  inference(superposition,[],[f325,f241])).
fof(f1878,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X3))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5))) | s(X0,X4) = s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(superposition,[],[f325,f293])).
fof(f703,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f694,f694,f331])).
fof(f708,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f240,f694,f384])).
fof(f694,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(forward_demodulation,[],[f689,f293])).
fof(f689,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X0))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(unit_resulting_resolution,[],[f293,f336])).
fof(f579,plain,(
  ( ! [X6,X5] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f575,f240])).
fof(f575,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f460,f408])).
fof(f421,plain,(
  ( ! [X0] : (sP0(X0,'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f240,f240,f355])).
fof(f417,plain,(
  ( ! [X0] : (~sP0('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f240,f238,f354])).
fof(f414,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f240,f238,f353])).
fof(f397,plain,(
  ( ! [X0,X1] : (sP0('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f238,f385])).
fof(f364,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(flattening,[],[f130])).
fof(f130,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X7,X22,X6] : ! [X37,X38,X39] : s(X7,'const.combin.o_3'(s(fun(X22,X7),X37),s(fun(X6,X22),X38),s(X6,X39))) = s(X7,happ(s(fun(X6,X7),'const.combin.o_2'(s(fun(X22,X7),X37),s(fun(X6,X22),X38))),s(X6,X39)))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','ARITY_2_3_const.combin.o')).
fof(f363,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5)))))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5)))))),
  inference(flattening,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X7,X6,X22] : ! [X20,X23,X8] : s(X7,'const.combin.o_3'(s(fun(X6,X7),X20),s(fun(X22,X6),X23),s(X22,X8))) = s(X7,happ(s(fun(X6,X7),X20),s(X6,happ(s(fun(X22,X6),X23),s(X22,X8)))))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.combin.o_THM')).
fof(f342,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK21(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK21(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK21(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK21(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK21])],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.indexedLists.LIST_RELi_thm|split|0',aHL_EXT)).
fof(f325,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) = s(X0,X3)) )),
  inference(cnf_transformation,[],[f214])).
fof(f214,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f213])).
fof(f213,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & ((s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(nnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X6] : ! [X32,X33,X34,X35] : (s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X32),s('type.list.list'(X6),X33))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X34),s('type.list.list'(X6),X35))) <=> (s(X6,X32) = s(X6,X34) & s('type.list.list'(X6),X33) = s('type.list.list'(X6),X35)))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.list.list_|49||49|')).
fof(f326,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)) )),
  inference(cnf_transformation,[],[f214])).
fof(f327,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) != s(X0,X3)) )),
  inference(cnf_transformation,[],[f214])).
fof(f289,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X6] : ! [X31] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X31))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X31))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.list.LENGTH_NIL_SYM')).
fof(f290,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f183])).
fof(f283,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X24] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.num.NOT_SUC')).
fof(f20374,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609,f18592,f18588,f18586,f20346,f20355,f18814])).
fof(f20373,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(subsumption_resolution,[],[f18807,f238])).
fof(f18807,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(superposition,[],[f2326,f15704])).
fof(f20372,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(subsumption_resolution,[],[f18805,f238])).
fof(f18805,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(superposition,[],[f2326,f9737])).
fof(f9737,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12('const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f9715,f240])).
fof(f9715,plain,(
  ( ! [X6] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12('const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f8888,f408])).
fof(f20371,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(subsumption_resolution,[],[f18804,f238])).
fof(f18804,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(superposition,[],[f2326,f9706])).
fof(f9706,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))))) | ($spl1 | $spl2 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f8888])).
fof(f20370,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18803,f238])).
fof(f18803,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(superposition,[],[f2326,f2605])).
fof(f20369,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18802,f238])).
fof(f18802,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(superposition,[],[f2326,f2381])).
fof(f20368,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20367,f238])).
fof(f20367,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18800,f18748])).
fof(f18800,plain,(
  ( ! [X20] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X20))))))) ) | $spl8),
  inference(superposition,[],[f2326,f1077])).
fof(f20366,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20365,f238])).
fof(f20365,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18799,f18748])).
fof(f18799,plain,(
  ( ! [X19,X17] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X17),s('type.list.list'('type.list.list'(bool)),X19))))))) ) | $spl8),
  inference(superposition,[],[f2326,f324])).
fof(f20364,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20363,f238])).
fof(f20363,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18798,f18748])).
fof(f18798,plain,(
  ( ! [X14,X12,X15,X13,X16] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X13,'type.list.list'(bool)),X14),s(fun(X12,X13),X15),s(X12,X16))))))) ) | $spl8),
  inference(superposition,[],[f2326,f364])).
fof(f20362,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20361,f238])).
fof(f20361,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18797,f18748])).
fof(f18797,plain,(
  ( ! [X10,X8,X7,X11,X9] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.combin.o_3'(s(fun(X7,'type.list.list'(bool)),X8),s(fun(X9,X7),X10),s(X9,X11))))))) ) | $spl8),
  inference(superposition,[],[f2326,f363])).
fof(f20360,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20359,f238])).
fof(f20359,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18796,f18748])).
fof(f18796,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'(bool)),X6))))))) ) | $spl8),
  inference(superposition,[],[f2326,f295])).
fof(f20358,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20357,f238])).
fof(f20357,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18795,f18748])).
fof(f18795,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.HD_1'(s('type.list.list'('type.list.list'(bool)),X4))))))) ) | $spl8),
  inference(superposition,[],[f2326,f285])).
fof(f20356,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609,f18592,f18588,f18586,f20346,f20355])).
fof(f20353,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20352,f238])).
fof(f20352,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18793,f18748])).
fof(f18793,plain,(
  ( ! [X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1))))) ) | $spl8),
  inference(superposition,[],[f2326,f293])).
fof(f20351,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(subsumption_resolution,[],[f20350,f238])).
fof(f20350,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(forward_demodulation,[],[f18792,f9706])).
fof(f18792,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool)))))) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(superposition,[],[f2326,f17725])).
fof(f17725,plain,(
  s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f17689,f238])).
fof(f17689,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f896,f9706])).
fof(f20349,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20348,f238])).
fof(f20348,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18791,f2381])).
fof(f18791,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) | ($spl8 | $spl14)),
  inference(superposition,[],[f2326,f6258])).
fof(f20347,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609,f18592,f18588,f18586,f20346])).
fof(f20344,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609,f18592,f18588,f18586])).
fof(f20343,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20342,f238])).
fof(f20342,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18587,f18748])).
fof(f18587,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK16(X0,'const.list.HD_0','type.list.list'(bool))))))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f2326,f1702])).
fof(f20341,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609,f18592,f18588])).
fof(f20340,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609,f18592])).
fof(f20339,plain,(
  $false | ($spl8 | $spl14 | $spl18)),
  inference(global_subsumption,[],[f18594,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609])).
fof(f18594,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f2326,f2426])).
fof(f20338,plain,(
  $false | ($spl8 | $spl14 | $spl24)),
  inference(global_subsumption,[],[f18598,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609])).
fof(f18598,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f2326,f2581])).
fof(f20337,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20336,f238])).
fof(f20336,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18600,f18748])).
fof(f18600,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f2326,f1740])).
fof(f20335,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18601,f18748])).
fof(f18601,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f2326,f245])).
fof(f20329,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618,f18609])).
fof(f20328,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20327,f238])).
fof(f20327,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18611,f18748])).
fof(f18611,plain,(
  ~p(s(bool,'F_0')) | $spl8),
  inference(unit_resulting_resolution,[],[f421,f2326,f353])).
fof(f20326,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20325,f238])).
fof(f20325,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(forward_demodulation,[],[f18612,f18748])).
fof(f18612,plain,(
  ~p(s(bool,'F_0')) | ($spl1 | $spl2 | $spl8)),
  inference(unit_resulting_resolution,[],[f4826,f2326,f353])).
fof(f20324,plain,(
  $false | ($spl8 | $spl14 | $spl41)),
  inference(subsumption_resolution,[],[f20323,f238])).
fof(f20323,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl41)),
  inference(forward_demodulation,[],[f18613,f18748])).
fof(f18613,plain,(
  ~p(s(bool,'F_0')) | ($spl8 | $spl41)),
  inference(unit_resulting_resolution,[],[f14225,f2326,f353])).
fof(f14225,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'F_0')) ) | $spl41),
  inference(unit_resulting_resolution,[],[f240,f10300,f355])).
fof(f10300,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl41),
  inference(unit_resulting_resolution,[],[f6431,f5331])).
fof(f20322,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20321,f238])).
fof(f20321,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(forward_demodulation,[],[f18614,f18748])).
fof(f18614,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ($spl1 | $spl2 | $spl8)),
  inference(unit_resulting_resolution,[],[f4832,f2326,f353])).
fof(f20320,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20319,f238])).
fof(f20319,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(forward_demodulation,[],[f18615,f18748])).
fof(f18615,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ($spl1 | $spl2 | $spl8)),
  inference(unit_resulting_resolution,[],[f4833,f2326,f353])).
fof(f20318,plain,(
  $false | ($spl8 | $spl14 | $spl41)),
  inference(subsumption_resolution,[],[f20317,f238])).
fof(f20317,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl41)),
  inference(forward_demodulation,[],[f18616,f18748])).
fof(f18616,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl8 | $spl41)),
  inference(unit_resulting_resolution,[],[f14243,f2326,f353])).
fof(f14243,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl41),
  inference(unit_resulting_resolution,[],[f240,f10300,f355])).
fof(f20316,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626,f18618])).
fof(f20315,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20314,f238])).
fof(f20314,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f18620,f18748])).
fof(f18620,plain,(
  ~p(s(bool,'F_0')) | $spl8),
  inference(unit_resulting_resolution,[],[f421,f2326,f354])).
fof(f20313,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20312,f238])).
fof(f20312,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(forward_demodulation,[],[f18621,f18748])).
fof(f18621,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ($spl1 | $spl2 | $spl8)),
  inference(unit_resulting_resolution,[],[f4826,f2326,f354])).
fof(f20311,plain,(
  $false | ($spl8 | $spl14 | $spl41)),
  inference(subsumption_resolution,[],[f20310,f238])).
fof(f20310,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl41)),
  inference(forward_demodulation,[],[f18622,f18748])).
fof(f18622,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl8 | $spl41)),
  inference(unit_resulting_resolution,[],[f14225,f2326,f354])).
fof(f20309,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20308,f238])).
fof(f20308,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(forward_demodulation,[],[f18623,f18748])).
fof(f18623,plain,(
  ~p(s(bool,'F_0')) | ($spl1 | $spl2 | $spl8)),
  inference(unit_resulting_resolution,[],[f4832,f2326,f354])).
fof(f20307,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20306,f238])).
fof(f20306,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(forward_demodulation,[],[f18624,f18748])).
fof(f18624,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ($spl1 | $spl2 | $spl8)),
  inference(unit_resulting_resolution,[],[f4833,f2326,f354])).
fof(f20305,plain,(
  $false | ($spl8 | $spl14 | $spl41)),
  inference(subsumption_resolution,[],[f20304,f238])).
fof(f20304,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl41)),
  inference(forward_demodulation,[],[f18625,f18748])).
fof(f18625,plain,(
  ~p(s(bool,'F_0')) | ($spl8 | $spl41)),
  inference(unit_resulting_resolution,[],[f14243,f2326,f354])).
fof(f20303,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627,f18626])).
fof(f20302,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628,f18627])).
fof(f20301,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632,f18628])).
fof(f20300,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f18630,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632])).
fof(f18630,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f5521,f2326,f355])).
fof(f5521,plain,(
  ( ! [X0] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),'const.list.HD_0','type.list.list'(bool)))),X0)) ) | ($spl1 | $spl2 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f4838,f3358])).
fof(f20299,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666,f18632])).
fof(f20298,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(global_subsumption,[],[f18634,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666])).
fof(f18634,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f9895,f2326,f355])).
fof(f9895,plain,(
  ( ! [X0] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool)))),X0)) ) | ($spl1 | $spl2 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f9869])).
fof(f9869,plain,(
  ( ! [X17,X18] : (~sP0(X17,'const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool)))),X18) | p(s(bool,X17))) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f9795,f238])).
fof(f9795,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | ~sP0(X17,'const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool)))),X18)) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f354,f9706])).
fof(f20297,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(global_subsumption,[],[f18636,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666])).
fof(f18636,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f16672,f2326,f355])).
fof(f16672,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK12('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X1)) ) | ($spl1 | $spl2 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f13805])).
fof(f13805,plain,(
  ( ! [X24,X23,X22] : (~sP0(X23,'const.list.HD_1'(s('type.list.list'(bool),sK12('const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X24) | p(s(bool,X23))) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f13728,f238])).
fof(f13728,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | p(s(bool,X23)) | ~sP0(X23,'const.list.HD_1'(s('type.list.list'(bool),sK12('const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))),X24)) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f354,f9737])).
fof(f20296,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl24)),
  inference(global_subsumption,[],[f18638,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666])).
fof(f18638,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f15971,f2326,f355])).
fof(f15971,plain,(
  ( ! [X0] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))),X0)) ) | ($spl1 | $spl2 | $spl24)),
  inference(unit_resulting_resolution,[],[f240,f15917])).
fof(f15917,plain,(
  ( ! [X17,X18] : (~sP0(X17,'const.list.HD_1'(s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))),X18) | p(s(bool,X17))) ) | ($spl1 | $spl2 | $spl24)),
  inference(subsumption_resolution,[],[f15830,f238])).
fof(f15830,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | ~sP0(X17,'const.list.HD_1'(s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))),X18)) ) | ($spl1 | $spl2 | $spl24)),
  inference(superposition,[],[f354,f15704])).
fof(f20279,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f18660,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666])).
fof(f18660,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f4850,f2326,f355])).
fof(f4850,plain,(
  ( ! [X0] : (~sP0('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))),X0)) ) | ($spl1 | $spl2 | $spl14)),
  inference(unit_resulting_resolution,[],[f400,f4673,f3358])).
fof(f20277,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667,f18666])).
fof(f20276,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668,f18667])).
fof(f20275,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672,f18668])).
fof(f20274,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f18670,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672])).
fof(f18670,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f5518,f2326,f355])).
fof(f5518,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f4838,f3357])).
fof(f20273,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717,f18672])).
fof(f20272,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(global_subsumption,[],[f18674,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717])).
fof(f18674,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f9881,f2326,f355])).
fof(f9881,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f9868])).
fof(f9868,plain,(
  ( ! [X15,X16] : (~sP0(X15,X16,'const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X15))) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f9794,f238])).
fof(f9794,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,X16,'const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f353,f9706])).
fof(f20271,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(global_subsumption,[],[f18676,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717])).
fof(f18676,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f16621,f2326,f355])).
fof(f16621,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK12('const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f13804])).
fof(f13804,plain,(
  ( ! [X21,X19,X20] : (~sP0(X20,X21,'const.list.HD_1'(s('type.list.list'(bool),sK12('const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X20))) ) | ($spl1 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f13727,f238])).
fof(f13727,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | p(s(bool,X20)) | ~sP0(X20,X21,'const.list.HD_1'(s('type.list.list'(bool),sK12('const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f353,f9737])).
fof(f20270,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl24)),
  inference(global_subsumption,[],[f18678,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717])).
fof(f18678,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f15925,f2326,f355])).
fof(f15925,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl24)),
  inference(unit_resulting_resolution,[],[f240,f15916])).
fof(f15916,plain,(
  ( ! [X15,X16] : (~sP0(X15,X16,'const.list.HD_1'(s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | p(s(bool,X15))) ) | ($spl1 | $spl2 | $spl24)),
  inference(subsumption_resolution,[],[f15829,f238])).
fof(f15829,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,X16,'const.list.HD_1'(s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl24)),
  inference(superposition,[],[f353,f15704])).
fof(f20253,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f18700,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717])).
fof(f18700,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f4848,f2326,f355])).
fof(f4848,plain,(
  ( ! [X0] : (~sP0('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X0,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl14)),
  inference(unit_resulting_resolution,[],[f400,f4673,f3357])).
fof(f20251,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18706,f18748])).
fof(f18706,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f238,f2326,f384])).
fof(f20250,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18707,f238])).
fof(f18707,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2381,f2326,f384])).
fof(f20249,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18709,f238])).
fof(f18709,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2605,f2326,f384])).
fof(f20248,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(subsumption_resolution,[],[f18711,f238])).
fof(f18711,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f9706,f2326,f384])).
fof(f20247,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(subsumption_resolution,[],[f18713,f238])).
fof(f18713,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f9737,f2326,f384])).
fof(f20246,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(subsumption_resolution,[],[f18715,f238])).
fof(f18715,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f15704,f2326,f384])).
fof(f20245,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730,f18717])).
fof(f20244,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20243,f238])).
fof(f20243,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f20242,f18748])).
fof(f20242,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f18719,f285])).
fof(f18719,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0))))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f285,f2326,f384])).
fof(f20241,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20240,f238])).
fof(f20240,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f20239,f18748])).
fof(f20239,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f18720,f1077])).
fof(f18720,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X0))))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1077,f2326,f384])).
fof(f20238,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f20237,f238])).
fof(f20237,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(forward_demodulation,[],[f20236,f18748])).
fof(f20236,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f18721,f293])).
fof(f18721,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))),s('type.list.list'(bool),X1))))))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f293,f2326,f384])).
fof(f20230,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732,f18730])).
fof(f20229,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736,f18732])).
fof(f20227,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738,f18736])).
fof(f20226,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740,f18738])).
fof(f20225,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741,f18740])).
fof(f20224,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745,f18741])).
fof(f20223,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f18742,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745])).
fof(f18742,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f4838,f2326,f3357])).
fof(f20222,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746,f18745])).
fof(f20221,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218,f18746])).
fof(f20220,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f18747,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218])).
fof(f18747,plain,(
  ( ! [X0,X1] : (~sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),'const.list.HD_1'(s('type.list.list'(bool),sK11('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),'const.list.HD_0','type.list.list'(bool)))),X1)) ) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f4838,f2326,f3358])).
fof(f20219,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216,f20218])).
fof(f20217,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214,f20216])).
fof(f20215,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212,f20214])).
fof(f20213,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210,f20212])).
fof(f20211,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208,f20210])).
fof(f20209,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206,f20208])).
fof(f20207,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204,f20206])).
fof(f20205,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202,f20204])).
fof(f20203,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200,f20202])).
fof(f20201,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196,f20200])).
fof(f20197,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194,f20196])).
fof(f20195,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191,f20194])).
fof(f20192,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189,f20191])).
fof(f20190,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180,f20189])).
fof(f20186,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19405,f238])).
fof(f19405,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f2326])).
fof(f20181,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178,f20180])).
fof(f20179,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176,f20178])).
fof(f20177,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174,f20176])).
fof(f20175,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172,f20174])).
fof(f20173,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170,f20172])).
fof(f20171,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154,f20170])).
fof(f20155,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152,f20154])).
fof(f20153,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150,f20152])).
fof(f20151,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148,f20150])).
fof(f20149,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146,f20148])).
fof(f20147,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142,f20146])).
fof(f20143,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138,f20142])).
fof(f20139,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134,f20138])).
fof(f20135,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132,f20134])).
fof(f20133,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125,f20132])).
fof(f20127,plain,(
  $false | ($spl8 | $spl14 | $spl75)),
  inference(subsumption_resolution,[],[f19359,f238])).
fof(f19359,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl75)),
  inference(backward_demodulation,[],[f18748,f18149])).
fof(f18149,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl75),
  inference(unit_resulting_resolution,[],[f18125,f5331])).
fof(f20126,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120,f20125])).
fof(f20122,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19356,f238])).
fof(f19356,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f10299])).
fof(f20121,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116,f20120])).
fof(f20117,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112,f20116])).
fof(f20113,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108,f20112])).
fof(f20109,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104,f20108])).
fof(f20105,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100,f20104])).
fof(f20101,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098,f20100])).
fof(f20099,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092,f20098])).
fof(f20093,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090,f20092])).
fof(f20091,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086,f20090])).
fof(f20087,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082,f20086])).
fof(f20083,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074,f20082])).
fof(f20075,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072,f20074])).
fof(f20073,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068,f20072])).
fof(f20069,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044,f20068])).
fof(f20045,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042,f20044])).
fof(f20043,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040,f20042])).
fof(f20041,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038,f20040])).
fof(f20039,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036,f20038])).
fof(f20037,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034,f20036])).
fof(f20035,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016,f20034])).
fof(f20033,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f20032,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20032,plain,(
  ( ! [X2,X3,X1] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.combin.o_2'(s(fun(X1,bool),X2),s(fun('type.list.list'(sK2),X1),X3)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19297,f238])).
fof(f19297,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.combin.o_2'(s(fun(X1,bool),X2),s(fun('type.list.list'(sK2),X1),X3)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f6040])).
fof(f6040,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.combin.o_3'(s(fun(X1,bool),X2),s(fun('type.list.list'(sK2),X1),X3),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.combin.o_2'(s(fun(X1,bool),X2),s(fun('type.list.list'(sK2),X1),X3)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f364])).
fof(f4813,plain,(
  ( ! [X42] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),X42),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,X42,'type.list.list'(sK2)))) ) | $spl2),
  inference(forward_demodulation,[],[f4746,f394])).
fof(f4746,plain,(
  ( ! [X42] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),X42),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),sK3) = s('type.list.list'(sK2),sK19(sK3,X42,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f322,f394])).
fof(f20031,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f20030,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20030,plain,(
  ( ! [X168] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X168)),'type.list.list'(sK2))) | s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.NIL_0') = s('type.list.list'(fun('type.list.list'(sK2),bool)),X168)) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19294,f238])).
fof(f19294,plain,(
  ( ! [X168] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X168)),'type.list.list'(sK2))) | s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.NIL_0') = s('type.list.list'(fun('type.list.list'(sK2),bool)),X168)) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f18281])).
fof(f18281,plain,(
  ( ! [X168] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),sK5(X168,fun('type.list.list'(sK2),bool))),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X168)),'type.list.list'(sK2))) | s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.NIL_0') = s('type.list.list'(fun('type.list.list'(sK2),bool)),X168)) ) | $spl2),
  inference(superposition,[],[f4813,f1787])).
fof(f20029,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f20028,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20028,plain,(
  ( ! [X133] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X133)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19293,f238])).
fof(f19293,plain,(
  ( ! [X133] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X133)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f9248])).
fof(f9248,plain,(
  ( ! [X133] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X133))),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X133)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f1077])).
fof(f20027,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f20026,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20026,plain,(
  ( ! [X2] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.HD_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X2)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19292,f238])).
fof(f19292,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.HD_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X2)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f6035])).
fof(f6035,plain,(
  ( ! [X2] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X2))),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.HD_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X2)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f285])).
fof(f20025,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f20024,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20024,plain,(
  ( ! [X187,X188,X186] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X186))),s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X187),s('type.list.list'(fun('type.list.list'(sK2),bool)),X188)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19291,f238])).
fof(f19291,plain,(
  ( ! [X187,X188,X186] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X186))),s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X187),s('type.list.list'(fun('type.list.list'(sK2),bool)),X188)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f7205])).
fof(f7205,plain,(
  ( ! [X187,X188,X186] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.EL_2'(s('type.num.num',X186),s('type.list.list'(fun('type.list.list'(sK2),bool)),X188))),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X186))),s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X187),s('type.list.list'(fun('type.list.list'(sK2),bool)),X188)))),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f324])).
fof(f20023,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f20022,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20022,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19290,f238])).
fof(f19290,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f6036])).
fof(f6036,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4))),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f295])).
fof(f20021,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f20020,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20020,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X10,fun('type.list.list'(sK2),bool)),'const.combin.o_2'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19289,f238])).
fof(f19289,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X10,fun('type.list.list'(sK2),bool)),'const.combin.o_2'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f6038])).
fof(f6038,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.combin.o_3'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13),s(X10,X14))),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X10,fun('type.list.list'(sK2),bool)),'const.combin.o_2'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f364])).
fof(f20019,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f20018,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20018,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19288,f238])).
fof(f19288,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f6037])).
fof(f6037,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.combin.o_3'(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(fun(X7,X5),X8),s(X7,X9))),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f363])).
fof(f20017,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996,f20016])).
fof(f20013,plain,(
  $false | ($spl8 | $spl14 | $spl34)),
  inference(subsumption_resolution,[],[f20012,f238])).
fof(f20012,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl34)),
  inference(forward_demodulation,[],[f20011,f18748])).
fof(f20011,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl8 | $spl14 | $spl34)),
  inference(subsumption_resolution,[],[f19283,f238])).
fof(f19283,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl8 | $spl14 | $spl34)),
  inference(backward_demodulation,[],[f18748,f4882])).
fof(f20010,plain,(
  $false | ($spl8 | $spl14 | $spl36)),
  inference(subsumption_resolution,[],[f20009,f238])).
fof(f20009,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl36)),
  inference(forward_demodulation,[],[f20008,f18748])).
fof(f20008,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl8 | $spl14 | $spl36)),
  inference(subsumption_resolution,[],[f19282,f238])).
fof(f19282,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl8 | $spl14 | $spl36)),
  inference(backward_demodulation,[],[f18748,f4890])).
fof(f20005,plain,(
  $false | ($spl8 | $spl14 | $spl28)),
  inference(subsumption_resolution,[],[f20004,f238])).
fof(f20004,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl28)),
  inference(forward_demodulation,[],[f20003,f18748])).
fof(f20003,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl8 | $spl14 | $spl28)),
  inference(subsumption_resolution,[],[f19280,f238])).
fof(f19280,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl8 | $spl14 | $spl28)),
  inference(backward_demodulation,[],[f18748,f5333])).
fof(f5333,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | $spl28),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f807,f806,f745,f744,f896,f897,f1695,f1702,f1733,f1740,f1787,f1878,f1890,f1894,f1902,f1967,f2049,f2088,f2194,f2325,f2337,f2340,f736,f2420,f2425,f2453,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4509,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463])).
fof(f20002,plain,(
  $false | ($spl8 | $spl14 | $spl32)),
  inference(subsumption_resolution,[],[f20001,f238])).
fof(f20001,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14 | $spl32)),
  inference(forward_demodulation,[],[f20000,f18748])).
fof(f20000,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl8 | $spl14 | $spl32)),
  inference(subsumption_resolution,[],[f19279,f238])).
fof(f19279,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl8 | $spl14 | $spl32)),
  inference(backward_demodulation,[],[f18748,f5332])).
fof(f5332,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | $spl32),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f807,f806,f745,f744,f896,f897,f1695,f1702,f1733,f1740,f1787,f1878,f1890,f1894,f1902,f1967,f2049,f2088,f2194,f2325,f2337,f2340,f736,f2420,f2425,f2453,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4463,f4508,f4517,f4518,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460])).
fof(f19999,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(global_subsumption,[],[f19998,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996])).
fof(f19998,plain,(
  ( ! [X63] : (s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X63,'type.list.list'(bool)))) ) | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f19277,f238])).
fof(f19277,plain,(
  ( ! [X63] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X63,'type.list.list'(bool)))) ) | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(backward_demodulation,[],[f18748,f18145])).
fof(f18145,plain,(
  ( ! [X63] : (s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X63,'type.list.list'(bool))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X63),s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))))))) ) | ($spl1 | $spl2 | $spl18)),
  inference(forward_demodulation,[],[f17959,f17725])).
fof(f17959,plain,(
  ( ! [X63] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X63),s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool)))))) | s('type.list.list'(bool),sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X63,'type.list.list'(bool)))) ) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f322,f17725])).
fof(f19997,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990,f19996])).
fof(f19995,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f19994,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990])).
fof(f19994,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(fun('type.list.list'(sK2),bool)),X1)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19272,f238])).
fof(f19272,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(fun('type.list.list'(sK2),bool)),X1)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f6034])).
fof(f6034,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(fun('type.list.list'(sK2),bool)),X1)))),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f293])).
fof(f19993,plain,(
  $false | ($spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f19992,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990])).
fof(f19992,plain,(
  ( ! [X42] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,X42,'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(subsumption_resolution,[],[f19271,f238])).
fof(f19271,plain,(
  ( ! [X42] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,X42,'type.list.list'(sK2)))) ) | ($spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f4813])).
fof(f19991,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988,f19990])).
fof(f19989,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986,f19988])).
fof(f19987,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980,f19986])).
fof(f19981,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978,f19980])).
fof(f19979,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976,f19978])).
fof(f19977,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974,f19976])).
fof(f19975,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972,f19974])).
fof(f19973,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970,f19972])).
fof(f19971,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968,f19970])).
fof(f19969,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952,f19968])).
fof(f19953,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936,f19952])).
fof(f19937,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920,f19936])).
fof(f19921,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904,f19920])).
fof(f19905,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902,f19904])).
fof(f19903,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872,f19902])).
fof(f19873,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856,f19872])).
fof(f19857,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624,f19856])).
fof(f19625,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622,f19624])).
fof(f19623,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618,f19622])).
fof(f19619,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596,f19618])).
fof(f19597,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590,f19596])).
fof(f19591,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576,f19590])).
fof(f19577,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574,f19576])).
fof(f19575,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568,f19574])).
fof(f19569,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566,f19568])).
fof(f19567,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872,f19566])).
fof(f19563,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871,f18872])).
fof(f19562,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868,f18871])).
fof(f19561,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867,f18868])).
fof(f19560,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862,f18867])).
fof(f19555,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836,f18862])).
fof(f19553,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(global_subsumption,[],[f18851,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836])).
fof(f18851,plain,(
  ( ! [X12,X10,X11] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X10))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X11),s('type.list.list'(bool),X12))) | s(bool,X11) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) ) | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f5597])).
fof(f5597,plain,(
  ( ! [X12,X10,X11] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X10))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X11),s('type.list.list'(bool),X12))) | s(bool,X11) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f325,f4854])).
fof(f19552,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834,f18836])).
fof(f19551,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548,f18834])).
fof(f19549,plain,(
  $false | ($spl8 | $spl14)),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2374,f2392,f2389,f2386,f2383,f2381,f2420,f2425,f2511,f2512,f2540,f2545,f2580,f2585,f2602,f2605,f2776,f2778,f2779,f2780,f2782,f2914,f3152,f3153,f3136,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3357,f3358,f3344,f3405,f3407,f3419,f3492,f3534,f3977,f3993,f4420,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2861,f4549,f4552,f4460,f4463,f5993,f6101,f6100,f6112,f6258,f6268,f6269,f6202,f6207,f6342,f6486,f6540,f6724,f6736,f6737,f6654,f6661,f6998,f7392,f7451,f7832,f8000,f8035,f8050,f8077,f8687,f8688,f8689,f8690,f8691,f8692,f9138,f9137,f9273,f9511,f9315,f9691,f9692,f9605,f10371,f10410,f10424,f10558,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f11407,f11412,f11413,f11414,f11415,f11416,f11422,f11431,f11432,f10848,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f10863,f10573,f8675,f8261,f8154,f6856,f6830,f2599,f5851,f3359,f3356,f3350,f2376,f2335,f11434,f10430,f10425,f10377,f10372,f9239,f9234,f9231,f9230,f6811,f6809,f6113,f2600,f2453,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f10429,f10426,f10376,f10373,f7202,f6114,f2660,f2657,f2656,f2601,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f9502,f9503,f2880,f2882,f2910,f2911,f10299,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f9278,f9504,f2866,f2867,f2919,f2920,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f11430,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f8095,f8125,f10428,f10427,f10375,f10374,f6116,f6115,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3449,f3446,f3445,f3430,f3426,f3237,f3234,f3233,f3220,f3216,f1797,f1798,f2447,f4891,f4519,f6437,f6438,f4461,f4550,f905,f815,f996,f994,f814,f904,f8089,f8119,f9250,f9251,f8090,f8093,f8120,f8123,f8091,f8092,f8121,f8122,f11429,f10846,f10842,f9705,f9701,f8118,f8096,f8088,f6748,f6746,f6280,f6278,f3342,f3338,f3158,f3156,f2517,f2515,f10869,f10868,f10867,f10866,f10865,f10864,f10843,f10747,f10744,f10743,f10713,f10712,f10579,f10578,f10577,f10576,f10575,f10574,f10556,f10553,f10552,f3339,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f9470,f9472,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f9498,f9497,f9496,f9494,f9493,f9492,f9491,f9490,f9263,f9258,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f11427,f11426,f11425,f11424,f11423,f11421,f11420,f11419,f11418,f11417,f11411,f11410,f11409,f11408,f10857,f10567,f9687,f9686,f9685,f9684,f9256,f9254,f9226,f9225,f9224,f9223,f6732,f6731,f6730,f6729,f6479,f6454,f6264,f6263,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3355,f3354,f3353,f3352,f3229,f3228,f3227,f3226,f3217,f3149,f3148,f3147,f3146,f2652,f2651,f2650,f2649,f2582,f2542,f2508,f2507,f2506,f2505,f2422,f2339,f2328,f2195,f2194,f2193,f2089,f2088,f2087,f2050,f2049,f2048,f1968,f1967,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f8203,f8621,f8224,f8640,f8228,f8646,f9521,f9525,f8191,f8613,f8179,f8601,f8229,f8232,f8648,f8654,f8230,f8231,f8650,f8652,f8190,f8612,f8213,f8215,f8631,f8633,f8221,f8537,f8598,f8211,f8217,f8629,f8635,f8209,f8627,f9523,f9527,f8195,f8525,f8586,f11433,f8644,f8625,f8227,f8207,f3079,f3072,f346,f345,f344,f343,f8220,f8194,f8616,f10564,f10854,f8046,f7996,f7995,f7993,f7986,f7985,f7982,f7981,f7980,f7979,f7939,f7815,f4874,f4547,f4501,f4458,f3406,f3351,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f736,f538,f408,f250,f249,f240,f13368,f13416,f17617,f17653,f17654,f17655,f17656,f17657,f17658,f17659,f17660,f17662,f17651,f17676,f17713,f17715,f17716,f17717,f17718,f17719,f17720,f17721,f17722,f17790,f17710,f18155,f18390,f18162,f18391,f18392,f18393,f18394,f18395,f18396,f18169,f18170,f18172,f18186,f18188,f18197,f18198,f18201,f18203,f18209,f18210,f18212,f18213,f18214,f18215,f18229,f18246,f18248,f18249,f18250,f18251,f18252,f18253,f18254,f18255,f18256,f18258,f18259,f18260,f18261,f18266,f18267,f18269,f18272,f18273,f18286,f18287,f18288,f18289,f18290,f18291,f18292,f18293,f18294,f18295,f18296,f18297,f18298,f18310,f18312,f18314,f18315,f18316,f18317,f18318,f18319,f18320,f18321,f18333,f18354,f18355,f18356,f18357,f18364,f18365,f18372,f18374,f18376,f18377,f18378,f18379,f18380,f18381,f18382,f14424,f6525,f14515,f6579,f14910,f6898,f14923,f14921,f15020,f15018,f2326,f18771,f18769,f18756,f18754,f18752,f18750,f18748,f19548])).
fof(f19547,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f18816,f238])).
fof(f18816,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl14)),
  inference(backward_demodulation,[],[f18748,f240])).
fof(f18789,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl24)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f15917])).
fof(f18787,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl24)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f15916])).
fof(f18785,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f13805])).
fof(f18783,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f13804])).
fof(f18781,plain,(
  $false | ($spl8 | $spl14 | $spl54)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f11403])).
fof(f18779,plain,(
  $false | ($spl8 | $spl14 | $spl52)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f11400])).
fof(f18776,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f9869])).
fof(f18774,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14 | $spl18)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f9868])).
fof(f18772,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f9692])).
fof(f18770,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f9691])).
fof(f18768,plain,(
  $false | ($spl8 | $spl14 | $spl41)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f9011])).
fof(f9011,plain,(
  ( ! [X17,X18] : (~sP0(X17,sK5(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool),X18) | p(s(bool,X17))) ) | ($spl14 | $spl41)),
  inference(subsumption_resolution,[],[f8941,f238])).
fof(f8941,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | ~sP0(X17,sK5(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool),X18)) ) | ($spl14 | $spl41)),
  inference(superposition,[],[f354,f8686])).
fof(f8686,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) | ($spl14 | $spl41)),
  inference(subsumption_resolution,[],[f8685,f6455])).
fof(f6455,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | $spl41),
  inference(unit_resulting_resolution,[],[f6431,f290])).
fof(f8685,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK5(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) | $spl14),
  inference(forward_demodulation,[],[f8684,f6258])).
fof(f8684,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK5(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) | $spl14),
  inference(trivial_inequality_removal,[],[f8676])).
fof(f8676,plain,(
  s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK5(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) | $spl14),
  inference(superposition,[],[f7451,f6258])).
fof(f18766,plain,(
  $false | ($spl8 | $spl14 | $spl41)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f9010])).
fof(f9010,plain,(
  ( ! [X15,X16] : (~sP0(X15,X16,sK5(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) | p(s(bool,X15))) ) | ($spl14 | $spl41)),
  inference(subsumption_resolution,[],[f8940,f238])).
fof(f8940,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,X16,sK5(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool))) ) | ($spl14 | $spl41)),
  inference(superposition,[],[f353,f8686])).
fof(f18763,plain,(
  $false | ($spl8 | $spl14 | $spl41)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f8843])).
fof(f8843,plain,(
  ( ! [X17,X18] : (~sP0(X17,sK5(sK11('F_0','const.list.HD_0','type.list.list'(bool)),bool),X18) | p(s(bool,X17))) ) | ($spl14 | $spl41)),
  inference(subsumption_resolution,[],[f8773,f238])).
fof(f8773,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | ~sP0(X17,sK5(sK11('F_0','const.list.HD_0','type.list.list'(bool)),bool),X18)) ) | ($spl14 | $spl41)),
  inference(superposition,[],[f354,f8693])).
fof(f8693,plain,(
  s(bool,'T_0') = s(bool,sK5(sK11('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | ($spl14 | $spl41)),
  inference(subsumption_resolution,[],[f8683,f6455])).
fof(f8683,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK5(sK11('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | $spl14),
  inference(equality_resolution,[],[f7451])).
fof(f18761,plain,(
  $false | ($spl8 | $spl14 | $spl41)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f8842])).
fof(f8842,plain,(
  ( ! [X15,X16] : (~sP0(X15,X16,sK5(sK11('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | p(s(bool,X15))) ) | ($spl14 | $spl41)),
  inference(subsumption_resolution,[],[f8772,f238])).
fof(f8772,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,X16,sK5(sK11('F_0','const.list.HD_0','type.list.list'(bool)),bool))) ) | ($spl14 | $spl41)),
  inference(superposition,[],[f353,f8693])).
fof(f18757,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f6737])).
fof(f18755,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f6736])).
fof(f18753,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f6269])).
fof(f18751,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f6268])).
fof(f18749,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f400,f2392,f2326,f3358])).
fof(f18744,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f400,f2392,f2326,f3357])).
fof(f18739,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f3153])).
fof(f18737,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f3152])).
fof(f18735,plain,(
  $false | ($spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f2326,f2326,f2581])).
fof(f18733,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f2512])).
fof(f18731,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2392,f2326,f2511])).
fof(f18729,plain,(
  $false | ($spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f2326,f2326,f2426])).
fof(f18726,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f2326,f2335])).
fof(f18718,plain,(
  $false | $spl8),
  inference(unit_resulting_resolution,[],[f238,f293,f2326,f384])).
fof(f18716,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f238,f15704,f2326,f384])).
fof(f18714,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f238,f9737,f2326,f384])).
fof(f18712,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f238,f9706,f2326,f384])).
fof(f18710,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f238,f2605,f2326,f384])).
fof(f18708,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f238,f2381,f2326,f384])).
fof(f18704,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f4850,f2326,f355])).
fof(f18701,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f4848,f2326,f355])).
fof(f18697,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f2326,f15971,f2326,f355])).
fof(f18695,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f2326,f16672,f2326,f355])).
fof(f18693,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f2326,f9895,f2326,f355])).
fof(f18691,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f4420,f2326,f355])).
fof(f18689,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f5521,f2326,f355])).
fof(f18687,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f2386,f2326,f355])).
fof(f18679,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f240,f15925,f2326,f355])).
fof(f18677,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f16621,f2326,f355])).
fof(f18675,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f9881,f2326,f355])).
fof(f18673,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f3534,f2326,f355])).
fof(f18671,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f5518,f2326,f355])).
fof(f18669,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f2383,f2326,f355])).
fof(f18664,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f4848,f2326,f355])).
fof(f18661,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f4850,f2326,f355])).
fof(f18657,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f2326,f15925,f2326,f355])).
fof(f18655,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f2326,f16621,f2326,f355])).
fof(f18653,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f2326,f9881,f2326,f355])).
fof(f18651,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f3534,f2326,f355])).
fof(f18649,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f5518,f2326,f355])).
fof(f18647,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2326,f2383,f2326,f355])).
fof(f18639,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f240,f15971,f2326,f355])).
fof(f18637,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f16672,f2326,f355])).
fof(f18635,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f9895,f2326,f355])).
fof(f18633,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f4420,f2326,f355])).
fof(f18631,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f5521,f2326,f355])).
fof(f18629,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f2386,f2326,f355])).
fof(f18619,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f238,f2392,f2326,f354])).
fof(f18610,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f238,f2392,f2326,f353])).
fof(f18602,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f2381,f2326,f245])).
fof(f18599,plain,(
  $false | ($spl8 | $spl24)),
  inference(unit_resulting_resolution,[],[f240,f2326,f2581])).
fof(f18597,plain,(
  $false | ($spl1 | $spl2 | $spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f400,f2326,f16113])).
fof(f18595,plain,(
  $false | ($spl8 | $spl18)),
  inference(unit_resulting_resolution,[],[f240,f2326,f2426])).
fof(f18593,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f240,f2326,f2335])).
fof(f18591,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f400,f2326,f3350])).
fof(f18589,plain,(
  $false | ($spl8 | $spl14)),
  inference(unit_resulting_resolution,[],[f6258,f2326,f6809])).
fof(f2326,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) | $spl8),
  inference(cnf_transformation,[],[f2326_D])).
fof(f2326_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f2586,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5))) ) | $spl26),
  inference(cnf_transformation,[],[f2586_D])).
fof(f2586_D,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f15020,plain,(
  ( ! [X33,X34] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X34,'const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X33)))) | p(s(bool,X34))) )),
  inference(forward_demodulation,[],[f14997,f285])).
fof(f14997,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X33)))) | p(s(bool,X34)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK18(X34,'const.list.HD_0','type.list.list'(bool))))))) )),
  inference(superposition,[],[f319,f285])).
fof(f2546,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5))) ) | $spl22),
  inference(cnf_transformation,[],[f2546_D])).
fof(f2546_D,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f14923,plain,(
  ( ! [X33,X34] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X34,'const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X33)))) | p(s(bool,X34))) )),
  inference(forward_demodulation,[],[f14900,f285])).
fof(f14900,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X33)))) | p(s(bool,X34)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK17(X34,'const.list.HD_0','type.list.list'(bool))))))) )),
  inference(superposition,[],[f317,f285])).
fof(f2541,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,X1))) ) | $spl20),
  inference(cnf_transformation,[],[f2541_D])).
fof(f2541_D,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,X1))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f6898,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f6897,f1077])).
fof(f6897,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f6896,f295])).
fof(f6896,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f6863,f285])).
fof(f6863,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f317,f242])).
fof(f14910,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f14909,f1077])).
fof(f14909,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f14908,f295])).
fof(f14908,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f14840,f285])).
fof(f14840,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f317,f242])).
fof(f2421,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,X1))) ) | $spl16),
  inference(cnf_transformation,[],[f2421_D])).
fof(f2421_D,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,X1))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f6579,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f6578,f1077])).
fof(f6578,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f6577,f295])).
fof(f6577,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f6546,f285])).
fof(f6546,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f308,f242])).
fof(f14515,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f14514,f1077])).
fof(f14514,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f14513,f295])).
fof(f14513,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f14446,f285])).
fof(f14446,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f308,f242])).
fof(f2327,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,X1))) ) | $spl10),
  inference(cnf_transformation,[],[f2327_D])).
fof(f2327_D,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,X1))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f6525,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f6524,f1077])).
fof(f6524,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f6523,f295])).
fof(f6523,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f6492,f285])).
fof(f6492,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f306,f242])).
fof(f14424,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f14423,f1077])).
fof(f14423,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f14422,f295])).
fof(f14422,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f14355,f285])).
fof(f14355,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f306,f242])).
fof(f18421,plain,(
  s(bool,'T_0') = s(bool,sK5(sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | $spl98),
  inference(cnf_transformation,[],[f18421_D])).
fof(f18421_D,plain,(
  s(bool,'T_0') = s(bool,sK5(sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f18244,plain,(
  s(bool,'T_0') = s(bool,sK5(sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | ($spl1 | $spl2 | $spl24)),
  inference(superposition,[],[f15704,f1787])).
fof(f18415,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.HD_0','type.list.list'(bool))) | $spl92),
  inference(cnf_transformation,[],[f18415_D])).
fof(f18415_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.HD_0','type.list.list'(bool))) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f18417,plain,(
  s(bool,'T_0') = s(bool,sK5(sK18('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | $spl94),
  inference(cnf_transformation,[],[f18417_D])).
fof(f18417_D,plain,(
  s(bool,'T_0') = s(bool,sK5(sK18('F_0','const.list.HD_0','type.list.list'(bool)),bool)) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f18238,plain,(
  s(bool,'T_0') = s(bool,sK5(sK18('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl26)),
  inference(superposition,[],[f10113,f1787])).
fof(f10113,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18('F_0','const.list.HD_0','type.list.list'(bool))))) | ($spl1 | $spl2 | $spl26)),
  inference(unit_resulting_resolution,[],[f240,f9042])).
fof(f9042,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl26)),
  inference(subsumption_resolution,[],[f9041,f240])).
fof(f9041,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl26)),
  inference(forward_demodulation,[],[f9039,f4854])).
fof(f9039,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl26)),
  inference(superposition,[],[f2586,f5629])).
fof(f18411,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | $spl88),
  inference(cnf_transformation,[],[f18411_D])).
fof(f18411_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f18413,plain,(
  s(bool,'T_0') = s(bool,sK5(sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | $spl90),
  inference(cnf_transformation,[],[f18413_D])).
fof(f18413_D,plain,(
  s(bool,'T_0') = s(bool,sK5(sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f18236,plain,(
  s(bool,'T_0') = s(bool,sK5(sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | ($spl1 | $spl2 | $spl20)),
  inference(superposition,[],[f15369,f1787])).
fof(f15369,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | ($spl1 | $spl2 | $spl20)),
  inference(unit_resulting_resolution,[],[f240,f9946])).
fof(f9946,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl20)),
  inference(subsumption_resolution,[],[f9945,f240])).
fof(f9945,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl20)),
  inference(forward_demodulation,[],[f9943,f4854])).
fof(f9943,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl20)),
  inference(superposition,[],[f2541,f5629])).
fof(f18407,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK17('F_0','const.list.HD_0','type.list.list'(bool))) | $spl84),
  inference(cnf_transformation,[],[f18407_D])).
fof(f18407_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK17('F_0','const.list.HD_0','type.list.list'(bool))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f18409,plain,(
  s(bool,'T_0') = s(bool,sK5(sK17('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | $spl86),
  inference(cnf_transformation,[],[f18409_D])).
fof(f18409_D,plain,(
  s(bool,'T_0') = s(bool,sK5(sK17('F_0','const.list.HD_0','type.list.list'(bool)),bool)) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f18230,plain,(
  s(bool,'T_0') = s(bool,sK5(sK17('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK17('F_0','const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl22)),
  inference(superposition,[],[f9909,f1787])).
fof(f9909,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17('F_0','const.list.HD_0','type.list.list'(bool))))) | ($spl1 | $spl2 | $spl22)),
  inference(unit_resulting_resolution,[],[f240,f9028])).
fof(f9028,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl22)),
  inference(subsumption_resolution,[],[f9027,f240])).
fof(f9027,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl22)),
  inference(forward_demodulation,[],[f9025,f4854])).
fof(f9025,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X0,'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl22)),
  inference(superposition,[],[f2546,f5629])).
fof(f18403,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | $spl80),
  inference(cnf_transformation,[],[f18403_D])).
fof(f18403_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f18405,plain,(
  s(bool,'T_0') = s(bool,sK5(sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | $spl82),
  inference(cnf_transformation,[],[f18405_D])).
fof(f18405_D,plain,(
  s(bool,'T_0') = s(bool,sK5(sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f18227,plain,(
  s(bool,'T_0') = s(bool,sK5(sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | ($spl1 | $spl2 | $spl16)),
  inference(superposition,[],[f15026,f1787])).
fof(f15026,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | ($spl1 | $spl2 | $spl16)),
  inference(unit_resulting_resolution,[],[f240,f9905])).
fof(f9905,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f9904,f240])).
fof(f9904,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl16)),
  inference(forward_demodulation,[],[f9902,f4854])).
fof(f9902,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl16)),
  inference(superposition,[],[f2421,f5629])).
fof(f18398,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | $spl76),
  inference(cnf_transformation,[],[f18398_D])).
fof(f18398_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f18400,plain,(
  s(bool,'T_0') = s(bool,sK5(sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | $spl78),
  inference(cnf_transformation,[],[f18400_D])).
fof(f18400_D,plain,(
  s(bool,'T_0') = s(bool,sK5(sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f18219,plain,(
  s(bool,'T_0') = s(bool,sK5(sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | ($spl1 | $spl2 | $spl10)),
  inference(superposition,[],[f14534,f1787])).
fof(f14534,plain,(
  s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | ($spl1 | $spl2 | $spl10)),
  inference(unit_resulting_resolution,[],[f240,f9891])).
fof(f9891,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl10)),
  inference(subsumption_resolution,[],[f9890,f240])).
fof(f9890,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl10)),
  inference(forward_demodulation,[],[f9888,f4854])).
fof(f9888,plain,(
  ( ! [X0] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) ) | ($spl1 | $spl2 | $spl10)),
  inference(superposition,[],[f2327,f5629])).
fof(f18185,plain,(
  s(bool,'T_0') = s(bool,sK5(sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | ($spl1 | $spl2 | $spl24)),
  inference(superposition,[],[f1787,f15704])).
fof(f18182,plain,(
  s(bool,'T_0') = s(bool,sK5(sK18('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK18('F_0','const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl26)),
  inference(superposition,[],[f1787,f10113])).
fof(f18181,plain,(
  s(bool,'T_0') = s(bool,sK5(sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK17('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | ($spl1 | $spl2 | $spl20)),
  inference(superposition,[],[f1787,f15369])).
fof(f18178,plain,(
  s(bool,'T_0') = s(bool,sK5(sK17('F_0','const.list.HD_0','type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK17('F_0','const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl22)),
  inference(superposition,[],[f1787,f9909])).
fof(f18177,plain,(
  s(bool,'T_0') = s(bool,sK5(sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK12('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | ($spl1 | $spl2 | $spl16)),
  inference(superposition,[],[f1787,f15026])).
fof(f18173,plain,(
  s(bool,'T_0') = s(bool,sK5(sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)),bool)) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK11('F_0','const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))) | ($spl1 | $spl2 | $spl10)),
  inference(superposition,[],[f1787,f14534])).
fof(f18123,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl72),
  inference(cnf_transformation,[],[f18123_D])).
fof(f18123_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f18125,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))))) | $spl75),
  inference(cnf_transformation,[],[f18125_D])).
fof(f18125_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f17929,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | ($spl1 | $spl2 | $spl18)),
  inference(superposition,[],[f289,f17725])).
fof(f18114,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) | $spl66),
  inference(cnf_transformation,[],[f18114_D])).
fof(f18114_D,plain,(
  s(bool,'T_0') = s(bool,sK5(sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f18116,plain,(
  s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) | $spl69),
  inference(cnf_transformation,[],[f18116_D])).
fof(f18116_D,plain,(
  s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f18118,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) | $spl70),
  inference(cnf_transformation,[],[f18118_D])).
fof(f18118_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f18112,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK5(sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) | ($spl1 | $spl2 | $spl14 | $spl18)),
  inference(forward_demodulation,[],[f17924,f17725])).
fof(f17924,plain,(
  s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) != s('type.list.list'(bool),sK12('F_0','const.list.HD_0','type.list.list'(bool))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK5(sK19(sK12('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),bool)) | ($spl1 | $spl2 | $spl14 | $spl18)),
  inference(superposition,[],[f7451,f17725])).
fof(f17661,plain,(
  ( ! [X12] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),sK16(X12,'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X12)))) ) | $spl64),
  inference(cnf_transformation,[],[f17661_D])).
fof(f17661_D,plain,(
  ( ! [X12] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),sK16(X12,'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X12)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f17662,plain,(
  ( ! [X14,X15] : (p(s(bool,X15)) | s('type.list.list'(bool),X14) = s('type.list.list'(bool),sK16(X14,'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X14)))) )),
  inference(subsumption_resolution,[],[f17648,f245])).
fof(f17648,plain,(
  ( ! [X14,X15] : (p(s(bool,X15)) | s('type.list.list'(bool),X14) = s('type.list.list'(bool),sK16(X14,'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X14)))) )),
  inference(superposition,[],[f806,f424])).
fof(f17660,plain,(
  ( ! [X12,X13] : (p(s(bool,X13)) | s('type.list.list'(bool),X12) = s('type.list.list'(bool),sK16(X12,'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X12)))) )),
  inference(subsumption_resolution,[],[f17647,f245])).
fof(f17647,plain,(
  ( ! [X12,X13] : (p(s(bool,X13)) | s('type.list.list'(bool),X12) = s('type.list.list'(bool),sK16(X12,'const.list.HD_0','type.list.list'(bool))) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X12))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f806,f424])).
fof(f15742,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl62),
  inference(cnf_transformation,[],[f15742_D])).
fof(f15742_D,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f15743,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2 | $spl24)),
  inference(subsumption_resolution,[],[f15708,f245])).
fof(f15708,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2 | $spl24)),
  inference(superposition,[],[f10097,f424])).
fof(f15741,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl1 | $spl2 | $spl24)),
  inference(subsumption_resolution,[],[f15707,f245])).
fof(f15707,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | ($spl1 | $spl2 | $spl24)),
  inference(superposition,[],[f10097,f424])).
fof(f15406,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl60),
  inference(cnf_transformation,[],[f15406_D])).
fof(f15406_D,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f15407,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2 | $spl20)),
  inference(subsumption_resolution,[],[f15373,f245])).
fof(f15373,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2 | $spl20)),
  inference(superposition,[],[f9946,f424])).
fof(f15405,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl1 | $spl2 | $spl20)),
  inference(subsumption_resolution,[],[f15372,f245])).
fof(f15372,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | ($spl1 | $spl2 | $spl20)),
  inference(superposition,[],[f9946,f424])).
fof(f15062,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl58),
  inference(cnf_transformation,[],[f15062_D])).
fof(f15062_D,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f15063,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f15030,f245])).
fof(f15030,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2 | $spl16)),
  inference(superposition,[],[f9905,f424])).
fof(f15061,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl1 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f15029,f245])).
fof(f15029,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | ($spl1 | $spl2 | $spl16)),
  inference(superposition,[],[f9905,f424])).
fof(f14569,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl56),
  inference(cnf_transformation,[],[f14569_D])).
fof(f14569_D,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f14570,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2 | $spl10)),
  inference(subsumption_resolution,[],[f14538,f245])).
fof(f14538,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X6,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2 | $spl10)),
  inference(superposition,[],[f9891,f424])).
fof(f14568,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl1 | $spl2 | $spl10)),
  inference(subsumption_resolution,[],[f14537,f245])).
fof(f14537,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X4,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | ($spl1 | $spl2 | $spl10)),
  inference(superposition,[],[f9891,f424])).
fof(f12755,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718,f12734,f12736,f12738,f12740,f12742,f12744,f12752,f12754])).
fof(f12754,plain,(
  ( ! [X99,X100,X98] : (p(s(bool,X99)) | ~sP0(X99,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X98)),X100)) ) | $spl44),
  inference(subsumption_resolution,[],[f12046,f238])).
fof(f12046,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | ~sP0(X99,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X98)),X100)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f9231])).
fof(f12752,plain,(
  ( ! [X97,X95,X96] : (p(s(bool,X96)) | ~sP0(X96,X97,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X95)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12045,f238])).
fof(f12045,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,'T_0')) | p(s(bool,X96)) | ~sP0(X96,X97,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X95)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f9230])).
fof(f12744,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12035,f238])).
fof(f12035,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f897])).
fof(f12742,plain,(
  ( ! [X9] : (s('type.list.list'(bool),X9) = s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12034,f238])).
fof(f12034,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X9) = s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f896])).
fof(f12740,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X18)) | ~sP0(X18,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X17)),X19)) ) | $spl44),
  inference(subsumption_resolution,[],[f12031,f238])).
fof(f12031,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X18)) | ~sP0(X18,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X17)),X19)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f745])).
fof(f12738,plain,(
  ( ! [X14,X15,X16] : (p(s(bool,X15)) | ~sP0(X15,X16,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X14)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12030,f238])).
fof(f12030,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,X16,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X14)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f744])).
fof(f12736,plain,(
  ( ! [X123,X121,X124,X122,X120] : (p(s(bool,X123)) | ~sP0(X123,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X120))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X121),s('type.list.list'(bool),X122)))),X124)) ) | $spl44),
  inference(subsumption_resolution,[],[f12018,f238])).
fof(f12018,plain,(
  ( ! [X123,X121,X124,X122,X120] : (~p(s(bool,'T_0')) | p(s(bool,X123)) | ~sP0(X123,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X120))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X121),s('type.list.list'(bool),X122)))),X124)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2657])).
fof(f12734,plain,(
  ( ! [X118,X116,X119,X117,X115] : (p(s(bool,X118)) | ~sP0(X118,X119,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X116),s('type.list.list'(bool),X117)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f12017,f238])).
fof(f12017,plain,(
  ( ! [X118,X116,X119,X117,X115] : (~p(s(bool,'T_0')) | p(s(bool,X118)) | ~sP0(X118,X119,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X116),s('type.list.list'(bool),X117)))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2656])).
fof(f12718,plain,(
  ( ! [X52,X50,X51,X49] : (p(s(bool,X51)) | ~sP0(X51,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X49))),s('type.list.list'(bool),X50)),X52)) ) | $spl44),
  inference(subsumption_resolution,[],[f12008,f238])).
fof(f12008,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,'T_0')) | p(s(bool,X51)) | ~sP0(X51,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X49))),s('type.list.list'(bool),X50)),X52)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f1052])).
fof(f12716,plain,(
  ( ! [X47,X45,X48,X46] : (p(s(bool,X47)) | ~sP0(X47,X48,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X45))),s('type.list.list'(bool),X46)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12007,f238])).
fof(f12007,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | p(s(bool,X47)) | ~sP0(X47,X48,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num',X45))),s('type.list.list'(bool),X46)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f1051])).
fof(f12714,plain,(
  ( ! [X21,X20] : (s('type.list.list'(bool),X21) = s('type.list.list'(bool),sK19(X21,'const.list.EL_1'(s('type.num.num',X20)),'type.list.list'(bool)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12005,f238])).
fof(f12005,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X21) = s('type.list.list'(bool),sK19(X21,'const.list.EL_1'(s('type.num.num',X20)),'type.list.list'(bool)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f1040])).
fof(f12712,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12004,f238])).
fof(f12004,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X11,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X10)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2878])).
fof(f12708,plain,(
  ( ! [X231,X230] : (s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X231,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12002,f238])).
fof(f12002,plain,(
  ( ! [X231,X230] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X231,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X230)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.HD_1'(s('type.list.list'('type.num.num'),X230)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f9502])).
fof(f12704,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13)))) ) | $spl44),
  inference(subsumption_resolution,[],[f12000,f238])).
fof(f12000,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X14,happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.num.num'),X13)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2880])).
fof(f12702,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17)))) ) | $spl44),
  inference(subsumption_resolution,[],[f11999,f238])).
fof(f11999,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X18,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.num.num'),X17)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2882])).
fof(f12694,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11992,f238])).
fof(f11992,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X5,'const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4))))))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2872])).
fof(f12690,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X393,happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392)))) ) | $spl44),
  inference(subsumption_resolution,[],[f11990,f238])).
fof(f11990,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (~p(s(bool,'T_0')) | s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X393,happ(s(fun(X388,'type.num.num'),X389),s(X388,happ(s(fun(X390,X388),X391),s(X390,X392)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X388,'type.num.num'),X389),s(fun(X390,X388),X391),s(X390,X392)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3304])).
fof(f12686,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X440,happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439)))) ) | $spl44),
  inference(subsumption_resolution,[],[f11988,f238])).
fof(f11988,plain,(
  ( ! [X436,X438,X440,X437,X439,X435] : (~p(s(bool,'T_0')) | s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X440,happ(s(fun(X435,'type.num.num'),'const.combin.o_2'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438))),s(X435,X439)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.combin.o_3'(s(fun(X436,'type.num.num'),X437),s(fun(X435,X436),X438),s(X435,X439)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3525])).
fof(f12682,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X11) | s('type.num.num',X11) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)),X11))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11986,f238])).
fof(f11986,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11) | s('type.num.num',X11) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.HD_0'),s('type.list.list'('type.num.num'),X10)),X11))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2865])).
fof(f12678,plain,(
  ( ! [X233,X232] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X233) | s('type.num.num',X233) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X232)),X233))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11984,f238])).
fof(f11984,plain,(
  ( ! [X233,X232] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X233) | s('type.num.num',X233) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.num.num'),X232)),X233))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f9278])).
fof(f12674,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | s('type.num.num',X14) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)),X14))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11982,f238])).
fof(f11982,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | s('type.num.num',X14) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun('type.list.list'('type.num.num'),'type.num.num'),'const.list.EL_1'(s('type.num.num',X12))),s('type.list.list'('type.num.num'),X13)),X14))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2866])).
fof(f12672,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | s('type.num.num',X18) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))),X18))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11981,f238])).
fof(f11981,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | s('type.num.num',X18) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X16),s('type.list.list'('type.num.num'),X17)))),X18))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2867])).
fof(f12666,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl44),
  inference(subsumption_resolution,[],[f11978,f238])).
fof(f11978,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f5331])).
fof(f12664,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | s('type.num.num',X5) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))),X5))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11977,f238])).
fof(f11977,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | s('type.num.num',X5) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X3),s('type.list.list'(X2),X4)))),X5))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2862])).
fof(f12660,plain,(
  ( ! [X397,X399,X395,X396,X398,X394] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X399) | s('type.num.num',X399) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X394,'type.num.num'),X395),s(X394,happ(s(fun(X396,X394),X397),s(X396,X398)))),X399))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11975,f238])).
fof(f11975,plain,(
  ( ! [X397,X399,X395,X396,X398,X394] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X399) | s('type.num.num',X399) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X394,'type.num.num'),X395),s(X394,happ(s(fun(X396,X394),X397),s(X396,X398)))),X399))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3256])).
fof(f12656,plain,(
  ( ! [X445,X441,X443,X444,X446,X442] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X446) | s('type.num.num',X446) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X441,'type.num.num'),'const.combin.o_2'(s(fun(X442,'type.num.num'),X443),s(fun(X441,X442),X444))),s(X441,X445)),X446))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11973,f238])).
fof(f11973,plain,(
  ( ! [X445,X441,X443,X444,X446,X442] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X446) | s('type.num.num',X446) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(happ(s(fun(X441,'type.num.num'),'const.combin.o_2'(s(fun(X442,'type.num.num'),X443),s(fun(X441,X442),X444))),s(X441,X445)),X446))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3470])).
fof(f12648,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) ) | $spl44),
  inference(subsumption_resolution,[],[f11966,f238])).
fof(f11966,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X9,'const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2876])).
fof(f12646,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | s('type.num.num',X9) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))),X9))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11965,f238])).
fof(f11965,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | s('type.num.num',X9) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20('const.list.HD_1'(s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X7),s('type.list.list'('type.num.num'),X8)))),X9))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2864])).
fof(f12642,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X1,X0))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11962,f238])).
fof(f11962,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK20(X1,X0))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f334])).
fof(f12618,plain,(
  ( ! [X271,X273,X275,X270,X276,X272,X274] : (p(s(bool,X275)) | ~sP0(X275,happ(s(fun(X270,bool),'const.combin.o_2'(s(fun(X271,bool),X272),s(fun(X270,X271),X273))),s(X270,X274)),X276)) ) | $spl44),
  inference(subsumption_resolution,[],[f11937,f238])).
fof(f11937,plain,(
  ( ! [X271,X273,X275,X270,X276,X272,X274] : (~p(s(bool,'T_0')) | p(s(bool,X275)) | ~sP0(X275,happ(s(fun(X270,bool),'const.combin.o_2'(s(fun(X271,bool),X272),s(fun(X270,X271),X273))),s(X270,X274)),X276)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3446])).
fof(f12616,plain,(
  ( ! [X263,X269,X265,X267,X268,X264,X266] : (p(s(bool,X268)) | ~sP0(X268,X269,happ(s(fun(X263,bool),'const.combin.o_2'(s(fun(X264,bool),X265),s(fun(X263,X264),X266))),s(X263,X267)))) ) | $spl44),
  inference(subsumption_resolution,[],[f11936,f238])).
fof(f11936,plain,(
  ( ! [X263,X269,X265,X267,X268,X264,X266] : (~p(s(bool,'T_0')) | p(s(bool,X268)) | ~sP0(X268,X269,happ(s(fun(X263,bool),'const.combin.o_2'(s(fun(X264,bool),X265),s(fun(X263,X264),X266))),s(X263,X267)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3445])).
fof(f12614,plain,(
  ( ! [X177,X175,X173,X176,X174] : (s(X173,X177) = s(X173,sK19(X177,'const.combin.o_2'(s(fun(X174,bool),X175),s(fun(X173,X174),X176)),X173))) ) | $spl44),
  inference(subsumption_resolution,[],[f11935,f238])).
fof(f11935,plain,(
  ( ! [X177,X175,X173,X176,X174] : (~p(s(bool,'T_0')) | s(X173,X177) = s(X173,sK19(X177,'const.combin.o_2'(s(fun(X174,bool),X175),s(fun(X173,X174),X176)),X173))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3430])).
fof(f12612,plain,(
  ( ! [X243,X249,X246,X244,X248,X247,X245] : (p(s(bool,X248)) | ~sP0(X248,happ(s(fun(X243,bool),X244),s(X243,happ(s(fun(X245,X243),X246),s(X245,X247)))),X249)) ) | $spl44),
  inference(subsumption_resolution,[],[f11932,f238])).
fof(f11932,plain,(
  ( ! [X243,X249,X246,X244,X248,X247,X245] : (~p(s(bool,'T_0')) | p(s(bool,X248)) | ~sP0(X248,happ(s(fun(X243,bool),X244),s(X243,happ(s(fun(X245,X243),X246),s(X245,X247)))),X249)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3234])).
fof(f12610,plain,(
  ( ! [X241,X239,X237,X242,X240,X238,X236] : (p(s(bool,X241)) | ~sP0(X241,X242,happ(s(fun(X236,bool),X237),s(X236,happ(s(fun(X238,X236),X239),s(X238,X240)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f11931,f238])).
fof(f11931,plain,(
  ( ! [X241,X239,X237,X242,X240,X238,X236] : (~p(s(bool,'T_0')) | p(s(bool,X241)) | ~sP0(X241,X242,happ(s(fun(X236,bool),X237),s(X236,happ(s(fun(X238,X236),X239),s(X238,X240)))))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3233])).
fof(f12608,plain,(
  ( ! [X158,X156,X159,X157,X160] : (s(X156,happ(s(fun(X158,X156),X159),s(X158,X160))) = s(X156,sK19(happ(s(fun(X158,X156),X159),s(X158,X160)),X157,X156))) ) | $spl44),
  inference(subsumption_resolution,[],[f11930,f238])).
fof(f11930,plain,(
  ( ! [X158,X156,X159,X157,X160] : (~p(s(bool,'T_0')) | s(X156,happ(s(fun(X158,X156),X159),s(X158,X160))) = s(X156,sK19(happ(s(fun(X158,X156),X159),s(X158,X160)),X157,X156))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3220])).
fof(f12594,plain,(
  ( ! [X28,X26,X27] : (s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26)))) = s('type.list.list'(X26),sK19('const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26))),X28,'type.list.list'(X26))) | s('type.list.list'(X26),'const.list.NIL_0') = s('type.list.list'(X26),X27)) ) | $spl44),
  inference(subsumption_resolution,[],[f11916,f238])).
fof(f11916,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26)))) = s('type.list.list'(X26),sK19('const.list.CONS_2'(s(X26,sK5(X27,X26)),s('type.list.list'(X26),sK6(X27,X26))),X28,'type.list.list'(X26))) | s('type.list.list'(X26),'const.list.NIL_0') = s('type.list.list'(X26),X27)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f1797])).
fof(f12558,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X24),'const.list.NIL_0')),X25,'type.num.num'))) ) | $spl44),
  inference(subsumption_resolution,[],[f11877,f238])).
fof(f11877,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X24),'const.list.NIL_0')),X25,'type.num.num'))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f905])).
fof(f12556,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X50))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X49),s('type.list.list'(X48),X50)))),X51,'type.num.num'))) ) | $spl44),
  inference(subsumption_resolution,[],[f11874,f238])).
fof(f11874,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X50))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X49),s('type.list.list'(X48),X50)))),X51,'type.num.num'))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f994])).
fof(f12554,plain,(
  ( ! [X23,X22] : (s(fun('type.list.list'(X22),X22),'const.list.HD_0') = s(fun('type.list.list'(X22),X22),sK19('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X23,fun('type.list.list'(X22),X22)))) ) | $spl44),
  inference(subsumption_resolution,[],[f11872,f238])).
fof(f11872,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | s(fun('type.list.list'(X22),X22),'const.list.HD_0') = s(fun('type.list.list'(X22),X22),sK19('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X23,fun('type.list.list'(X22),X22)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f904])).
fof(f12546,plain,(
  ( ! [X6,X4,X5] : (s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5)),X6,X4))) ) | $spl44),
  inference(subsumption_resolution,[],[f11800,f238])).
fof(f11800,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(X4,'const.list.HD_1'(s('type.list.list'(X4),X5))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.HD_0'),s('type.list.list'(X4),X5)),X6,X4))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f899])).
fof(f12544,plain,(
  ( ! [X30,X31,X29] : (s(X29,'const.list.HD_1'(s('type.list.list'(X29),X30))) = s(X29,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X29),X30)),X31,X29))) ) | $spl44),
  inference(subsumption_resolution,[],[f11798,f238])).
fof(f11798,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s(X29,'const.list.HD_1'(s('type.list.list'(X29),X30))) = s(X29,sK19('const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X29),X30)),X31,X29))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f9472])).
fof(f12542,plain,(
  ( ! [X6,X4,X7,X5] : (s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),X6))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s('type.list.list'(X4),X6)),X7,X4))) ) | $spl44),
  inference(subsumption_resolution,[],[f11796,f238])).
fof(f11796,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | s(X4,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X4),X6))) = s(X4,sK19(happ(s(fun('type.list.list'(X4),X4),'const.list.EL_1'(s('type.num.num',X5))),s('type.list.list'(X4),X6)),X7,X4))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f1079])).
fof(f12540,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(X45,'const.list.EL_2'(s('type.num.num',X46),s('type.list.list'(X45),X48))) = s(X45,sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,X47),s('type.list.list'(X45),X48)))),X49,X45))) ) | $spl44),
  inference(subsumption_resolution,[],[f11794,f238])).
fof(f11794,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,'T_0')) | s(X45,'const.list.EL_2'(s('type.num.num',X46),s('type.list.list'(X45),X48))) = s(X45,sK19('const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.list.list'(X45),'const.list.CONS_2'(s(X45,X47),s('type.list.list'(X45),X48)))),X49,X45))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2693])).
fof(f12538,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s(X70,'const.combin.o_3'(s(fun(X71,X70),X72),s(fun(X73,X71),X74),s(X73,X75))) = s(X70,sK19(happ(s(fun(X71,X70),X72),s(X71,happ(s(fun(X73,X71),X74),s(X73,X75)))),X76,X70))) ) | $spl44),
  inference(subsumption_resolution,[],[f11792,f238])).
fof(f11792,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (~p(s(bool,'T_0')) | s(X70,'const.combin.o_3'(s(fun(X71,X70),X72),s(fun(X73,X71),X74),s(X73,X75))) = s(X70,sK19(happ(s(fun(X71,X70),X72),s(X71,happ(s(fun(X73,X71),X74),s(X73,X75)))),X76,X70))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3284])).
fof(f12536,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s(X77,'const.combin.o_3'(s(fun(X79,X77),X80),s(fun(X78,X79),X81),s(X78,X82))) = s(X77,sK19(happ(s(fun(X78,X77),'const.combin.o_2'(s(fun(X79,X77),X80),s(fun(X78,X79),X81))),s(X78,X82)),X83,X77))) ) | $spl44),
  inference(subsumption_resolution,[],[f11790,f238])).
fof(f11790,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (~p(s(bool,'T_0')) | s(X77,'const.combin.o_3'(s(fun(X79,X77),X80),s(fun(X78,X79),X81),s(X78,X82))) = s(X77,sK19(happ(s(fun(X78,X77),'const.combin.o_2'(s(fun(X79,X77),X80),s(fun(X78,X79),X81))),s(X78,X82)),X83,X77))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3498])).
fof(f12520,plain,(
  ( ! [X350,X352,X354,X349,X351,X353,X348] : (s(X348,X354) = s(X348,sK19(X354,happ(s(fun(X349,fun(X348,bool)),'const.combin.o_2'(s(fun(X350,fun(X348,bool)),X351),s(fun(X349,X350),X352))),s(X349,X353)),X348))) ) | $spl44),
  inference(subsumption_resolution,[],[f11779,f238])).
fof(f11779,plain,(
  ( ! [X350,X352,X354,X349,X351,X353,X348] : (~p(s(bool,'T_0')) | s(X348,X354) = s(X348,sK19(X354,happ(s(fun(X349,fun(X348,bool)),'const.combin.o_2'(s(fun(X350,fun(X348,bool)),X351),s(fun(X349,X350),X352))),s(X349,X353)),X348))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3457])).
fof(f12504,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X322] : (s(X321,X327) = s(X321,sK19(X327,happ(s(fun(X322,fun(X321,bool)),X323),s(X322,happ(s(fun(X324,X322),X325),s(X324,X326)))),X321))) ) | $spl44),
  inference(subsumption_resolution,[],[f11771,f238])).
fof(f11771,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X322] : (~p(s(bool,'T_0')) | s(X321,X327) = s(X321,sK19(X327,happ(s(fun(X322,fun(X321,bool)),X323),s(X322,happ(s(fun(X324,X322),X325),s(X324,X326)))),X321))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3245])).
fof(f12488,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s(X176,X180) = s(X176,sK19(X180,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X177))),s('type.list.list'(fun(X176,bool)),'const.list.CONS_2'(s(fun(X176,bool),X178),s('type.list.list'(fun(X176,bool)),X179)))),X176))) ) | $spl44),
  inference(subsumption_resolution,[],[f11759,f238])).
fof(f11759,plain,(
  ( ! [X177,X180,X178,X176,X179] : (~p(s(bool,'T_0')) | s(X176,X180) = s(X176,sK19(X180,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X177))),s('type.list.list'(fun(X176,bool)),'const.list.CONS_2'(s(fun(X176,bool),X178),s('type.list.list'(fun(X176,bool)),X179)))),X176))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f2668])).
fof(f12472,plain,(
  ( ! [X66,X64,X67,X65] : (s(X64,X67) = s(X64,sK19(X67,happ(s(fun('type.list.list'(fun(X64,bool)),fun(X64,bool)),'const.list.EL_1'(s('type.num.num',X65))),s('type.list.list'(fun(X64,bool)),X66)),X64))) ) | $spl44),
  inference(subsumption_resolution,[],[f11750,f238])).
fof(f11750,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,'T_0')) | s(X64,X67) = s(X64,sK19(X67,happ(s(fun('type.list.list'(fun(X64,bool)),fun(X64,bool)),'const.list.EL_1'(s('type.num.num',X65))),s('type.list.list'(fun(X64,bool)),X66)),X64))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f1057])).
fof(f12456,plain,(
  ( ! [X180,X181,X179] : (s(X179,X181) = s(X179,sK19(X181,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X179,bool)),X180)),X179))) ) | $spl44),
  inference(subsumption_resolution,[],[f11741,f238])).
fof(f11741,plain,(
  ( ! [X180,X181,X179] : (~p(s(bool,'T_0')) | s(X179,X181) = s(X179,sK19(X181,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun(X179,bool)),X180)),X179))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f9263])).
fof(f12440,plain,(
  ( ! [X6,X7,X5] : (s(X5,X7) = s(X5,sK19(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5))) ) | $spl44),
  inference(subsumption_resolution,[],[f11731,f238])).
fof(f11731,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | s(X5,X7) = s(X5,sK19(X7,happ(s(fun('type.list.list'(fun(X5,bool)),fun(X5,bool)),'const.list.HD_0'),s('type.list.list'(fun(X5,bool)),X6)),X5))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f879])).
fof(f12232,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X1) = s(X0,sK19('const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))),X3,X0))) ) | $spl44),
  inference(subsumption_resolution,[],[f11612,f238])).
fof(f11612,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,sK19('const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))),X3,X0))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f898])).
fof(f12230,plain,(
  ( ! [X4,X2,X3,X1] : (s(X1,X4) = s(X1,sK19(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1))) ) | $spl44),
  inference(subsumption_resolution,[],[f11611,f238])).
fof(f11611,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | s(X1,X4) = s(X1,sK19(X4,'const.list.HD_1'(s('type.list.list'(fun(X1,bool)),'const.list.CONS_2'(s(fun(X1,bool),X2),s('type.list.list'(fun(X1,bool)),X3)))),X1))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f878])).
fof(f12226,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK19(X2,X1,X0))) ) | $spl44),
  inference(subsumption_resolution,[],[f11607,f238])).
fof(f11607,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK19(X2,X1,X0))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f322])).
fof(f12180,plain,(
  ( ! [X4,X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl44),
  inference(subsumption_resolution,[],[f11526,f238])).
fof(f11526,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3079])).
fof(f12178,plain,(
  ( ! [X4,X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl44),
  inference(subsumption_resolution,[],[f11525,f238])).
fof(f11525,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X1,X0)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f3072])).
fof(f12172,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))) ) | $spl44),
  inference(subsumption_resolution,[],[f11521,f238])).
fof(f11521,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f343])).
fof(f11474,plain,(
  ( ! [X2,X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2)))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f1929])).
fof(f11472,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X49))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X50),s('type.list.list'(bool),X51))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X48),s('type.num.num','const.num.|48|_0')))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f1888])).
fof(f12139,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl44),
  inference(subsumption_resolution,[],[f11455,f11384])).
fof(f11455,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl44),
  inference(backward_demodulation,[],[f11384,f249])).
fof(f12753,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718,f12734,f12736,f12738,f12740,f12742,f12744,f12752])).
fof(f12745,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718,f12734,f12736,f12738,f12740,f12742,f12744])).
fof(f12743,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718,f12734,f12736,f12738,f12740,f12742])).
fof(f12741,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718,f12734,f12736,f12738,f12740])).
fof(f12739,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718,f12734,f12736,f12738])).
fof(f12737,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718,f12734,f12736])).
fof(f12735,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718,f12734])).
fof(f12719,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716,f12718])).
fof(f12717,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714,f12716])).
fof(f12715,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712,f12714])).
fof(f12713,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708,f12712])).
fof(f12709,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704,f12708])).
fof(f12705,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702,f12704])).
fof(f12703,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694,f12702])).
fof(f12697,plain,(
  $false | ($spl41 | $spl44)),
  inference(subsumption_resolution,[],[f11996,f238])).
fof(f11996,plain,(
  ~p(s(bool,'T_0')) | ($spl41 | $spl44)),
  inference(backward_demodulation,[],[f11384,f10300])).
fof(f12696,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f11993,f238])).
fof(f11993,plain,(
  ~p(s(bool,'T_0')) | $spl44),
  inference(backward_demodulation,[],[f11384,f10299])).
fof(f12695,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690,f12694])).
fof(f12691,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686,f12690])).
fof(f12687,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682,f12686])).
fof(f12683,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678,f12682])).
fof(f12679,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674,f12678])).
fof(f12675,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672,f12674])).
fof(f12673,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666,f12672])).
fof(f12667,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664,f12666])).
fof(f12665,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660,f12664])).
fof(f12661,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656,f12660])).
fof(f12657,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648,f12656])).
fof(f12649,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646,f12648])).
fof(f12647,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642,f12646])).
fof(f12643,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618,f12642])).
fof(f12637,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12636,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618])).
fof(f12636,plain,(
  ( ! [X2,X3,X1] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.combin.o_2'(s(fun(X1,bool),X2),s(fun('type.list.list'(sK2),X1),X3)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11956,f238])).
fof(f11956,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.combin.o_2'(s(fun(X1,bool),X2),s(fun('type.list.list'(sK2),X1),X3)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f6040])).
fof(f12619,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616,f12618])).
fof(f12617,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614,f12616])).
fof(f12615,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612,f12614])).
fof(f12613,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610,f12612])).
fof(f12611,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608,f12610])).
fof(f12609,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594,f12608])).
fof(f12607,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12606,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594])).
fof(f12606,plain,(
  ( ! [X133] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X133)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11927,f238])).
fof(f11927,plain,(
  ( ! [X133] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X133)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f9248])).
fof(f12605,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12604,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594])).
fof(f12604,plain,(
  ( ! [X2] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.HD_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X2)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11926,f238])).
fof(f11926,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.HD_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X2)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f6035])).
fof(f12603,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12602,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594])).
fof(f12602,plain,(
  ( ! [X187,X188,X186] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X186))),s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X187),s('type.list.list'(fun('type.list.list'(sK2),bool)),X188)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11923,f238])).
fof(f11923,plain,(
  ( ! [X187,X188,X186] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X186))),s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X187),s('type.list.list'(fun('type.list.list'(sK2),bool)),X188)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7205])).
fof(f12601,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12600,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594])).
fof(f12600,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11922,f238])).
fof(f11922,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f6036])).
fof(f12599,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12598,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594])).
fof(f12598,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X10,fun('type.list.list'(sK2),bool)),'const.combin.o_2'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11920,f238])).
fof(f11920,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X10,fun('type.list.list'(sK2),bool)),'const.combin.o_2'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f6038])).
fof(f12597,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12596,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594])).
fof(f12596,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11919,f238])).
fof(f11919,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f6037])).
fof(f12595,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558,f12594])).
fof(f12593,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12592,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558])).
fof(f12592,plain,(
  ( ! [X59,X58] : (s('type.list.list'(sK2),sK19('const.list.NIL_0',X58,'type.list.list'(sK2))) = s('type.list.list'(sK2),sK19(sK19('const.list.NIL_0',X58,'type.list.list'(sK2)),X59,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X58,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11909,f238])).
fof(f11909,plain,(
  ( ! [X59,X58] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),sK19('const.list.NIL_0',X58,'type.list.list'(sK2))) = s('type.list.list'(sK2),sK19(sK19('const.list.NIL_0',X58,'type.list.list'(sK2)),X59,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X58,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7613])).
fof(f7613,plain,(
  ( ! [X59,X58] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),X59),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),sK19('const.list.NIL_0',X58,'type.list.list'(sK2))) = s('type.list.list'(sK2),sK19(sK19('const.list.NIL_0',X58,'type.list.list'(sK2)),X59,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X58,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f322,f7517])).
fof(f7517,plain,(
  ( ! [X13] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19('const.list.NIL_0',X13,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X13,'type.list.list'(sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f7468,f238])).
fof(f7468,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19('const.list.NIL_0',X13,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X13,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f322,f6011])).
fof(f6011,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X0,'type.list.list'(sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f6009,f240])).
fof(f6009,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X0,'type.list.list'(sK2))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(sK2),'const.list.NIL_0')))) ) | $spl2),
  inference(superposition,[],[f4811,f243])).
fof(f4811,plain,(
  ( ! [X35] : (p(s(bool,happ(s(fun('type.list.list'(sK2),bool),X35),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X35,'type.list.list'(sK2)))) ) | $spl2),
  inference(forward_demodulation,[],[f4742,f394])).
fof(f4742,plain,(
  ( ! [X35] : (p(s(bool,happ(s(fun('type.list.list'(sK2),bool),X35),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),sK3) = s('type.list.list'(sK2),sK16(sK3,X35,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f314,f394])).
fof(f12591,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12590,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558])).
fof(f12590,plain,(
  ( ! [X59,X58] : (s('type.list.list'(sK2),sK19(sK3,X58,'type.list.list'(sK2))) = s('type.list.list'(sK2),sK19(sK19(sK3,X58,'type.list.list'(sK2)),X59,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X58,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11907,f238])).
fof(f11907,plain,(
  ( ! [X59,X58] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),sK19(sK3,X58,'type.list.list'(sK2))) = s('type.list.list'(sK2),sK19(sK19(sK3,X58,'type.list.list'(sK2)),X59,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X58,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7582])).
fof(f7582,plain,(
  ( ! [X59,X58] : (~p(s(bool,happ(s(fun('type.list.list'(sK2),bool),X59),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.list.list'(sK2),sK19(sK3,X58,'type.list.list'(sK2))) = s('type.list.list'(sK2),sK19(sK19(sK3,X58,'type.list.list'(sK2)),X59,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X58,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f322,f7511])).
fof(f7511,plain,(
  ( ! [X0] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,X0,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X0,'type.list.list'(sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f7460,f238])).
fof(f7460,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,X0,'type.list.list'(sK2))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X0,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f4813,f6011])).
fof(f12589,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12588,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558])).
fof(f12588,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(fun('type.list.list'(sK2),bool)),X1)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11902,f238])).
fof(f11902,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(fun('type.list.list'(sK2),bool)),X1)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f6034])).
fof(f12587,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12586,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558])).
fof(f12586,plain,(
  ( ! [X42] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,X42,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11900,f238])).
fof(f11900,plain,(
  ( ! [X42] : (~p(s(bool,'T_0')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK19(sK3,X42,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f4813])).
fof(f12585,plain,(
  $false | ($spl36 | $spl44)),
  inference(subsumption_resolution,[],[f12584,f238])).
fof(f12584,plain,(
  ~p(s(bool,'T_0')) | ($spl36 | $spl44)),
  inference(forward_demodulation,[],[f12583,f11384])).
fof(f12583,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl36 | $spl44)),
  inference(subsumption_resolution,[],[f11895,f238])).
fof(f11895,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl36 | $spl44)),
  inference(backward_demodulation,[],[f11384,f4890])).
fof(f12582,plain,(
  $false | ($spl34 | $spl44)),
  inference(subsumption_resolution,[],[f12581,f238])).
fof(f12581,plain,(
  ~p(s(bool,'T_0')) | ($spl34 | $spl44)),
  inference(forward_demodulation,[],[f12580,f11384])).
fof(f12580,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl34 | $spl44)),
  inference(subsumption_resolution,[],[f11894,f238])).
fof(f11894,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl34 | $spl44)),
  inference(backward_demodulation,[],[f11384,f4882])).
fof(f12577,plain,(
  $false | ($spl32 | $spl44)),
  inference(subsumption_resolution,[],[f12576,f238])).
fof(f12576,plain,(
  ~p(s(bool,'T_0')) | ($spl32 | $spl44)),
  inference(forward_demodulation,[],[f12575,f11384])).
fof(f12575,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl32 | $spl44)),
  inference(subsumption_resolution,[],[f11892,f238])).
fof(f11892,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl32 | $spl44)),
  inference(backward_demodulation,[],[f11384,f5332])).
fof(f12574,plain,(
  $false | ($spl28 | $spl44)),
  inference(subsumption_resolution,[],[f12573,f238])).
fof(f12573,plain,(
  ~p(s(bool,'T_0')) | ($spl28 | $spl44)),
  inference(forward_demodulation,[],[f12572,f11384])).
fof(f12572,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl28 | $spl44)),
  inference(subsumption_resolution,[],[f11891,f238])).
fof(f11891,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl28 | $spl44)),
  inference(backward_demodulation,[],[f11384,f5333])).
fof(f12569,plain,(
  $false | ($spl14 | $spl44)),
  inference(global_subsumption,[],[f12568,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558])).
fof(f12568,plain,(
  ( ! [X24] : (s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X24,'type.list.list'(bool)))) ) | ($spl14 | $spl44)),
  inference(subsumption_resolution,[],[f11888,f238])).
fof(f11888,plain,(
  ( ! [X24] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))) = s('type.list.list'(bool),sK19(sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool)),X24,'type.list.list'(bool)))) ) | ($spl14 | $spl44)),
  inference(backward_demodulation,[],[f11384,f6438])).
fof(f12567,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12566,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558])).
fof(f12566,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X87,'type.list.list'(sK2))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X87,'type.list.list'(sK2)))),X88,'type.num.num')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X87,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11883,f238])).
fof(f11883,plain,(
  ( ! [X88,X87] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X87,'type.list.list'(sK2))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X87,'type.list.list'(sK2)))),X88,'type.num.num')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X87,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7745])).
fof(f7745,plain,(
  ( ! [X88,X87] : (~p(s(bool,happ(s(fun('type.num.num',bool),X88),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X87,'type.list.list'(sK2))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X87,'type.list.list'(sK2)))),X88,'type.num.num')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X87,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f322,f7621])).
fof(f7621,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X2,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X2,'type.list.list'(sK2)))) ) | $spl2),
  inference(trivial_inequality_removal,[],[f7593])).
fof(f7593,plain,(
  ( ! [X2] : (s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.NIL_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X2,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X2,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f290,f7517])).
fof(f12563,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12562,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558])).
fof(f12562,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X87,'type.list.list'(sK2))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X87,'type.list.list'(sK2)))),X88,'type.num.num')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X87,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11880,f238])).
fof(f11880,plain,(
  ( ! [X88,X87] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X87,'type.list.list'(sK2))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X87,'type.list.list'(sK2)))),X88,'type.num.num')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X87,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7694])).
fof(f7694,plain,(
  ( ! [X88,X87] : (~p(s(bool,happ(s(fun('type.num.num',bool),X88),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X87,'type.list.list'(sK2))))) = s('type.num.num',sK19('const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X87,'type.list.list'(sK2)))),X88,'type.num.num')) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X87,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f322,f7590])).
fof(f7590,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X2,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X2,'type.list.list'(sK2)))) ) | $spl2),
  inference(trivial_inequality_removal,[],[f7562])).
fof(f7562,plain,(
  ( ! [X2] : (s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),'const.list.NIL_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X2,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X2,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f290,f7511])).
fof(f12559,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556,f12558])).
fof(f12557,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554,f12556])).
fof(f12555,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546,f12554])).
fof(f12547,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544,f12546])).
fof(f12545,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542,f12544])).
fof(f12543,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540,f12542])).
fof(f12541,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538,f12540])).
fof(f12539,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536,f12538])).
fof(f12537,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520,f12536])).
fof(f12521,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504,f12520])).
fof(f12505,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488,f12504])).
fof(f12489,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472,f12488])).
fof(f12473,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456,f12472])).
fof(f12457,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440,f12456])).
fof(f12441,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232,f12440])).
fof(f12233,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230,f12232])).
fof(f12231,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226,f12230])).
fof(f12227,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180,f12226])).
fof(f12205,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12204,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180])).
fof(f12204,plain,(
  ( ! [X14,X12,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X11,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X11,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11584,f238])).
fof(f11584,plain,(
  ( ! [X14,X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X11,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X11,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7765])).
fof(f7765,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK2,fun(X12,bool))),X13),s('type.list.list'(sK2),'const.list.NIL_0'),s('type.list.list'(X12),X14)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X11,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X11,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f343,f7511])).
fof(f12203,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12202,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180])).
fof(f12202,plain,(
  ( ! [X15,X18,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X15,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X15,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11583,f238])).
fof(f11583,plain,(
  ( ! [X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X15,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X15,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7766])).
fof(f7766,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK2,fun(X16,bool))),X17),s('type.list.list'(sK2),'const.list.NIL_0'),s('type.list.list'(X16),X18)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X15,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X15,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f343,f7517])).
fof(f12201,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12200,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180])).
fof(f12200,plain,(
  ( ! [X14,X12,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X11,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X11,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11575,f238])).
fof(f11575,plain,(
  ( ! [X14,X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X11,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X11,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7776])).
fof(f7776,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X12,fun(sK2,bool))),X13),s('type.list.list'(X12),X14),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19(sK3,X11,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X11,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f343,f7511])).
fof(f12199,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12198,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180])).
fof(f12198,plain,(
  ( ! [X15,X18,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X15,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X15,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11574,f238])).
fof(f11574,plain,(
  ( ! [X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X15,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X15,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7777])).
fof(f7777,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X16,fun(sK2,bool))),X17),s('type.list.list'(X16),X18),s('type.list.list'(sK2),'const.list.NIL_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK19('const.list.NIL_0',X15,'type.list.list'(sK2))))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X15,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f343,f7517])).
fof(f12181,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178,f12180])).
fof(f12179,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172,f12178])).
fof(f12173,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474,f12172])).
fof(f12171,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12170,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12170,plain,(
  ( ! [X131] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X131)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11514,f9247])).
fof(f9247,plain,(
  ( ! [X132] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X132))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X132)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f6011,f1077])).
fof(f11514,plain,(
  ( ! [X131] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X131))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X131)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f9246])).
fof(f9246,plain,(
  ( ! [X131] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X131))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X131)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f7518,f1077])).
fof(f7518,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),X17),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X17,'type.list.list'(sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f7472,f238])).
fof(f7472,plain,(
  ( ! [X17] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),X17),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X17,'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f249,f6011])).
fof(f12169,plain,(
  $false | ($spl14 | $spl44)),
  inference(global_subsumption,[],[f11511,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f11511,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0)))),'const.list.HD_0','type.list.list'(bool)))),X1)) ) | ($spl14 | $spl44)),
  inference(backward_demodulation,[],[f11384,f8046])).
fof(f12168,plain,(
  $false | ($spl14 | $spl44)),
  inference(global_subsumption,[],[f11510,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f11510,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1)))),'const.list.HD_0','type.list.list'(bool)))))) ) | ($spl14 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7996])).
fof(f12167,plain,(
  $false | ($spl14 | $spl44)),
  inference(global_subsumption,[],[f11507,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f11507,plain,(
  ( ! [X37,X38,X36] : (~sP0(X37,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X36)))),'const.list.HD_0','type.list.list'(bool)))),X38) | p(s(bool,X37))) ) | ($spl14 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7986])).
fof(f12166,plain,(
  $false | ($spl14 | $spl44)),
  inference(global_subsumption,[],[f11506,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f11506,plain,(
  ( ! [X35,X33,X34] : (~sP0(X34,X35,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X33)))),'const.list.HD_0','type.list.list'(bool))))) | p(s(bool,X34))) ) | ($spl14 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7985])).
fof(f12161,plain,(
  $false | ($spl14 | $spl44)),
  inference(global_subsumption,[],[f11501,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f11501,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X84) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X82)))),'const.list.HD_0','type.list.list'(bool))))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X83))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X85)))) ) | ($spl14 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7939])).
fof(f12160,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12159,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12159,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.combin.o_2'(s(fun(X2,bool),X3),s(fun('type.list.list'(sK2),X2),X4)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11499,f11384])).
fof(f11499,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,'const.combin.o_3'(s(fun(X2,bool),X3),s(fun('type.list.list'(sK2),X2),X4),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.combin.o_2'(s(fun(X2,bool),X3),s(fun('type.list.list'(sK2),X2),X4)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7812])).
fof(f7812,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,'const.combin.o_3'(s(fun(X2,bool),X3),s(fun('type.list.list'(sK2),X2),X4),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.combin.o_2'(s(fun(X2,bool),X3),s(fun('type.list.list'(sK2),X2),X4)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f7518,f364])).
fof(f12158,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12157,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12157,plain,(
  ( ! [X17,X15,X16] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X16),s('type.list.list'(fun('type.list.list'(sK2),bool)),X17)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11498,f11384])).
fof(f11498,plain,(
  ( ! [X17,X15,X16] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.EL_2'(s('type.num.num',X15),s('type.list.list'(fun('type.list.list'(sK2),bool)),X17))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X16),s('type.list.list'(fun('type.list.list'(sK2),bool)),X17)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7809])).
fof(f7809,plain,(
  ( ! [X17,X15,X16] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.EL_2'(s('type.num.num',X15),s('type.list.list'(fun('type.list.list'(sK2),bool)),X17))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.EL_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X16),s('type.list.list'(fun('type.list.list'(sK2),bool)),X17)))),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f7518,f324])).
fof(f12156,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12155,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12155,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun(X10,fun('type.list.list'(sK2),bool)),'const.combin.o_2'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11497,f11384])).
fof(f11497,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.combin.o_3'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13),s(X10,X14))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun(X10,fun('type.list.list'(sK2),bool)),'const.combin.o_2'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7808])).
fof(f7808,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.combin.o_3'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13),s(X10,X14))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun(X10,fun('type.list.list'(sK2),bool)),'const.combin.o_2'(s(fun(X11,fun('type.list.list'(sK2),bool)),X12),s(fun(X10,X11),X13))),s(X10,X14)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f7518,f364])).
fof(f12154,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12153,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12153,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11496,f7455])).
fof(f7455,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.combin.o_3'(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(fun(X7,X5),X8),s(X7,X9))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f6011,f363])).
fof(f11496,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.combin.o_3'(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(fun(X7,X5),X8),s(X7,X9))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7807])).
fof(f7807,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.combin.o_3'(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(fun(X7,X5),X8),s(X7,X9))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun(X5,fun('type.list.list'(sK2),bool)),X6),s(X5,happ(s(fun(X7,X5),X8),s(X7,X9)))),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f7518,f363])).
fof(f12152,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12151,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12151,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11495,f11384])).
fof(f11495,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7806])).
fof(f7806,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.EL_1'(s('type.num.num',X3))),s('type.list.list'(fun('type.list.list'(sK2),bool)),X4)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f7518,f295])).
fof(f12150,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12149,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12149,plain,(
  ( ! [X2] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.HD_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X2)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11494,f11384])).
fof(f11494,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X2))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.HD_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X2)),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7805])).
fof(f7805,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),X2))),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,happ(s(fun('type.list.list'(fun('type.list.list'(sK2),bool)),fun('type.list.list'(sK2),bool)),'const.list.HD_0'),s('type.list.list'(fun('type.list.list'(sK2),bool)),X2)),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f7518,f285])).
fof(f12148,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12147,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12147,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(fun('type.list.list'(sK2),bool)),X1)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11493,f11384])).
fof(f11493,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(fun('type.list.list'(sK2),bool)),X1)))),'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7804])).
fof(f7804,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,'const.list.HD_1'(s('type.list.list'(fun('type.list.list'(sK2),bool)),'const.list.CONS_2'(s(fun('type.list.list'(sK2),bool),X0),s('type.list.list'(fun('type.list.list'(sK2),bool)),X1)))),'type.list.list'(sK2)))) ) | $spl2),
  inference(superposition,[],[f7518,f293])).
fof(f12146,plain,(
  $false | ($spl2 | $spl44)),
  inference(global_subsumption,[],[f12145,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12145,plain,(
  ( ! [X17] : (s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X17,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(subsumption_resolution,[],[f11492,f6011])).
fof(f11492,plain,(
  ( ! [X17] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK2),bool),X17),s('type.list.list'(sK2),'const.list.NIL_0'))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK16(sK3,X17,'type.list.list'(sK2)))) ) | ($spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f7518])).
fof(f12144,plain,(
  $false | ($spl1 | $spl2 | $spl44)),
  inference(global_subsumption,[],[f11489,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f11489,plain,(
  ( ! [X12,X10,X11] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X10))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X11),s('type.list.list'(bool),X12))) | s(bool,X11) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) ) | ($spl1 | $spl2 | $spl44)),
  inference(backward_demodulation,[],[f11384,f5597])).
fof(f12143,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472,f11474])).
fof(f12142,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139,f11472])).
fof(f12140,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f295,f327,f326,f325,f331,f328,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f694,f708,f703,f1077,f1787,f1878,f1890,f1894,f1902,f2325,f2337,f2340,f2420,f2425,f2540,f2545,f2580,f2585,f2776,f2778,f2779,f2780,f2782,f2914,f3191,f3192,f3193,f3195,f3196,f3210,f3278,f3405,f3407,f3419,f3492,f3977,f3993,f4508,f4517,f4881,f4889,f760,f1075,f3270,f3484,f583,f1786,f1891,f294,f2781,f2684,f2672,f2642,f2631,f1874,f1873,f1061,f977,f750,f710,f706,f704,f702,f670,f665,f664,f663,f333,f332,f324,f3465,f3251,f2657,f2656,f2587,f2547,f2465,f2427,f2338,f1741,f1703,f1052,f1051,f1042,f1040,f2878,f2909,f2880,f2882,f2910,f2911,f2872,f2906,f3304,f3305,f3525,f3526,f2865,f2918,f2866,f2867,f2919,f2920,f2861,f5331,f2862,f2915,f3256,f3306,f3470,f3527,f2917,f2908,f2876,f2864,f336,f335,f334,f337,f3035,f3505,f3504,f3503,f3502,f3501,f3500,f3499,f3446,f3445,f3430,f3426,f3234,f3233,f3220,f3216,f4891,f4519,f1797,f1798,f2447,f4461,f4550,f996,f994,f815,f905,f814,f904,f3219,f3218,f4892,f4520,f3215,f3214,f809,f899,f1081,f1079,f2691,f2693,f3282,f3284,f3496,f3498,f4887,f4886,f4515,f4514,f3521,f3520,f3519,f3517,f3516,f3515,f3457,f3452,f3300,f3299,f3298,f3296,f3295,f3294,f3245,f3240,f4888,f4885,f4516,f4513,f2709,f2708,f2707,f2705,f2704,f2703,f2668,f2663,f2584,f2544,f2424,f2330,f1736,f1698,f1059,f1057,f4884,f4512,f2583,f2543,f2423,f2329,f1735,f1697,f879,f792,f4883,f4551,f4546,f4545,f4544,f4543,f4542,f4541,f4511,f4462,f4457,f4456,f4455,f4454,f4453,f4452,f3441,f3440,f3439,f3438,f3229,f3228,f3227,f3226,f3217,f2652,f2651,f2650,f2649,f2582,f2542,f2422,f2339,f2328,f2195,f2193,f2089,f2087,f2050,f2048,f1968,f1966,f1734,f1696,f898,f878,f808,f791,f323,f322,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f3072,f3079,f4874,f4547,f4501,f4458,f3406,f3197,f3194,f3003,f3002,f2632,f2442,f2441,f1929,f1908,f1888,f1884,f1785,f1725,f1686,f1559,f1503,f1043,f903,f884,f813,f797,f538,f408,f250,f249,f240,f4549,f4552,f4460,f4463,f2453,f2194,f2088,f2049,f1967,f1740,f1733,f1702,f1695,f897,f896,f807,f806,f745,f744,f736,f8195,f8207,f8209,f8211,f8213,f8215,f8217,f8220,f8221,f8179,f8227,f8228,f8229,f8230,f8231,f8232,f8190,f8191,f8194,f8525,f8537,f8586,f8625,f8627,f8629,f8631,f8633,f8635,f8598,f8601,f8644,f8646,f8648,f8650,f8652,f8654,f8612,f8613,f8616,f9470,f9472,f9223,f9224,f9225,f9226,f9230,f9231,f9490,f9491,f9254,f9492,f9256,f9493,f9258,f9494,f9496,f9497,f9263,f9498,f9273,f9502,f9278,f9503,f9504,f9315,f9521,f9523,f9525,f9527,f10299,f10371,f10372,f10373,f10374,f10375,f10376,f10377,f10410,f10424,f10425,f10426,f10427,f10428,f10429,f10430,f10552,f10553,f10556,f10558,f10564,f10567,f10573,f10574,f10575,f10576,f10577,f10578,f10579,f10580,f10711,f11382,f11386,f11389,f11392,f11399,f11402,f10743,f10744,f10747,f11407,f11408,f11409,f11410,f11411,f11412,f11413,f11414,f11416,f11417,f11418,f11419,f11420,f11421,f11422,f11423,f11424,f11425,f11426,f11427,f11430,f11431,f11432,f11433,f11434,f10842,f10843,f10846,f10848,f10854,f10857,f10863,f10864,f10865,f10866,f10867,f10868,f10869,f10870,f11436,f11438,f11440,f11442,f11448,f11450,f11384,f12139])).
fof(f12138,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f11454,f238])).
fof(f11454,plain,(
  ~p(s(bool,'T_0')) | $spl44),
  inference(backward_demodulation,[],[f11384,f240])).
fof(f11403,plain,(
  ( ! [X2,X1] : (~sP0(X1,'T_0',X2) | p(s(bool,X1))) ) | $spl54),
  inference(cnf_transformation,[],[f11403_D])).
fof(f11403_D,plain,(
  ( ! [X2,X1] : (~sP0(X1,'T_0',X2) | p(s(bool,X1))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f11450,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP0(X1,'T_0',X2)) )),
  inference(condensation,[],[f11449])).
fof(f11449,plain,(
  ( ! [X59,X57,X58,X56] : (p(s(bool,X57)) | ~sP0(X57,'T_0',X58) | s(bool,X56) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) )),
  inference(subsumption_resolution,[],[f10887,f460])).
fof(f10887,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,X56)) | p(s(bool,X57)) | ~sP0(X57,'T_0',X58) | s(bool,X56) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f354,f424])).
fof(f11400,plain,(
  ( ! [X2,X1] : (~sP0(X1,X2,'T_0') | p(s(bool,X1))) ) | $spl52),
  inference(cnf_transformation,[],[f11400_D])).
fof(f11400_D,plain,(
  ( ! [X2,X1] : (~sP0(X1,X2,'T_0') | p(s(bool,X1))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f11448,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP0(X1,X2,'T_0')) )),
  inference(condensation,[],[f11447])).
fof(f11447,plain,(
  ( ! [X54,X52,X55,X53] : (p(s(bool,X53)) | ~sP0(X53,X54,'T_0') | s(bool,X52) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f10886,f460])).
fof(f10886,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,X52)) | p(s(bool,X53)) | ~sP0(X53,X54,'T_0') | s(bool,X52) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f353,f424])).
fof(f11393,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK10('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl50),
  inference(cnf_transformation,[],[f11393_D])).
fof(f11393_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK10('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f11442,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK10('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f11441])).
fof(f11441,plain,(
  ( ! [X39,X41,X38,X42,X40] : (p(s(bool,happ(s(fun(X39,bool),X40),s(X39,sK10('T_0',X40,X39))))) | ~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,X41)))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f10882,f460])).
fof(f10882,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,X38)) | p(s(bool,happ(s(fun(X39,bool),X40),s(X39,sK10('T_0',X40,X39))))) | ~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,X41)))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f304,f424])).
fof(f11390,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK9('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl48),
  inference(cnf_transformation,[],[f11390_D])).
fof(f11390_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK9('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f11440,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK9('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f11439])).
fof(f11439,plain,(
  ( ! [X37,X35,X33,X36,X34] : (p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK9('T_0',X35,X34))))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36)))) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f10881,f460])).
fof(f10881,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK9('T_0',X35,X34))))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36)))) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f302,f424])).
fof(f11387,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK8('T_0',X2,X1)))))) ) | $spl46),
  inference(cnf_transformation,[],[f11387_D])).
fof(f11387_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK8('T_0',X2,X1)))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f11438,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK8('T_0',X2,X1)))))) )),
  inference(condensation,[],[f11437])).
fof(f11437,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK8('T_0',X30,X29))))) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f10880,f460])).
fof(f10880,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK8('T_0',X30,X29))))) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f301,f424])).
fof(f11383,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK7('T_0',X2,X1)))))) ) | $spl42),
  inference(cnf_transformation,[],[f11383_D])).
fof(f11383_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK7('T_0',X2,X1)))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f11436,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK7('T_0',X2,X1)))))) )),
  inference(condensation,[],[f11435])).
fof(f11435,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) | p(s(bool,happ(s(fun(X24,bool),X25),s(X24,sK7('T_0',X25,X24))))) | s(bool,X23) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f10879,f460])).
fof(f10879,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,X23)) | ~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) | p(s(bool,happ(s(fun(X24,bool),X25),s(X24,sK7('T_0',X25,X24))))) | s(bool,X23) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f299,f424])).
fof(f11402,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP0(X1,'T_0',X2)) )),
  inference(condensation,[],[f11401])).
fof(f11401,plain,(
  ( ! [X59,X57,X58,X56] : (p(s(bool,X57)) | ~sP0(X57,'T_0',X58) | s(bool,X56) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) )),
  inference(subsumption_resolution,[],[f10726,f460])).
fof(f10726,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,X56)) | p(s(bool,X57)) | ~sP0(X57,'T_0',X58) | s(bool,X56) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f354,f424])).
fof(f11399,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP0(X1,X2,'T_0')) )),
  inference(condensation,[],[f11398])).
fof(f11398,plain,(
  ( ! [X54,X52,X55,X53] : (p(s(bool,X53)) | ~sP0(X53,X54,'T_0') | s(bool,X52) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f10725,f460])).
fof(f10725,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,X52)) | p(s(bool,X53)) | ~sP0(X53,X54,'T_0') | s(bool,X52) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f353,f424])).
fof(f11392,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK10('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f11391])).
fof(f11391,plain,(
  ( ! [X39,X41,X38,X42,X40] : (p(s(bool,happ(s(fun(X39,bool),X40),s(X39,sK10('T_0',X40,X39))))) | ~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,X41)))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f10721,f460])).
fof(f10721,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,X38)) | p(s(bool,happ(s(fun(X39,bool),X40),s(X39,sK10('T_0',X40,X39))))) | ~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,X41)))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f304,f424])).
fof(f11389,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK9('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f11388])).
fof(f11388,plain,(
  ( ! [X37,X35,X33,X36,X34] : (p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK9('T_0',X35,X34))))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36)))) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f10720,f460])).
fof(f10720,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK9('T_0',X35,X34))))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36)))) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f302,f424])).
fof(f11386,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK8('T_0',X2,X1)))))) )),
  inference(condensation,[],[f11385])).
fof(f11385,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK8('T_0',X30,X29))))) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f10719,f460])).
fof(f10719,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK8('T_0',X30,X29))))) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f301,f424])).
fof(f11382,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK7('T_0',X2,X1)))))) )),
  inference(condensation,[],[f11381])).
fof(f11381,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) | p(s(bool,happ(s(fun(X24,bool),X25),s(X24,sK7('T_0',X25,X24))))) | s(bool,X23) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f10718,f460])).
fof(f10718,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,X23)) | ~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) | p(s(bool,happ(s(fun(X24,bool),X25),s(X24,sK7('T_0',X25,X24))))) | s(bool,X23) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f299,f424])).
fof(f6429,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl38),
  inference(cnf_transformation,[],[f6429_D])).
fof(f6429_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f6431,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | $spl41),
  inference(cnf_transformation,[],[f6431_D])).
fof(f6431_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f6342,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),sK11('F_0','const.list.HD_0','type.list.list'(bool))))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK19(sK11('F_0','const.list.HD_0','type.list.list'(bool)),'const.list.HD_0','type.list.list'(bool))) | $spl14),
  inference(superposition,[],[f289,f6258])).
fof(f5328,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f5327,f4911])).
fof(f4911,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl30),
  inference(unit_resulting_resolution,[],[f293,f4510,f384])).
fof(f5327,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f4962,f238])).
fof(f4962,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | ($spl30 | $spl32)),
  inference(backward_demodulation,[],[f4898,f4518])).
fof(f4898,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) ) | $spl30),
  inference(unit_resulting_resolution,[],[f238,f4510,f331])).
fof(f5326,plain,(
  $false | ($spl28 | $spl30)),
  inference(subsumption_resolution,[],[f5325,f4911])).
fof(f5325,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl28 | $spl30)),
  inference(subsumption_resolution,[],[f4960,f238])).
fof(f4960,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | ($spl28 | $spl30)),
  inference(backward_demodulation,[],[f4898,f4509])).
fof(f5315,plain,(
  $false | ($spl14 | $spl30)),
  inference(trivial_inequality_removal,[],[f5277])).
fof(f5277,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl14 | $spl30)),
  inference(backward_demodulation,[],[f5271,f663])).
fof(f5271,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | ($spl14 | $spl30)),
  inference(subsumption_resolution,[],[f5215,f238])).
fof(f5215,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | ($spl14 | $spl30)),
  inference(backward_demodulation,[],[f4983,f2914])).
fof(f4983,plain,(
  ( ! [X61] : (s(bool,'T_0') = s(bool,X61)) ) | ($spl14 | $spl30)),
  inference(global_subsumption,[],[f4982,f237,f236,f238,f241,f242,f243,f246,f245,f283,f284,f285,f286,f290,f289,f293,f294,f295,f324,f327,f326,f325,f331,f328,f333,f332,f342,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f414,f417,f421,f424,f460,f547,f548,f579,f583,f663,f664,f665,f670,f694,f710,f708,f706,f704,f703,f702,f750,f760,f977,f1077,f1061,f1075,f807,f806,f745,f744,f1052,f1051,f1042,f336,f335,f334,f337,f996,f815,f814,f792,f1059,f809,f1081,f808,f791,f319,f317,f316,f315,f314,f313,f312,f311,f310,f308,f306,f304,f302,f301,f299,f346,f345,f344,f343,f813,f797,f538,f408,f250,f249,f240,f896,f1040,f897,f994,f905,f904,f903,f884,f898,f1079,f899,f878,f1057,f879,f323,f322,f1695,f1696,f1697,f1698,f1702,f1703,f1733,f1734,f1735,f1736,f1740,f1741,f1786,f1787,f1797,f1798,f1929,f1874,f1873,f1878,f1884,f1888,f1890,f1891,f1894,f1902,f1966,f1967,f1968,f2048,f2049,f2050,f2087,f2088,f2089,f2193,f2194,f2195,f2325,f2328,f2329,f2330,f2337,f2338,f1908,f1785,f2339,f1725,f1686,f1559,f2340,f1503,f1043,f736,f2420,f2422,f2423,f2424,f2425,f2427,f2453,f2441,f2442,f2447,f2465,f2540,f2542,f2543,f2544,f2545,f2547,f2580,f2582,f2583,f2584,f2585,f2587,f2631,f2632,f2691,f2693,f2642,f2649,f2650,f2651,f2652,f2656,f2657,f2703,f2704,f2663,f2705,f2707,f2708,f2668,f2709,f2672,f2684,f2776,f2778,f2779,f2780,f2781,f2782,f2872,f2876,f2878,f2880,f2882,f2861,f2862,f2864,f2865,f2866,f2867,f2906,f2908,f2909,f2910,f2911,f2914,f2915,f2917,f2918,f2919,f2920,f3002,f3003,f3035,f3072,f3079,f3191,f3192,f3193,f3194,f3195,f3196,f3197,f3282,f3284,f3210,f3214,f3215,f3216,f3217,f3218,f3219,f3220,f3226,f3227,f3228,f3229,f3233,f3234,f3294,f3295,f3240,f3296,f3298,f3299,f3245,f3300,f3251,f3304,f3256,f3305,f3306,f3270,f3278,f3405,f3406,f3407,f3496,f3498,f3419,f3499,f3500,f3426,f3501,f3502,f3503,f3430,f3504,f3505,f3438,f3439,f3440,f3441,f3445,f3446,f3515,f3516,f3452,f3517,f3519,f3520,f3457,f3521,f3465,f3525,f3470,f3526,f3527,f3484,f3492,f3977,f3993,f4463,f4452,f4453,f4454,f4455,f4456,f4457,f4458,f4460,f4461,f4462,f4508,f4511,f4512,f4513,f4514,f4515,f4516,f4501,f4517,f4519,f4520,f4552,f4541,f4542,f4543,f4544,f4545,f4546,f4547,f4549,f4550,f4551,f4881,f4883,f4884,f4885,f4886,f4887,f4888,f4874,f4889,f4891,f4892,f4510,f4915,f4911,f4908,f4904,f4900,f4899,f4898,f4979,f4980,f4981])).
fof(f4981,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) ) | $spl30),
  inference(subsumption_resolution,[],[f4935,f238])).
fof(f4935,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK19(X0,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))) ) | $spl30),
  inference(backward_demodulation,[],[f4898,f897])).
fof(f4980,plain,(
  ( ! [X9] : (s('type.list.list'(bool),X9) = s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))) ) | $spl30),
  inference(subsumption_resolution,[],[f4934,f238])).
fof(f4934,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.list.list'(bool),X9) = s('type.list.list'(bool),sK19(X9,'const.list.HD_0','type.list.list'(bool)))) ) | $spl30),
  inference(backward_demodulation,[],[f4898,f896])).
fof(f4979,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X3)))) ) | $spl30),
  inference(subsumption_resolution,[],[f4929,f400])).
fof(f4929,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X3)))) ) | $spl30),
  inference(backward_demodulation,[],[f4898,f736])).
fof(f4899,plain,(
  ( ! [X0,X1] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))) = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1)))) ) | $spl30),
  inference(unit_resulting_resolution,[],[f4510,f4510,f331])).
fof(f4900,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.list.HD_1'(s('type.list.list'(bool),X1)))) ) | $spl30),
  inference(unit_resulting_resolution,[],[f240,f4510,f353])).
fof(f4904,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.list.HD_1'(s('type.list.list'(bool),X0)),X1)) ) | $spl30),
  inference(unit_resulting_resolution,[],[f240,f4510,f354])).
fof(f4908,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) ) | $spl30),
  inference(unit_resulting_resolution,[],[f240,f4510,f384])).
fof(f4915,plain,(
  ( ! [X2,X0,X1] : (sP0('const.list.HD_1'(s('type.list.list'(bool),X0)),X1,X2)) ) | $spl30),
  inference(unit_resulting_resolution,[],[f4510,f385])).
fof(f4982,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11(X61,'const.list.HD_0','type.list.list'(bool)))),X62,bool)) | s(bool,'T_0') = s(bool,X61)) ) | ($spl14 | $spl30)),
  inference(subsumption_resolution,[],[f4952,f4911])).
fof(f4952,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),sK11(X61,'const.list.HD_0','type.list.list'(bool)))),X62,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X61)) ) | ($spl14 | $spl30)),
  inference(backward_demodulation,[],[f4898,f3342])).
fof(f5314,plain,(
  $false | ($spl14 | $spl30)),
  inference(trivial_inequality_removal,[],[f5280])).
fof(f5280,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl14 | $spl30)),
  inference(backward_demodulation,[],[f5271,f670])).
fof(f5254,plain,(
  $false | ($spl14 | $spl30)),
  inference(subsumption_resolution,[],[f5253,f4911])).
fof(f5253,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl14 | $spl30)),
  inference(subsumption_resolution,[],[f4985,f4983])).
fof(f4985,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl14 | $spl30)),
  inference(backward_demodulation,[],[f4983,f249])).
fof(f5252,plain,(
  $false | ($spl14 | $spl30)),
  inference(subsumption_resolution,[],[f4984,f238])).
fof(f4984,plain,(
  ~p(s(bool,'T_0')) | ($spl14 | $spl30)),
  inference(backward_demodulation,[],[f4983,f240])).
fof(f4912,plain,(
  $false | $spl30),
  inference(unit_resulting_resolution,[],[f240,f293,f4510,f384])).
fof(f4895,plain,(
  $false | $spl30),
  inference(unit_resulting_resolution,[],[f293,f4510,f249])).
fof(f4890,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK14('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | $spl36),
  inference(cnf_transformation,[],[f4890_D])).
fof(f4890_D,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK14('const.list.HD_0',X4,'type.list.list'(bool))))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f4510,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1))))) ) | $spl30),
  inference(cnf_transformation,[],[f4510_D])).
fof(f4510_D,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f4889,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X5)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK14('const.list.HD_0',X4,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4876,f285])).
fof(f4876,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.HD_0',X4,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK14('const.list.HD_0',X4,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f313,f285])).
fof(f4882,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | $spl34),
  inference(cnf_transformation,[],[f4882_D])).
fof(f4882_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f4881,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4880,f1077])).
fof(f4880,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X1)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4879,f295])).
fof(f4879,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4867,f285])).
fof(f4867,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK15('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK14('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f313,f242])).
fof(f4656,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f4655,f2342])).
fof(f2342,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK3))) | $spl3),
  inference(unit_resulting_resolution,[],[f395,f289])).
fof(f4655,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK3))) | $spl0),
  inference(forward_demodulation,[],[f4654,f241])).
fof(f4654,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK3))) | $spl0),
  inference(subsumption_resolution,[],[f4593,f238])).
fof(f4593,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),sK3))) | $spl0),
  inference(superposition,[],[f343,f2354])).
fof(f2354,plain,(
  s(bool,'T_0') = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3))) | $spl0),
  inference(unit_resulting_resolution,[],[f238,f392,f331])).
fof(f4518,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) | $spl32),
  inference(cnf_transformation,[],[f4518_D])).
fof(f4518_D,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f4517,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X5)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4503,f285])).
fof(f4503,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X4),s('type.list.list'(bool),sK13('const.list.HD_0',X4,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f311,f285])).
fof(f4509,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) | $spl28),
  inference(cnf_transformation,[],[f4509_D])).
fof(f4509_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f4508,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X1)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4507,f1077])).
fof(f4507,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),X1)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4506,f295])).
fof(f4506,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f4494,f285])).
fof(f4494,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),X0),s('type.list.list'(bool),sK13('const.list.EL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.list.list'(bool))))))) )),
  inference(superposition,[],[f311,f242])).
fof(f2585,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X5,'const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | p(s(bool,X5))) )),
  inference(forward_demodulation,[],[f2576,f285])).
fof(f2576,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | p(s(bool,X5)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK18(X5,'const.list.HD_0','type.list.list'(bool))))))) )),
  inference(superposition,[],[f319,f285])).
fof(f2581,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,X1))) ) | $spl24),
  inference(cnf_transformation,[],[f2581_D])).
fof(f2581_D,plain,(
  ( ! [X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | p(s(bool,X1))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2580,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK18(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f2579,f1077])).
fof(f2579,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK18(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f2578,f295])).
fof(f2578,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK18(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f2560,f285])).
fof(f2560,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK18(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f319,f242])).
fof(f2545,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X5,'const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | p(s(bool,X5))) )),
  inference(forward_demodulation,[],[f2536,f285])).
fof(f2536,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | p(s(bool,X5)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK17(X5,'const.list.HD_0','type.list.list'(bool))))))) )),
  inference(superposition,[],[f317,f285])).
fof(f2540,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f2539,f1077])).
fof(f2539,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f2538,f295])).
fof(f2538,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f2520,f285])).
fof(f2520,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK17(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f317,f242])).
fof(f2426,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5))) ) | $spl18),
  inference(cnf_transformation,[],[f2426_D])).
fof(f2426_D,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2425,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X5,'const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | p(s(bool,X5))) )),
  inference(forward_demodulation,[],[f2416,f285])).
fof(f2416,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) | p(s(bool,X5)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK12(X5,'const.list.HD_0','type.list.list'(bool))))))) )),
  inference(superposition,[],[f308,f285])).
fof(f2420,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f2419,f1077])).
fof(f2419,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f2418,f295])).
fof(f2418,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f2401,f285])).
fof(f2401,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK12(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f308,f242])).
fof(f2366,plain,(
  $false | ($spl0 | $spl8)),
  inference(subsumption_resolution,[],[f2363,f2326])).
fof(f2363,plain,(
  ( ! [X0] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3))),s('type.list.list'(bool),X0))))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f293,f392,f384])).
fof(f2335,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5))) ) | $spl14),
  inference(cnf_transformation,[],[f2335_D])).
fof(f2335_D,plain,(
  ( ! [X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2337,plain,(
  ( ! [X14,X15] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X15,'const.list.HD_0','type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X14)))) | p(s(bool,X15))) )),
  inference(forward_demodulation,[],[f2321,f285])).
fof(f2321,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X14)))) | p(s(bool,X15)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11(X15,'const.list.HD_0','type.list.list'(bool))))))) )),
  inference(superposition,[],[f306,f285])).
fof(f2334,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) ) | $spl12),
  inference(cnf_transformation,[],[f2334_D])).
fof(f2334_D,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2333,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X5,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,X5)) | s(bool,'F_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) ) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f2332,f285])).
fof(f2332,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11(X5,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'F_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f2318,f238])).
fof(f2318,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK11(X5,'const.list.HD_0','type.list.list'(bool)))))) | s(bool,'F_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X4)))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f306,f762])).
fof(f762,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X2))) | s(bool,'F_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),X2)))) ) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f733,f409])).
fof(f409,plain,(
  s(bool,'F_0') = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f396,f250])).
fof(f396,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f393,f394])).
fof(f733,plain,(
  ( ! [X2] : (s(bool,'const.list.HD_1'(s('type.list.list'(bool),X2))) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X2)))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f285,f578])).
fof(f578,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f574,f240])).
fof(f574,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f460,f409])).
fof(f2325,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f2324,f1077])).
fof(f2324,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool)))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f2323,f295])).
fof(f2323,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f2290,f285])).
fof(f2290,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X0)))) | p(s(bool,X1)) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(bool),sK11(X1,'const.list.EL_1'(s('type.num.num','const.num.|48|_0')),'type.list.list'(bool))))))) )),
  inference(superposition,[],[f306,f242])).
fof(f1333,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1129,f238])).
fof(f1129,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f1113,f331])).
fof(f1332,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f1131,f238])).
fof(f1131,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f402,f1113,f331])).
fof(f402,plain,(
  s(bool,'T_0') != s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f396,f245])).
fof(f1331,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1133,f238])).
fof(f1133,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(unit_resulting_resolution,[],[f401,f1113,f331])).
fof(f1330,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1135,f1113])).
fof(f1135,plain,(
  ~p(s(bool,'F_0')) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f1113,f331])).
fof(f1329,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f1137,f1113])).
fof(f1137,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f402,f1113,f331])).
fof(f1328,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1139,f1113])).
fof(f1139,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f401,f1113,f331])).
fof(f1327,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1143,f238])).
fof(f1143,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f1113,f331])).
fof(f1326,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f1145,f238])).
fof(f1145,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f402,f1113,f331])).
fof(f1325,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1147,f238])).
fof(f1147,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(unit_resulting_resolution,[],[f401,f1113,f331])).
fof(f1324,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1149,f1113])).
fof(f1149,plain,(
  ~p(s(bool,'F_0')) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f1113,f331])).
fof(f1323,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f1151,f1113])).
fof(f1151,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f402,f1113,f331])).
fof(f1322,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1153,f1113])).
fof(f1153,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f401,f1113,f331])).
fof(f1321,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1158,f1179])).
fof(f1179,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1113,f385])).
fof(f1158,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f240,f1113,f353])).
fof(f1320,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1163,f1179])).
fof(f1163,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f240,f1113,f354])).
fof(f1314,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f1313,f1113])).
fof(f1313,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f1236,f1234])).
fof(f1234,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,X15)) ) | ($spl1 | $spl2 | $spl4)),
  inference(global_subsumption,[],[f1233,f237,f236,f238,f240,f241,f242,f243,f246,f245,f250,f249,f283,f284,f285,f286,f290,f289,f293,f294,f295,f301,f299,f304,f302,f308,f306,f313,f312,f311,f310,f316,f315,f314,f319,f317,f323,f322,f324,f327,f326,f325,f331,f328,f333,f332,f337,f336,f335,f334,f342,f346,f345,f344,f343,f385,f355,f354,f353,f363,f364,f384,f397,f401,f400,f408,f414,f417,f421,f424,f460,f538,f547,f548,f579,f583,f663,f664,f665,f670,f694,f710,f708,f706,f704,f703,f702,f744,f745,f750,f760,f807,f791,f792,f808,f809,f797,f813,f814,f815,f806,f897,f878,f879,f898,f899,f884,f903,f904,f905,f896,f977,f994,f996,f1077,f1079,f1081,f1040,f1042,f1051,f1052,f1057,f1059,f1061,f1075,f1113,f1181])).
fof(f1181,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,sK19(X1,X2,X0))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1113,f322])).
fof(f1233,plain,(
  ( ! [X17,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X15) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16)))),X17,bool))) ) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f1232,f293])).
fof(f1232,plain,(
  ( ! [X17,X15,X16] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16))))) | s(bool,X15) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16)))),X17,bool))) ) | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f1218,f1113])).
fof(f1218,plain,(
  ( ! [X17,X15,X16] : (s(bool,'T_0') = s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16))))) | s(bool,X15) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16)))),X17,bool)) | ~p(s(bool,X15))) ) | ($spl1 | $spl2 | $spl4)),
  inference(backward_demodulation,[],[f1181,f1010])).
fof(f1010,plain,(
  ( ! [X17,X15,X16] : (s(bool,X15) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16)))),X17,bool)) | ~p(s(bool,X15)) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16)))),X17,bool))) ) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f1004,f293])).
fof(f1004,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,X15)) | s(bool,'T_0') = s(bool,sK19('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16)))),X17,bool)) | s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16))))) = s(bool,sK16('const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16)))),X17,bool))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f917,f293])).
fof(f917,plain,(
  ( ! [X21,X20] : (~p(s(bool,X20)) | s(bool,'T_0') = s(bool,sK19(X20,X21,bool)) | s(bool,X20) = s(bool,sK16(X20,X21,bool))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f246,f907])).
fof(f907,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK19(X2,X1,X0)) | s(X0,X2) = s(X0,sK16(X2,X1,X0))) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f893,f238])).
fof(f893,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK19(X2,X1,X0)) | s(X0,X2) = s(X0,sK16(X2,X1,X0))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f322,f818])).
fof(f818,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(X0,X2) = s(X0,sK16(X2,X1,X0))) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f817,f240])).
fof(f817,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK16(X2,X1,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) ) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f804,f409])).
fof(f804,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')))) | s(X0,X2) = s(X0,sK16(X2,X1,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f314,f578])).
fof(f1236,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl1 | $spl2 | $spl4)),
  inference(backward_demodulation,[],[f1234,f249])).
fof(f1312,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f1235,f238])).
fof(f1235,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2 | $spl4)),
  inference(backward_demodulation,[],[f1234,f240])).
fof(f1180,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f414,f1113,f385])).
fof(f1176,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f240,f293,f1113,f384])).
fof(f1174,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f240,f408,f1113,f384])).
fof(f1172,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f240,f409,f1113,f384])).
fof(f1164,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f421,f240,f1113,f354])).
fof(f1159,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f421,f240,f1113,f353])).
fof(f1154,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f1113,f401,f1113,f331])).
fof(f1152,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f1113,f402,f1113,f331])).
fof(f1150,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f1113,f400,f1113,f331])).
fof(f1148,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f238,f401,f1113,f331])).
fof(f1146,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f238,f402,f1113,f331])).
fof(f1144,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f238,f400,f1113,f331])).
fof(f1140,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f1113,f401,f1113,f331])).
fof(f1138,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f1113,f402,f1113,f331])).
fof(f1136,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f1113,f400,f1113,f331])).
fof(f1134,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f238,f401,f1113,f331])).
fof(f1132,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f238,f402,f1113,f331])).
fof(f1130,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f238,f400,f1113,f331])).
fof(f1126,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f409,f1113,f249])).
fof(f1124,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f400,f1113,f246])).
fof(f1122,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f240,f1113])).
fof(f1114,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,sK16('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool)) | s(bool,'F_0') = s(bool,sK19('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool))) ) | $spl6),
  inference(cnf_transformation,[],[f1114_D])).
fof(f1114_D,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,sK16('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool)) | s(bool,'F_0') = s(bool,sK19('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1112,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,sK16('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool)) | p(s(bool,X6)) | s(bool,'F_0') = s(bool,sK19('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool))) ) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f1111,f409])).
fof(f1111,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | s(bool,'F_0') = s(bool,sK19('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool)) | s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) = s(bool,sK16('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool))) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f1100,f245])).
fof(f1100,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | s(bool,'F_0') = s(bool,sK19('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool)) | s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0'))) = s(bool,sK16('const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),'const.list.NIL_0')),X7,bool)) | s(bool,'T_0') = s(bool,X6)) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f919,f578])).
fof(f919,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | s(bool,'F_0') = s(bool,sK19(X24,X25,bool)) | s(bool,X24) = s(bool,sK16(X24,X25,bool))) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f250,f907])).
fof(f392,plain,(
  p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3)))) | $spl0),
  inference(cnf_transformation,[],[f392_D])).
fof(f392_D,plain,(
  p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f394,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3) | $spl2),
  inference(cnf_transformation,[],[f394_D])).
fof(f394_D,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f236,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3) | p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3))))),
  inference(cnf_transformation,[],[f156])).
fof(f156,plain,(
  (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3)))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3)) & (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3)))) | s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),sK3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f155])).
fof(f155,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) & (~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) | s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X2)))),
  inference(nnf_transformation,[],[f133])).
fof(f133,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) <~> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(ennf_transformation,[],[f56])).
fof(f56,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X0,fun(X1,bool))),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X6,fun(X7,bool))),X9),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),X8)))) <=> s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(X6,fun(X7,bool))),X9),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),X8)))) <=> s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X8))),
  file('thm.indexedLists.LIST_RELi_thm|split|0','thm.indexedLists.LIST_RELi_thm|split|0')).
fof(f393,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3)))) | $spl1),
  inference(cnf_transformation,[],[f393_D])).
fof(f393_D,plain,(
  ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f395,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),sK3) | $spl3),
  inference(cnf_transformation,[],[f395_D])).
fof(f395_D,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),sK3) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f237,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),sK3) | ~p(s(bool,'const.indexedLists.LIST_RELi_3'(s(fun('type.num.num',fun(sK1,fun(sK2,bool))),sK4),s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK2),sK3))))),
  inference(cnf_transformation,[],[f156])).
% SZS output end Proof for thm.indexedLists
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 588
% Passive clauses: 4365
% Generated clauses: 34867
% Final active clauses: 273
% Final passive clauses: 1373
% Input formulas: 53
% Initial clauses: 137
% 
% Duplicate literals: 346
% Trivial inequalities: 156
% Fw subsumption resolutions: 1819
% Fw demodulations: 9545
% Bw demodulations: 1853
% Condensations: 619
% Global subsumptions: 241
% 
% Simple tautologies: 117
% Equational tautologies: 78
% Forward subsumptions: 12673
% Fw demodulations to eq. taut.: 4412
% Bw demodulations to eq. taut.: 199
% 
% Unit resulting resolution: 6549
% Factoring: 1
% Forward superposition: 6404
% Backward superposition: 4988
% Self superposition: 53
% Equality factoring: 30
% Equality resolution: 33
% 
% Split clauses: 86
% Split components: 173
% SAT solver clauses: 5192
% SAT solver unit clauses: 156
% SAT solver binary clauses: 1033
% 
% Sat splits: 86
% Sat splitting refutations: 412
% 
% Memory used [KB]: 22515
% Time elapsed: 1.651 s
% ------------------------------
% ------------------------------
% Success in time 2.991 s
