Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.Omega
% (70045)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 148
% Passive clauses: 1955
% Generated clauses: 21413
% Final active clauses: 124
% Final passive clauses: 1632
% Input formulas: 37
% Initial clauses: 79
% 
% Duplicate literals: 933
% Trivial inequalities: 317
% Fw subsumption resolutions: 2616
% Fw demodulations: 3654
% Bw demodulations: 20
% 
% Simple tautologies: 404
% Equational tautologies: 26
% Forward subsumptions: 10926
% 
% Binary resolution: 73
% Forward superposition: 7437
% Backward superposition: 5881
% Self superposition: 203
% Equality factoring: 74
% Equality resolution: 51
% 
% Split clauses: 370
% Split components: 747
% SAT solver clauses: 616
% SAT solver unit clauses: 20
% SAT solver binary clauses: 118
% 
% Sat splits: 370
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 615
% TWLsolver calls for satisfiability: 70
% 
% Memory used [KB]: 12792
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.Omega
% (70063)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 138
% Passive clauses: 750
% Generated clauses: 16130
% Final active clauses: 114
% Final passive clauses: 534
% Input formulas: 37
% Initial clauses: 79
% 
% Duplicate literals: 485
% Trivial inequalities: 180
% Fw subsumption resolutions: 1446
% Fw demodulations: 2894
% Bw demodulations: 94
% Condensations: 1057
% Global subsumptions: 19
% 
% Simple tautologies: 242
% Equational tautologies: 20
% Forward subsumptions: 7637
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 60
% Forward superposition: 5712
% Backward superposition: 3106
% Self superposition: 143
% Equality factoring: 42
% Equality resolution: 42
% 
% Split clauses: 70
% Split components: 153
% SAT solver clauses: 1385
% SAT solver unit clauses: 137
% SAT solver binary clauses: 55
% SAT solver learnt clauses: 38
% SAT solver learnt literals: 2
% 
% Sat splits: 70
% Sat splitting refutations: 14
% 
% TWLsolver clauses: 1309
% TWLsolver calls for satisfiability: 458
% 
% Memory used [KB]: 14456
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.Omega
% (70081)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 447
% Passive clauses: 7666
% Generated clauses: 120638
% Final active clauses: 42
% Final passive clauses: 50
% Input formulas: 37
% Initial clauses: 79
% Discarded non-redundant clauses: 919
% 
% Duplicate literals: 2200
% Trivial inequalities: 1017
% Fw subsumption resolutions: 7243
% Fw demodulations: 27628
% Bw demodulations: 4296
% Condensations: 5836
% Global subsumptions: 1717
% 
% Simple tautologies: 1115
% Equational tautologies: 414
% Forward subsumptions: 62674
% Fw demodulations to eq. taut.: 92
% Bw demodulations to eq. taut.: 358
% 
% Unit resulting resolution: 3722
% Forward superposition: 32023
% Backward superposition: 22434
% Self superposition: 574
% Equality factoring: 145
% Equality resolution: 116
% 
% Split clauses: 198
% Split components: 408
% SAT solver clauses: 11481
% SAT solver unit clauses: 434
% SAT solver binary clauses: 2929
% 
% Sat splits: 198
% Sat splitting refutations: 1699
% 
% Memory used [KB]: 134709
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f508,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f152,f160,f158,f156,f154,f102,f101,f100,f99,f98,f97,f95,f94,f93,f92,f91,f89,f88,f159,f87,f162,f86,f157,f85,f155,f84,f153,f164,f270,f290,f271,f291,f272,f292,f311,f310,f308,f300,f334,f335,f407,f425,f429,f431,f432,f449,f466,f486,f470,f289,f424,f487,f489])).
fof(f489,plain,(
  $false | $spl20),
  inference(resolution,[],[f424,f147])).
fof(f147,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4))))),
  inference(duplicate_literal_removal,[],[f90])).
fof(f90,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4))))),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) & p(s(bool,sK5)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2)))) & p(s(bool,sK3))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) & p(s(bool,sK5)) & p(s(bool,sK3)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | ~p(s(bool,sK5)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2)))) | ~p(s(bool,sK3)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | ~p(s(bool,sK5)) | ~p(s(bool,sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f66])).
fof(f66,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & p(s(bool,X5)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int',X0))),s('type.integer.int',X2)))) & p(s(bool,X3))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & p(s(bool,X5)) & p(s(bool,X3)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) | ~p(s(bool,X5)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int',X0))),s('type.integer.int',X2)))) | ~p(s(bool,X3)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) | ~p(s(bool,X5)) | ~p(s(bool,X3))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & p(s(bool,X5)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int',X0))),s('type.integer.int',X2)))) & p(s(bool,X3))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & p(s(bool,X5)) & p(s(bool,X3)))) & ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) | ~p(s(bool,X5)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int',X0))),s('type.integer.int',X2)))) | ~p(s(bool,X3))) | (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) | ~p(s(bool,X5)) | ~p(s(bool,X3)))))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & p(s(bool,X5)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int',X0))),s('type.integer.int',X2)))) & p(s(bool,X3))) <~> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & p(s(bool,X5)) & p(s(bool,X3))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & p(s(bool,X5)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int',X0))),s('type.integer.int',X2)))) & p(s(bool,X3))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & p(s(bool,X5)) & p(s(bool,X3))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11,X12] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))) & p(s(bool,X11)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X12))),s('type.integer.int',X6))),s('type.integer.int',X8)))) & p(s(bool,X9))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))) & p(s(bool,X11)) & p(s(bool,X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11,X12] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))) & p(s(bool,X11)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X12))),s('type.integer.int',X6))),s('type.integer.int',X8)))) & p(s(bool,X9))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))) & p(s(bool,X11)) & p(s(bool,X9))))),
  file('thm.Omega.eval_step_upper2','thm.Omega.eval_step_upper2')).
fof(f487,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))))))) ) | $spl26),
  inference(cnf_transformation,[],[f487_D])).
fof(f487_D,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f424,plain,(
  ( ! [X3] : (~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3))))) ) | $spl20),
  inference(cnf_transformation,[],[f424_D])).
fof(f424_D,plain,(
  ( ! [X3] : (~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f289,plain,(
  ( ! [X3] : (~p(s(bool,X3))) ) | $spl12),
  inference(cnf_transformation,[],[f289_D])).
fof(f289_D,plain,(
  ( ! [X3] : (~p(s(bool,X3))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f470,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,X2)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))))))) ) | $spl1),
  inference(resolution,[],[f154,f108])).
fof(f108,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,X4)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X4)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))),s('type.integer.int',X2)))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X4)) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))),s('type.integer.int',X2)))))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X4)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))),s('type.integer.int',X2))))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)))) & ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X4))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))),s('type.integer.int',X2)))))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))),s('type.integer.int',X2))))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7,X8,X10,X11,X12] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))) & p(s(bool,X11)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X12))),s('type.integer.int',X6))),s('type.integer.int',X8))))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X12),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))) & p(s(bool,X11))))),
  file('thm.Omega.eval_step_upper2','thm.Omega.eval_step_upper|49|')).
fof(f486,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) ) | ($spl1 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f485,f164])).
fof(f485,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))) ) | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f469,f162])).
fof(f469,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2)))) | ~p(s(bool,X0)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))) ) | $spl1),
  inference(resolution,[],[f154,f105])).
fof(f105,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))),s('type.integer.int',X2)))) | ~p(s(bool,X4)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) )),
  inference(cnf_transformation,[],[f69])).
fof(f466,plain,(
  ( ! [X0] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) | $spl24),
  inference(cnf_transformation,[],[f466_D])).
fof(f466_D,plain,(
  ( ! [X0] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f449,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))))) | ~p(s(bool,X1)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) | $spl8),
  inference(resolution,[],[f162,f105])).
fof(f432,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f156,f147])).
fof(f431,plain,(
  $false | $spl5),
  inference(subsumption_resolution,[],[f430,f140])).
fof(f140,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.Omega.eval_step_upper2',aHL_TRUTH)).
fof(f430,plain,(
  ~p(s(bool,'T_0')) | $spl5),
  inference(forward_demodulation,[],[f158,f171])).
fof(f171,plain,(
  s(bool,'T_0') = s(bool,sK5)),
  inference(resolution,[],[f148,f132])).
fof(f132,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X27] : (s(bool,'T_0') = s(bool,X27) <=> p(s(bool,X27)))),
  file('thm.Omega.eval_step_upper2','thm.bool.EQ_CLAUSES|split|0')).
fof(f148,plain,(
  p(s(bool,sK5))),
  inference(duplicate_literal_removal,[],[f96])).
fof(f96,plain,(
  p(s(bool,sK5)) | p(s(bool,sK5))),
  inference(cnf_transformation,[],[f67])).
fof(f429,plain,(
  $false | $spl7),
  inference(subsumption_resolution,[],[f428,f140])).
fof(f428,plain,(
  ~p(s(bool,'T_0')) | $spl7),
  inference(forward_demodulation,[],[f160,f189])).
fof(f189,plain,(
  s(bool,'T_0') = s(bool,sK3)),
  inference(resolution,[],[f149,f132])).
fof(f149,plain,(
  p(s(bool,sK3))),
  inference(duplicate_literal_removal,[],[f103])).
fof(f103,plain,(
  p(s(bool,sK3)) | p(s(bool,sK3))),
  inference(cnf_transformation,[],[f67])).
fof(f425,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',sK0))),s('type.integer.int',X1))))) ) | $spl22),
  inference(cnf_transformation,[],[f425_D])).
fof(f425_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',sK0))),s('type.integer.int',X1))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f407,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',sK0))),s('type.integer.int',X1)))) | ~p(s(bool,X2)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3))))) ) | $spl10),
  inference(resolution,[],[f164,f105])).
fof(f335,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f302,f135])).
fof(f135,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.Omega.eval_step_upper2',aHL_FALSITY)).
fof(f302,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(resolution,[],[f289,f136])).
fof(f136,plain,(
  p(s(bool,'F_0')) | p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f57])).
fof(f57,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f32])).
fof(f32,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.Omega.eval_step_upper2','thm.bool.NOT_CLAUSES|split|1')).
fof(f334,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f301,f135])).
fof(f301,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(resolution,[],[f289,f138])).
fof(f138,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f38])).
fof(f38,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.Omega.eval_step_upper2','thm.bool.NOT_CLAUSES|split|2')).
fof(f300,plain,(
  $false | $spl12),
  inference(resolution,[],[f289,f140])).
fof(f308,plain,(
  $false | $spl12),
  inference(resolution,[],[f289,f147])).
fof(f310,plain,(
  $false | $spl12),
  inference(resolution,[],[f289,f143])).
fof(f143,plain,(
  p(s(bool,'const.relation.WF_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'))))),
  inference(cnf_transformation,[],[f22])).
fof(f22,axiom,(
  p(s(bool,'const.relation.WF_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'))))),
  file('thm.Omega.eval_step_upper2','thm.prim_rec.WF_LESS')).
fof(f311,plain,(
  $false | $spl12),
  inference(resolution,[],[f289,f149])).
fof(f292,plain,(
  ( ! [X8,X11,X9] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X8))),s('type.integer.int',sK0))),s('type.integer.int',X9)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11))))))) ) | $spl18),
  inference(cnf_transformation,[],[f292_D])).
fof(f292_D,plain,(
  ( ! [X8,X11,X9] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X8))),s('type.integer.int',sK0))),s('type.integer.int',X9)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11))))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f272,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X8))),s('type.integer.int',sK0))),s('type.integer.int',X9)))) | ~p(s(bool,X10)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X8),s('type.integer.int',X9))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11))))))) )),
  inference(resolution,[],[f147,f111])).
fof(f111,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))),s('type.integer.int',X2)))) | ~p(s(bool,X4)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))) )),
  inference(cnf_transformation,[],[f69])).
fof(f291,plain,(
  ( ! [X6,X4,X7] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4))))))) ) | $spl16),
  inference(cnf_transformation,[],[f291_D])).
fof(f291_D,plain,(
  ( ! [X6,X4,X7] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f271,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) | ~p(s(bool,X5)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4))))))) )),
  inference(resolution,[],[f147,f108])).
fof(f290,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',sK0))),s('type.integer.int',X1))))) ) | $spl14),
  inference(cnf_transformation,[],[f290_D])).
fof(f290_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',sK0))),s('type.integer.int',X1))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f270,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',sK0))),s('type.integer.int',X1)))) | ~p(s(bool,X3)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))) )),
  inference(resolution,[],[f147,f105])).
fof(f164,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl10),
  inference(cnf_transformation,[],[f164_D])).
fof(f164_D,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f153,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | $spl0),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f84,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f67])).
fof(f155,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | $spl2),
  inference(cnf_transformation,[],[f155_D])).
fof(f155_D,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f85,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4))))),
  inference(cnf_transformation,[],[f67])).
fof(f157,plain,(
  p(s(bool,sK5)) | $spl4),
  inference(cnf_transformation,[],[f157_D])).
fof(f157_D,plain,(
  p(s(bool,sK5)) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f86,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | p(s(bool,sK5))),
  inference(cnf_transformation,[],[f67])).
fof(f162,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2)))) | $spl8),
  inference(cnf_transformation,[],[f162_D])).
fof(f162_D,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f87,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2))))),
  inference(cnf_transformation,[],[f67])).
fof(f159,plain,(
  p(s(bool,sK3)) | $spl6),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  p(s(bool,sK3)) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f88,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | p(s(bool,sK3))),
  inference(cnf_transformation,[],[f67])).
fof(f89,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f67])).
fof(f91,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | p(s(bool,sK5))),
  inference(cnf_transformation,[],[f67])).
fof(f92,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2))))),
  inference(cnf_transformation,[],[f67])).
fof(f93,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | p(s(bool,sK3))),
  inference(cnf_transformation,[],[f67])).
fof(f94,plain,(
  p(s(bool,sK5)) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f67])).
fof(f95,plain,(
  p(s(bool,sK5)) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4))))),
  inference(cnf_transformation,[],[f67])).
fof(f97,plain,(
  p(s(bool,sK5)) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2))))),
  inference(cnf_transformation,[],[f67])).
fof(f98,plain,(
  p(s(bool,sK5)) | p(s(bool,sK3))),
  inference(cnf_transformation,[],[f67])).
fof(f99,plain,(
  p(s(bool,sK3)) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f67])).
fof(f100,plain,(
  p(s(bool,sK3)) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4))))),
  inference(cnf_transformation,[],[f67])).
fof(f101,plain,(
  p(s(bool,sK3)) | p(s(bool,sK5))),
  inference(cnf_transformation,[],[f67])).
fof(f102,plain,(
  p(s(bool,sK3)) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2))))),
  inference(cnf_transformation,[],[f67])).
fof(f154,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | $spl1),
  inference(cnf_transformation,[],[f154_D])).
fof(f154_D,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f156,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | $spl3),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f158,plain,(
  ~p(s(bool,sK5)) | $spl5),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  ~p(s(bool,sK5)) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f160,plain,(
  ~p(s(bool,sK3)) | $spl7),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  ~p(s(bool,sK3)) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f152,plain,(
  ~p(s(bool,sK3)) | ~p(s(bool,sK5)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))))),
  inference(subsumption_resolution,[],[f151,f111])).
fof(f151,plain,(
  ~p(s(bool,sK3)) | ~p(s(bool,sK5)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2))))),
  inference(subsumption_resolution,[],[f150,f108])).
fof(f150,plain,(
  ~p(s(bool,sK3)) | ~p(s(bool,sK5)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(duplicate_literal_removal,[],[f104])).
fof(f104,plain,(
  ~p(s(bool,sK3)) | ~p(s(bool,sK5)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))))) | ~p(s(bool,sK3)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK6))),s('type.integer.int',sK0))),s('type.integer.int',sK2)))) | ~p(s(bool,sK5)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK4)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f67])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 39
% Passive clauses: 84
% Generated clauses: 379
% Final active clauses: 34
% Final passive clauses: 45
% Input formulas: 37
% Initial clauses: 63
% 
% Selected by SInE selection: 21
% SInE iterations: 1
% 
% Duplicate literals: 11
% Trivial inequalities: 16
% Fw subsumption resolutions: 36
% Fw demodulations: 30
% Bw demodulations: 4
% 
% Simple tautologies: 26
% Forward subsumptions: 170
% 
% Binary resolution: 75
% Forward superposition: 116
% Backward superposition: 54
% 
% Split clauses: 25
% Split components: 55
% SAT solver clauses: 36
% SAT solver unit clauses: 10
% SAT solver binary clauses: 20
% 
% Sat splits: 25
% Sat splitting refutations: 10
% 
% Memory used [KB]: 1151
% Time elapsed: 0.008 s
% ------------------------------
% ------------------------------
% Success in time 11.76 s
