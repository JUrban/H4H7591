Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (36099)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 301
% Passive clauses: 2749
% Generated clauses: 25085
% Final active clauses: 200
% Final passive clauses: 2247
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 45
% Trivial inequalities: 704
% Fw subsumption resolutions: 1499
% Fw demodulations: 7050
% Bw demodulations: 94
% 
% Simple tautologies: 19
% Equational tautologies: 16
% Forward subsumptions: 13109
% Fw demodulations to eq. taut.: 6
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 25
% Forward superposition: 5372
% Backward superposition: 10086
% Self superposition: 91
% Equality factoring: 26
% Equality resolution: 23
% 
% Split clauses: 14
% Split components: 28
% SAT solver clauses: 19
% SAT solver unit clauses: 2
% SAT solver binary clauses: 12
% 
% Sat splits: 14
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 19
% TWLsolver calls for satisfiability: 10
% 
% Memory used [KB]: 19445
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (36115)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 307
% Passive clauses: 2189
% Generated clauses: 29233
% Final active clauses: 212
% Final passive clauses: 1373
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 50
% Trivial inequalities: 1758
% Fw subsumption resolutions: 1031
% Fw demodulations: 9493
% Bw demodulations: 600
% Condensations: 45
% 
% Simple tautologies: 24
% Equational tautologies: 16
% Forward subsumptions: 11759
% Fw demodulations to eq. taut.: 142
% 
% Binary resolution: 32
% Forward superposition: 5709
% Backward superposition: 7953
% Self superposition: 78
% Equality factoring: 26
% Equality resolution: 47
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 2768
% SAT solver unit clauses: 72
% SAT solver binary clauses: 43
% 
% Sat splits: 11
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2768
% TWLsolver calls for satisfiability: 455
% 
% Memory used [KB]: 22003
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 137 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f4980,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f100,f151,f150,f99,f153,f98,f155,f149,f216,f219,f217,f274,f288,f286,f275,f291,f289,f276,f292,f277,f295,f279,f296,f282,f294,f299,f283,f303,f301,f766,f771,f769,f767,f775,f773,f1424,f1426,f3555,f3549,f3557,f3559,f4214,f4216,f4219,f4221,f4222,f4223,f4224,f4225,f4211,f4218,f4226,f4255,f4296,f4299,f4302,f4305,f4309,f4310,f4205,f4347,f4345,f4408,f4409,f4410,f4411,f4491,f4504,f4499,f4512,f4511,f4513,f4975,f4978,f4979])).
fof(f4979,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f4977,f4348])).
fof(f4348,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl0),
  inference(forward_demodulation,[],[f149,f1557])).
fof(f1557,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1556,f112])).
fof(f112,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_suc|split|1')).
fof(f1556,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1494,f103])).
fof(f103,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f27])).
fof(f27,axiom,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_suc|split|0')).
fof(f1494,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(backward_demodulation,[],[f1470,f359])).
fof(f359,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f348,f112])).
fof(f348,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f113,f104])).
fof(f104,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f18])).
fof(f18,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|13')).
fof(f113,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|14')).
fof(f1470,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(backward_demodulation,[],[f1469,f777])).
fof(f777,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(equality_resolution,[],[f125])).
fof(f125,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.list.LENGTH_NIL')).
fof(f1469,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),'const.list.NIL_0')))) )),
  inference(subsumption_resolution,[],[f1096,f1425])).
fof(f1425,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f1389,f110])).
fof(f110,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X18] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f1389,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f110,f143])).
fof(f143,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X16,X17] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X17))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|8')).
fof(f1096,plain,(
  ( ! [X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),'const.list.NIL_0')))) )),
  inference(superposition,[],[f120,f777])).
fof(f120,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X16))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|17')).
fof(f4977,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f4976])).
fof(f4976,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl0 | $spl2)),
  inference(superposition,[],[f4618,f1559])).
fof(f1559,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f1557,f129])).
fof(f129,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))))))) & (! [X3,X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8])],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X6,X7,X8] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X6))))))) & (! [X3,X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X3,X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))) & (! [X3,X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10,X11] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X9)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.quantHeuristics.LIST_LENGTH_2|split|10')).
fof(f4618,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK6(sK2,sK1,sK0))))))) ) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f4521,f151])).
fof(f4521,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK2,sK1,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f4348,f1558])).
fof(f1558,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f1557,f128])).
fof(f128,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f89])).
fof(f4978,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f4974,f4348])).
fof(f4974,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f4618,f1559])).
fof(f4975,plain,(
  $false | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f4348,f4618,f1559])).
fof(f4513,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4503,f155])).
fof(f4503,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f4501])).
fof(f4501,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(superposition,[],[f151,f153])).
fof(f4511,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | $spl63),
  inference(cnf_transformation,[],[f4511_D])).
fof(f4511_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f4512,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) | $spl64),
  inference(cnf_transformation,[],[f4512_D])).
fof(f4512_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f4499,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f151,f153])).
fof(f4504,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4490,f155])).
fof(f4490,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f153,f151])).
fof(f4491,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f155,f153,f151])).
fof(f4411,plain,(
  $false | ($spl4 | $spl6 | $spl61)),
  inference(subsumption_resolution,[],[f4360,f4347])).
fof(f4360,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f138,f4249])).
fof(f4249,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f155,f153,f1560])).
fof(f1560,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f1557,f130])).
fof(f130,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f89])).
fof(f138,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X17,X16] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.arithmetic.ADD_SYM')).
fof(f4410,plain,(
  $false | ($spl4 | $spl6 | $spl61)),
  inference(subsumption_resolution,[],[f4359,f4347])).
fof(f4359,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f138,f4249])).
fof(f4409,plain,(
  $false | ($spl4 | $spl6 | $spl61)),
  inference(subsumption_resolution,[],[f4357,f4347])).
fof(f4357,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f4249,f138])).
fof(f4408,plain,(
  $false | ($spl4 | $spl6 | $spl61)),
  inference(subsumption_resolution,[],[f4356,f4347])).
fof(f4356,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f4249,f138])).
fof(f4345,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl58),
  inference(cnf_transformation,[],[f4345_D])).
fof(f4345_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f4347,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl61),
  inference(cnf_transformation,[],[f4347_D])).
fof(f4347_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl61),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl61])])).
fof(f4205,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f4022,f153])).
fof(f4022,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),sK6(X25,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24))))) ) | $spl6),
  inference(forward_demodulation,[],[f4021,f155])).
fof(f4021,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),sK6(X25,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24))))) ) | $spl6),
  inference(forward_demodulation,[],[f3983,f138])).
fof(f3983,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),sK6(X25,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X24))))) ) | $spl6),
  inference(superposition,[],[f1558,f155])).
fof(f4310,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4249,f1561])).
fof(f1561,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl1),
  inference(backward_demodulation,[],[f1557,f150])).
fof(f4309,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4308,f1561])).
fof(f4308,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4307,f155])).
fof(f4307,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f4306,f1474])).
fof(f1474,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f1470,f107])).
fof(f107,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X16] : s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.arithmetic.ADD|split|0')).
fof(f4306,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) | $spl4),
  inference(forward_demodulation,[],[f4250,f138])).
fof(f4250,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1473,f153,f1560])).
fof(f1473,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f1470,f106])).
fof(f106,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X16] : s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|1')).
fof(f4305,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4304,f1561])).
fof(f4304,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4303,f155])).
fof(f4303,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f4251,f1474])).
fof(f4251,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1474,f153,f1560])).
fof(f4302,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4301,f1561])).
fof(f4301,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4300,f155])).
fof(f4300,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f4252,f1478])).
fof(f1478,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f1470,f111])).
fof(f111,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X16] : s('type.num.num',X16) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|7')).
fof(f4252,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1478,f153,f1560])).
fof(f4299,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4298,f1561])).
fof(f4298,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4297,f155])).
fof(f4297,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f4253,f3210])).
fof(f3210,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f3147,f146])).
fof(f146,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X16,X17] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) <=> s('type.num.num',X16) = s('type.num.num',X17))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|19')).
fof(f3147,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f3146,f1474])).
fof(f3146,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f3069,f1474])).
fof(f3069,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f145,f1493])).
fof(f1493,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(backward_demodulation,[],[f1470,f322])).
fof(f322,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f306,f111])).
fof(f306,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f111,f121])).
fof(f121,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f83])).
fof(f145,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X16,X17] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|2')).
fof(f4253,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f3210,f153,f1560])).
fof(f4296,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4254,f155])).
fof(f4254,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl1 | $spl4)),
  inference(unit_resulting_resolution,[],[f1561,f153,f1560])).
fof(f4255,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f155,f1561,f153,f1560])).
fof(f4226,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl56),
  inference(cnf_transformation,[],[f4226_D])).
fof(f4226_D,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f4218,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl49),
  inference(cnf_transformation,[],[f4218_D])).
fof(f4218_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f4211,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(superposition,[],[f4022,f1469])).
fof(f4225,plain,(
  ( ! [X6,X7] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK6(sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X6),X7)),X7,X6),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X6))))) ) | $spl54),
  inference(cnf_transformation,[],[f4225_D])).
fof(f4225_D,plain,(
  ( ! [X6,X7] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK6(sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X6),X7)),X7,X6),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X6))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f4224,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK6(sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X6),X7)),X7,X6),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X6))))) ) | $spl6),
  inference(forward_demodulation,[],[f4210,f1469])).
fof(f4210,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK6(sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X6),X7)),X7,X6),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X6))))) ) | $spl6),
  inference(superposition,[],[f4022,f3889])).
fof(f3889,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))) )),
  inference(unit_resulting_resolution,[],[f3737,f1483])).
fof(f1483,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(backward_demodulation,[],[f1470,f124])).
fof(f124,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f85])).
fof(f3737,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f1473,f135])).
fof(f135,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK10(X3,X2,X1,X0)),s('type.list.list'(X0),sK11(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11])],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X8,X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))) <=> ? [X14,X15] : (s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X14))) & s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X14),s('type.list.list'(X6),X15)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.list.LENGTH_EQ_SUM')).
fof(f4223,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(sK10('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl52),
  inference(cnf_transformation,[],[f4223_D])).
fof(f4223_D,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(sK10('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f4222,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(sK10('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f4208,f1469])).
fof(f4208,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(sK10('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(superposition,[],[f4022,f3659])).
fof(f3659,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK10('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0))) )),
  inference(unit_resulting_resolution,[],[f3600,f1483])).
fof(f3600,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f1474,f134])).
fof(f134,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f95])).
fof(f4221,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl50),
  inference(cnf_transformation,[],[f4221_D])).
fof(f4221_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f4219,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4207,f1469])).
fof(f4207,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f4022,f4066])).
fof(f4066,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0)) | $spl4),
  inference(unit_resulting_resolution,[],[f3893,f1483])).
fof(f3893,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0)))) | $spl4),
  inference(superposition,[],[f3737,f153])).
fof(f4216,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl46),
  inference(cnf_transformation,[],[f4216_D])).
fof(f4216_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f4214,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4206,f1469])).
fof(f4206,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f4022,f3785])).
fof(f3785,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0)) | $spl4),
  inference(unit_resulting_resolution,[],[f3663,f1483])).
fof(f3663,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))),sK0)))) | $spl4),
  inference(superposition,[],[f3600,f153])).
fof(f3559,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl44),
  inference(cnf_transformation,[],[f3559_D])).
fof(f3559_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f3557,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl43),
  inference(cnf_transformation,[],[f3557_D])).
fof(f3557_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f3549,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f3252,f1557])).
fof(f3252,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X19)))) )),
  inference(superposition,[],[f1481,f3147])).
fof(f1481,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f1470,f120])).
fof(f3555,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f3554,f1557])).
fof(f3554,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(forward_demodulation,[],[f3519,f1557])).
fof(f3519,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f3252,f1557])).
fof(f1426,plain,(
  $false | $spl23),
  inference(subsumption_resolution,[],[f1425,f294])).
fof(f1424,plain,(
  $false | $spl23),
  inference(subsumption_resolution,[],[f1423,f294])).
fof(f1423,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f1388,f110])).
fof(f1388,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f143,f110])).
fof(f773,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl38),
  inference(cnf_transformation,[],[f773_D])).
fof(f773_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f775,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl41),
  inference(cnf_transformation,[],[f775_D])).
fof(f775_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f767,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl6),
  inference(superposition,[],[f124,f155])).
fof(f769,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | $spl34),
  inference(cnf_transformation,[],[f769_D])).
fof(f769_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f771,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl37),
  inference(cnf_transformation,[],[f771_D])).
fof(f771_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f766,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(superposition,[],[f124,f153])).
fof(f301,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl30),
  inference(cnf_transformation,[],[f301_D])).
fof(f301_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f303,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl33),
  inference(cnf_transformation,[],[f303_D])).
fof(f303_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f283,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f120,f104])).
fof(f299,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl28),
  inference(cnf_transformation,[],[f299_D])).
fof(f299_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f294,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl23),
  inference(cnf_transformation,[],[f294_D])).
fof(f294_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f282,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f120,f102])).
fof(f102,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f32])).
fof(f32,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.prim_rec.PRE|split|0')).
fof(f296,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) | $spl26),
  inference(cnf_transformation,[],[f296_D])).
fof(f296_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f279,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f120,f108])).
fof(f108,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X16] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|4')).
fof(f295,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X4)))) ) | $spl24),
  inference(cnf_transformation,[],[f295_D])).
fof(f295_D,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X4)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f277,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X4)))) )),
  inference(superposition,[],[f120,f110])).
fof(f292,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) | $spl20),
  inference(cnf_transformation,[],[f292_D])).
fof(f292_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f276,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) )),
  inference(superposition,[],[f120,f109])).
fof(f109,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X16] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|6')).
fof(f289,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f289_D])).
fof(f289_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f291,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(cnf_transformation,[],[f291_D])).
fof(f291_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f275,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f120,f156])).
fof(f156,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f116,f104])).
fof(f116,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.numeral.numeral_distrib|split|11')).
fof(f286,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl12),
  inference(cnf_transformation,[],[f286_D])).
fof(f286_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f288,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl15),
  inference(cnf_transformation,[],[f288_D])).
fof(f288_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f274,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(superposition,[],[f120,f155])).
fof(f217,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f217_D])).
fof(f217_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f219,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f219_D])).
fof(f219_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f216,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f119])).
fof(f119,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11',aHL_BOOL_CASES)).
fof(f149,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f155,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(cnf_transformation,[],[f155_D])).
fof(f155_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f98,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | ! [X3,X4,X5] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f81])).
fof(f81,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X6,X7,X8] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X6))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ! [X3,X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))))),
  inference(rectify,[],[f80])).
fof(f80,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X3,X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ! [X3,X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <~> ? [X3,X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10,X11] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X9)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10,X11] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X9)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|11','thm.quantHeuristics.LIST_LENGTH_2|split|11')).
fof(f153,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f99,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f82])).
fof(f150,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f151,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) | $spl2),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f100,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) )),
  inference(cnf_transformation,[],[f82])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 157
% Passive clauses: 542
% Generated clauses: 4877
% Final active clauses: 100
% Final passive clauses: 255
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 1
% Trivial inequalities: 34
% Fw subsumption resolutions: 80
% Fw demodulations: 1034
% Bw demodulations: 135
% 
% Simple tautologies: 12
% Equational tautologies: 10
% Forward subsumptions: 2978
% Fw demodulations to eq. taut.: 145
% Bw demodulations to eq. taut.: 4
% 
% Unit resulting resolution: 392
% Forward superposition: 1343
% Backward superposition: 1696
% Self superposition: 42
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 22
% Split components: 44
% SAT solver clauses: 607
% SAT solver unit clauses: 106
% SAT solver binary clauses: 308
% 
% Sat splits: 22
% Sat splitting refutations: 19
% 
% Memory used [KB]: 4349
% Time elapsed: 0.135 s
% ------------------------------
% ------------------------------
% Success in time 1.435 s
